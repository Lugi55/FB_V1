
HB_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c610  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  0800c7f0  0800c7f0  0001c7f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc8c  0800cc8c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800cc8c  0800cc8c  0001cc8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc94  0800cc94  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc94  0800cc94  0001cc94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cc98  0800cc98  0001cc98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800cc9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000704  200001e4  0800ce80  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008e8  0800ce80  000208e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022807  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003986  00000000  00000000  00042a1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ad8  00000000  00000000  000463a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001950  00000000  00000000  00047e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c4d2  00000000  00000000  000497d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001defe  00000000  00000000  00075ca2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00131a0f  00000000  00000000  00093ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001c55af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000086dc  00000000  00000000  001c5604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c7d8 	.word	0x0800c7d8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e8 	.word	0x200001e8
 800021c:	0800c7d8 	.word	0x0800c7d8

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96e 	b.w	8000f8c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468c      	mov	ip, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8083 	bne.w	8000dde <__udivmoddi4+0x116>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4617      	mov	r7, r2
 8000cdc:	d947      	bls.n	8000d6e <__udivmoddi4+0xa6>
 8000cde:	fab2 f282 	clz	r2, r2
 8000ce2:	b142      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	f1c2 0020 	rsb	r0, r2, #32
 8000ce8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cec:	4091      	lsls	r1, r2
 8000cee:	4097      	lsls	r7, r2
 8000cf0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbbc f6f8 	udiv	r6, ip, r8
 8000d00:	fa1f fe87 	uxth.w	lr, r7
 8000d04:	fb08 c116 	mls	r1, r8, r6, ip
 8000d08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18fb      	adds	r3, r7, r3
 8000d16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1a:	f080 8119 	bcs.w	8000f50 <__udivmoddi4+0x288>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8116 	bls.w	8000f50 <__udivmoddi4+0x288>
 8000d24:	3e02      	subs	r6, #2
 8000d26:	443b      	add	r3, r7
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d30:	fb08 3310 	mls	r3, r8, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d3c:	45a6      	cmp	lr, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	193c      	adds	r4, r7, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8105 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d4a:	45a6      	cmp	lr, r4
 8000d4c:	f240 8102 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d50:	3802      	subs	r0, #2
 8000d52:	443c      	add	r4, r7
 8000d54:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d58:	eba4 040e 	sub.w	r4, r4, lr
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	b11d      	cbz	r5, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c5 4300 	strd	r4, r3, [r5]
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	b902      	cbnz	r2, 8000d72 <__udivmoddi4+0xaa>
 8000d70:	deff      	udf	#255	; 0xff
 8000d72:	fab2 f282 	clz	r2, r2
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	d150      	bne.n	8000e1c <__udivmoddi4+0x154>
 8000d7a:	1bcb      	subs	r3, r1, r7
 8000d7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d80:	fa1f f887 	uxth.w	r8, r7
 8000d84:	2601      	movs	r6, #1
 8000d86:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d8a:	0c21      	lsrs	r1, r4, #16
 8000d8c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb08 f30c 	mul.w	r3, r8, ip
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0xe2>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	f200 80e9 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1ac9      	subs	r1, r1, r3
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000db8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x10c>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x10a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80d9 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e7bf      	b.n	8000d5e <__udivmoddi4+0x96>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0x12e>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80b1 	beq.w	8000f4a <__udivmoddi4+0x282>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x1cc>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0x140>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80b8 	bhi.w	8000f78 <__udivmoddi4+0x2b0>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	468c      	mov	ip, r1
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0a8      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000e16:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e1a:	e7a5      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f603 	lsr.w	r6, r0, r3
 8000e24:	4097      	lsls	r7, r2
 8000e26:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e2e:	40d9      	lsrs	r1, r3
 8000e30:	4330      	orrs	r0, r6
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e38:	fa1f f887 	uxth.w	r8, r7
 8000e3c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e44:	fb06 f108 	mul.w	r1, r6, r8
 8000e48:	4299      	cmp	r1, r3
 8000e4a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4e:	d909      	bls.n	8000e64 <__udivmoddi4+0x19c>
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e56:	f080 808d 	bcs.w	8000f74 <__udivmoddi4+0x2ac>
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	f240 808a 	bls.w	8000f74 <__udivmoddi4+0x2ac>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	443b      	add	r3, r7
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b281      	uxth	r1, r0
 8000e68:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e74:	fb00 f308 	mul.w	r3, r0, r8
 8000e78:	428b      	cmp	r3, r1
 8000e7a:	d907      	bls.n	8000e8c <__udivmoddi4+0x1c4>
 8000e7c:	1879      	adds	r1, r7, r1
 8000e7e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e82:	d273      	bcs.n	8000f6c <__udivmoddi4+0x2a4>
 8000e84:	428b      	cmp	r3, r1
 8000e86:	d971      	bls.n	8000f6c <__udivmoddi4+0x2a4>
 8000e88:	3802      	subs	r0, #2
 8000e8a:	4439      	add	r1, r7
 8000e8c:	1acb      	subs	r3, r1, r3
 8000e8e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e92:	e778      	b.n	8000d86 <__udivmoddi4+0xbe>
 8000e94:	f1c6 0c20 	rsb	ip, r6, #32
 8000e98:	fa03 f406 	lsl.w	r4, r3, r6
 8000e9c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ea0:	431c      	orrs	r4, r3
 8000ea2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000eae:	fa21 f10c 	lsr.w	r1, r1, ip
 8000eb2:	431f      	orrs	r7, r3
 8000eb4:	0c3b      	lsrs	r3, r7, #16
 8000eb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eba:	fa1f f884 	uxth.w	r8, r4
 8000ebe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ec2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ec6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eca:	458a      	cmp	sl, r1
 8000ecc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x220>
 8000ed6:	1861      	adds	r1, r4, r1
 8000ed8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000edc:	d248      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000ede:	458a      	cmp	sl, r1
 8000ee0:	d946      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000ee2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ee6:	4421      	add	r1, r4
 8000ee8:	eba1 010a 	sub.w	r1, r1, sl
 8000eec:	b2bf      	uxth	r7, r7
 8000eee:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ef2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ef6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000efa:	fb00 f808 	mul.w	r8, r0, r8
 8000efe:	45b8      	cmp	r8, r7
 8000f00:	d907      	bls.n	8000f12 <__udivmoddi4+0x24a>
 8000f02:	19e7      	adds	r7, r4, r7
 8000f04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f08:	d22e      	bcs.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0a:	45b8      	cmp	r8, r7
 8000f0c:	d92c      	bls.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0e:	3802      	subs	r0, #2
 8000f10:	4427      	add	r7, r4
 8000f12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f16:	eba7 0708 	sub.w	r7, r7, r8
 8000f1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f1e:	454f      	cmp	r7, r9
 8000f20:	46c6      	mov	lr, r8
 8000f22:	4649      	mov	r1, r9
 8000f24:	d31a      	bcc.n	8000f5c <__udivmoddi4+0x294>
 8000f26:	d017      	beq.n	8000f58 <__udivmoddi4+0x290>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x27a>
 8000f2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f36:	40f2      	lsrs	r2, r6
 8000f38:	ea4c 0202 	orr.w	r2, ip, r2
 8000f3c:	40f7      	lsrs	r7, r6
 8000f3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f42:	2600      	movs	r6, #0
 8000f44:	4631      	mov	r1, r6
 8000f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e70b      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6fd      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f58:	4543      	cmp	r3, r8
 8000f5a:	d2e5      	bcs.n	8000f28 <__udivmoddi4+0x260>
 8000f5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f60:	eb69 0104 	sbc.w	r1, r9, r4
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7df      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e7d2      	b.n	8000f12 <__udivmoddi4+0x24a>
 8000f6c:	4660      	mov	r0, ip
 8000f6e:	e78d      	b.n	8000e8c <__udivmoddi4+0x1c4>
 8000f70:	4681      	mov	r9, r0
 8000f72:	e7b9      	b.n	8000ee8 <__udivmoddi4+0x220>
 8000f74:	4666      	mov	r6, ip
 8000f76:	e775      	b.n	8000e64 <__udivmoddi4+0x19c>
 8000f78:	4630      	mov	r0, r6
 8000f7a:	e74a      	b.n	8000e12 <__udivmoddi4+0x14a>
 8000f7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f80:	4439      	add	r1, r7
 8000f82:	e713      	b.n	8000dac <__udivmoddi4+0xe4>
 8000f84:	3802      	subs	r0, #2
 8000f86:	443c      	add	r4, r7
 8000f88:	e724      	b.n	8000dd4 <__udivmoddi4+0x10c>
 8000f8a:	bf00      	nop

08000f8c <__aeabi_idiv0>:
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08c      	sub	sp, #48	; 0x30
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	2220      	movs	r2, #32
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f008 fb5b 	bl	8009664 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fae:	4b40      	ldr	r3, [pc, #256]	; (80010b0 <MX_ADC1_Init+0x120>)
 8000fb0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fb4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fb6:	4b3e      	ldr	r3, [pc, #248]	; (80010b0 <MX_ADC1_Init+0x120>)
 8000fb8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000fbc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fbe:	4b3c      	ldr	r3, [pc, #240]	; (80010b0 <MX_ADC1_Init+0x120>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fc4:	4b3a      	ldr	r3, [pc, #232]	; (80010b0 <MX_ADC1_Init+0x120>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000fca:	4b39      	ldr	r3, [pc, #228]	; (80010b0 <MX_ADC1_Init+0x120>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000fd0:	4b37      	ldr	r3, [pc, #220]	; (80010b0 <MX_ADC1_Init+0x120>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fd6:	4b36      	ldr	r3, [pc, #216]	; (80010b0 <MX_ADC1_Init+0x120>)
 8000fd8:	2204      	movs	r2, #4
 8000fda:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fdc:	4b34      	ldr	r3, [pc, #208]	; (80010b0 <MX_ADC1_Init+0x120>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fe2:	4b33      	ldr	r3, [pc, #204]	; (80010b0 <MX_ADC1_Init+0x120>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8000fe8:	4b31      	ldr	r3, [pc, #196]	; (80010b0 <MX_ADC1_Init+0x120>)
 8000fea:	2202      	movs	r2, #2
 8000fec:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fee:	4b30      	ldr	r3, [pc, #192]	; (80010b0 <MX_ADC1_Init+0x120>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_HRTIM_TRG1;
 8000ff6:	4b2e      	ldr	r3, [pc, #184]	; (80010b0 <MX_ADC1_Init+0x120>)
 8000ff8:	f44f 62d4 	mov.w	r2, #1696	; 0x6a0
 8000ffc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000ffe:	4b2c      	ldr	r3, [pc, #176]	; (80010b0 <MX_ADC1_Init+0x120>)
 8001000:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001004:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001006:	4b2a      	ldr	r3, [pc, #168]	; (80010b0 <MX_ADC1_Init+0x120>)
 8001008:	2201      	movs	r2, #1
 800100a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800100e:	4b28      	ldr	r3, [pc, #160]	; (80010b0 <MX_ADC1_Init+0x120>)
 8001010:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001014:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 8001016:	4b26      	ldr	r3, [pc, #152]	; (80010b0 <MX_ADC1_Init+0x120>)
 8001018:	2201      	movs	r2, #1
 800101a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_32;
 800101e:	4b24      	ldr	r3, [pc, #144]	; (80010b0 <MX_ADC1_Init+0x120>)
 8001020:	2210      	movs	r2, #16
 8001022:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_5;
 8001024:	4b22      	ldr	r3, [pc, #136]	; (80010b0 <MX_ADC1_Init+0x120>)
 8001026:	22a0      	movs	r2, #160	; 0xa0
 8001028:	649a      	str	r2, [r3, #72]	; 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800102a:	4b21      	ldr	r3, [pc, #132]	; (80010b0 <MX_ADC1_Init+0x120>)
 800102c:	2200      	movs	r2, #0
 800102e:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001030:	4b1f      	ldr	r3, [pc, #124]	; (80010b0 <MX_ADC1_Init+0x120>)
 8001032:	2201      	movs	r2, #1
 8001034:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001036:	481e      	ldr	r0, [pc, #120]	; (80010b0 <MX_ADC1_Init+0x120>)
 8001038:	f001 ff5c 	bl	8002ef4 <HAL_ADC_Init>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8001042:	f001 f99b 	bl	800237c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001046:	2300      	movs	r3, #0
 8001048:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800104a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104e:	4619      	mov	r1, r3
 8001050:	4817      	ldr	r0, [pc, #92]	; (80010b0 <MX_ADC1_Init+0x120>)
 8001052:	f003 f847 	bl	80040e4 <HAL_ADCEx_MultiModeConfigChannel>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 800105c:	f001 f98e 	bl	800237c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001060:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <MX_ADC1_Init+0x124>)
 8001062:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001064:	2306      	movs	r3, #6
 8001066:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8001068:	2304      	movs	r3, #4
 800106a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800106c:	237f      	movs	r3, #127	; 0x7f
 800106e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001070:	2304      	movs	r3, #4
 8001072:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001078:	1d3b      	adds	r3, r7, #4
 800107a:	4619      	mov	r1, r3
 800107c:	480c      	ldr	r0, [pc, #48]	; (80010b0 <MX_ADC1_Init+0x120>)
 800107e:	f002 f9e7 	bl	8003450 <HAL_ADC_ConfigChannel>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8001088:	f001 f978 	bl	800237c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800108c:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <MX_ADC1_Init+0x128>)
 800108e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001090:	230c      	movs	r3, #12
 8001092:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	4619      	mov	r1, r3
 8001098:	4805      	ldr	r0, [pc, #20]	; (80010b0 <MX_ADC1_Init+0x120>)
 800109a:	f002 f9d9 	bl	8003450 <HAL_ADC_ConfigChannel>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80010a4:	f001 f96a 	bl	800237c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010a8:	bf00      	nop
 80010aa:	3730      	adds	r7, #48	; 0x30
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000350 	.word	0x20000350
 80010b4:	19200040 	.word	0x19200040
 80010b8:	1d500080 	.word	0x1d500080

080010bc <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b088      	sub	sp, #32
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010c2:	463b      	mov	r3, r7
 80010c4:	2220      	movs	r2, #32
 80010c6:	2100      	movs	r1, #0
 80010c8:	4618      	mov	r0, r3
 80010ca:	f008 facb 	bl	8009664 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80010ce:	4b39      	ldr	r3, [pc, #228]	; (80011b4 <MX_ADC2_Init+0xf8>)
 80010d0:	4a39      	ldr	r2, [pc, #228]	; (80011b8 <MX_ADC2_Init+0xfc>)
 80010d2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010d4:	4b37      	ldr	r3, [pc, #220]	; (80011b4 <MX_ADC2_Init+0xf8>)
 80010d6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80010da:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80010dc:	4b35      	ldr	r3, [pc, #212]	; (80011b4 <MX_ADC2_Init+0xf8>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010e2:	4b34      	ldr	r3, [pc, #208]	; (80011b4 <MX_ADC2_Init+0xf8>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80010e8:	4b32      	ldr	r3, [pc, #200]	; (80011b4 <MX_ADC2_Init+0xf8>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010ee:	4b31      	ldr	r3, [pc, #196]	; (80011b4 <MX_ADC2_Init+0xf8>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010f4:	4b2f      	ldr	r3, [pc, #188]	; (80011b4 <MX_ADC2_Init+0xf8>)
 80010f6:	2204      	movs	r2, #4
 80010f8:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80010fa:	4b2e      	ldr	r3, [pc, #184]	; (80011b4 <MX_ADC2_Init+0xf8>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001100:	4b2c      	ldr	r3, [pc, #176]	; (80011b4 <MX_ADC2_Init+0xf8>)
 8001102:	2200      	movs	r2, #0
 8001104:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 8001106:	4b2b      	ldr	r3, [pc, #172]	; (80011b4 <MX_ADC2_Init+0xf8>)
 8001108:	2202      	movs	r2, #2
 800110a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800110c:	4b29      	ldr	r3, [pc, #164]	; (80011b4 <MX_ADC2_Init+0xf8>)
 800110e:	2200      	movs	r2, #0
 8001110:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_HRTIM_TRG1;
 8001114:	4b27      	ldr	r3, [pc, #156]	; (80011b4 <MX_ADC2_Init+0xf8>)
 8001116:	f44f 62d4 	mov.w	r2, #1696	; 0x6a0
 800111a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800111c:	4b25      	ldr	r3, [pc, #148]	; (80011b4 <MX_ADC2_Init+0xf8>)
 800111e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001122:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001124:	4b23      	ldr	r3, [pc, #140]	; (80011b4 <MX_ADC2_Init+0xf8>)
 8001126:	2201      	movs	r2, #1
 8001128:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800112c:	4b21      	ldr	r3, [pc, #132]	; (80011b4 <MX_ADC2_Init+0xf8>)
 800112e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001132:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = ENABLE;
 8001134:	4b1f      	ldr	r3, [pc, #124]	; (80011b4 <MX_ADC2_Init+0xf8>)
 8001136:	2201      	movs	r2, #1
 8001138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc2.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_32;
 800113c:	4b1d      	ldr	r3, [pc, #116]	; (80011b4 <MX_ADC2_Init+0xf8>)
 800113e:	2210      	movs	r2, #16
 8001140:	645a      	str	r2, [r3, #68]	; 0x44
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_5;
 8001142:	4b1c      	ldr	r3, [pc, #112]	; (80011b4 <MX_ADC2_Init+0xf8>)
 8001144:	22a0      	movs	r2, #160	; 0xa0
 8001146:	649a      	str	r2, [r3, #72]	; 0x48
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001148:	4b1a      	ldr	r3, [pc, #104]	; (80011b4 <MX_ADC2_Init+0xf8>)
 800114a:	2200      	movs	r2, #0
 800114c:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800114e:	4b19      	ldr	r3, [pc, #100]	; (80011b4 <MX_ADC2_Init+0xf8>)
 8001150:	2201      	movs	r2, #1
 8001152:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001154:	4817      	ldr	r0, [pc, #92]	; (80011b4 <MX_ADC2_Init+0xf8>)
 8001156:	f001 fecd 	bl	8002ef4 <HAL_ADC_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_ADC2_Init+0xa8>
  {
    Error_Handler();
 8001160:	f001 f90c 	bl	800237c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001164:	4b15      	ldr	r3, [pc, #84]	; (80011bc <MX_ADC2_Init+0x100>)
 8001166:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001168:	2306      	movs	r3, #6
 800116a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 800116c:	2304      	movs	r3, #4
 800116e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001170:	237f      	movs	r3, #127	; 0x7f
 8001172:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001174:	2304      	movs	r3, #4
 8001176:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800117c:	463b      	mov	r3, r7
 800117e:	4619      	mov	r1, r3
 8001180:	480c      	ldr	r0, [pc, #48]	; (80011b4 <MX_ADC2_Init+0xf8>)
 8001182:	f002 f965 	bl	8003450 <HAL_ADC_ConfigChannel>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_ADC2_Init+0xd4>
  {
    Error_Handler();
 800118c:	f001 f8f6 	bl	800237c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001190:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <MX_ADC2_Init+0x104>)
 8001192:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001194:	230c      	movs	r3, #12
 8001196:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001198:	463b      	mov	r3, r7
 800119a:	4619      	mov	r1, r3
 800119c:	4805      	ldr	r0, [pc, #20]	; (80011b4 <MX_ADC2_Init+0xf8>)
 800119e:	f002 f957 	bl	8003450 <HAL_ADC_ConfigChannel>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_ADC2_Init+0xf0>
  {
    Error_Handler();
 80011a8:	f001 f8e8 	bl	800237c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011ac:	bf00      	nop
 80011ae:	3720      	adds	r7, #32
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000218 	.word	0x20000218
 80011b8:	50000100 	.word	0x50000100
 80011bc:	25b00200 	.word	0x25b00200
 80011c0:	0c900008 	.word	0x0c900008

080011c4 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b088      	sub	sp, #32
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ca:	463b      	mov	r3, r7
 80011cc:	2220      	movs	r2, #32
 80011ce:	2100      	movs	r1, #0
 80011d0:	4618      	mov	r0, r3
 80011d2:	f008 fa47 	bl	8009664 <memset>
  /* USER CODE BEGIN ADC5_Init 1 */

  /* USER CODE END ADC5_Init 1 */
  /** Common config
  */
  hadc5.Instance = ADC5;
 80011d6:	4b32      	ldr	r3, [pc, #200]	; (80012a0 <MX_ADC5_Init+0xdc>)
 80011d8:	4a32      	ldr	r2, [pc, #200]	; (80012a4 <MX_ADC5_Init+0xe0>)
 80011da:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011dc:	4b30      	ldr	r3, [pc, #192]	; (80012a0 <MX_ADC5_Init+0xdc>)
 80011de:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80011e2:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 80011e4:	4b2e      	ldr	r3, [pc, #184]	; (80012a0 <MX_ADC5_Init+0xdc>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011ea:	4b2d      	ldr	r3, [pc, #180]	; (80012a0 <MX_ADC5_Init+0xdc>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 80011f0:	4b2b      	ldr	r3, [pc, #172]	; (80012a0 <MX_ADC5_Init+0xdc>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011f6:	4b2a      	ldr	r3, [pc, #168]	; (80012a0 <MX_ADC5_Init+0xdc>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011fc:	4b28      	ldr	r3, [pc, #160]	; (80012a0 <MX_ADC5_Init+0xdc>)
 80011fe:	2204      	movs	r2, #4
 8001200:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8001202:	4b27      	ldr	r3, [pc, #156]	; (80012a0 <MX_ADC5_Init+0xdc>)
 8001204:	2200      	movs	r2, #0
 8001206:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 8001208:	4b25      	ldr	r3, [pc, #148]	; (80012a0 <MX_ADC5_Init+0xdc>)
 800120a:	2200      	movs	r2, #0
 800120c:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 800120e:	4b24      	ldr	r3, [pc, #144]	; (80012a0 <MX_ADC5_Init+0xdc>)
 8001210:	2201      	movs	r2, #1
 8001212:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8001214:	4b22      	ldr	r3, [pc, #136]	; (80012a0 <MX_ADC5_Init+0xdc>)
 8001216:	2200      	movs	r2, #0
 8001218:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_EXTERNALTRIG_HRTIM_TRG1;
 800121c:	4b20      	ldr	r3, [pc, #128]	; (80012a0 <MX_ADC5_Init+0xdc>)
 800121e:	f44f 62d4 	mov.w	r2, #1696	; 0x6a0
 8001222:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001224:	4b1e      	ldr	r3, [pc, #120]	; (80012a0 <MX_ADC5_Init+0xdc>)
 8001226:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800122a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 800122c:	4b1c      	ldr	r3, [pc, #112]	; (80012a0 <MX_ADC5_Init+0xdc>)
 800122e:	2201      	movs	r2, #1
 8001230:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001234:	4b1a      	ldr	r3, [pc, #104]	; (80012a0 <MX_ADC5_Init+0xdc>)
 8001236:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800123a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = ENABLE;
 800123c:	4b18      	ldr	r3, [pc, #96]	; (80012a0 <MX_ADC5_Init+0xdc>)
 800123e:	2201      	movs	r2, #1
 8001240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc5.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_32;
 8001244:	4b16      	ldr	r3, [pc, #88]	; (80012a0 <MX_ADC5_Init+0xdc>)
 8001246:	2210      	movs	r2, #16
 8001248:	645a      	str	r2, [r3, #68]	; 0x44
  hadc5.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_5;
 800124a:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <MX_ADC5_Init+0xdc>)
 800124c:	22a0      	movs	r2, #160	; 0xa0
 800124e:	649a      	str	r2, [r3, #72]	; 0x48
  hadc5.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001250:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <MX_ADC5_Init+0xdc>)
 8001252:	2200      	movs	r2, #0
 8001254:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc5.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001256:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <MX_ADC5_Init+0xdc>)
 8001258:	2201      	movs	r2, #1
 800125a:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 800125c:	4810      	ldr	r0, [pc, #64]	; (80012a0 <MX_ADC5_Init+0xdc>)
 800125e:	f001 fe49 	bl	8002ef4 <HAL_ADC_Init>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_ADC5_Init+0xa8>
  {
    Error_Handler();
 8001268:	f001 f888 	bl	800237c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800126c:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <MX_ADC5_Init+0xe4>)
 800126e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001270:	2306      	movs	r3, #6
 8001272:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8001274:	2304      	movs	r3, #4
 8001276:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001278:	237f      	movs	r3, #127	; 0x7f
 800127a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800127c:	2304      	movs	r3, #4
 800127e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8001284:	463b      	mov	r3, r7
 8001286:	4619      	mov	r1, r3
 8001288:	4805      	ldr	r0, [pc, #20]	; (80012a0 <MX_ADC5_Init+0xdc>)
 800128a:	f002 f8e1 	bl	8003450 <HAL_ADC_ConfigChannel>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_ADC5_Init+0xd4>
  {
    Error_Handler();
 8001294:	f001 f872 	bl	800237c <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8001298:	bf00      	nop
 800129a:	3720      	adds	r7, #32
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000284 	.word	0x20000284
 80012a4:	50000600 	.word	0x50000600
 80012a8:	04300002 	.word	0x04300002

080012ac <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08e      	sub	sp, #56	; 0x38
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012cc:	d158      	bne.n	8001380 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80012ce:	4b95      	ldr	r3, [pc, #596]	; (8001524 <HAL_ADC_MspInit+0x278>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	3301      	adds	r3, #1
 80012d4:	4a93      	ldr	r2, [pc, #588]	; (8001524 <HAL_ADC_MspInit+0x278>)
 80012d6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80012d8:	4b92      	ldr	r3, [pc, #584]	; (8001524 <HAL_ADC_MspInit+0x278>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d10b      	bne.n	80012f8 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80012e0:	4b91      	ldr	r3, [pc, #580]	; (8001528 <HAL_ADC_MspInit+0x27c>)
 80012e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e4:	4a90      	ldr	r2, [pc, #576]	; (8001528 <HAL_ADC_MspInit+0x27c>)
 80012e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ec:	4b8e      	ldr	r3, [pc, #568]	; (8001528 <HAL_ADC_MspInit+0x27c>)
 80012ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012f4:	623b      	str	r3, [r7, #32]
 80012f6:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f8:	4b8b      	ldr	r3, [pc, #556]	; (8001528 <HAL_ADC_MspInit+0x27c>)
 80012fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fc:	4a8a      	ldr	r2, [pc, #552]	; (8001528 <HAL_ADC_MspInit+0x27c>)
 80012fe:	f043 0304 	orr.w	r3, r3, #4
 8001302:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001304:	4b88      	ldr	r3, [pc, #544]	; (8001528 <HAL_ADC_MspInit+0x27c>)
 8001306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001308:	f003 0304 	and.w	r3, r3, #4
 800130c:	61fb      	str	r3, [r7, #28]
 800130e:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001310:	2303      	movs	r3, #3
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001314:	2303      	movs	r3, #3
 8001316:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800131c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001320:	4619      	mov	r1, r3
 8001322:	4882      	ldr	r0, [pc, #520]	; (800152c <HAL_ADC_MspInit+0x280>)
 8001324:	f003 fc28 	bl	8004b78 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Channel1;
 8001328:	4b81      	ldr	r3, [pc, #516]	; (8001530 <HAL_ADC_MspInit+0x284>)
 800132a:	4a82      	ldr	r2, [pc, #520]	; (8001534 <HAL_ADC_MspInit+0x288>)
 800132c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800132e:	4b80      	ldr	r3, [pc, #512]	; (8001530 <HAL_ADC_MspInit+0x284>)
 8001330:	2205      	movs	r2, #5
 8001332:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001334:	4b7e      	ldr	r3, [pc, #504]	; (8001530 <HAL_ADC_MspInit+0x284>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800133a:	4b7d      	ldr	r3, [pc, #500]	; (8001530 <HAL_ADC_MspInit+0x284>)
 800133c:	2200      	movs	r2, #0
 800133e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001340:	4b7b      	ldr	r3, [pc, #492]	; (8001530 <HAL_ADC_MspInit+0x284>)
 8001342:	2280      	movs	r2, #128	; 0x80
 8001344:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001346:	4b7a      	ldr	r3, [pc, #488]	; (8001530 <HAL_ADC_MspInit+0x284>)
 8001348:	f44f 7200 	mov.w	r2, #512	; 0x200
 800134c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800134e:	4b78      	ldr	r3, [pc, #480]	; (8001530 <HAL_ADC_MspInit+0x284>)
 8001350:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001354:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001356:	4b76      	ldr	r3, [pc, #472]	; (8001530 <HAL_ADC_MspInit+0x284>)
 8001358:	2220      	movs	r2, #32
 800135a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800135c:	4b74      	ldr	r3, [pc, #464]	; (8001530 <HAL_ADC_MspInit+0x284>)
 800135e:	2200      	movs	r2, #0
 8001360:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001362:	4873      	ldr	r0, [pc, #460]	; (8001530 <HAL_ADC_MspInit+0x284>)
 8001364:	f003 f8d6 	bl	8004514 <HAL_DMA_Init>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800136e:	f001 f805 	bl	800237c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a6e      	ldr	r2, [pc, #440]	; (8001530 <HAL_ADC_MspInit+0x284>)
 8001376:	655a      	str	r2, [r3, #84]	; 0x54
 8001378:	4a6d      	ldr	r2, [pc, #436]	; (8001530 <HAL_ADC_MspInit+0x284>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 800137e:	e0cc      	b.n	800151a <HAL_ADC_MspInit+0x26e>
  else if(adcHandle->Instance==ADC2)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a6c      	ldr	r2, [pc, #432]	; (8001538 <HAL_ADC_MspInit+0x28c>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d171      	bne.n	800146e <HAL_ADC_MspInit+0x1c2>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800138a:	4b66      	ldr	r3, [pc, #408]	; (8001524 <HAL_ADC_MspInit+0x278>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	3301      	adds	r3, #1
 8001390:	4a64      	ldr	r2, [pc, #400]	; (8001524 <HAL_ADC_MspInit+0x278>)
 8001392:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001394:	4b63      	ldr	r3, [pc, #396]	; (8001524 <HAL_ADC_MspInit+0x278>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d10b      	bne.n	80013b4 <HAL_ADC_MspInit+0x108>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800139c:	4b62      	ldr	r3, [pc, #392]	; (8001528 <HAL_ADC_MspInit+0x27c>)
 800139e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a0:	4a61      	ldr	r2, [pc, #388]	; (8001528 <HAL_ADC_MspInit+0x27c>)
 80013a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013a8:	4b5f      	ldr	r3, [pc, #380]	; (8001528 <HAL_ADC_MspInit+0x27c>)
 80013aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013b0:	61bb      	str	r3, [r7, #24]
 80013b2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013b4:	4b5c      	ldr	r3, [pc, #368]	; (8001528 <HAL_ADC_MspInit+0x27c>)
 80013b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b8:	4a5b      	ldr	r2, [pc, #364]	; (8001528 <HAL_ADC_MspInit+0x27c>)
 80013ba:	f043 0304 	orr.w	r3, r3, #4
 80013be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c0:	4b59      	ldr	r3, [pc, #356]	; (8001528 <HAL_ADC_MspInit+0x27c>)
 80013c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c4:	f003 0304 	and.w	r3, r3, #4
 80013c8:	617b      	str	r3, [r7, #20]
 80013ca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013cc:	4b56      	ldr	r3, [pc, #344]	; (8001528 <HAL_ADC_MspInit+0x27c>)
 80013ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d0:	4a55      	ldr	r2, [pc, #340]	; (8001528 <HAL_ADC_MspInit+0x27c>)
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013d8:	4b53      	ldr	r3, [pc, #332]	; (8001528 <HAL_ADC_MspInit+0x27c>)
 80013da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013dc:	f003 0301 	and.w	r3, r3, #1
 80013e0:	613b      	str	r3, [r7, #16]
 80013e2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013e4:	2308      	movs	r3, #8
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013e8:	2303      	movs	r3, #3
 80013ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f4:	4619      	mov	r1, r3
 80013f6:	484d      	ldr	r0, [pc, #308]	; (800152c <HAL_ADC_MspInit+0x280>)
 80013f8:	f003 fbbe 	bl	8004b78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013fc:	2340      	movs	r3, #64	; 0x40
 80013fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001400:	2303      	movs	r3, #3
 8001402:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001408:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800140c:	4619      	mov	r1, r3
 800140e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001412:	f003 fbb1 	bl	8004b78 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel2;
 8001416:	4b49      	ldr	r3, [pc, #292]	; (800153c <HAL_ADC_MspInit+0x290>)
 8001418:	4a49      	ldr	r2, [pc, #292]	; (8001540 <HAL_ADC_MspInit+0x294>)
 800141a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800141c:	4b47      	ldr	r3, [pc, #284]	; (800153c <HAL_ADC_MspInit+0x290>)
 800141e:	2224      	movs	r2, #36	; 0x24
 8001420:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001422:	4b46      	ldr	r3, [pc, #280]	; (800153c <HAL_ADC_MspInit+0x290>)
 8001424:	2200      	movs	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001428:	4b44      	ldr	r3, [pc, #272]	; (800153c <HAL_ADC_MspInit+0x290>)
 800142a:	2200      	movs	r2, #0
 800142c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800142e:	4b43      	ldr	r3, [pc, #268]	; (800153c <HAL_ADC_MspInit+0x290>)
 8001430:	2280      	movs	r2, #128	; 0x80
 8001432:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001434:	4b41      	ldr	r3, [pc, #260]	; (800153c <HAL_ADC_MspInit+0x290>)
 8001436:	f44f 7200 	mov.w	r2, #512	; 0x200
 800143a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800143c:	4b3f      	ldr	r3, [pc, #252]	; (800153c <HAL_ADC_MspInit+0x290>)
 800143e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001442:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001444:	4b3d      	ldr	r3, [pc, #244]	; (800153c <HAL_ADC_MspInit+0x290>)
 8001446:	2220      	movs	r2, #32
 8001448:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800144a:	4b3c      	ldr	r3, [pc, #240]	; (800153c <HAL_ADC_MspInit+0x290>)
 800144c:	2200      	movs	r2, #0
 800144e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001450:	483a      	ldr	r0, [pc, #232]	; (800153c <HAL_ADC_MspInit+0x290>)
 8001452:	f003 f85f 	bl	8004514 <HAL_DMA_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <HAL_ADC_MspInit+0x1b4>
      Error_Handler();
 800145c:	f000 ff8e 	bl	800237c <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4a36      	ldr	r2, [pc, #216]	; (800153c <HAL_ADC_MspInit+0x290>)
 8001464:	655a      	str	r2, [r3, #84]	; 0x54
 8001466:	4a35      	ldr	r2, [pc, #212]	; (800153c <HAL_ADC_MspInit+0x290>)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6293      	str	r3, [r2, #40]	; 0x28
}
 800146c:	e055      	b.n	800151a <HAL_ADC_MspInit+0x26e>
  else if(adcHandle->Instance==ADC5)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a34      	ldr	r2, [pc, #208]	; (8001544 <HAL_ADC_MspInit+0x298>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d150      	bne.n	800151a <HAL_ADC_MspInit+0x26e>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8001478:	4b2b      	ldr	r3, [pc, #172]	; (8001528 <HAL_ADC_MspInit+0x27c>)
 800147a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147c:	4a2a      	ldr	r2, [pc, #168]	; (8001528 <HAL_ADC_MspInit+0x27c>)
 800147e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001482:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001484:	4b28      	ldr	r3, [pc, #160]	; (8001528 <HAL_ADC_MspInit+0x27c>)
 8001486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001488:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001490:	4b25      	ldr	r3, [pc, #148]	; (8001528 <HAL_ADC_MspInit+0x27c>)
 8001492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001494:	4a24      	ldr	r2, [pc, #144]	; (8001528 <HAL_ADC_MspInit+0x27c>)
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800149c:	4b22      	ldr	r3, [pc, #136]	; (8001528 <HAL_ADC_MspInit+0x27c>)
 800149e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a0:	f003 0301 	and.w	r3, r3, #1
 80014a4:	60bb      	str	r3, [r7, #8]
 80014a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ae:	2303      	movs	r3, #3
 80014b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ba:	4619      	mov	r1, r3
 80014bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014c0:	f003 fb5a 	bl	8004b78 <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA2_Channel3;
 80014c4:	4b20      	ldr	r3, [pc, #128]	; (8001548 <HAL_ADC_MspInit+0x29c>)
 80014c6:	4a21      	ldr	r2, [pc, #132]	; (800154c <HAL_ADC_MspInit+0x2a0>)
 80014c8:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 80014ca:	4b1f      	ldr	r3, [pc, #124]	; (8001548 <HAL_ADC_MspInit+0x29c>)
 80014cc:	2227      	movs	r2, #39	; 0x27
 80014ce:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014d0:	4b1d      	ldr	r3, [pc, #116]	; (8001548 <HAL_ADC_MspInit+0x29c>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 80014d6:	4b1c      	ldr	r3, [pc, #112]	; (8001548 <HAL_ADC_MspInit+0x29c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 80014dc:	4b1a      	ldr	r3, [pc, #104]	; (8001548 <HAL_ADC_MspInit+0x29c>)
 80014de:	2280      	movs	r2, #128	; 0x80
 80014e0:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014e2:	4b19      	ldr	r3, [pc, #100]	; (8001548 <HAL_ADC_MspInit+0x29c>)
 80014e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014e8:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014ea:	4b17      	ldr	r3, [pc, #92]	; (8001548 <HAL_ADC_MspInit+0x29c>)
 80014ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014f0:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 80014f2:	4b15      	ldr	r3, [pc, #84]	; (8001548 <HAL_ADC_MspInit+0x29c>)
 80014f4:	2220      	movs	r2, #32
 80014f6:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 80014f8:	4b13      	ldr	r3, [pc, #76]	; (8001548 <HAL_ADC_MspInit+0x29c>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 80014fe:	4812      	ldr	r0, [pc, #72]	; (8001548 <HAL_ADC_MspInit+0x29c>)
 8001500:	f003 f808 	bl	8004514 <HAL_DMA_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <HAL_ADC_MspInit+0x262>
      Error_Handler();
 800150a:	f000 ff37 	bl	800237c <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc5);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a0d      	ldr	r2, [pc, #52]	; (8001548 <HAL_ADC_MspInit+0x29c>)
 8001512:	655a      	str	r2, [r3, #84]	; 0x54
 8001514:	4a0c      	ldr	r2, [pc, #48]	; (8001548 <HAL_ADC_MspInit+0x29c>)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6293      	str	r3, [r2, #40]	; 0x28
}
 800151a:	bf00      	nop
 800151c:	3738      	adds	r7, #56	; 0x38
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000200 	.word	0x20000200
 8001528:	40021000 	.word	0x40021000
 800152c:	48000800 	.word	0x48000800
 8001530:	200003bc 	.word	0x200003bc
 8001534:	40020408 	.word	0x40020408
 8001538:	50000100 	.word	0x50000100
 800153c:	2000041c 	.word	0x2000041c
 8001540:	4002041c 	.word	0x4002041c
 8001544:	50000600 	.word	0x50000600
 8001548:	200002f0 	.word	0x200002f0
 800154c:	40020430 	.word	0x40020430

08001550 <controller_update>:


// Function: controller_update
// ----------------------------------------------------------------------------------------
//
void controller_update(adcval_t ADCValues){
 8001550:	b084      	sub	sp, #16
 8001552:	b580      	push	{r7, lr}
 8001554:	af00      	add	r7, sp, #0
 8001556:	f107 0c08 	add.w	ip, r7, #8
 800155a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	updateTempMeasurementCold(ADCValues.ADC1Val[0]);
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	4618      	mov	r0, r3
 8001562:	f000 f96b 	bl	800183c <updateTempMeasurementCold>
	updateTempMeasurementHot(ADCValues.ADC1Val[1]);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	4618      	mov	r0, r3
 800156a:	f000 f8ef 	bl	800174c <updateTempMeasurementHot>
	updateVoltage(ADCValues.ADC2Val[0]);
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	4618      	mov	r0, r3
 8001572:	f000 f9db 	bl	800192c <updateVoltage>
	updateCurrent(ADCValues.ADC2Val[1]);
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	4618      	mov	r0, r3
 800157a:	f000 fa2d 	bl	80019d8 <updateCurrent>
	updateSuplyVoltage(ADCValues.ADC5Val[0]);
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	4618      	mov	r0, r3
 8001582:	f000 f9fd 	bl	8001980 <updateSuplyVoltage>
	controller();
 8001586:	f000 fa9f 	bl	8001ac8 <controller>
	updateSetVoltagePWM();
 800158a:	f000 fa71 	bl	8001a70 <updateSetVoltagePWM>
}
 800158e:	bf00      	nop
 8001590:	46bd      	mov	sp, r7
 8001592:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001596:	b004      	add	sp, #16
 8001598:	4770      	bx	lr
	...

0800159c <controller_setVoltagePWMConsumer>:
}

// Function: controller_setVoltagePWMConsumer
// ----------------------------------------------------------------------------------------
//
void controller_setVoltagePWMConsumer(float voltage){
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	ed87 0a01 	vstr	s0, [r7, #4]
	uint32_t compare;
	compare = voltage/suplyVoltage*PERIOD_100;
 80015a6:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <controller_setVoltagePWMConsumer+0x4c>)
 80015a8:	ed93 7a00 	vldr	s14, [r3]
 80015ac:	edd7 6a01 	vldr	s13, [r7, #4]
 80015b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015b4:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80015ec <controller_setVoltagePWMConsumer+0x50>
 80015b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015c0:	ee17 3a90 	vmov	r3, s15
 80015c4:	60fb      	str	r3, [r7, #12]
	if(compare < 121){
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2b78      	cmp	r3, #120	; 0x78
 80015ca:	d801      	bhi.n	80015d0 <controller_setVoltagePWMConsumer+0x34>
		compare = 121;
 80015cc:	2379      	movs	r3, #121	; 0x79
 80015ce:	60fb      	str	r3, [r7, #12]
	}
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_1,compare);
 80015d0:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <controller_setVoltagePWMConsumer+0x54>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
}
 80015da:	bf00      	nop
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	20000680 	.word	0x20000680
 80015ec:	47548000 	.word	0x47548000
 80015f0:	20000688 	.word	0x20000688

080015f4 <controller_print>:

// Function: controller_print
// ----------------------------------------------------------------------------------------
//
void controller_print(){
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b09a      	sub	sp, #104	; 0x68
 80015f8:	af00      	add	r7, sp, #0
	char stringBufferTemp[100];
	stringBuffer[0] = '\0';
 80015fa:	4b44      	ldr	r3, [pc, #272]	; (800170c <controller_print+0x118>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	701a      	strb	r2, [r3, #0]
	sprintf(stringBufferTemp,"\"Time\":%u,",HAL_GetTick());
 8001600:	f001 fa06 	bl	8002a10 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	1d3b      	adds	r3, r7, #4
 8001608:	4941      	ldr	r1, [pc, #260]	; (8001710 <controller_print+0x11c>)
 800160a:	4618      	mov	r0, r3
 800160c:	f008 fc9c 	bl	8009f48 <siprintf>
	strcat(stringBuffer,stringBufferTemp);
 8001610:	1d3b      	adds	r3, r7, #4
 8001612:	4619      	mov	r1, r3
 8001614:	483d      	ldr	r0, [pc, #244]	; (800170c <controller_print+0x118>)
 8001616:	f008 fcb7 	bl	8009f88 <strcat>
	sprintf(stringBufferTemp, "\"SetVoltage\":%.3f," ,setVoltage);
 800161a:	4b3e      	ldr	r3, [pc, #248]	; (8001714 <controller_print+0x120>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f7fe ffba 	bl	8000598 <__aeabi_f2d>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	1d38      	adds	r0, r7, #4
 800162a:	493b      	ldr	r1, [pc, #236]	; (8001718 <controller_print+0x124>)
 800162c:	f008 fc8c 	bl	8009f48 <siprintf>
	strcat(stringBuffer,stringBufferTemp);
 8001630:	1d3b      	adds	r3, r7, #4
 8001632:	4619      	mov	r1, r3
 8001634:	4835      	ldr	r0, [pc, #212]	; (800170c <controller_print+0x118>)
 8001636:	f008 fca7 	bl	8009f88 <strcat>
	sprintf(stringBufferTemp, "\"HotTemp\":%.3f," ,tempHot);
 800163a:	4b38      	ldr	r3, [pc, #224]	; (800171c <controller_print+0x128>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f7fe ffaa 	bl	8000598 <__aeabi_f2d>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	1d38      	adds	r0, r7, #4
 800164a:	4935      	ldr	r1, [pc, #212]	; (8001720 <controller_print+0x12c>)
 800164c:	f008 fc7c 	bl	8009f48 <siprintf>
	strcat(stringBuffer,stringBufferTemp);
 8001650:	1d3b      	adds	r3, r7, #4
 8001652:	4619      	mov	r1, r3
 8001654:	482d      	ldr	r0, [pc, #180]	; (800170c <controller_print+0x118>)
 8001656:	f008 fc97 	bl	8009f88 <strcat>
	sprintf(stringBufferTemp, "\"ColdTemp\":%.3f,",tempCold);
 800165a:	4b32      	ldr	r3, [pc, #200]	; (8001724 <controller_print+0x130>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4618      	mov	r0, r3
 8001660:	f7fe ff9a 	bl	8000598 <__aeabi_f2d>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	1d38      	adds	r0, r7, #4
 800166a:	492f      	ldr	r1, [pc, #188]	; (8001728 <controller_print+0x134>)
 800166c:	f008 fc6c 	bl	8009f48 <siprintf>
	strcat(stringBuffer,stringBufferTemp);
 8001670:	1d3b      	adds	r3, r7, #4
 8001672:	4619      	mov	r1, r3
 8001674:	4825      	ldr	r0, [pc, #148]	; (800170c <controller_print+0x118>)
 8001676:	f008 fc87 	bl	8009f88 <strcat>
	sprintf(stringBufferTemp, "\"Current\":%.3f,",current);
 800167a:	4b2c      	ldr	r3, [pc, #176]	; (800172c <controller_print+0x138>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f7fe ff8a 	bl	8000598 <__aeabi_f2d>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	1d38      	adds	r0, r7, #4
 800168a:	4929      	ldr	r1, [pc, #164]	; (8001730 <controller_print+0x13c>)
 800168c:	f008 fc5c 	bl	8009f48 <siprintf>
	strcat(stringBuffer,stringBufferTemp);
 8001690:	1d3b      	adds	r3, r7, #4
 8001692:	4619      	mov	r1, r3
 8001694:	481d      	ldr	r0, [pc, #116]	; (800170c <controller_print+0x118>)
 8001696:	f008 fc77 	bl	8009f88 <strcat>
	sprintf(stringBufferTemp, "\"Voltage\":%.3f,",voltage);
 800169a:	4b26      	ldr	r3, [pc, #152]	; (8001734 <controller_print+0x140>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7fe ff7a 	bl	8000598 <__aeabi_f2d>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	1d38      	adds	r0, r7, #4
 80016aa:	4923      	ldr	r1, [pc, #140]	; (8001738 <controller_print+0x144>)
 80016ac:	f008 fc4c 	bl	8009f48 <siprintf>
	strcat(stringBuffer,stringBufferTemp);
 80016b0:	1d3b      	adds	r3, r7, #4
 80016b2:	4619      	mov	r1, r3
 80016b4:	4815      	ldr	r0, [pc, #84]	; (800170c <controller_print+0x118>)
 80016b6:	f008 fc67 	bl	8009f88 <strcat>
	sprintf(stringBufferTemp, "\"SuplyVoltage\":%.3f",suplyVoltage);
 80016ba:	4b20      	ldr	r3, [pc, #128]	; (800173c <controller_print+0x148>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7fe ff6a 	bl	8000598 <__aeabi_f2d>
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	1d38      	adds	r0, r7, #4
 80016ca:	491d      	ldr	r1, [pc, #116]	; (8001740 <controller_print+0x14c>)
 80016cc:	f008 fc3c 	bl	8009f48 <siprintf>
	strcat(stringBuffer,stringBufferTemp);
 80016d0:	1d3b      	adds	r3, r7, #4
 80016d2:	4619      	mov	r1, r3
 80016d4:	480d      	ldr	r0, [pc, #52]	; (800170c <controller_print+0x118>)
 80016d6:	f008 fc57 	bl	8009f88 <strcat>
	sprintf(stringBufferTemp, "\n\r");
 80016da:	1d3b      	adds	r3, r7, #4
 80016dc:	4919      	ldr	r1, [pc, #100]	; (8001744 <controller_print+0x150>)
 80016de:	4618      	mov	r0, r3
 80016e0:	f008 fc32 	bl	8009f48 <siprintf>
	strcat(stringBuffer,stringBufferTemp);
 80016e4:	1d3b      	adds	r3, r7, #4
 80016e6:	4619      	mov	r1, r3
 80016e8:	4808      	ldr	r0, [pc, #32]	; (800170c <controller_print+0x118>)
 80016ea:	f008 fc4d 	bl	8009f88 <strcat>
	HAL_UART_Transmit_DMA(&huart1, (uint8_t *)stringBuffer, strlen(stringBuffer));
 80016ee:	4807      	ldr	r0, [pc, #28]	; (800170c <controller_print+0x118>)
 80016f0:	f7fe fd96 	bl	8000220 <strlen>
 80016f4:	4603      	mov	r3, r0
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	461a      	mov	r2, r3
 80016fa:	4904      	ldr	r1, [pc, #16]	; (800170c <controller_print+0x118>)
 80016fc:	4812      	ldr	r0, [pc, #72]	; (8001748 <controller_print+0x154>)
 80016fe:	f006 fe59 	bl	80083b4 <HAL_UART_Transmit_DMA>
}
 8001702:	bf00      	nop
 8001704:	3768      	adds	r7, #104	; 0x68
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20000488 	.word	0x20000488
 8001710:	0800c7f0 	.word	0x0800c7f0
 8001714:	2000067c 	.word	0x2000067c
 8001718:	0800c7fc 	.word	0x0800c7fc
 800171c:	20000684 	.word	0x20000684
 8001720:	0800c810 	.word	0x0800c810
 8001724:	20000480 	.word	0x20000480
 8001728:	0800c820 	.word	0x0800c820
 800172c:	20000484 	.word	0x20000484
 8001730:	0800c834 	.word	0x0800c834
 8001734:	2000047c 	.word	0x2000047c
 8001738:	0800c844 	.word	0x0800c844
 800173c:	20000680 	.word	0x20000680
 8001740:	0800c854 	.word	0x0800c854
 8001744:	0800c868 	.word	0x0800c868
 8001748:	20000844 	.word	0x20000844

0800174c <updateTempMeasurementHot>:

// Function: updateTempMeasurementHot
// ----------------------------------------------------------------------------------------
//
static void updateTempMeasurementHot(uint32_t adcVal){
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
	float R;
	R = 3.3f*adcVal/MAX_ADC_VALUE;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	ee07 3a90 	vmov	s15, r3
 800175a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800175e:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800181c <updateTempMeasurementHot+0xd0>
 8001762:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001766:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8001820 <updateTempMeasurementHot+0xd4>
 800176a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800176e:	edc7 7a03 	vstr	s15, [r7, #12]
	R = R0*3.3f/R - R0;
 8001772:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8001824 <updateTempMeasurementHot+0xd8>
 8001776:	ed97 7a03 	vldr	s14, [r7, #12]
 800177a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800177e:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001828 <updateTempMeasurementHot+0xdc>
 8001782:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001786:	edc7 7a03 	vstr	s15, [r7, #12]
	tempHot = R/R0;
 800178a:	ed97 7a03 	vldr	s14, [r7, #12]
 800178e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001828 <updateTempMeasurementHot+0xdc>
 8001792:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001796:	4b25      	ldr	r3, [pc, #148]	; (800182c <updateTempMeasurementHot+0xe0>)
 8001798:	edc3 7a00 	vstr	s15, [r3]
	tempHot = log(tempHot);
 800179c:	4b23      	ldr	r3, [pc, #140]	; (800182c <updateTempMeasurementHot+0xe0>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7fe fef9 	bl	8000598 <__aeabi_f2d>
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	ec43 2b10 	vmov	d0, r2, r3
 80017ae:	f00a fe07 	bl	800c3c0 <log>
 80017b2:	ec53 2b10 	vmov	r2, r3, d0
 80017b6:	4610      	mov	r0, r2
 80017b8:	4619      	mov	r1, r3
 80017ba:	f7ff fa1d 	bl	8000bf8 <__aeabi_d2f>
 80017be:	4603      	mov	r3, r0
 80017c0:	4a1a      	ldr	r2, [pc, #104]	; (800182c <updateTempMeasurementHot+0xe0>)
 80017c2:	6013      	str	r3, [r2, #0]
	tempHot /= B;
 80017c4:	4b19      	ldr	r3, [pc, #100]	; (800182c <updateTempMeasurementHot+0xe0>)
 80017c6:	ed93 7a00 	vldr	s14, [r3]
 80017ca:	eddf 6a19 	vldr	s13, [pc, #100]	; 8001830 <updateTempMeasurementHot+0xe4>
 80017ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017d2:	4b16      	ldr	r3, [pc, #88]	; (800182c <updateTempMeasurementHot+0xe0>)
 80017d4:	edc3 7a00 	vstr	s15, [r3]
	tempHot += 1.0f / (T0 + 273.15f);
 80017d8:	4b14      	ldr	r3, [pc, #80]	; (800182c <updateTempMeasurementHot+0xe0>)
 80017da:	edd3 7a00 	vldr	s15, [r3]
 80017de:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001834 <updateTempMeasurementHot+0xe8>
 80017e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017e6:	4b11      	ldr	r3, [pc, #68]	; (800182c <updateTempMeasurementHot+0xe0>)
 80017e8:	edc3 7a00 	vstr	s15, [r3]
	tempHot = 1.0f / tempHot;
 80017ec:	4b0f      	ldr	r3, [pc, #60]	; (800182c <updateTempMeasurementHot+0xe0>)
 80017ee:	ed93 7a00 	vldr	s14, [r3]
 80017f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80017f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017fa:	4b0c      	ldr	r3, [pc, #48]	; (800182c <updateTempMeasurementHot+0xe0>)
 80017fc:	edc3 7a00 	vstr	s15, [r3]
	tempHot -= 273.15f;
 8001800:	4b0a      	ldr	r3, [pc, #40]	; (800182c <updateTempMeasurementHot+0xe0>)
 8001802:	edd3 7a00 	vldr	s15, [r3]
 8001806:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001838 <updateTempMeasurementHot+0xec>
 800180a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800180e:	4b07      	ldr	r3, [pc, #28]	; (800182c <updateTempMeasurementHot+0xe0>)
 8001810:	edc3 7a00 	vstr	s15, [r3]
}
 8001814:	bf00      	nop
 8001816:	3710      	adds	r7, #16
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40533333 	.word	0x40533333
 8001820:	45800000 	.word	0x45800000
 8001824:	4700e800 	.word	0x4700e800
 8001828:	461c4000 	.word	0x461c4000
 800182c:	20000684 	.word	0x20000684
 8001830:	4573c000 	.word	0x4573c000
 8001834:	3b5bcf0f 	.word	0x3b5bcf0f
 8001838:	43889333 	.word	0x43889333

0800183c <updateTempMeasurementCold>:

// Function: updateTempMeasurementCold
// ----------------------------------------------------------------------------------------
//
static void updateTempMeasurementCold(uint32_t adcVal){
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
	float R;
	R = 3.3f*adcVal/MAX_ADC_VALUE;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	ee07 3a90 	vmov	s15, r3
 800184a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800184e:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800190c <updateTempMeasurementCold+0xd0>
 8001852:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001856:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8001910 <updateTempMeasurementCold+0xd4>
 800185a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800185e:	edc7 7a03 	vstr	s15, [r7, #12]
	R = R0*3.3f/R - R0;
 8001862:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8001914 <updateTempMeasurementCold+0xd8>
 8001866:	ed97 7a03 	vldr	s14, [r7, #12]
 800186a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800186e:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001918 <updateTempMeasurementCold+0xdc>
 8001872:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001876:	edc7 7a03 	vstr	s15, [r7, #12]
	tempCold = R/R0;
 800187a:	ed97 7a03 	vldr	s14, [r7, #12]
 800187e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001918 <updateTempMeasurementCold+0xdc>
 8001882:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001886:	4b25      	ldr	r3, [pc, #148]	; (800191c <updateTempMeasurementCold+0xe0>)
 8001888:	edc3 7a00 	vstr	s15, [r3]
	tempCold = log(tempCold);
 800188c:	4b23      	ldr	r3, [pc, #140]	; (800191c <updateTempMeasurementCold+0xe0>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4618      	mov	r0, r3
 8001892:	f7fe fe81 	bl	8000598 <__aeabi_f2d>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	ec43 2b10 	vmov	d0, r2, r3
 800189e:	f00a fd8f 	bl	800c3c0 <log>
 80018a2:	ec53 2b10 	vmov	r2, r3, d0
 80018a6:	4610      	mov	r0, r2
 80018a8:	4619      	mov	r1, r3
 80018aa:	f7ff f9a5 	bl	8000bf8 <__aeabi_d2f>
 80018ae:	4603      	mov	r3, r0
 80018b0:	4a1a      	ldr	r2, [pc, #104]	; (800191c <updateTempMeasurementCold+0xe0>)
 80018b2:	6013      	str	r3, [r2, #0]
	tempCold /= B;
 80018b4:	4b19      	ldr	r3, [pc, #100]	; (800191c <updateTempMeasurementCold+0xe0>)
 80018b6:	ed93 7a00 	vldr	s14, [r3]
 80018ba:	eddf 6a19 	vldr	s13, [pc, #100]	; 8001920 <updateTempMeasurementCold+0xe4>
 80018be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018c2:	4b16      	ldr	r3, [pc, #88]	; (800191c <updateTempMeasurementCold+0xe0>)
 80018c4:	edc3 7a00 	vstr	s15, [r3]
	tempCold += 1.0f / (T0 + 273.15f);
 80018c8:	4b14      	ldr	r3, [pc, #80]	; (800191c <updateTempMeasurementCold+0xe0>)
 80018ca:	edd3 7a00 	vldr	s15, [r3]
 80018ce:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001924 <updateTempMeasurementCold+0xe8>
 80018d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018d6:	4b11      	ldr	r3, [pc, #68]	; (800191c <updateTempMeasurementCold+0xe0>)
 80018d8:	edc3 7a00 	vstr	s15, [r3]
	tempCold = 1.0f / tempCold;
 80018dc:	4b0f      	ldr	r3, [pc, #60]	; (800191c <updateTempMeasurementCold+0xe0>)
 80018de:	ed93 7a00 	vldr	s14, [r3]
 80018e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80018e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018ea:	4b0c      	ldr	r3, [pc, #48]	; (800191c <updateTempMeasurementCold+0xe0>)
 80018ec:	edc3 7a00 	vstr	s15, [r3]
	tempCold -= 273.15f;
 80018f0:	4b0a      	ldr	r3, [pc, #40]	; (800191c <updateTempMeasurementCold+0xe0>)
 80018f2:	edd3 7a00 	vldr	s15, [r3]
 80018f6:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001928 <updateTempMeasurementCold+0xec>
 80018fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80018fe:	4b07      	ldr	r3, [pc, #28]	; (800191c <updateTempMeasurementCold+0xe0>)
 8001900:	edc3 7a00 	vstr	s15, [r3]
}
 8001904:	bf00      	nop
 8001906:	3710      	adds	r7, #16
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40533333 	.word	0x40533333
 8001910:	45800000 	.word	0x45800000
 8001914:	4700e800 	.word	0x4700e800
 8001918:	461c4000 	.word	0x461c4000
 800191c:	20000480 	.word	0x20000480
 8001920:	4573c000 	.word	0x4573c000
 8001924:	3b5bcf0f 	.word	0x3b5bcf0f
 8001928:	43889333 	.word	0x43889333

0800192c <updateVoltage>:

// Function: updateVoltage
// ----------------------------------------------------------------------------------------
//
static void updateVoltage(uint32_t adcVal){
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
	voltage = 3.3f*adcVal/MAX_ADC_VALUE;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	ee07 3a90 	vmov	s15, r3
 800193a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800193e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001974 <updateVoltage+0x48>
 8001942:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001946:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001978 <updateVoltage+0x4c>
 800194a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800194e:	4b0b      	ldr	r3, [pc, #44]	; (800197c <updateVoltage+0x50>)
 8001950:	edc3 7a00 	vstr	s15, [r3]
	voltage *= 4.0f;
 8001954:	4b09      	ldr	r3, [pc, #36]	; (800197c <updateVoltage+0x50>)
 8001956:	edd3 7a00 	vldr	s15, [r3]
 800195a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800195e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001962:	4b06      	ldr	r3, [pc, #24]	; (800197c <updateVoltage+0x50>)
 8001964:	edc3 7a00 	vstr	s15, [r3]
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	40533333 	.word	0x40533333
 8001978:	45800000 	.word	0x45800000
 800197c:	2000047c 	.word	0x2000047c

08001980 <updateSuplyVoltage>:

// Function: updateSuplyVoltage
// ----------------------------------------------------------------------------------------
//
static void updateSuplyVoltage(uint32_t adcVal){
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
	suplyVoltage = 3.3f*adcVal/MAX_ADC_VALUE;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	ee07 3a90 	vmov	s15, r3
 800198e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001992:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80019c8 <updateSuplyVoltage+0x48>
 8001996:	ee27 7a87 	vmul.f32	s14, s15, s14
 800199a:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80019cc <updateSuplyVoltage+0x4c>
 800199e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019a2:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <updateSuplyVoltage+0x50>)
 80019a4:	edc3 7a00 	vstr	s15, [r3]
	suplyVoltage *= 4.0f;
 80019a8:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <updateSuplyVoltage+0x50>)
 80019aa:	edd3 7a00 	vldr	s15, [r3]
 80019ae:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80019b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019b6:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <updateSuplyVoltage+0x50>)
 80019b8:	edc3 7a00 	vstr	s15, [r3]
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	40533333 	.word	0x40533333
 80019cc:	45800000 	.word	0x45800000
 80019d0:	20000680 	.word	0x20000680
 80019d4:	00000000 	.word	0x00000000

080019d8 <updateCurrent>:

// Function: updateCurrent
// ----------------------------------------------------------------------------------------
//
static void updateCurrent(uint32_t adcVal){
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
	current = 3.3f*adcVal/MAX_ADC_VALUE;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	ee07 3a90 	vmov	s15, r3
 80019e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019ea:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001a60 <updateCurrent+0x88>
 80019ee:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019f2:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001a64 <updateCurrent+0x8c>
 80019f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019fa:	4b1b      	ldr	r3, [pc, #108]	; (8001a68 <updateCurrent+0x90>)
 80019fc:	edc3 7a00 	vstr	s15, [r3]
	current -= 1.65f;
 8001a00:	4b19      	ldr	r3, [pc, #100]	; (8001a68 <updateCurrent+0x90>)
 8001a02:	edd3 7a00 	vldr	s15, [r3]
 8001a06:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001a6c <updateCurrent+0x94>
 8001a0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a0e:	4b16      	ldr	r3, [pc, #88]	; (8001a68 <updateCurrent+0x90>)
 8001a10:	edc3 7a00 	vstr	s15, [r3]
	current /= -20;
 8001a14:	4b14      	ldr	r3, [pc, #80]	; (8001a68 <updateCurrent+0x90>)
 8001a16:	ed93 7a00 	vldr	s14, [r3]
 8001a1a:	eefb 6a04 	vmov.f32	s13, #180	; 0xc1a00000 -20.0
 8001a1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a22:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <updateCurrent+0x90>)
 8001a24:	edc3 7a00 	vstr	s15, [r3]
	current /= 0.02;
 8001a28:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <updateCurrent+0x90>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7fe fdb3 	bl	8000598 <__aeabi_f2d>
 8001a32:	a309      	add	r3, pc, #36	; (adr r3, 8001a58 <updateCurrent+0x80>)
 8001a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a38:	f7fe ff30 	bl	800089c <__aeabi_ddiv>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	460b      	mov	r3, r1
 8001a40:	4610      	mov	r0, r2
 8001a42:	4619      	mov	r1, r3
 8001a44:	f7ff f8d8 	bl	8000bf8 <__aeabi_d2f>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	4a07      	ldr	r2, [pc, #28]	; (8001a68 <updateCurrent+0x90>)
 8001a4c:	6013      	str	r3, [r2, #0]
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	47ae147b 	.word	0x47ae147b
 8001a5c:	3f947ae1 	.word	0x3f947ae1
 8001a60:	40533333 	.word	0x40533333
 8001a64:	45800000 	.word	0x45800000
 8001a68:	20000484 	.word	0x20000484
 8001a6c:	3fd33333 	.word	0x3fd33333

08001a70 <updateSetVoltagePWM>:

static void updateSetVoltagePWM(){
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
	uint32_t compare;
	compare = VOLTAGE_GAIN*setVoltage/suplyVoltage*PERIOD_100;
 8001a76:	4b10      	ldr	r3, [pc, #64]	; (8001ab8 <updateSetVoltagePWM+0x48>)
 8001a78:	edd3 6a00 	vldr	s13, [r3]
 8001a7c:	4b0f      	ldr	r3, [pc, #60]	; (8001abc <updateSetVoltagePWM+0x4c>)
 8001a7e:	ed93 7a00 	vldr	s14, [r3]
 8001a82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a86:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001ac0 <updateSetVoltagePWM+0x50>
 8001a8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a92:	ee17 3a90 	vmov	r3, s15
 8001a96:	607b      	str	r3, [r7, #4]
	if(compare < 121){
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2b78      	cmp	r3, #120	; 0x78
 8001a9c:	d801      	bhi.n	8001aa2 <updateSetVoltagePWM+0x32>
		compare = 121;
 8001a9e:	2379      	movs	r3, #121	; 0x79
 8001aa0:	607b      	str	r3, [r7, #4]
	}
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1,compare);
 8001aa2:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <updateSetVoltagePWM+0x54>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	2000067c 	.word	0x2000067c
 8001abc:	20000680 	.word	0x20000680
 8001ac0:	47548000 	.word	0x47548000
 8001ac4:	20000688 	.word	0x20000688

08001ac8 <controller>:



static void controller(){
 8001ac8:	b5b0      	push	{r4, r5, r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
	static float uk1 = 0;
	static float ek1 = 0;
	float ek;
	float uk;
	ek = -(referneceTemp - tempCold);
 8001ace:	4b2e      	ldr	r3, [pc, #184]	; (8001b88 <controller+0xc0>)
 8001ad0:	ed93 7a00 	vldr	s14, [r3]
 8001ad4:	4b2d      	ldr	r3, [pc, #180]	; (8001b8c <controller+0xc4>)
 8001ad6:	edd3 7a00 	vldr	s15, [r3]
 8001ada:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ade:	eef1 7a67 	vneg.f32	s15, s15
 8001ae2:	edc7 7a00 	vstr	s15, [r7]
	uk = uk1 + 0.617*ek - 0.6*ek1;
 8001ae6:	4b2a      	ldr	r3, [pc, #168]	; (8001b90 <controller+0xc8>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7fe fd54 	bl	8000598 <__aeabi_f2d>
 8001af0:	4604      	mov	r4, r0
 8001af2:	460d      	mov	r5, r1
 8001af4:	6838      	ldr	r0, [r7, #0]
 8001af6:	f7fe fd4f 	bl	8000598 <__aeabi_f2d>
 8001afa:	a31f      	add	r3, pc, #124	; (adr r3, 8001b78 <controller+0xb0>)
 8001afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b00:	f7fe fda2 	bl	8000648 <__aeabi_dmul>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	4620      	mov	r0, r4
 8001b0a:	4629      	mov	r1, r5
 8001b0c:	f7fe fbe6 	bl	80002dc <__adddf3>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	4614      	mov	r4, r2
 8001b16:	461d      	mov	r5, r3
 8001b18:	4b1e      	ldr	r3, [pc, #120]	; (8001b94 <controller+0xcc>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7fe fd3b 	bl	8000598 <__aeabi_f2d>
 8001b22:	a317      	add	r3, pc, #92	; (adr r3, 8001b80 <controller+0xb8>)
 8001b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b28:	f7fe fd8e 	bl	8000648 <__aeabi_dmul>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4620      	mov	r0, r4
 8001b32:	4629      	mov	r1, r5
 8001b34:	f7fe fbd0 	bl	80002d8 <__aeabi_dsub>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	4619      	mov	r1, r3
 8001b40:	f7ff f85a 	bl	8000bf8 <__aeabi_d2f>
 8001b44:	4603      	mov	r3, r0
 8001b46:	607b      	str	r3, [r7, #4]

	if(uk>5){
 8001b48:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b4c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001b50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b58:	dd01      	ble.n	8001b5e <controller+0x96>
		uk=5;
 8001b5a:	4b0f      	ldr	r3, [pc, #60]	; (8001b98 <controller+0xd0>)
 8001b5c:	607b      	str	r3, [r7, #4]
	}

	uk1 = uk;
 8001b5e:	4a0c      	ldr	r2, [pc, #48]	; (8001b90 <controller+0xc8>)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6013      	str	r3, [r2, #0]
	ek1 = ek;
 8001b64:	4a0b      	ldr	r2, [pc, #44]	; (8001b94 <controller+0xcc>)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	6013      	str	r3, [r2, #0]
	setVoltage = uk;
 8001b6a:	4a0c      	ldr	r2, [pc, #48]	; (8001b9c <controller+0xd4>)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6013      	str	r3, [r2, #0]
}
 8001b70:	bf00      	nop
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bdb0      	pop	{r4, r5, r7, pc}
 8001b78:	c8b43958 	.word	0xc8b43958
 8001b7c:	3fe3be76 	.word	0x3fe3be76
 8001b80:	33333333 	.word	0x33333333
 8001b84:	3fe33333 	.word	0x3fe33333
 8001b88:	20000000 	.word	0x20000000
 8001b8c:	20000480 	.word	0x20000480
 8001b90:	20000204 	.word	0x20000204
 8001b94:	20000208 	.word	0x20000208
 8001b98:	40a00000 	.word	0x40a00000
 8001b9c:	2000067c 	.word	0x2000067c

08001ba0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001ba6:	4b18      	ldr	r3, [pc, #96]	; (8001c08 <MX_DMA_Init+0x68>)
 8001ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001baa:	4a17      	ldr	r2, [pc, #92]	; (8001c08 <MX_DMA_Init+0x68>)
 8001bac:	f043 0304 	orr.w	r3, r3, #4
 8001bb0:	6493      	str	r3, [r2, #72]	; 0x48
 8001bb2:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <MX_DMA_Init+0x68>)
 8001bb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bb6:	f003 0304 	and.w	r3, r3, #4
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bbe:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <MX_DMA_Init+0x68>)
 8001bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bc2:	4a11      	ldr	r2, [pc, #68]	; (8001c08 <MX_DMA_Init+0x68>)
 8001bc4:	f043 0301 	orr.w	r3, r3, #1
 8001bc8:	6493      	str	r3, [r2, #72]	; 0x48
 8001bca:	4b0f      	ldr	r3, [pc, #60]	; (8001c08 <MX_DMA_Init+0x68>)
 8001bcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	60bb      	str	r3, [r7, #8]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001bd6:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <MX_DMA_Init+0x68>)
 8001bd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bda:	4a0b      	ldr	r2, [pc, #44]	; (8001c08 <MX_DMA_Init+0x68>)
 8001bdc:	f043 0302 	orr.w	r3, r3, #2
 8001be0:	6493      	str	r3, [r2, #72]	; 0x48
 8001be2:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <MX_DMA_Init+0x68>)
 8001be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	607b      	str	r3, [r7, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	200b      	movs	r0, #11
 8001bf4:	f002 fc59 	bl	80044aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001bf8:	200b      	movs	r0, #11
 8001bfa:	f002 fc70 	bl	80044de <HAL_NVIC_EnableIRQ>

}
 8001bfe:	bf00      	nop
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40021000 	.word	0x40021000

08001c0c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b088      	sub	sp, #32
 8001c10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c12:	f107 030c 	add.w	r3, r7, #12
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	605a      	str	r2, [r3, #4]
 8001c1c:	609a      	str	r2, [r3, #8]
 8001c1e:	60da      	str	r2, [r3, #12]
 8001c20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c22:	4b2f      	ldr	r3, [pc, #188]	; (8001ce0 <MX_GPIO_Init+0xd4>)
 8001c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c26:	4a2e      	ldr	r2, [pc, #184]	; (8001ce0 <MX_GPIO_Init+0xd4>)
 8001c28:	f043 0304 	orr.w	r3, r3, #4
 8001c2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c2e:	4b2c      	ldr	r3, [pc, #176]	; (8001ce0 <MX_GPIO_Init+0xd4>)
 8001c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c32:	f003 0304 	and.w	r3, r3, #4
 8001c36:	60bb      	str	r3, [r7, #8]
 8001c38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3a:	4b29      	ldr	r3, [pc, #164]	; (8001ce0 <MX_GPIO_Init+0xd4>)
 8001c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c3e:	4a28      	ldr	r2, [pc, #160]	; (8001ce0 <MX_GPIO_Init+0xd4>)
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c46:	4b26      	ldr	r3, [pc, #152]	; (8001ce0 <MX_GPIO_Init+0xd4>)
 8001c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	607b      	str	r3, [r7, #4]
 8001c50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c52:	4b23      	ldr	r3, [pc, #140]	; (8001ce0 <MX_GPIO_Init+0xd4>)
 8001c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c56:	4a22      	ldr	r2, [pc, #136]	; (8001ce0 <MX_GPIO_Init+0xd4>)
 8001c58:	f043 0302 	orr.w	r3, r3, #2
 8001c5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c5e:	4b20      	ldr	r3, [pc, #128]	; (8001ce0 <MX_GPIO_Init+0xd4>)
 8001c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	603b      	str	r3, [r7, #0]
 8001c68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED3_Pin|tg1_Pin, GPIO_PIN_RESET);
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8001c70:	481c      	ldr	r0, [pc, #112]	; (8001ce4 <MX_GPIO_Init+0xd8>)
 8001c72:	f003 f903 	bl	8004e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8001c76:	2200      	movs	r2, #0
 8001c78:	2110      	movs	r1, #16
 8001c7a:	481b      	ldr	r0, [pc, #108]	; (8001ce8 <MX_GPIO_Init+0xdc>)
 8001c7c:	f003 f8fe 	bl	8004e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED3_Pin;
 8001c80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c86:	2301      	movs	r3, #1
 8001c88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8001c92:	f107 030c 	add.w	r3, r7, #12
 8001c96:	4619      	mov	r1, r3
 8001c98:	4812      	ldr	r0, [pc, #72]	; (8001ce4 <MX_GPIO_Init+0xd8>)
 8001c9a:	f002 ff6d 	bl	8004b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = tg1_Pin;
 8001c9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ca2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cac:	2302      	movs	r3, #2
 8001cae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(tg1_GPIO_Port, &GPIO_InitStruct);
 8001cb0:	f107 030c 	add.w	r3, r7, #12
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	480b      	ldr	r0, [pc, #44]	; (8001ce4 <MX_GPIO_Init+0xd8>)
 8001cb8:	f002 ff5e 	bl	8004b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED4_Pin;
 8001cbc:	2310      	movs	r3, #16
 8001cbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8001ccc:	f107 030c 	add.w	r3, r7, #12
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4805      	ldr	r0, [pc, #20]	; (8001ce8 <MX_GPIO_Init+0xdc>)
 8001cd4:	f002 ff50 	bl	8004b78 <HAL_GPIO_Init>

}
 8001cd8:	bf00      	nop
 8001cda:	3720      	adds	r7, #32
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	48000800 	.word	0x48000800
 8001ce8:	48000400 	.word	0x48000400

08001cec <MX_HRTIM1_Init>:

HRTIM_HandleTypeDef hhrtim1;

/* HRTIM1 init function */
void MX_HRTIM1_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b0ba      	sub	sp, #232	; 0xe8
 8001cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_ADCTriggerCfgTypeDef pADCTriggerCfg = {0};
 8001cf2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	605a      	str	r2, [r3, #4]
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8001cfc:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCtlTypeDef pTimerCtl = {0};
 8001d0a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	605a      	str	r2, [r3, #4]
 8001d14:	609a      	str	r2, [r3, #8]
 8001d16:	60da      	str	r2, [r3, #12]
 8001d18:	611a      	str	r2, [r3, #16]
 8001d1a:	615a      	str	r2, [r3, #20]
 8001d1c:	619a      	str	r2, [r3, #24]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8001d1e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d22:	2260      	movs	r2, #96	; 0x60
 8001d24:	2100      	movs	r1, #0
 8001d26:	4618      	mov	r0, r3
 8001d28:	f007 fc9c 	bl	8009664 <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 8001d2c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	609a      	str	r2, [r3, #8]
  HRTIM_DeadTimeCfgTypeDef pDeadTimeCfg = {0};
 8001d38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d3c:	2224      	movs	r2, #36	; 0x24
 8001d3e:	2100      	movs	r1, #0
 8001d40:	4618      	mov	r0, r3
 8001d42:	f007 fc8f 	bl	8009664 <memset>
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 8001d46:	1d3b      	adds	r3, r7, #4
 8001d48:	2220      	movs	r2, #32
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f007 fc89 	bl	8009664 <memset>

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 8001d52:	4bce      	ldr	r3, [pc, #824]	; (800208c <MX_HRTIM1_Init+0x3a0>)
 8001d54:	4ace      	ldr	r2, [pc, #824]	; (8002090 <MX_HRTIM1_Init+0x3a4>)
 8001d56:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8001d58:	4bcc      	ldr	r3, [pc, #816]	; (800208c <MX_HRTIM1_Init+0x3a0>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8001d5e:	4bcb      	ldr	r3, [pc, #812]	; (800208c <MX_HRTIM1_Init+0x3a0>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 8001d64:	48c9      	ldr	r0, [pc, #804]	; (800208c <MX_HRTIM1_Init+0x3a0>)
 8001d66:	f003 f8a1 	bl	8004eac <HAL_HRTIM_Init>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <MX_HRTIM1_Init+0x88>
  {
    Error_Handler();
 8001d70:	f000 fb04 	bl	800237c <Error_Handler>
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) != HAL_OK)
 8001d74:	210c      	movs	r1, #12
 8001d76:	48c5      	ldr	r0, [pc, #788]	; (800208c <MX_HRTIM1_Init+0x3a0>)
 8001d78:	f003 f968 	bl	800504c <HAL_HRTIM_DLLCalibrationStart>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_HRTIM1_Init+0x9a>
  {
    Error_Handler();
 8001d82:	f000 fafb 	bl	800237c <Error_Handler>
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 8001d86:	210a      	movs	r1, #10
 8001d88:	48c0      	ldr	r0, [pc, #768]	; (800208c <MX_HRTIM1_Init+0x3a0>)
 8001d8a:	f003 f9b7 	bl	80050fc <HAL_HRTIM_PollForDLLCalibration>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <MX_HRTIM1_Init+0xac>
  {
    Error_Handler();
 8001d94:	f000 faf2 	bl	800237c <Error_Handler>
  }
  pADCTriggerCfg.UpdateSource = HRTIM_ADCTRIGGERUPDATE_TIMER_C;
 8001d98:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001d9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  pADCTriggerCfg.Trigger = HRTIM_ADCTRIGGEREVENT13_TIMERE_CMP3;
 8001da0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001da4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  if (HAL_HRTIM_ADCTriggerConfig(&hhrtim1, HRTIM_ADCTRIGGER_1, &pADCTriggerCfg) != HAL_OK)
 8001da8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001dac:	461a      	mov	r2, r3
 8001dae:	2101      	movs	r1, #1
 8001db0:	48b6      	ldr	r0, [pc, #728]	; (800208c <MX_HRTIM1_Init+0x3a0>)
 8001db2:	f003 f9ff 	bl	80051b4 <HAL_HRTIM_ADCTriggerConfig>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_HRTIM1_Init+0xd4>
  {
    Error_Handler();
 8001dbc:	f000 fade 	bl	800237c <Error_Handler>
  }
  if (HAL_HRTIM_ADCPostScalerConfig(&hhrtim1, HRTIM_ADCTRIGGER_1, 10) != HAL_OK)
 8001dc0:	220a      	movs	r2, #10
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	48b1      	ldr	r0, [pc, #708]	; (800208c <MX_HRTIM1_Init+0x3a0>)
 8001dc6:	f003 fbe1 	bl	800558c <HAL_HRTIM_ADCPostScalerConfig>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_HRTIM1_Init+0xe8>
  {
    Error_Handler();
 8001dd0:	f000 fad4 	bl	800237c <Error_Handler>
  }
  pTimeBaseCfg.Period = PERIOD_100;
 8001dd4:	f24d 4380 	movw	r3, #54400	; 0xd480
 8001dd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL32;
 8001de2:	2300      	movs	r3, #0
 8001de4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8001de8:	2308      	movs	r3, #8
 8001dea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimeBaseCfg) != HAL_OK)
 8001dee:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001df2:	461a      	mov	r2, r3
 8001df4:	2102      	movs	r1, #2
 8001df6:	48a5      	ldr	r0, [pc, #660]	; (800208c <MX_HRTIM1_Init+0x3a0>)
 8001df8:	f003 f9b4 	bl	8005164 <HAL_HRTIM_TimeBaseConfig>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_HRTIM1_Init+0x11a>
  {
    Error_Handler();
 8001e02:	f000 fabb 	bl	800237c <Error_Handler>
  }
  pTimerCtl.UpDownMode = HRTIM_TIMERUPDOWNMODE_UP;
 8001e06:	2300      	movs	r3, #0
 8001e08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  pTimerCtl.GreaterCMP1 = HRTIM_TIMERGTCMP1_EQUAL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  pTimerCtl.DualChannelDacEnable = HRTIM_TIMER_DCDE_DISABLED;
 8001e12:	2300      	movs	r3, #0
 8001e14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimerCtl) != HAL_OK)
 8001e18:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	2102      	movs	r1, #2
 8001e20:	489a      	ldr	r0, [pc, #616]	; (800208c <MX_HRTIM1_Init+0x3a0>)
 8001e22:	f003 fd6f 	bl	8005904 <HAL_HRTIM_WaveformTimerControl>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_HRTIM1_Init+0x144>
  {
    Error_Handler();
 8001e2c:	f000 faa6 	bl	800237c <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 8001e30:	2300      	movs	r3, #0
 8001e32:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8001e34:	2300      	movs	r3, #0
 8001e36:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.DMASrcAddress = 0x0000;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.DMADstAddress = 0x0000;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.DMASize = 0x1;
 8001e40:	2301      	movs	r3, #1
 8001e42:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8001e44:	2300      	movs	r3, #0
 8001e46:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8001e50:	2300      	movs	r3, #0
 8001e52:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8001e54:	2300      	movs	r3, #0
 8001e56:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	67fb      	str	r3, [r7, #124]	; 0x7c
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8001e62:	2300      	movs	r3, #0
 8001e64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8001e74:	2300      	movs	r3, #0
 8001e76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_ENABLED;
 8001e80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 8001e94:	2300      	movs	r3, #0
 8001e96:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimerCfg) != HAL_OK)
 8001ea6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001eaa:	461a      	mov	r2, r3
 8001eac:	2102      	movs	r1, #2
 8001eae:	4877      	ldr	r0, [pc, #476]	; (800208c <MX_HRTIM1_Init+0x3a0>)
 8001eb0:	f003 fcb6 	bl	8005820 <HAL_HRTIM_WaveformTimerConfig>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_HRTIM1_Init+0x1d2>
  {
    Error_Handler();
 8001eba:	f000 fa5f 	bl	800237c <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_MASTER_IT_NONE;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 8001ec8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ecc:	461a      	mov	r2, r3
 8001ece:	2104      	movs	r1, #4
 8001ed0:	486e      	ldr	r0, [pc, #440]	; (800208c <MX_HRTIM1_Init+0x3a0>)
 8001ed2:	f003 fca5 	bl	8005820 <HAL_HRTIM_WaveformTimerConfig>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_HRTIM1_Init+0x1f4>
  {
    Error_Handler();
 8001edc:	f000 fa4e 	bl	800237c <Error_Handler>
  }
  pCompareCfg.CompareValue = 0x120;
 8001ee0:	f44f 7390 	mov.w	r3, #288	; 0x120
 8001ee4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8001ee6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001eea:	2201      	movs	r2, #1
 8001eec:	2102      	movs	r1, #2
 8001eee:	4867      	ldr	r0, [pc, #412]	; (800208c <MX_HRTIM1_Init+0x3a0>)
 8001ef0:	f003 fdbc 	bl	8005a6c <HAL_HRTIM_WaveformCompareConfig>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_HRTIM1_Init+0x212>
  {
    Error_Handler();
 8001efa:	f000 fa3f 	bl	800237c <Error_Handler>
  }
  pDeadTimeCfg.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_MUL8;
 8001efe:	2300      	movs	r3, #0
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
  pDeadTimeCfg.RisingValue = DEADTIME;
 8001f02:	2332      	movs	r3, #50	; 0x32
 8001f04:	62bb      	str	r3, [r7, #40]	; 0x28
  pDeadTimeCfg.RisingSign = HRTIM_TIMDEADTIME_RISINGSIGN_POSITIVE;
 8001f06:	2300      	movs	r3, #0
 8001f08:	62fb      	str	r3, [r7, #44]	; 0x2c
  pDeadTimeCfg.RisingLock = HRTIM_TIMDEADTIME_RISINGLOCK_WRITE;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	633b      	str	r3, [r7, #48]	; 0x30
  pDeadTimeCfg.RisingSignLock = HRTIM_TIMDEADTIME_RISINGSIGNLOCK_WRITE;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	637b      	str	r3, [r7, #52]	; 0x34
  pDeadTimeCfg.FallingValue = DEADTIME;
 8001f12:	2332      	movs	r3, #50	; 0x32
 8001f14:	63bb      	str	r3, [r7, #56]	; 0x38
  pDeadTimeCfg.FallingSign = HRTIM_TIMDEADTIME_FALLINGSIGN_POSITIVE;
 8001f16:	2300      	movs	r3, #0
 8001f18:	63fb      	str	r3, [r7, #60]	; 0x3c
  pDeadTimeCfg.FallingLock = HRTIM_TIMDEADTIME_FALLINGLOCK_WRITE;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	643b      	str	r3, [r7, #64]	; 0x40
  pDeadTimeCfg.FallingSignLock = HRTIM_TIMDEADTIME_FALLINGSIGNLOCK_WRITE;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pDeadTimeCfg) != HAL_OK)
 8001f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f26:	461a      	mov	r2, r3
 8001f28:	2102      	movs	r1, #2
 8001f2a:	4858      	ldr	r0, [pc, #352]	; (800208c <MX_HRTIM1_Init+0x3a0>)
 8001f2c:	f003 fd1e 	bl	800596c <HAL_HRTIM_DeadTimeConfig>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_HRTIM1_Init+0x24e>
  {
    Error_Handler();
 8001f36:	f000 fa21 	bl	800237c <Error_Handler>
  }
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pDeadTimeCfg) != HAL_OK)
 8001f3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f3e:	461a      	mov	r2, r3
 8001f40:	2104      	movs	r1, #4
 8001f42:	4852      	ldr	r0, [pc, #328]	; (800208c <MX_HRTIM1_Init+0x3a0>)
 8001f44:	f003 fd12 	bl	800596c <HAL_HRTIM_DeadTimeConfig>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <MX_HRTIM1_Init+0x266>
  {
    Error_Handler();
 8001f4e:	f000 fa15 	bl	800237c <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8001f52:	2300      	movs	r3, #0
 8001f54:	607b      	str	r3, [r7, #4]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMPER;
 8001f56:	2304      	movs	r3, #4
 8001f58:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP1;
 8001f5a:	2308      	movs	r3, #8
 8001f5c:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	613b      	str	r3, [r7, #16]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8001f62:	2300      	movs	r3, #0
 8001f64:	617b      	str	r3, [r7, #20]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8001f66:	2300      	movs	r3, #0
 8001f68:	61bb      	str	r3, [r7, #24]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	61fb      	str	r3, [r7, #28]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC1, &pOutputCfg) != HAL_OK)
 8001f72:	1d3b      	adds	r3, r7, #4
 8001f74:	2210      	movs	r2, #16
 8001f76:	2102      	movs	r1, #2
 8001f78:	4844      	ldr	r0, [pc, #272]	; (800208c <MX_HRTIM1_Init+0x3a0>)
 8001f7a:	f003 fee5 	bl	8005d48 <HAL_HRTIM_WaveformOutputConfig>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_HRTIM1_Init+0x29c>
  {
    Error_Handler();
 8001f84:	f000 f9fa 	bl	800237c <Error_Handler>
  }
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMCMP1;
 8001f88:	2318      	movs	r3, #24
 8001f8a:	60fb      	str	r3, [r7, #12]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE1, &pOutputCfg) != HAL_OK)
 8001f8c:	1d3b      	adds	r3, r7, #4
 8001f8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f92:	2104      	movs	r1, #4
 8001f94:	483d      	ldr	r0, [pc, #244]	; (800208c <MX_HRTIM1_Init+0x3a0>)
 8001f96:	f003 fed7 	bl	8005d48 <HAL_HRTIM_WaveformOutputConfig>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <MX_HRTIM1_Init+0x2b8>
  {
    Error_Handler();
 8001fa0:	f000 f9ec 	bl	800237c <Error_Handler>
  }
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	60fb      	str	r3, [r7, #12]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC2, &pOutputCfg) != HAL_OK)
 8001fac:	1d3b      	adds	r3, r7, #4
 8001fae:	2220      	movs	r2, #32
 8001fb0:	2102      	movs	r1, #2
 8001fb2:	4836      	ldr	r0, [pc, #216]	; (800208c <MX_HRTIM1_Init+0x3a0>)
 8001fb4:	f003 fec8 	bl	8005d48 <HAL_HRTIM_WaveformOutputConfig>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <MX_HRTIM1_Init+0x2d6>
  {
    Error_Handler();
 8001fbe:	f000 f9dd 	bl	800237c <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE2, &pOutputCfg) != HAL_OK)
 8001fc2:	1d3b      	adds	r3, r7, #4
 8001fc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fc8:	2104      	movs	r1, #4
 8001fca:	4830      	ldr	r0, [pc, #192]	; (800208c <MX_HRTIM1_Init+0x3a0>)
 8001fcc:	f003 febc 	bl	8005d48 <HAL_HRTIM_WaveformOutputConfig>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <MX_HRTIM1_Init+0x2ee>
  {
    Error_Handler();
 8001fd6:	f000 f9d1 	bl	800237c <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 8001fda:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001fde:	461a      	mov	r2, r3
 8001fe0:	2104      	movs	r1, #4
 8001fe2:	482a      	ldr	r0, [pc, #168]	; (800208c <MX_HRTIM1_Init+0x3a0>)
 8001fe4:	f003 f8be 	bl	8005164 <HAL_HRTIM_TimeBaseConfig>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <MX_HRTIM1_Init+0x306>
  {
    Error_Handler();
 8001fee:	f000 f9c5 	bl	800237c <Error_Handler>
  }
  pTimerCtl.TrigHalf = HRTIM_TIMERTRIGHALF_DISABLED;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  pTimerCtl.GreaterCMP3 = HRTIM_TIMERGTCMP3_EQUAL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  pTimerCtl.GreaterCMP1 = HRTIM_TIMERGTCMP1_GREATER;
 8001ffe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002002:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimerCtl) != HAL_OK)
 8002006:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800200a:	461a      	mov	r2, r3
 800200c:	2104      	movs	r1, #4
 800200e:	481f      	ldr	r0, [pc, #124]	; (800208c <MX_HRTIM1_Init+0x3a0>)
 8002010:	f003 fc78 	bl	8005904 <HAL_HRTIM_WaveformTimerControl>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <MX_HRTIM1_Init+0x332>
  {
    Error_Handler();
 800201a:	f000 f9af 	bl	800237c <Error_Handler>
  }
  pCompareCfg.CompareValue = 120;
 800201e:	2378      	movs	r3, #120	; 0x78
 8002020:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8002022:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002026:	2201      	movs	r2, #1
 8002028:	2104      	movs	r1, #4
 800202a:	4818      	ldr	r0, [pc, #96]	; (800208c <MX_HRTIM1_Init+0x3a0>)
 800202c:	f003 fd1e 	bl	8005a6c <HAL_HRTIM_WaveformCompareConfig>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <MX_HRTIM1_Init+0x34e>
  {
    Error_Handler();
 8002036:	f000 f9a1 	bl	800237c <Error_Handler>
  }
  pCompareCfg.CompareValue = MAX_PERIOD;
 800203a:	f648 53ab 	movw	r3, #36267	; 0x8dab
 800203e:	64bb      	str	r3, [r7, #72]	; 0x48
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 8002040:	2300      	movs	r3, #0
 8002042:	64fb      	str	r3, [r7, #76]	; 0x4c
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 8002044:	2300      	movs	r3, #0
 8002046:	653b      	str	r3, [r7, #80]	; 0x50

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8002048:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800204c:	2202      	movs	r2, #2
 800204e:	2104      	movs	r1, #4
 8002050:	480e      	ldr	r0, [pc, #56]	; (800208c <MX_HRTIM1_Init+0x3a0>)
 8002052:	f003 fd0b 	bl	8005a6c <HAL_HRTIM_WaveformCompareConfig>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <MX_HRTIM1_Init+0x374>
  {
    Error_Handler();
 800205c:	f000 f98e 	bl	800237c <Error_Handler>
  }
  pCompareCfg.CompareValue = BLANKING;
 8002060:	23c8      	movs	r3, #200	; 0xc8
 8002062:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8002064:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002068:	2204      	movs	r2, #4
 800206a:	2104      	movs	r1, #4
 800206c:	4807      	ldr	r0, [pc, #28]	; (800208c <MX_HRTIM1_Init+0x3a0>)
 800206e:	f003 fcfd 	bl	8005a6c <HAL_HRTIM_WaveformCompareConfig>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_HRTIM1_Init+0x390>
  {
    Error_Handler();
 8002078:	f000 f980 	bl	800237c <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim1);
 800207c:	4803      	ldr	r0, [pc, #12]	; (800208c <MX_HRTIM1_Init+0x3a0>)
 800207e:	f000 f829 	bl	80020d4 <HAL_HRTIM_MspPostInit>

}
 8002082:	bf00      	nop
 8002084:	37e8      	adds	r7, #232	; 0xe8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	20000688 	.word	0x20000688
 8002090:	40016800 	.word	0x40016800

08002094 <HAL_HRTIM_MspInit>:

void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]

  if(hrtimHandle->Instance==HRTIM1)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a0a      	ldr	r2, [pc, #40]	; (80020cc <HAL_HRTIM_MspInit+0x38>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d10b      	bne.n	80020be <HAL_HRTIM_MspInit+0x2a>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* HRTIM1 clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 80020a6:	4b0a      	ldr	r3, [pc, #40]	; (80020d0 <HAL_HRTIM_MspInit+0x3c>)
 80020a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020aa:	4a09      	ldr	r2, [pc, #36]	; (80020d0 <HAL_HRTIM_MspInit+0x3c>)
 80020ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80020b0:	6613      	str	r3, [r2, #96]	; 0x60
 80020b2:	4b07      	ldr	r3, [pc, #28]	; (80020d0 <HAL_HRTIM_MspInit+0x3c>)
 80020b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }
}
 80020be:	bf00      	nop
 80020c0:	3714      	adds	r7, #20
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	40016800 	.word	0x40016800
 80020d0:	40021000 	.word	0x40021000

080020d4 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b08a      	sub	sp, #40	; 0x28
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020dc:	f107 0314 	add.w	r3, r7, #20
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	605a      	str	r2, [r3, #4]
 80020e6:	609a      	str	r2, [r3, #8]
 80020e8:	60da      	str	r2, [r3, #12]
 80020ea:	611a      	str	r2, [r3, #16]
  if(hrtimHandle->Instance==HRTIM1)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a28      	ldr	r2, [pc, #160]	; (8002194 <HAL_HRTIM_MspPostInit+0xc0>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d149      	bne.n	800218a <HAL_HRTIM_MspPostInit+0xb6>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020f6:	4b28      	ldr	r3, [pc, #160]	; (8002198 <HAL_HRTIM_MspPostInit+0xc4>)
 80020f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fa:	4a27      	ldr	r2, [pc, #156]	; (8002198 <HAL_HRTIM_MspPostInit+0xc4>)
 80020fc:	f043 0302 	orr.w	r3, r3, #2
 8002100:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002102:	4b25      	ldr	r3, [pc, #148]	; (8002198 <HAL_HRTIM_MspPostInit+0xc4>)
 8002104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	613b      	str	r3, [r7, #16]
 800210c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800210e:	4b22      	ldr	r3, [pc, #136]	; (8002198 <HAL_HRTIM_MspPostInit+0xc4>)
 8002110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002112:	4a21      	ldr	r2, [pc, #132]	; (8002198 <HAL_HRTIM_MspPostInit+0xc4>)
 8002114:	f043 0304 	orr.w	r3, r3, #4
 8002118:	64d3      	str	r3, [r2, #76]	; 0x4c
 800211a:	4b1f      	ldr	r3, [pc, #124]	; (8002198 <HAL_HRTIM_MspPostInit+0xc4>)
 800211c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800211e:	f003 0304 	and.w	r3, r3, #4
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]
    PB13     ------> HRTIM1_CHC2
    PC6     ------> HRTIM1_CHF1
    PC8     ------> HRTIM1_CHE1
    PC9     ------> HRTIM1_CHE2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002126:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800212a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212c:	2302      	movs	r3, #2
 800212e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002130:	2300      	movs	r3, #0
 8002132:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002134:	2303      	movs	r3, #3
 8002136:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8002138:	230d      	movs	r3, #13
 800213a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800213c:	f107 0314 	add.w	r3, r7, #20
 8002140:	4619      	mov	r1, r3
 8002142:	4816      	ldr	r0, [pc, #88]	; (800219c <HAL_HRTIM_MspPostInit+0xc8>)
 8002144:	f002 fd18 	bl	8004b78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002148:	2340      	movs	r3, #64	; 0x40
 800214a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214c:	2302      	movs	r3, #2
 800214e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002150:	2300      	movs	r3, #0
 8002152:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002154:	2303      	movs	r3, #3
 8002156:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8002158:	230d      	movs	r3, #13
 800215a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800215c:	f107 0314 	add.w	r3, r7, #20
 8002160:	4619      	mov	r1, r3
 8002162:	480f      	ldr	r0, [pc, #60]	; (80021a0 <HAL_HRTIM_MspPostInit+0xcc>)
 8002164:	f002 fd08 	bl	8004b78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002168:	f44f 7340 	mov.w	r3, #768	; 0x300
 800216c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216e:	2302      	movs	r3, #2
 8002170:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002172:	2300      	movs	r3, #0
 8002174:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002176:	2303      	movs	r3, #3
 8002178:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_HRTIM1;
 800217a:	2303      	movs	r3, #3
 800217c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800217e:	f107 0314 	add.w	r3, r7, #20
 8002182:	4619      	mov	r1, r3
 8002184:	4806      	ldr	r0, [pc, #24]	; (80021a0 <HAL_HRTIM_MspPostInit+0xcc>)
 8002186:	f002 fcf7 	bl	8004b78 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 800218a:	bf00      	nop
 800218c:	3728      	adds	r7, #40	; 0x28
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40016800 	.word	0x40016800
 8002198:	40021000 	.word	0x40021000
 800219c:	48000400 	.word	0x48000400
 80021a0:	48000800 	.word	0x48000800

080021a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021a8:	f000 fbcd 	bl	8002946 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021ac:	f000 f862 	bl	8002274 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021b0:	f7ff fd2c 	bl	8001c0c <MX_GPIO_Init>
  MX_DMA_Init();
 80021b4:	f7ff fcf4 	bl	8001ba0 <MX_DMA_Init>
  MX_HRTIM1_Init();
 80021b8:	f7ff fd98 	bl	8001cec <MX_HRTIM1_Init>
  MX_USART1_UART_Init();
 80021bc:	f000 fad6 	bl	800276c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80021c0:	f7fe fee6 	bl	8000f90 <MX_ADC1_Init>
  MX_TIM2_Init();
 80021c4:	f000 fa60 	bl	8002688 <MX_TIM2_Init>
  MX_ADC2_Init();
 80021c8:	f7fe ff78 	bl	80010bc <MX_ADC2_Init>
  MX_ADC5_Init();
 80021cc:	f7fe fffa 	bl	80011c4 <MX_ADC5_Init>
  /* USER CODE BEGIN 2 */

  //Calibration of adc2
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80021d0:	217f      	movs	r1, #127	; 0x7f
 80021d2:	4820      	ldr	r0, [pc, #128]	; (8002254 <main+0xb0>)
 80021d4:	f001 ff24 	bl	8004020 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 80021d8:	217f      	movs	r1, #127	; 0x7f
 80021da:	481f      	ldr	r0, [pc, #124]	; (8002258 <main+0xb4>)
 80021dc:	f001 ff20 	bl	8004020 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc5, ADC_SINGLE_ENDED);
 80021e0:	217f      	movs	r1, #127	; 0x7f
 80021e2:	481e      	ldr	r0, [pc, #120]	; (800225c <main+0xb8>)
 80021e4:	f001 ff1c 	bl	8004020 <HAL_ADCEx_Calibration_Start>



  //Start HRTIM
  HAL_HRTIM_WaveformOutputStart(&hhrtim1, HRTIM_OUTPUT_TE1|HRTIM_OUTPUT_TE2);
 80021e8:	f44f 7140 	mov.w	r1, #768	; 0x300
 80021ec:	481c      	ldr	r0, [pc, #112]	; (8002260 <main+0xbc>)
 80021ee:	f003 fddc 	bl	8005daa <HAL_HRTIM_WaveformOutputStart>
  HAL_HRTIM_WaveformCounterStart(&hhrtim1, HRTIM_TIMERID_TIMER_E);
 80021f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80021f6:	481a      	ldr	r0, [pc, #104]	; (8002260 <main+0xbc>)
 80021f8:	f003 fe04 	bl	8005e04 <HAL_HRTIM_WaveformCountStart>

  HAL_HRTIM_WaveformOutputStart(&hhrtim1, HRTIM_OUTPUT_TC1|HRTIM_OUTPUT_TC2);
 80021fc:	2130      	movs	r1, #48	; 0x30
 80021fe:	4818      	ldr	r0, [pc, #96]	; (8002260 <main+0xbc>)
 8002200:	f003 fdd3 	bl	8005daa <HAL_HRTIM_WaveformOutputStart>
  HAL_HRTIM_WaveformCounterStart(&hhrtim1, HRTIM_TIMERID_TIMER_C);
 8002204:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8002208:	4815      	ldr	r0, [pc, #84]	; (8002260 <main+0xbc>)
 800220a:	f003 fdfb 	bl	8005e04 <HAL_HRTIM_WaveformCountStart>


  HAL_TIM_Base_Start_IT(&htim2);
 800220e:	4815      	ldr	r0, [pc, #84]	; (8002264 <main+0xc0>)
 8002210:	f005 fb2e 	bl	8007870 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, adcVal.ADC1Val, 2);
 8002214:	2202      	movs	r2, #2
 8002216:	4914      	ldr	r1, [pc, #80]	; (8002268 <main+0xc4>)
 8002218:	480e      	ldr	r0, [pc, #56]	; (8002254 <main+0xb0>)
 800221a:	f001 f82d 	bl	8003278 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, adcVal.ADC2Val, 2);
 800221e:	2202      	movs	r2, #2
 8002220:	4912      	ldr	r1, [pc, #72]	; (800226c <main+0xc8>)
 8002222:	480d      	ldr	r0, [pc, #52]	; (8002258 <main+0xb4>)
 8002224:	f001 f828 	bl	8003278 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc5, adcVal.ADC5Val, 1);
 8002228:	2201      	movs	r2, #1
 800222a:	4911      	ldr	r1, [pc, #68]	; (8002270 <main+0xcc>)
 800222c:	480b      	ldr	r0, [pc, #44]	; (800225c <main+0xb8>)
 800222e:	f001 f823 	bl	8003278 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  controller_setVoltagePWMConsumer(0.5);
 8002232:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002236:	f7ff f9b1 	bl	800159c <controller_setVoltagePWMConsumer>
	  HAL_Delay(3000);
 800223a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800223e:	f000 fbf3 	bl	8002a28 <HAL_Delay>
	  controller_setVoltagePWMConsumer(1);
 8002242:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002246:	f7ff f9a9 	bl	800159c <controller_setVoltagePWMConsumer>
	  HAL_Delay(3000);
 800224a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800224e:	f000 fbeb 	bl	8002a28 <HAL_Delay>
	  controller_setVoltagePWMConsumer(0.5);
 8002252:	e7ee      	b.n	8002232 <main+0x8e>
 8002254:	20000350 	.word	0x20000350
 8002258:	20000218 	.word	0x20000218
 800225c:	20000284 	.word	0x20000284
 8002260:	20000688 	.word	0x20000688
 8002264:	20000798 	.word	0x20000798
 8002268:	20000784 	.word	0x20000784
 800226c:	2000078c 	.word	0x2000078c
 8002270:	20000794 	.word	0x20000794

08002274 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b0a8      	sub	sp, #160	; 0xa0
 8002278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800227a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800227e:	2238      	movs	r2, #56	; 0x38
 8002280:	2100      	movs	r1, #0
 8002282:	4618      	mov	r0, r3
 8002284:	f007 f9ee 	bl	8009664 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002288:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	605a      	str	r2, [r3, #4]
 8002292:	609a      	str	r2, [r3, #8]
 8002294:	60da      	str	r2, [r3, #12]
 8002296:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002298:	463b      	mov	r3, r7
 800229a:	2254      	movs	r2, #84	; 0x54
 800229c:	2100      	movs	r1, #0
 800229e:	4618      	mov	r0, r3
 80022a0:	f007 f9e0 	bl	8009664 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80022a4:	2000      	movs	r0, #0
 80022a6:	f004 fa57 	bl	8006758 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022aa:	2302      	movs	r3, #2
 80022ac:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022b2:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022b4:	2340      	movs	r3, #64	; 0x40
 80022b6:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022b8:	2302      	movs	r3, #2
 80022ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80022be:	2302      	movs	r3, #2
 80022c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80022c4:	2304      	movs	r3, #4
 80022c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80022ca:	2355      	movs	r3, #85	; 0x55
 80022cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022d0:	2302      	movs	r3, #2
 80022d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80022d6:	2302      	movs	r3, #2
 80022d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80022dc:	2302      	movs	r3, #2
 80022de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022e2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80022e6:	4618      	mov	r0, r3
 80022e8:	f004 faea 	bl	80068c0 <HAL_RCC_OscConfig>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80022f2:	f000 f843 	bl	800237c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022f6:	230f      	movs	r3, #15
 80022f8:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022fa:	2303      	movs	r3, #3
 80022fc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022fe:	2300      	movs	r3, #0
 8002300:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8002302:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002306:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002308:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800230c:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800230e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002312:	2104      	movs	r1, #4
 8002314:	4618      	mov	r0, r3
 8002316:	f004 fdeb 	bl	8006ef0 <HAL_RCC_ClockConfig>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002320:	f000 f82c 	bl	800237c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC12
 8002324:	4b0b      	ldr	r3, [pc, #44]	; (8002354 <SystemClock_Config+0xe0>)
 8002326:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC345;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002328:	2300      	movs	r3, #0
 800232a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800232c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002330:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8002332:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002336:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002338:	463b      	mov	r3, r7
 800233a:	4618      	mov	r0, r3
 800233c:	f004 fff4 	bl	8007328 <HAL_RCCEx_PeriphCLKConfig>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8002346:	f000 f819 	bl	800237c <Error_Handler>
  }
}
 800234a:	bf00      	nop
 800234c:	37a0      	adds	r7, #160	; 0xa0
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	00018001 	.word	0x00018001

08002358 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af02      	add	r7, sp, #8
 800235e:	6078      	str	r0, [r7, #4]
	controller_update(adcVal);
 8002360:	4b05      	ldr	r3, [pc, #20]	; (8002378 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002362:	691a      	ldr	r2, [r3, #16]
 8002364:	9200      	str	r2, [sp, #0]
 8002366:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002368:	f7ff f8f2 	bl	8001550 <controller_update>
	controller_print();
 800236c:	f7ff f942 	bl	80015f4 <controller_print>
}
 8002370:	bf00      	nop
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	20000784 	.word	0x20000784

0800237c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002380:	b672      	cpsid	i
}
 8002382:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002384:	e7fe      	b.n	8002384 <Error_Handler+0x8>
	...

08002388 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800238e:	4b0f      	ldr	r3, [pc, #60]	; (80023cc <HAL_MspInit+0x44>)
 8002390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002392:	4a0e      	ldr	r2, [pc, #56]	; (80023cc <HAL_MspInit+0x44>)
 8002394:	f043 0301 	orr.w	r3, r3, #1
 8002398:	6613      	str	r3, [r2, #96]	; 0x60
 800239a:	4b0c      	ldr	r3, [pc, #48]	; (80023cc <HAL_MspInit+0x44>)
 800239c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	607b      	str	r3, [r7, #4]
 80023a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023a6:	4b09      	ldr	r3, [pc, #36]	; (80023cc <HAL_MspInit+0x44>)
 80023a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023aa:	4a08      	ldr	r2, [pc, #32]	; (80023cc <HAL_MspInit+0x44>)
 80023ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023b0:	6593      	str	r3, [r2, #88]	; 0x58
 80023b2:	4b06      	ldr	r3, [pc, #24]	; (80023cc <HAL_MspInit+0x44>)
 80023b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ba:	603b      	str	r3, [r7, #0]
 80023bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80023be:	f004 fa6f 	bl	80068a0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	40021000 	.word	0x40021000

080023d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 80023d4:	2201      	movs	r2, #1
 80023d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023da:	4802      	ldr	r0, [pc, #8]	; (80023e4 <NMI_Handler+0x14>)
 80023dc:	f002 fd4e 	bl	8004e7c <HAL_GPIO_WritePin>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023e0:	e7fe      	b.n	80023e0 <NMI_Handler+0x10>
 80023e2:	bf00      	nop
 80023e4:	48000800 	.word	0x48000800

080023e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 80023ec:	2201      	movs	r2, #1
 80023ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023f2:	4802      	ldr	r0, [pc, #8]	; (80023fc <HardFault_Handler+0x14>)
 80023f4:	f002 fd42 	bl	8004e7c <HAL_GPIO_WritePin>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023f8:	e7fe      	b.n	80023f8 <HardFault_Handler+0x10>
 80023fa:	bf00      	nop
 80023fc:	48000800 	.word	0x48000800

08002400 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 8002404:	2201      	movs	r2, #1
 8002406:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800240a:	4802      	ldr	r0, [pc, #8]	; (8002414 <MemManage_Handler+0x14>)
 800240c:	f002 fd36 	bl	8004e7c <HAL_GPIO_WritePin>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002410:	e7fe      	b.n	8002410 <MemManage_Handler+0x10>
 8002412:	bf00      	nop
 8002414:	48000800 	.word	0x48000800

08002418 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 800241c:	2201      	movs	r2, #1
 800241e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002422:	4802      	ldr	r0, [pc, #8]	; (800242c <BusFault_Handler+0x14>)
 8002424:	f002 fd2a 	bl	8004e7c <HAL_GPIO_WritePin>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002428:	e7fe      	b.n	8002428 <BusFault_Handler+0x10>
 800242a:	bf00      	nop
 800242c:	48000800 	.word	0x48000800

08002430 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 8002434:	2201      	movs	r2, #1
 8002436:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800243a:	4802      	ldr	r0, [pc, #8]	; (8002444 <UsageFault_Handler+0x14>)
 800243c:	f002 fd1e 	bl	8004e7c <HAL_GPIO_WritePin>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002440:	e7fe      	b.n	8002440 <UsageFault_Handler+0x10>
 8002442:	bf00      	nop
 8002444:	48000800 	.word	0x48000800

08002448 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 800244c:	2201      	movs	r2, #1
 800244e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002452:	4802      	ldr	r0, [pc, #8]	; (800245c <SVC_Handler+0x14>)
 8002454:	f002 fd12 	bl	8004e7c <HAL_GPIO_WritePin>
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002458:	bf00      	nop
 800245a:	bd80      	pop	{r7, pc}
 800245c:	48000800 	.word	0x48000800

08002460 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 8002464:	2201      	movs	r2, #1
 8002466:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800246a:	4802      	ldr	r0, [pc, #8]	; (8002474 <DebugMon_Handler+0x14>)
 800246c:	f002 fd06 	bl	8004e7c <HAL_GPIO_WritePin>
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002470:	bf00      	nop
 8002472:	bd80      	pop	{r7, pc}
 8002474:	48000800 	.word	0x48000800

08002478 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 800247c:	2201      	movs	r2, #1
 800247e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002482:	4802      	ldr	r0, [pc, #8]	; (800248c <PendSV_Handler+0x14>)
 8002484:	f002 fcfa 	bl	8004e7c <HAL_GPIO_WritePin>
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002488:	bf00      	nop
 800248a:	bd80      	pop	{r7, pc}
 800248c:	48000800 	.word	0x48000800

08002490 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002494:	f000 faaa 	bl	80029ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002498:	bf00      	nop
 800249a:	bd80      	pop	{r7, pc}

0800249c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80024a0:	4802      	ldr	r0, [pc, #8]	; (80024ac <DMA1_Channel1_IRQHandler+0x10>)
 80024a2:	f002 fa1a 	bl	80048da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	200007e4 	.word	0x200007e4

080024b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80024b4:	4802      	ldr	r0, [pc, #8]	; (80024c0 <TIM2_IRQHandler+0x10>)
 80024b6:	f005 fa53 	bl	8007960 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80024ba:	bf00      	nop
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	20000798 	.word	0x20000798

080024c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80024c8:	4802      	ldr	r0, [pc, #8]	; (80024d4 <USART1_IRQHandler+0x10>)
 80024ca:	f005 fff3 	bl	80084b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80024ce:	bf00      	nop
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	20000844 	.word	0x20000844

080024d8 <_getpid>:
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
 80024dc:	2301      	movs	r3, #1
 80024de:	4618      	mov	r0, r3
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <_kill>:
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
 80024f2:	f007 f88d 	bl	8009610 <__errno>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2216      	movs	r2, #22
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002500:	4618      	mov	r0, r3
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <_exit>:
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	f04f 31ff 	mov.w	r1, #4294967295
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f7ff ffe7 	bl	80024e8 <_kill>
 800251a:	e7fe      	b.n	800251a <_exit+0x12>

0800251c <_read>:
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
 8002528:	2300      	movs	r3, #0
 800252a:	617b      	str	r3, [r7, #20]
 800252c:	e00a      	b.n	8002544 <_read+0x28>
 800252e:	f3af 8000 	nop.w
 8002532:	4601      	mov	r1, r0
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	1c5a      	adds	r2, r3, #1
 8002538:	60ba      	str	r2, [r7, #8]
 800253a:	b2ca      	uxtb	r2, r1
 800253c:	701a      	strb	r2, [r3, #0]
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	3301      	adds	r3, #1
 8002542:	617b      	str	r3, [r7, #20]
 8002544:	697a      	ldr	r2, [r7, #20]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	429a      	cmp	r2, r3
 800254a:	dbf0      	blt.n	800252e <_read+0x12>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4618      	mov	r0, r3
 8002550:	3718      	adds	r7, #24
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <_write>:
 8002556:	b580      	push	{r7, lr}
 8002558:	b086      	sub	sp, #24
 800255a:	af00      	add	r7, sp, #0
 800255c:	60f8      	str	r0, [r7, #12]
 800255e:	60b9      	str	r1, [r7, #8]
 8002560:	607a      	str	r2, [r7, #4]
 8002562:	2300      	movs	r3, #0
 8002564:	617b      	str	r3, [r7, #20]
 8002566:	e009      	b.n	800257c <_write+0x26>
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	1c5a      	adds	r2, r3, #1
 800256c:	60ba      	str	r2, [r7, #8]
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f3af 8000 	nop.w
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	3301      	adds	r3, #1
 800257a:	617b      	str	r3, [r7, #20]
 800257c:	697a      	ldr	r2, [r7, #20]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	429a      	cmp	r2, r3
 8002582:	dbf1      	blt.n	8002568 <_write+0x12>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4618      	mov	r0, r3
 8002588:	3718      	adds	r7, #24
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <_close>:
 800258e:	b480      	push	{r7}
 8002590:	b083      	sub	sp, #12
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
 8002596:	f04f 33ff 	mov.w	r3, #4294967295
 800259a:	4618      	mov	r0, r3
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr

080025a6 <_fstat>:
 80025a6:	b480      	push	{r7}
 80025a8:	b083      	sub	sp, #12
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
 80025ae:	6039      	str	r1, [r7, #0]
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025b6:	605a      	str	r2, [r3, #4]
 80025b8:	2300      	movs	r3, #0
 80025ba:	4618      	mov	r0, r3
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <_isatty>:
 80025c6:	b480      	push	{r7}
 80025c8:	b083      	sub	sp, #12
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
 80025ce:	2301      	movs	r3, #1
 80025d0:	4618      	mov	r0, r3
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <_lseek>:
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
 80025e8:	2300      	movs	r3, #0
 80025ea:	4618      	mov	r0, r3
 80025ec:	3714      	adds	r7, #20
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
	...

080025f8 <_sbrk>:
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	4a14      	ldr	r2, [pc, #80]	; (8002654 <_sbrk+0x5c>)
 8002602:	4b15      	ldr	r3, [pc, #84]	; (8002658 <_sbrk+0x60>)
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	617b      	str	r3, [r7, #20]
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	613b      	str	r3, [r7, #16]
 800260c:	4b13      	ldr	r3, [pc, #76]	; (800265c <_sbrk+0x64>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d102      	bne.n	800261a <_sbrk+0x22>
 8002614:	4b11      	ldr	r3, [pc, #68]	; (800265c <_sbrk+0x64>)
 8002616:	4a12      	ldr	r2, [pc, #72]	; (8002660 <_sbrk+0x68>)
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	4b10      	ldr	r3, [pc, #64]	; (800265c <_sbrk+0x64>)
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4413      	add	r3, r2
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	429a      	cmp	r2, r3
 8002626:	d207      	bcs.n	8002638 <_sbrk+0x40>
 8002628:	f006 fff2 	bl	8009610 <__errno>
 800262c:	4603      	mov	r3, r0
 800262e:	220c      	movs	r2, #12
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	f04f 33ff 	mov.w	r3, #4294967295
 8002636:	e009      	b.n	800264c <_sbrk+0x54>
 8002638:	4b08      	ldr	r3, [pc, #32]	; (800265c <_sbrk+0x64>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	4b07      	ldr	r3, [pc, #28]	; (800265c <_sbrk+0x64>)
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4413      	add	r3, r2
 8002646:	4a05      	ldr	r2, [pc, #20]	; (800265c <_sbrk+0x64>)
 8002648:	6013      	str	r3, [r2, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	4618      	mov	r0, r3
 800264e:	3718      	adds	r7, #24
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	20020000 	.word	0x20020000
 8002658:	00000400 	.word	0x00000400
 800265c:	2000020c 	.word	0x2000020c
 8002660:	200008e8 	.word	0x200008e8

08002664 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002668:	4b06      	ldr	r3, [pc, #24]	; (8002684 <SystemInit+0x20>)
 800266a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800266e:	4a05      	ldr	r2, [pc, #20]	; (8002684 <SystemInit+0x20>)
 8002670:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002674:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002678:	bf00      	nop
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	e000ed00 	.word	0xe000ed00

08002688 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b088      	sub	sp, #32
 800268c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800268e:	f107 0310 	add.w	r3, r7, #16
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	605a      	str	r2, [r3, #4]
 8002698:	609a      	str	r2, [r3, #8]
 800269a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800269c:	1d3b      	adds	r3, r7, #4
 800269e:	2200      	movs	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	605a      	str	r2, [r3, #4]
 80026a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80026a6:	4b1d      	ldr	r3, [pc, #116]	; (800271c <MX_TIM2_Init+0x94>)
 80026a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026ac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80026ae:	4b1b      	ldr	r3, [pc, #108]	; (800271c <MX_TIM2_Init+0x94>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026b4:	4b19      	ldr	r3, [pc, #100]	; (800271c <MX_TIM2_Init+0x94>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2.125E7;
 80026ba:	4b18      	ldr	r3, [pc, #96]	; (800271c <MX_TIM2_Init+0x94>)
 80026bc:	4a18      	ldr	r2, [pc, #96]	; (8002720 <MX_TIM2_Init+0x98>)
 80026be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026c0:	4b16      	ldr	r3, [pc, #88]	; (800271c <MX_TIM2_Init+0x94>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026c6:	4b15      	ldr	r3, [pc, #84]	; (800271c <MX_TIM2_Init+0x94>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80026cc:	4813      	ldr	r0, [pc, #76]	; (800271c <MX_TIM2_Init+0x94>)
 80026ce:	f005 f877 	bl	80077c0 <HAL_TIM_Base_Init>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80026d8:	f7ff fe50 	bl	800237c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80026e2:	f107 0310 	add.w	r3, r7, #16
 80026e6:	4619      	mov	r1, r3
 80026e8:	480c      	ldr	r0, [pc, #48]	; (800271c <MX_TIM2_Init+0x94>)
 80026ea:	f005 fab9 	bl	8007c60 <HAL_TIM_ConfigClockSource>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80026f4:	f7ff fe42 	bl	800237c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80026f8:	2310      	movs	r3, #16
 80026fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026fc:	2300      	movs	r3, #0
 80026fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002700:	1d3b      	adds	r3, r7, #4
 8002702:	4619      	mov	r1, r3
 8002704:	4805      	ldr	r0, [pc, #20]	; (800271c <MX_TIM2_Init+0x94>)
 8002706:	f005 fd29 	bl	800815c <HAL_TIMEx_MasterConfigSynchronization>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002710:	f7ff fe34 	bl	800237c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002714:	bf00      	nop
 8002716:	3720      	adds	r7, #32
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	20000798 	.word	0x20000798
 8002720:	01443fd0 	.word	0x01443fd0

08002724 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002734:	d113      	bne.n	800275e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002736:	4b0c      	ldr	r3, [pc, #48]	; (8002768 <HAL_TIM_Base_MspInit+0x44>)
 8002738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273a:	4a0b      	ldr	r2, [pc, #44]	; (8002768 <HAL_TIM_Base_MspInit+0x44>)
 800273c:	f043 0301 	orr.w	r3, r3, #1
 8002740:	6593      	str	r3, [r2, #88]	; 0x58
 8002742:	4b09      	ldr	r3, [pc, #36]	; (8002768 <HAL_TIM_Base_MspInit+0x44>)
 8002744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800274e:	2200      	movs	r2, #0
 8002750:	2100      	movs	r1, #0
 8002752:	201c      	movs	r0, #28
 8002754:	f001 fea9 	bl	80044aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002758:	201c      	movs	r0, #28
 800275a:	f001 fec0 	bl	80044de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800275e:	bf00      	nop
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	40021000 	.word	0x40021000

0800276c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002770:	4b22      	ldr	r3, [pc, #136]	; (80027fc <MX_USART1_UART_Init+0x90>)
 8002772:	4a23      	ldr	r2, [pc, #140]	; (8002800 <MX_USART1_UART_Init+0x94>)
 8002774:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8002776:	4b21      	ldr	r3, [pc, #132]	; (80027fc <MX_USART1_UART_Init+0x90>)
 8002778:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800277c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800277e:	4b1f      	ldr	r3, [pc, #124]	; (80027fc <MX_USART1_UART_Init+0x90>)
 8002780:	2200      	movs	r2, #0
 8002782:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002784:	4b1d      	ldr	r3, [pc, #116]	; (80027fc <MX_USART1_UART_Init+0x90>)
 8002786:	2200      	movs	r2, #0
 8002788:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800278a:	4b1c      	ldr	r3, [pc, #112]	; (80027fc <MX_USART1_UART_Init+0x90>)
 800278c:	2200      	movs	r2, #0
 800278e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002790:	4b1a      	ldr	r3, [pc, #104]	; (80027fc <MX_USART1_UART_Init+0x90>)
 8002792:	220c      	movs	r2, #12
 8002794:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002796:	4b19      	ldr	r3, [pc, #100]	; (80027fc <MX_USART1_UART_Init+0x90>)
 8002798:	2200      	movs	r2, #0
 800279a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800279c:	4b17      	ldr	r3, [pc, #92]	; (80027fc <MX_USART1_UART_Init+0x90>)
 800279e:	2200      	movs	r2, #0
 80027a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027a2:	4b16      	ldr	r3, [pc, #88]	; (80027fc <MX_USART1_UART_Init+0x90>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80027a8:	4b14      	ldr	r3, [pc, #80]	; (80027fc <MX_USART1_UART_Init+0x90>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027ae:	4b13      	ldr	r3, [pc, #76]	; (80027fc <MX_USART1_UART_Init+0x90>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027b4:	4811      	ldr	r0, [pc, #68]	; (80027fc <MX_USART1_UART_Init+0x90>)
 80027b6:	f005 fdad 	bl	8008314 <HAL_UART_Init>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80027c0:	f7ff fddc 	bl	800237c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027c4:	2100      	movs	r1, #0
 80027c6:	480d      	ldr	r0, [pc, #52]	; (80027fc <MX_USART1_UART_Init+0x90>)
 80027c8:	f006 fe58 	bl	800947c <HAL_UARTEx_SetTxFifoThreshold>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80027d2:	f7ff fdd3 	bl	800237c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027d6:	2100      	movs	r1, #0
 80027d8:	4808      	ldr	r0, [pc, #32]	; (80027fc <MX_USART1_UART_Init+0x90>)
 80027da:	f006 fe8d 	bl	80094f8 <HAL_UARTEx_SetRxFifoThreshold>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80027e4:	f7ff fdca 	bl	800237c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80027e8:	4804      	ldr	r0, [pc, #16]	; (80027fc <MX_USART1_UART_Init+0x90>)
 80027ea:	f006 fe0e 	bl	800940a <HAL_UARTEx_DisableFifoMode>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80027f4:	f7ff fdc2 	bl	800237c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80027f8:	bf00      	nop
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	20000844 	.word	0x20000844
 8002800:	40013800 	.word	0x40013800

08002804 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b08a      	sub	sp, #40	; 0x28
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800280c:	f107 0314 	add.w	r3, r7, #20
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	605a      	str	r2, [r3, #4]
 8002816:	609a      	str	r2, [r3, #8]
 8002818:	60da      	str	r2, [r3, #12]
 800281a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a2f      	ldr	r2, [pc, #188]	; (80028e0 <HAL_UART_MspInit+0xdc>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d158      	bne.n	80028d8 <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002826:	4b2f      	ldr	r3, [pc, #188]	; (80028e4 <HAL_UART_MspInit+0xe0>)
 8002828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800282a:	4a2e      	ldr	r2, [pc, #184]	; (80028e4 <HAL_UART_MspInit+0xe0>)
 800282c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002830:	6613      	str	r3, [r2, #96]	; 0x60
 8002832:	4b2c      	ldr	r3, [pc, #176]	; (80028e4 <HAL_UART_MspInit+0xe0>)
 8002834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800283a:	613b      	str	r3, [r7, #16]
 800283c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800283e:	4b29      	ldr	r3, [pc, #164]	; (80028e4 <HAL_UART_MspInit+0xe0>)
 8002840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002842:	4a28      	ldr	r2, [pc, #160]	; (80028e4 <HAL_UART_MspInit+0xe0>)
 8002844:	f043 0304 	orr.w	r3, r3, #4
 8002848:	64d3      	str	r3, [r2, #76]	; 0x4c
 800284a:	4b26      	ldr	r3, [pc, #152]	; (80028e4 <HAL_UART_MspInit+0xe0>)
 800284c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800284e:	f003 0304 	and.w	r3, r3, #4
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002856:	2330      	movs	r3, #48	; 0x30
 8002858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285a:	2302      	movs	r3, #2
 800285c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285e:	2300      	movs	r3, #0
 8002860:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002862:	2300      	movs	r3, #0
 8002864:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002866:	2307      	movs	r3, #7
 8002868:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800286a:	f107 0314 	add.w	r3, r7, #20
 800286e:	4619      	mov	r1, r3
 8002870:	481d      	ldr	r0, [pc, #116]	; (80028e8 <HAL_UART_MspInit+0xe4>)
 8002872:	f002 f981 	bl	8004b78 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8002876:	4b1d      	ldr	r3, [pc, #116]	; (80028ec <HAL_UART_MspInit+0xe8>)
 8002878:	4a1d      	ldr	r2, [pc, #116]	; (80028f0 <HAL_UART_MspInit+0xec>)
 800287a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800287c:	4b1b      	ldr	r3, [pc, #108]	; (80028ec <HAL_UART_MspInit+0xe8>)
 800287e:	2219      	movs	r2, #25
 8002880:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002882:	4b1a      	ldr	r3, [pc, #104]	; (80028ec <HAL_UART_MspInit+0xe8>)
 8002884:	2210      	movs	r2, #16
 8002886:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002888:	4b18      	ldr	r3, [pc, #96]	; (80028ec <HAL_UART_MspInit+0xe8>)
 800288a:	2200      	movs	r2, #0
 800288c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800288e:	4b17      	ldr	r3, [pc, #92]	; (80028ec <HAL_UART_MspInit+0xe8>)
 8002890:	2280      	movs	r2, #128	; 0x80
 8002892:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002894:	4b15      	ldr	r3, [pc, #84]	; (80028ec <HAL_UART_MspInit+0xe8>)
 8002896:	2200      	movs	r2, #0
 8002898:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800289a:	4b14      	ldr	r3, [pc, #80]	; (80028ec <HAL_UART_MspInit+0xe8>)
 800289c:	2200      	movs	r2, #0
 800289e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80028a0:	4b12      	ldr	r3, [pc, #72]	; (80028ec <HAL_UART_MspInit+0xe8>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80028a6:	4b11      	ldr	r3, [pc, #68]	; (80028ec <HAL_UART_MspInit+0xe8>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80028ac:	480f      	ldr	r0, [pc, #60]	; (80028ec <HAL_UART_MspInit+0xe8>)
 80028ae:	f001 fe31 	bl	8004514 <HAL_DMA_Init>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <HAL_UART_MspInit+0xb8>
    {
      Error_Handler();
 80028b8:	f7ff fd60 	bl	800237c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a0b      	ldr	r2, [pc, #44]	; (80028ec <HAL_UART_MspInit+0xe8>)
 80028c0:	679a      	str	r2, [r3, #120]	; 0x78
 80028c2:	4a0a      	ldr	r2, [pc, #40]	; (80028ec <HAL_UART_MspInit+0xe8>)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80028c8:	2200      	movs	r2, #0
 80028ca:	2100      	movs	r1, #0
 80028cc:	2025      	movs	r0, #37	; 0x25
 80028ce:	f001 fdec 	bl	80044aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80028d2:	2025      	movs	r0, #37	; 0x25
 80028d4:	f001 fe03 	bl	80044de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80028d8:	bf00      	nop
 80028da:	3728      	adds	r7, #40	; 0x28
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40013800 	.word	0x40013800
 80028e4:	40021000 	.word	0x40021000
 80028e8:	48000800 	.word	0x48000800
 80028ec:	200007e4 	.word	0x200007e4
 80028f0:	40020008 	.word	0x40020008

080028f4 <Reset_Handler>:
 80028f4:	480d      	ldr	r0, [pc, #52]	; (800292c <LoopForever+0x2>)
 80028f6:	4685      	mov	sp, r0
 80028f8:	480d      	ldr	r0, [pc, #52]	; (8002930 <LoopForever+0x6>)
 80028fa:	490e      	ldr	r1, [pc, #56]	; (8002934 <LoopForever+0xa>)
 80028fc:	4a0e      	ldr	r2, [pc, #56]	; (8002938 <LoopForever+0xe>)
 80028fe:	2300      	movs	r3, #0
 8002900:	e002      	b.n	8002908 <LoopCopyDataInit>

08002902 <CopyDataInit>:
 8002902:	58d4      	ldr	r4, [r2, r3]
 8002904:	50c4      	str	r4, [r0, r3]
 8002906:	3304      	adds	r3, #4

08002908 <LoopCopyDataInit>:
 8002908:	18c4      	adds	r4, r0, r3
 800290a:	428c      	cmp	r4, r1
 800290c:	d3f9      	bcc.n	8002902 <CopyDataInit>
 800290e:	4a0b      	ldr	r2, [pc, #44]	; (800293c <LoopForever+0x12>)
 8002910:	4c0b      	ldr	r4, [pc, #44]	; (8002940 <LoopForever+0x16>)
 8002912:	2300      	movs	r3, #0
 8002914:	e001      	b.n	800291a <LoopFillZerobss>

08002916 <FillZerobss>:
 8002916:	6013      	str	r3, [r2, #0]
 8002918:	3204      	adds	r2, #4

0800291a <LoopFillZerobss>:
 800291a:	42a2      	cmp	r2, r4
 800291c:	d3fb      	bcc.n	8002916 <FillZerobss>
 800291e:	f7ff fea1 	bl	8002664 <SystemInit>
 8002922:	f006 fe7b 	bl	800961c <__libc_init_array>
 8002926:	f7ff fc3d 	bl	80021a4 <main>

0800292a <LoopForever>:
 800292a:	e7fe      	b.n	800292a <LoopForever>
 800292c:	20020000 	.word	0x20020000
 8002930:	20000000 	.word	0x20000000
 8002934:	200001e4 	.word	0x200001e4
 8002938:	0800cc9c 	.word	0x0800cc9c
 800293c:	200001e4 	.word	0x200001e4
 8002940:	200008e8 	.word	0x200008e8

08002944 <ADC1_2_IRQHandler>:
 8002944:	e7fe      	b.n	8002944 <ADC1_2_IRQHandler>

08002946 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b082      	sub	sp, #8
 800294a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800294c:	2300      	movs	r3, #0
 800294e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002950:	2003      	movs	r0, #3
 8002952:	f001 fd9f 	bl	8004494 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002956:	2000      	movs	r0, #0
 8002958:	f000 f80e 	bl	8002978 <HAL_InitTick>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d002      	beq.n	8002968 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	71fb      	strb	r3, [r7, #7]
 8002966:	e001      	b.n	800296c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002968:	f7ff fd0e 	bl	8002388 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800296c:	79fb      	ldrb	r3, [r7, #7]

}
 800296e:	4618      	mov	r0, r3
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
	...

08002978 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002980:	2300      	movs	r3, #0
 8002982:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002984:	4b16      	ldr	r3, [pc, #88]	; (80029e0 <HAL_InitTick+0x68>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d022      	beq.n	80029d2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800298c:	4b15      	ldr	r3, [pc, #84]	; (80029e4 <HAL_InitTick+0x6c>)
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	4b13      	ldr	r3, [pc, #76]	; (80029e0 <HAL_InitTick+0x68>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002998:	fbb1 f3f3 	udiv	r3, r1, r3
 800299c:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a0:	4618      	mov	r0, r3
 80029a2:	f001 fdaa 	bl	80044fa <HAL_SYSTICK_Config>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d10f      	bne.n	80029cc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2b0f      	cmp	r3, #15
 80029b0:	d809      	bhi.n	80029c6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029b2:	2200      	movs	r2, #0
 80029b4:	6879      	ldr	r1, [r7, #4]
 80029b6:	f04f 30ff 	mov.w	r0, #4294967295
 80029ba:	f001 fd76 	bl	80044aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80029be:	4a0a      	ldr	r2, [pc, #40]	; (80029e8 <HAL_InitTick+0x70>)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6013      	str	r3, [r2, #0]
 80029c4:	e007      	b.n	80029d6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	73fb      	strb	r3, [r7, #15]
 80029ca:	e004      	b.n	80029d6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	73fb      	strb	r3, [r7, #15]
 80029d0:	e001      	b.n	80029d6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80029d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	2000000c 	.word	0x2000000c
 80029e4:	20000004 	.word	0x20000004
 80029e8:	20000008 	.word	0x20000008

080029ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029f0:	4b05      	ldr	r3, [pc, #20]	; (8002a08 <HAL_IncTick+0x1c>)
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	4b05      	ldr	r3, [pc, #20]	; (8002a0c <HAL_IncTick+0x20>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4413      	add	r3, r2
 80029fa:	4a03      	ldr	r2, [pc, #12]	; (8002a08 <HAL_IncTick+0x1c>)
 80029fc:	6013      	str	r3, [r2, #0]
}
 80029fe:	bf00      	nop
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr
 8002a08:	200008d4 	.word	0x200008d4
 8002a0c:	2000000c 	.word	0x2000000c

08002a10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  return uwTick;
 8002a14:	4b03      	ldr	r3, [pc, #12]	; (8002a24 <HAL_GetTick+0x14>)
 8002a16:	681b      	ldr	r3, [r3, #0]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	200008d4 	.word	0x200008d4

08002a28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a30:	f7ff ffee 	bl	8002a10 <HAL_GetTick>
 8002a34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a40:	d004      	beq.n	8002a4c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a42:	4b09      	ldr	r3, [pc, #36]	; (8002a68 <HAL_Delay+0x40>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	4413      	add	r3, r2
 8002a4a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a4c:	bf00      	nop
 8002a4e:	f7ff ffdf 	bl	8002a10 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d8f7      	bhi.n	8002a4e <HAL_Delay+0x26>
  {
  }
}
 8002a5e:	bf00      	nop
 8002a60:	bf00      	nop
 8002a62:	3710      	adds	r7, #16
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	2000000c 	.word	0x2000000c

08002a6c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	431a      	orrs	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	609a      	str	r2, [r3, #8]
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
 8002a9a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	609a      	str	r2, [r3, #8]
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b087      	sub	sp, #28
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
 8002ae0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	3360      	adds	r3, #96	; 0x60
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	4b08      	ldr	r3, [pc, #32]	; (8002b18 <LL_ADC_SetOffset+0x44>)
 8002af6:	4013      	ands	r3, r2
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	430a      	orrs	r2, r1
 8002b02:	4313      	orrs	r3, r2
 8002b04:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002b0c:	bf00      	nop
 8002b0e:	371c      	adds	r7, #28
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	03fff000 	.word	0x03fff000

08002b1c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	3360      	adds	r3, #96	; 0x60
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	4413      	add	r3, r2
 8002b32:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b087      	sub	sp, #28
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	3360      	adds	r3, #96	; 0x60
 8002b58:	461a      	mov	r2, r3
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4413      	add	r3, r2
 8002b60:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002b72:	bf00      	nop
 8002b74:	371c      	adds	r7, #28
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr

08002b7e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	b087      	sub	sp, #28
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	60f8      	str	r0, [r7, #12]
 8002b86:	60b9      	str	r1, [r7, #8]
 8002b88:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	3360      	adds	r3, #96	; 0x60
 8002b8e:	461a      	mov	r2, r3
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4413      	add	r3, r2
 8002b96:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002ba8:	bf00      	nop
 8002baa:	371c      	adds	r7, #28
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b087      	sub	sp, #28
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	3360      	adds	r3, #96	; 0x60
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4413      	add	r3, r2
 8002bcc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002bde:	bf00      	nop
 8002be0:	371c      	adds	r7, #28
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b083      	sub	sp, #12
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
 8002bf2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	695b      	ldr	r3, [r3, #20]
 8002bf8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	615a      	str	r2, [r3, #20]
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d101      	bne.n	8002c28 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002c24:	2301      	movs	r3, #1
 8002c26:	e000      	b.n	8002c2a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c36:	b480      	push	{r7}
 8002c38:	b087      	sub	sp, #28
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	60f8      	str	r0, [r7, #12]
 8002c3e:	60b9      	str	r1, [r7, #8]
 8002c40:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	3330      	adds	r3, #48	; 0x30
 8002c46:	461a      	mov	r2, r3
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	0a1b      	lsrs	r3, r3, #8
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	f003 030c 	and.w	r3, r3, #12
 8002c52:	4413      	add	r3, r2
 8002c54:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	f003 031f 	and.w	r3, r3, #31
 8002c60:	211f      	movs	r1, #31
 8002c62:	fa01 f303 	lsl.w	r3, r1, r3
 8002c66:	43db      	mvns	r3, r3
 8002c68:	401a      	ands	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	0e9b      	lsrs	r3, r3, #26
 8002c6e:	f003 011f 	and.w	r1, r3, #31
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	f003 031f 	and.w	r3, r3, #31
 8002c78:	fa01 f303 	lsl.w	r3, r1, r3
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c82:	bf00      	nop
 8002c84:	371c      	adds	r7, #28
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr

08002c8e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	b087      	sub	sp, #28
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	60f8      	str	r0, [r7, #12]
 8002c96:	60b9      	str	r1, [r7, #8]
 8002c98:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	3314      	adds	r3, #20
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	0e5b      	lsrs	r3, r3, #25
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	f003 0304 	and.w	r3, r3, #4
 8002caa:	4413      	add	r3, r2
 8002cac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	0d1b      	lsrs	r3, r3, #20
 8002cb6:	f003 031f 	and.w	r3, r3, #31
 8002cba:	2107      	movs	r1, #7
 8002cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	401a      	ands	r2, r3
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	0d1b      	lsrs	r3, r3, #20
 8002cc8:	f003 031f 	and.w	r3, r3, #31
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002cd8:	bf00      	nop
 8002cda:	371c      	adds	r7, #28
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	401a      	ands	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f003 0318 	and.w	r3, r3, #24
 8002d06:	4908      	ldr	r1, [pc, #32]	; (8002d28 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002d08:	40d9      	lsrs	r1, r3
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	400b      	ands	r3, r1
 8002d0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d12:	431a      	orrs	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002d1a:	bf00      	nop
 8002d1c:	3714      	adds	r7, #20
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	0007ffff 	.word	0x0007ffff

08002d2c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f003 031f 	and.w	r3, r3, #31
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002d58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	6093      	str	r3, [r2, #8]
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d80:	d101      	bne.n	8002d86 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d82:	2301      	movs	r3, #1
 8002d84:	e000      	b.n	8002d88 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002da4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002da8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dcc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dd0:	d101      	bne.n	8002dd6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e000      	b.n	8002dd8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002df4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002df8:	f043 0201 	orr.w	r2, r3, #1
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e20:	f043 0202 	orr.w	r2, r3, #2
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d101      	bne.n	8002e4c <LL_ADC_IsEnabled+0x18>
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e000      	b.n	8002e4e <LL_ADC_IsEnabled+0x1a>
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr

08002e5a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b083      	sub	sp, #12
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d101      	bne.n	8002e72 <LL_ADC_IsDisableOngoing+0x18>
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e000      	b.n	8002e74 <LL_ADC_IsDisableOngoing+0x1a>
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e94:	f043 0204 	orr.w	r2, r3, #4
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	2b04      	cmp	r3, #4
 8002eba:	d101      	bne.n	8002ec0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e000      	b.n	8002ec2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr

08002ece <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b083      	sub	sp, #12
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f003 0308 	and.w	r3, r3, #8
 8002ede:	2b08      	cmp	r3, #8
 8002ee0:	d101      	bne.n	8002ee6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e000      	b.n	8002ee8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ef4:	b590      	push	{r4, r7, lr}
 8002ef6:	b089      	sub	sp, #36	; 0x24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002efc:	2300      	movs	r3, #0
 8002efe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002f00:	2300      	movs	r3, #0
 8002f02:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e1af      	b.n	800326e <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d109      	bne.n	8002f30 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f7fe f9c5 	bl	80012ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff ff19 	bl	8002d6c <LL_ADC_IsDeepPowerDownEnabled>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d004      	beq.n	8002f4a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff feff 	bl	8002d48 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff ff34 	bl	8002dbc <LL_ADC_IsInternalRegulatorEnabled>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d115      	bne.n	8002f86 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7ff ff18 	bl	8002d94 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f64:	4b9f      	ldr	r3, [pc, #636]	; (80031e4 <HAL_ADC_Init+0x2f0>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	099b      	lsrs	r3, r3, #6
 8002f6a:	4a9f      	ldr	r2, [pc, #636]	; (80031e8 <HAL_ADC_Init+0x2f4>)
 8002f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f70:	099b      	lsrs	r3, r3, #6
 8002f72:	3301      	adds	r3, #1
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f78:	e002      	b.n	8002f80 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1f9      	bne.n	8002f7a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7ff ff16 	bl	8002dbc <LL_ADC_IsInternalRegulatorEnabled>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d10d      	bne.n	8002fb2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f9a:	f043 0210 	orr.w	r2, r3, #16
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fa6:	f043 0201 	orr.w	r2, r3, #1
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7ff ff76 	bl	8002ea8 <LL_ADC_REG_IsConversionOngoing>
 8002fbc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc2:	f003 0310 	and.w	r3, r3, #16
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f040 8148 	bne.w	800325c <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f040 8144 	bne.w	800325c <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002fdc:	f043 0202 	orr.w	r2, r3, #2
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7ff ff23 	bl	8002e34 <LL_ADC_IsEnabled>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d141      	bne.n	8003078 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ffc:	d004      	beq.n	8003008 <HAL_ADC_Init+0x114>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a7a      	ldr	r2, [pc, #488]	; (80031ec <HAL_ADC_Init+0x2f8>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d10f      	bne.n	8003028 <HAL_ADC_Init+0x134>
 8003008:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800300c:	f7ff ff12 	bl	8002e34 <LL_ADC_IsEnabled>
 8003010:	4604      	mov	r4, r0
 8003012:	4876      	ldr	r0, [pc, #472]	; (80031ec <HAL_ADC_Init+0x2f8>)
 8003014:	f7ff ff0e 	bl	8002e34 <LL_ADC_IsEnabled>
 8003018:	4603      	mov	r3, r0
 800301a:	4323      	orrs	r3, r4
 800301c:	2b00      	cmp	r3, #0
 800301e:	bf0c      	ite	eq
 8003020:	2301      	moveq	r3, #1
 8003022:	2300      	movne	r3, #0
 8003024:	b2db      	uxtb	r3, r3
 8003026:	e012      	b.n	800304e <HAL_ADC_Init+0x15a>
 8003028:	4871      	ldr	r0, [pc, #452]	; (80031f0 <HAL_ADC_Init+0x2fc>)
 800302a:	f7ff ff03 	bl	8002e34 <LL_ADC_IsEnabled>
 800302e:	4604      	mov	r4, r0
 8003030:	4870      	ldr	r0, [pc, #448]	; (80031f4 <HAL_ADC_Init+0x300>)
 8003032:	f7ff feff 	bl	8002e34 <LL_ADC_IsEnabled>
 8003036:	4603      	mov	r3, r0
 8003038:	431c      	orrs	r4, r3
 800303a:	486f      	ldr	r0, [pc, #444]	; (80031f8 <HAL_ADC_Init+0x304>)
 800303c:	f7ff fefa 	bl	8002e34 <LL_ADC_IsEnabled>
 8003040:	4603      	mov	r3, r0
 8003042:	4323      	orrs	r3, r4
 8003044:	2b00      	cmp	r3, #0
 8003046:	bf0c      	ite	eq
 8003048:	2301      	moveq	r3, #1
 800304a:	2300      	movne	r3, #0
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d012      	beq.n	8003078 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800305a:	d004      	beq.n	8003066 <HAL_ADC_Init+0x172>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a62      	ldr	r2, [pc, #392]	; (80031ec <HAL_ADC_Init+0x2f8>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d101      	bne.n	800306a <HAL_ADC_Init+0x176>
 8003066:	4a65      	ldr	r2, [pc, #404]	; (80031fc <HAL_ADC_Init+0x308>)
 8003068:	e000      	b.n	800306c <HAL_ADC_Init+0x178>
 800306a:	4a65      	ldr	r2, [pc, #404]	; (8003200 <HAL_ADC_Init+0x30c>)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	4619      	mov	r1, r3
 8003072:	4610      	mov	r0, r2
 8003074:	f7ff fcfa 	bl	8002a6c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	7f5b      	ldrb	r3, [r3, #29]
 800307c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003082:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003088:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800308e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003096:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003098:	4313      	orrs	r3, r2
 800309a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d106      	bne.n	80030b4 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030aa:	3b01      	subs	r3, #1
 80030ac:	045b      	lsls	r3, r3, #17
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d009      	beq.n	80030d0 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68da      	ldr	r2, [r3, #12]
 80030d6:	4b4b      	ldr	r3, [pc, #300]	; (8003204 <HAL_ADC_Init+0x310>)
 80030d8:	4013      	ands	r3, r2
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	6812      	ldr	r2, [r2, #0]
 80030de:	69b9      	ldr	r1, [r7, #24]
 80030e0:	430b      	orrs	r3, r1
 80030e2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff fed2 	bl	8002ea8 <LL_ADC_REG_IsConversionOngoing>
 8003104:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff fedf 	bl	8002ece <LL_ADC_INJ_IsConversionOngoing>
 8003110:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d17f      	bne.n	8003218 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d17c      	bne.n	8003218 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003122:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800312a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800312c:	4313      	orrs	r3, r2
 800312e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800313a:	f023 0302 	bic.w	r3, r3, #2
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	6812      	ldr	r2, [r2, #0]
 8003142:	69b9      	ldr	r1, [r7, #24]
 8003144:	430b      	orrs	r3, r1
 8003146:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d017      	beq.n	8003180 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	691a      	ldr	r2, [r3, #16]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800315e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003168:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800316c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	6911      	ldr	r1, [r2, #16]
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	6812      	ldr	r2, [r2, #0]
 8003178:	430b      	orrs	r3, r1
 800317a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800317e:	e013      	b.n	80031a8 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	691a      	ldr	r2, [r3, #16]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800318e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	6812      	ldr	r2, [r2, #0]
 800319c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80031a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80031a4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d12a      	bne.n	8003208 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80031bc:	f023 0304 	bic.w	r3, r3, #4
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80031c8:	4311      	orrs	r1, r2
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80031ce:	4311      	orrs	r1, r2
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80031d4:	430a      	orrs	r2, r1
 80031d6:	431a      	orrs	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f042 0201 	orr.w	r2, r2, #1
 80031e0:	611a      	str	r2, [r3, #16]
 80031e2:	e019      	b.n	8003218 <HAL_ADC_Init+0x324>
 80031e4:	20000004 	.word	0x20000004
 80031e8:	053e2d63 	.word	0x053e2d63
 80031ec:	50000100 	.word	0x50000100
 80031f0:	50000400 	.word	0x50000400
 80031f4:	50000500 	.word	0x50000500
 80031f8:	50000600 	.word	0x50000600
 80031fc:	50000300 	.word	0x50000300
 8003200:	50000700 	.word	0x50000700
 8003204:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	691a      	ldr	r2, [r3, #16]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 0201 	bic.w	r2, r2, #1
 8003216:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d10c      	bne.n	800323a <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	f023 010f 	bic.w	r1, r3, #15
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	1e5a      	subs	r2, r3, #1
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	430a      	orrs	r2, r1
 8003236:	631a      	str	r2, [r3, #48]	; 0x30
 8003238:	e007      	b.n	800324a <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f022 020f 	bic.w	r2, r2, #15
 8003248:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800324e:	f023 0303 	bic.w	r3, r3, #3
 8003252:	f043 0201 	orr.w	r2, r3, #1
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	65da      	str	r2, [r3, #92]	; 0x5c
 800325a:	e007      	b.n	800326c <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003260:	f043 0210 	orr.w	r2, r3, #16
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800326c:	7ffb      	ldrb	r3, [r7, #31]
}
 800326e:	4618      	mov	r0, r3
 8003270:	3724      	adds	r7, #36	; 0x24
 8003272:	46bd      	mov	sp, r7
 8003274:	bd90      	pop	{r4, r7, pc}
 8003276:	bf00      	nop

08003278 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800328c:	d004      	beq.n	8003298 <HAL_ADC_Start_DMA+0x20>
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a58      	ldr	r2, [pc, #352]	; (80033f4 <HAL_ADC_Start_DMA+0x17c>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d101      	bne.n	800329c <HAL_ADC_Start_DMA+0x24>
 8003298:	4b57      	ldr	r3, [pc, #348]	; (80033f8 <HAL_ADC_Start_DMA+0x180>)
 800329a:	e000      	b.n	800329e <HAL_ADC_Start_DMA+0x26>
 800329c:	4b57      	ldr	r3, [pc, #348]	; (80033fc <HAL_ADC_Start_DMA+0x184>)
 800329e:	4618      	mov	r0, r3
 80032a0:	f7ff fd44 	bl	8002d2c <LL_ADC_GetMultimode>
 80032a4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7ff fdfc 	bl	8002ea8 <LL_ADC_REG_IsConversionOngoing>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f040 8096 	bne.w	80033e4 <HAL_ADC_Start_DMA+0x16c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d101      	bne.n	80032c6 <HAL_ADC_Start_DMA+0x4e>
 80032c2:	2302      	movs	r3, #2
 80032c4:	e091      	b.n	80033ea <HAL_ADC_Start_DMA+0x172>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d005      	beq.n	80032e0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	2b05      	cmp	r3, #5
 80032d8:	d002      	beq.n	80032e0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	2b09      	cmp	r3, #9
 80032de:	d17a      	bne.n	80033d6 <HAL_ADC_Start_DMA+0x15e>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f000 fcf5 	bl	8003cd0 <ADC_Enable>
 80032e6:	4603      	mov	r3, r0
 80032e8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80032ea:	7dfb      	ldrb	r3, [r7, #23]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d16d      	bne.n	80033cc <HAL_ADC_Start_DMA+0x154>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80032f8:	f023 0301 	bic.w	r3, r3, #1
 80032fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a3a      	ldr	r2, [pc, #232]	; (80033f4 <HAL_ADC_Start_DMA+0x17c>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d009      	beq.n	8003322 <HAL_ADC_Start_DMA+0xaa>
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a3b      	ldr	r2, [pc, #236]	; (8003400 <HAL_ADC_Start_DMA+0x188>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d002      	beq.n	800331e <HAL_ADC_Start_DMA+0xa6>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	e003      	b.n	8003326 <HAL_ADC_Start_DMA+0xae>
 800331e:	4b39      	ldr	r3, [pc, #228]	; (8003404 <HAL_ADC_Start_DMA+0x18c>)
 8003320:	e001      	b.n	8003326 <HAL_ADC_Start_DMA+0xae>
 8003322:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	6812      	ldr	r2, [r2, #0]
 800332a:	4293      	cmp	r3, r2
 800332c:	d002      	beq.n	8003334 <HAL_ADC_Start_DMA+0xbc>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d105      	bne.n	8003340 <HAL_ADC_Start_DMA+0xc8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003338:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003344:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d006      	beq.n	800335a <HAL_ADC_Start_DMA+0xe2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003350:	f023 0206 	bic.w	r2, r3, #6
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	661a      	str	r2, [r3, #96]	; 0x60
 8003358:	e002      	b.n	8003360 <HAL_ADC_Start_DMA+0xe8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003364:	4a28      	ldr	r2, [pc, #160]	; (8003408 <HAL_ADC_Start_DMA+0x190>)
 8003366:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800336c:	4a27      	ldr	r2, [pc, #156]	; (800340c <HAL_ADC_Start_DMA+0x194>)
 800336e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003374:	4a26      	ldr	r2, [pc, #152]	; (8003410 <HAL_ADC_Start_DMA+0x198>)
 8003376:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	221c      	movs	r2, #28
 800337e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f042 0210 	orr.w	r2, r2, #16
 8003396:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68da      	ldr	r2, [r3, #12]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f042 0201 	orr.w	r2, r2, #1
 80033a6:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	3340      	adds	r3, #64	; 0x40
 80033b2:	4619      	mov	r1, r3
 80033b4:	68ba      	ldr	r2, [r7, #8]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f001 f954 	bl	8004664 <HAL_DMA_Start_IT>
 80033bc:	4603      	mov	r3, r0
 80033be:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7ff fd5b 	bl	8002e80 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80033ca:	e00d      	b.n	80033e8 <HAL_ADC_Start_DMA+0x170>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80033d4:	e008      	b.n	80033e8 <HAL_ADC_Start_DMA+0x170>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80033e2:	e001      	b.n	80033e8 <HAL_ADC_Start_DMA+0x170>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80033e4:	2302      	movs	r3, #2
 80033e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80033e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3718      	adds	r7, #24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	50000100 	.word	0x50000100
 80033f8:	50000300 	.word	0x50000300
 80033fc:	50000700 	.word	0x50000700
 8003400:	50000500 	.word	0x50000500
 8003404:	50000400 	.word	0x50000400
 8003408:	08003e53 	.word	0x08003e53
 800340c:	08003f2b 	.word	0x08003f2b
 8003410:	08003f47 	.word	0x08003f47

08003414 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b0b6      	sub	sp, #216	; 0xd8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800345a:	2300      	movs	r3, #0
 800345c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003460:	2300      	movs	r3, #0
 8003462:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800346a:	2b01      	cmp	r3, #1
 800346c:	d102      	bne.n	8003474 <HAL_ADC_ConfigChannel+0x24>
 800346e:	2302      	movs	r3, #2
 8003470:	f000 bc13 	b.w	8003c9a <HAL_ADC_ConfigChannel+0x84a>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4618      	mov	r0, r3
 8003482:	f7ff fd11 	bl	8002ea8 <LL_ADC_REG_IsConversionOngoing>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	f040 83f3 	bne.w	8003c74 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6818      	ldr	r0, [r3, #0]
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	6859      	ldr	r1, [r3, #4]
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	461a      	mov	r2, r3
 800349c:	f7ff fbcb 	bl	8002c36 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7ff fcff 	bl	8002ea8 <LL_ADC_REG_IsConversionOngoing>
 80034aa:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7ff fd0b 	bl	8002ece <LL_ADC_INJ_IsConversionOngoing>
 80034b8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80034bc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f040 81d9 	bne.w	8003878 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80034c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f040 81d4 	bne.w	8003878 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034d8:	d10f      	bne.n	80034fa <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6818      	ldr	r0, [r3, #0]
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2200      	movs	r2, #0
 80034e4:	4619      	mov	r1, r3
 80034e6:	f7ff fbd2 	bl	8002c8e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7ff fb79 	bl	8002bea <LL_ADC_SetSamplingTimeCommonConfig>
 80034f8:	e00e      	b.n	8003518 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6818      	ldr	r0, [r3, #0]
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	6819      	ldr	r1, [r3, #0]
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	461a      	mov	r2, r3
 8003508:	f7ff fbc1 	bl	8002c8e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2100      	movs	r1, #0
 8003512:	4618      	mov	r0, r3
 8003514:	f7ff fb69 	bl	8002bea <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	695a      	ldr	r2, [r3, #20]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	08db      	lsrs	r3, r3, #3
 8003524:	f003 0303 	and.w	r3, r3, #3
 8003528:	005b      	lsls	r3, r3, #1
 800352a:	fa02 f303 	lsl.w	r3, r2, r3
 800352e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	2b04      	cmp	r3, #4
 8003538:	d022      	beq.n	8003580 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6818      	ldr	r0, [r3, #0]
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	6919      	ldr	r1, [r3, #16]
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800354a:	f7ff fac3 	bl	8002ad4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6818      	ldr	r0, [r3, #0]
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	6919      	ldr	r1, [r3, #16]
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	461a      	mov	r2, r3
 800355c:	f7ff fb0f 	bl	8002b7e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6818      	ldr	r0, [r3, #0]
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	6919      	ldr	r1, [r3, #16]
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	7f1b      	ldrb	r3, [r3, #28]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d102      	bne.n	8003576 <HAL_ADC_ConfigChannel+0x126>
 8003570:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003574:	e000      	b.n	8003578 <HAL_ADC_ConfigChannel+0x128>
 8003576:	2300      	movs	r3, #0
 8003578:	461a      	mov	r2, r3
 800357a:	f7ff fb1b 	bl	8002bb4 <LL_ADC_SetOffsetSaturation>
 800357e:	e17b      	b.n	8003878 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2100      	movs	r1, #0
 8003586:	4618      	mov	r0, r3
 8003588:	f7ff fac8 	bl	8002b1c <LL_ADC_GetOffsetChannel>
 800358c:	4603      	mov	r3, r0
 800358e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10a      	bne.n	80035ac <HAL_ADC_ConfigChannel+0x15c>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2100      	movs	r1, #0
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff fabd 	bl	8002b1c <LL_ADC_GetOffsetChannel>
 80035a2:	4603      	mov	r3, r0
 80035a4:	0e9b      	lsrs	r3, r3, #26
 80035a6:	f003 021f 	and.w	r2, r3, #31
 80035aa:	e01e      	b.n	80035ea <HAL_ADC_ConfigChannel+0x19a>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2100      	movs	r1, #0
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7ff fab2 	bl	8002b1c <LL_ADC_GetOffsetChannel>
 80035b8:	4603      	mov	r3, r0
 80035ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035be:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80035c2:	fa93 f3a3 	rbit	r3, r3
 80035c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80035ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80035ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80035d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80035da:	2320      	movs	r3, #32
 80035dc:	e004      	b.n	80035e8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80035de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80035e2:	fab3 f383 	clz	r3, r3
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d105      	bne.n	8003602 <HAL_ADC_ConfigChannel+0x1b2>
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	0e9b      	lsrs	r3, r3, #26
 80035fc:	f003 031f 	and.w	r3, r3, #31
 8003600:	e018      	b.n	8003634 <HAL_ADC_ConfigChannel+0x1e4>
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800360a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800360e:	fa93 f3a3 	rbit	r3, r3
 8003612:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003616:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800361a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800361e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003626:	2320      	movs	r3, #32
 8003628:	e004      	b.n	8003634 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800362a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800362e:	fab3 f383 	clz	r3, r3
 8003632:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003634:	429a      	cmp	r2, r3
 8003636:	d106      	bne.n	8003646 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2200      	movs	r2, #0
 800363e:	2100      	movs	r1, #0
 8003640:	4618      	mov	r0, r3
 8003642:	f7ff fa81 	bl	8002b48 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2101      	movs	r1, #1
 800364c:	4618      	mov	r0, r3
 800364e:	f7ff fa65 	bl	8002b1c <LL_ADC_GetOffsetChannel>
 8003652:	4603      	mov	r3, r0
 8003654:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10a      	bne.n	8003672 <HAL_ADC_ConfigChannel+0x222>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2101      	movs	r1, #1
 8003662:	4618      	mov	r0, r3
 8003664:	f7ff fa5a 	bl	8002b1c <LL_ADC_GetOffsetChannel>
 8003668:	4603      	mov	r3, r0
 800366a:	0e9b      	lsrs	r3, r3, #26
 800366c:	f003 021f 	and.w	r2, r3, #31
 8003670:	e01e      	b.n	80036b0 <HAL_ADC_ConfigChannel+0x260>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2101      	movs	r1, #1
 8003678:	4618      	mov	r0, r3
 800367a:	f7ff fa4f 	bl	8002b1c <LL_ADC_GetOffsetChannel>
 800367e:	4603      	mov	r3, r0
 8003680:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003684:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003688:	fa93 f3a3 	rbit	r3, r3
 800368c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003690:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003694:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003698:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80036a0:	2320      	movs	r3, #32
 80036a2:	e004      	b.n	80036ae <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80036a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80036a8:	fab3 f383 	clz	r3, r3
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d105      	bne.n	80036c8 <HAL_ADC_ConfigChannel+0x278>
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	0e9b      	lsrs	r3, r3, #26
 80036c2:	f003 031f 	and.w	r3, r3, #31
 80036c6:	e018      	b.n	80036fa <HAL_ADC_ConfigChannel+0x2aa>
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80036d4:	fa93 f3a3 	rbit	r3, r3
 80036d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80036dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80036e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80036e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d101      	bne.n	80036f0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80036ec:	2320      	movs	r3, #32
 80036ee:	e004      	b.n	80036fa <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80036f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80036f4:	fab3 f383 	clz	r3, r3
 80036f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d106      	bne.n	800370c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2200      	movs	r2, #0
 8003704:	2101      	movs	r1, #1
 8003706:	4618      	mov	r0, r3
 8003708:	f7ff fa1e 	bl	8002b48 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2102      	movs	r1, #2
 8003712:	4618      	mov	r0, r3
 8003714:	f7ff fa02 	bl	8002b1c <LL_ADC_GetOffsetChannel>
 8003718:	4603      	mov	r3, r0
 800371a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10a      	bne.n	8003738 <HAL_ADC_ConfigChannel+0x2e8>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2102      	movs	r1, #2
 8003728:	4618      	mov	r0, r3
 800372a:	f7ff f9f7 	bl	8002b1c <LL_ADC_GetOffsetChannel>
 800372e:	4603      	mov	r3, r0
 8003730:	0e9b      	lsrs	r3, r3, #26
 8003732:	f003 021f 	and.w	r2, r3, #31
 8003736:	e01e      	b.n	8003776 <HAL_ADC_ConfigChannel+0x326>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2102      	movs	r1, #2
 800373e:	4618      	mov	r0, r3
 8003740:	f7ff f9ec 	bl	8002b1c <LL_ADC_GetOffsetChannel>
 8003744:	4603      	mov	r3, r0
 8003746:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800374e:	fa93 f3a3 	rbit	r3, r3
 8003752:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003756:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800375a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800375e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003766:	2320      	movs	r3, #32
 8003768:	e004      	b.n	8003774 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800376a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800376e:	fab3 f383 	clz	r3, r3
 8003772:	b2db      	uxtb	r3, r3
 8003774:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800377e:	2b00      	cmp	r3, #0
 8003780:	d105      	bne.n	800378e <HAL_ADC_ConfigChannel+0x33e>
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	0e9b      	lsrs	r3, r3, #26
 8003788:	f003 031f 	and.w	r3, r3, #31
 800378c:	e016      	b.n	80037bc <HAL_ADC_ConfigChannel+0x36c>
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003796:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800379a:	fa93 f3a3 	rbit	r3, r3
 800379e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80037a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80037a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80037a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80037ae:	2320      	movs	r3, #32
 80037b0:	e004      	b.n	80037bc <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80037b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037b6:	fab3 f383 	clz	r3, r3
 80037ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80037bc:	429a      	cmp	r2, r3
 80037be:	d106      	bne.n	80037ce <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2200      	movs	r2, #0
 80037c6:	2102      	movs	r1, #2
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7ff f9bd 	bl	8002b48 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2103      	movs	r1, #3
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7ff f9a1 	bl	8002b1c <LL_ADC_GetOffsetChannel>
 80037da:	4603      	mov	r3, r0
 80037dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d10a      	bne.n	80037fa <HAL_ADC_ConfigChannel+0x3aa>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2103      	movs	r1, #3
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7ff f996 	bl	8002b1c <LL_ADC_GetOffsetChannel>
 80037f0:	4603      	mov	r3, r0
 80037f2:	0e9b      	lsrs	r3, r3, #26
 80037f4:	f003 021f 	and.w	r2, r3, #31
 80037f8:	e017      	b.n	800382a <HAL_ADC_ConfigChannel+0x3da>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2103      	movs	r1, #3
 8003800:	4618      	mov	r0, r3
 8003802:	f7ff f98b 	bl	8002b1c <LL_ADC_GetOffsetChannel>
 8003806:	4603      	mov	r3, r0
 8003808:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800380c:	fa93 f3a3 	rbit	r3, r3
 8003810:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003812:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003814:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003816:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003818:	2b00      	cmp	r3, #0
 800381a:	d101      	bne.n	8003820 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800381c:	2320      	movs	r3, #32
 800381e:	e003      	b.n	8003828 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003820:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003822:	fab3 f383 	clz	r3, r3
 8003826:	b2db      	uxtb	r3, r3
 8003828:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003832:	2b00      	cmp	r3, #0
 8003834:	d105      	bne.n	8003842 <HAL_ADC_ConfigChannel+0x3f2>
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	0e9b      	lsrs	r3, r3, #26
 800383c:	f003 031f 	and.w	r3, r3, #31
 8003840:	e011      	b.n	8003866 <HAL_ADC_ConfigChannel+0x416>
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003848:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800384a:	fa93 f3a3 	rbit	r3, r3
 800384e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003850:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003852:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003854:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800385a:	2320      	movs	r3, #32
 800385c:	e003      	b.n	8003866 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800385e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003860:	fab3 f383 	clz	r3, r3
 8003864:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003866:	429a      	cmp	r2, r3
 8003868:	d106      	bne.n	8003878 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2200      	movs	r2, #0
 8003870:	2103      	movs	r1, #3
 8003872:	4618      	mov	r0, r3
 8003874:	f7ff f968 	bl	8002b48 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4618      	mov	r0, r3
 800387e:	f7ff fad9 	bl	8002e34 <LL_ADC_IsEnabled>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	f040 813d 	bne.w	8003b04 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6818      	ldr	r0, [r3, #0]
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	6819      	ldr	r1, [r3, #0]
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	461a      	mov	r2, r3
 8003898:	f7ff fa24 	bl	8002ce4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	4aa2      	ldr	r2, [pc, #648]	; (8003b2c <HAL_ADC_ConfigChannel+0x6dc>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	f040 812e 	bne.w	8003b04 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10b      	bne.n	80038d0 <HAL_ADC_ConfigChannel+0x480>
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	0e9b      	lsrs	r3, r3, #26
 80038be:	3301      	adds	r3, #1
 80038c0:	f003 031f 	and.w	r3, r3, #31
 80038c4:	2b09      	cmp	r3, #9
 80038c6:	bf94      	ite	ls
 80038c8:	2301      	movls	r3, #1
 80038ca:	2300      	movhi	r3, #0
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	e019      	b.n	8003904 <HAL_ADC_ConfigChannel+0x4b4>
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038d8:	fa93 f3a3 	rbit	r3, r3
 80038dc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80038de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038e0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80038e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d101      	bne.n	80038ec <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80038e8:	2320      	movs	r3, #32
 80038ea:	e003      	b.n	80038f4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80038ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038ee:	fab3 f383 	clz	r3, r3
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	3301      	adds	r3, #1
 80038f6:	f003 031f 	and.w	r3, r3, #31
 80038fa:	2b09      	cmp	r3, #9
 80038fc:	bf94      	ite	ls
 80038fe:	2301      	movls	r3, #1
 8003900:	2300      	movhi	r3, #0
 8003902:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003904:	2b00      	cmp	r3, #0
 8003906:	d079      	beq.n	80039fc <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003910:	2b00      	cmp	r3, #0
 8003912:	d107      	bne.n	8003924 <HAL_ADC_ConfigChannel+0x4d4>
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	0e9b      	lsrs	r3, r3, #26
 800391a:	3301      	adds	r3, #1
 800391c:	069b      	lsls	r3, r3, #26
 800391e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003922:	e015      	b.n	8003950 <HAL_ADC_ConfigChannel+0x500>
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800392c:	fa93 f3a3 	rbit	r3, r3
 8003930:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003934:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003936:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003938:	2b00      	cmp	r3, #0
 800393a:	d101      	bne.n	8003940 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800393c:	2320      	movs	r3, #32
 800393e:	e003      	b.n	8003948 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003940:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003942:	fab3 f383 	clz	r3, r3
 8003946:	b2db      	uxtb	r3, r3
 8003948:	3301      	adds	r3, #1
 800394a:	069b      	lsls	r3, r3, #26
 800394c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003958:	2b00      	cmp	r3, #0
 800395a:	d109      	bne.n	8003970 <HAL_ADC_ConfigChannel+0x520>
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	0e9b      	lsrs	r3, r3, #26
 8003962:	3301      	adds	r3, #1
 8003964:	f003 031f 	and.w	r3, r3, #31
 8003968:	2101      	movs	r1, #1
 800396a:	fa01 f303 	lsl.w	r3, r1, r3
 800396e:	e017      	b.n	80039a0 <HAL_ADC_ConfigChannel+0x550>
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003976:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003978:	fa93 f3a3 	rbit	r3, r3
 800397c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800397e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003980:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003982:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003988:	2320      	movs	r3, #32
 800398a:	e003      	b.n	8003994 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800398c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800398e:	fab3 f383 	clz	r3, r3
 8003992:	b2db      	uxtb	r3, r3
 8003994:	3301      	adds	r3, #1
 8003996:	f003 031f 	and.w	r3, r3, #31
 800399a:	2101      	movs	r1, #1
 800399c:	fa01 f303 	lsl.w	r3, r1, r3
 80039a0:	ea42 0103 	orr.w	r1, r2, r3
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d10a      	bne.n	80039c6 <HAL_ADC_ConfigChannel+0x576>
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	0e9b      	lsrs	r3, r3, #26
 80039b6:	3301      	adds	r3, #1
 80039b8:	f003 021f 	and.w	r2, r3, #31
 80039bc:	4613      	mov	r3, r2
 80039be:	005b      	lsls	r3, r3, #1
 80039c0:	4413      	add	r3, r2
 80039c2:	051b      	lsls	r3, r3, #20
 80039c4:	e018      	b.n	80039f8 <HAL_ADC_ConfigChannel+0x5a8>
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ce:	fa93 f3a3 	rbit	r3, r3
 80039d2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80039d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80039d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80039de:	2320      	movs	r3, #32
 80039e0:	e003      	b.n	80039ea <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80039e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039e4:	fab3 f383 	clz	r3, r3
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	3301      	adds	r3, #1
 80039ec:	f003 021f 	and.w	r2, r3, #31
 80039f0:	4613      	mov	r3, r2
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	4413      	add	r3, r2
 80039f6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039f8:	430b      	orrs	r3, r1
 80039fa:	e07e      	b.n	8003afa <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d107      	bne.n	8003a18 <HAL_ADC_ConfigChannel+0x5c8>
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	0e9b      	lsrs	r3, r3, #26
 8003a0e:	3301      	adds	r3, #1
 8003a10:	069b      	lsls	r3, r3, #26
 8003a12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a16:	e015      	b.n	8003a44 <HAL_ADC_ConfigChannel+0x5f4>
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a20:	fa93 f3a3 	rbit	r3, r3
 8003a24:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a28:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d101      	bne.n	8003a34 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003a30:	2320      	movs	r3, #32
 8003a32:	e003      	b.n	8003a3c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a36:	fab3 f383 	clz	r3, r3
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	069b      	lsls	r3, r3, #26
 8003a40:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d109      	bne.n	8003a64 <HAL_ADC_ConfigChannel+0x614>
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	0e9b      	lsrs	r3, r3, #26
 8003a56:	3301      	adds	r3, #1
 8003a58:	f003 031f 	and.w	r3, r3, #31
 8003a5c:	2101      	movs	r1, #1
 8003a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a62:	e017      	b.n	8003a94 <HAL_ADC_ConfigChannel+0x644>
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6a:	6a3b      	ldr	r3, [r7, #32]
 8003a6c:	fa93 f3a3 	rbit	r3, r3
 8003a70:	61fb      	str	r3, [r7, #28]
  return result;
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d101      	bne.n	8003a80 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003a7c:	2320      	movs	r3, #32
 8003a7e:	e003      	b.n	8003a88 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a82:	fab3 f383 	clz	r3, r3
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	3301      	adds	r3, #1
 8003a8a:	f003 031f 	and.w	r3, r3, #31
 8003a8e:	2101      	movs	r1, #1
 8003a90:	fa01 f303 	lsl.w	r3, r1, r3
 8003a94:	ea42 0103 	orr.w	r1, r2, r3
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10d      	bne.n	8003ac0 <HAL_ADC_ConfigChannel+0x670>
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	0e9b      	lsrs	r3, r3, #26
 8003aaa:	3301      	adds	r3, #1
 8003aac:	f003 021f 	and.w	r2, r3, #31
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	4413      	add	r3, r2
 8003ab6:	3b1e      	subs	r3, #30
 8003ab8:	051b      	lsls	r3, r3, #20
 8003aba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003abe:	e01b      	b.n	8003af8 <HAL_ADC_ConfigChannel+0x6a8>
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	fa93 f3a3 	rbit	r3, r3
 8003acc:	613b      	str	r3, [r7, #16]
  return result;
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d101      	bne.n	8003adc <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003ad8:	2320      	movs	r3, #32
 8003ada:	e003      	b.n	8003ae4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	fab3 f383 	clz	r3, r3
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	f003 021f 	and.w	r2, r3, #31
 8003aea:	4613      	mov	r3, r2
 8003aec:	005b      	lsls	r3, r3, #1
 8003aee:	4413      	add	r3, r2
 8003af0:	3b1e      	subs	r3, #30
 8003af2:	051b      	lsls	r3, r3, #20
 8003af4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003af8:	430b      	orrs	r3, r1
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	6892      	ldr	r2, [r2, #8]
 8003afe:	4619      	mov	r1, r3
 8003b00:	f7ff f8c5 	bl	8002c8e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	4b09      	ldr	r3, [pc, #36]	; (8003b30 <HAL_ADC_ConfigChannel+0x6e0>)
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f000 80be 	beq.w	8003c8e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b1a:	d004      	beq.n	8003b26 <HAL_ADC_ConfigChannel+0x6d6>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a04      	ldr	r2, [pc, #16]	; (8003b34 <HAL_ADC_ConfigChannel+0x6e4>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d10a      	bne.n	8003b3c <HAL_ADC_ConfigChannel+0x6ec>
 8003b26:	4b04      	ldr	r3, [pc, #16]	; (8003b38 <HAL_ADC_ConfigChannel+0x6e8>)
 8003b28:	e009      	b.n	8003b3e <HAL_ADC_ConfigChannel+0x6ee>
 8003b2a:	bf00      	nop
 8003b2c:	407f0000 	.word	0x407f0000
 8003b30:	80080000 	.word	0x80080000
 8003b34:	50000100 	.word	0x50000100
 8003b38:	50000300 	.word	0x50000300
 8003b3c:	4b59      	ldr	r3, [pc, #356]	; (8003ca4 <HAL_ADC_ConfigChannel+0x854>)
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7fe ffba 	bl	8002ab8 <LL_ADC_GetCommonPathInternalCh>
 8003b44:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a56      	ldr	r2, [pc, #344]	; (8003ca8 <HAL_ADC_ConfigChannel+0x858>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d004      	beq.n	8003b5c <HAL_ADC_ConfigChannel+0x70c>
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a55      	ldr	r2, [pc, #340]	; (8003cac <HAL_ADC_ConfigChannel+0x85c>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d13a      	bne.n	8003bd2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003b5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d134      	bne.n	8003bd2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b70:	d005      	beq.n	8003b7e <HAL_ADC_ConfigChannel+0x72e>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a4e      	ldr	r2, [pc, #312]	; (8003cb0 <HAL_ADC_ConfigChannel+0x860>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	f040 8085 	bne.w	8003c88 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b86:	d004      	beq.n	8003b92 <HAL_ADC_ConfigChannel+0x742>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a49      	ldr	r2, [pc, #292]	; (8003cb4 <HAL_ADC_ConfigChannel+0x864>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d101      	bne.n	8003b96 <HAL_ADC_ConfigChannel+0x746>
 8003b92:	4a49      	ldr	r2, [pc, #292]	; (8003cb8 <HAL_ADC_ConfigChannel+0x868>)
 8003b94:	e000      	b.n	8003b98 <HAL_ADC_ConfigChannel+0x748>
 8003b96:	4a43      	ldr	r2, [pc, #268]	; (8003ca4 <HAL_ADC_ConfigChannel+0x854>)
 8003b98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b9c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	4610      	mov	r0, r2
 8003ba4:	f7fe ff75 	bl	8002a92 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ba8:	4b44      	ldr	r3, [pc, #272]	; (8003cbc <HAL_ADC_ConfigChannel+0x86c>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	099b      	lsrs	r3, r3, #6
 8003bae:	4a44      	ldr	r2, [pc, #272]	; (8003cc0 <HAL_ADC_ConfigChannel+0x870>)
 8003bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb4:	099b      	lsrs	r3, r3, #6
 8003bb6:	1c5a      	adds	r2, r3, #1
 8003bb8:	4613      	mov	r3, r2
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	4413      	add	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003bc2:	e002      	b.n	8003bca <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1f9      	bne.n	8003bc4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003bd0:	e05a      	b.n	8003c88 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a3b      	ldr	r2, [pc, #236]	; (8003cc4 <HAL_ADC_ConfigChannel+0x874>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d125      	bne.n	8003c28 <HAL_ADC_ConfigChannel+0x7d8>
 8003bdc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003be0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d11f      	bne.n	8003c28 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a31      	ldr	r2, [pc, #196]	; (8003cb4 <HAL_ADC_ConfigChannel+0x864>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d104      	bne.n	8003bfc <HAL_ADC_ConfigChannel+0x7ac>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a34      	ldr	r2, [pc, #208]	; (8003cc8 <HAL_ADC_ConfigChannel+0x878>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d047      	beq.n	8003c8c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c04:	d004      	beq.n	8003c10 <HAL_ADC_ConfigChannel+0x7c0>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a2a      	ldr	r2, [pc, #168]	; (8003cb4 <HAL_ADC_ConfigChannel+0x864>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d101      	bne.n	8003c14 <HAL_ADC_ConfigChannel+0x7c4>
 8003c10:	4a29      	ldr	r2, [pc, #164]	; (8003cb8 <HAL_ADC_ConfigChannel+0x868>)
 8003c12:	e000      	b.n	8003c16 <HAL_ADC_ConfigChannel+0x7c6>
 8003c14:	4a23      	ldr	r2, [pc, #140]	; (8003ca4 <HAL_ADC_ConfigChannel+0x854>)
 8003c16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c1e:	4619      	mov	r1, r3
 8003c20:	4610      	mov	r0, r2
 8003c22:	f7fe ff36 	bl	8002a92 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c26:	e031      	b.n	8003c8c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a27      	ldr	r2, [pc, #156]	; (8003ccc <HAL_ADC_ConfigChannel+0x87c>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d12d      	bne.n	8003c8e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003c32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d127      	bne.n	8003c8e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a1c      	ldr	r2, [pc, #112]	; (8003cb4 <HAL_ADC_ConfigChannel+0x864>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d022      	beq.n	8003c8e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c50:	d004      	beq.n	8003c5c <HAL_ADC_ConfigChannel+0x80c>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a17      	ldr	r2, [pc, #92]	; (8003cb4 <HAL_ADC_ConfigChannel+0x864>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d101      	bne.n	8003c60 <HAL_ADC_ConfigChannel+0x810>
 8003c5c:	4a16      	ldr	r2, [pc, #88]	; (8003cb8 <HAL_ADC_ConfigChannel+0x868>)
 8003c5e:	e000      	b.n	8003c62 <HAL_ADC_ConfigChannel+0x812>
 8003c60:	4a10      	ldr	r2, [pc, #64]	; (8003ca4 <HAL_ADC_ConfigChannel+0x854>)
 8003c62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c66:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	4610      	mov	r0, r2
 8003c6e:	f7fe ff10 	bl	8002a92 <LL_ADC_SetCommonPathInternalCh>
 8003c72:	e00c      	b.n	8003c8e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c78:	f043 0220 	orr.w	r2, r3, #32
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003c86:	e002      	b.n	8003c8e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c88:	bf00      	nop
 8003c8a:	e000      	b.n	8003c8e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c8c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003c96:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	37d8      	adds	r7, #216	; 0xd8
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	50000700 	.word	0x50000700
 8003ca8:	c3210000 	.word	0xc3210000
 8003cac:	90c00010 	.word	0x90c00010
 8003cb0:	50000600 	.word	0x50000600
 8003cb4:	50000100 	.word	0x50000100
 8003cb8:	50000300 	.word	0x50000300
 8003cbc:	20000004 	.word	0x20000004
 8003cc0:	053e2d63 	.word	0x053e2d63
 8003cc4:	c7520000 	.word	0xc7520000
 8003cc8:	50000500 	.word	0x50000500
 8003ccc:	cb840000 	.word	0xcb840000

08003cd0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7ff f8a9 	bl	8002e34 <LL_ADC_IsEnabled>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d14d      	bne.n	8003d84 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	689a      	ldr	r2, [r3, #8]
 8003cee:	4b28      	ldr	r3, [pc, #160]	; (8003d90 <ADC_Enable+0xc0>)
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00d      	beq.n	8003d12 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cfa:	f043 0210 	orr.w	r2, r3, #16
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d06:	f043 0201 	orr.w	r2, r3, #1
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e039      	b.n	8003d86 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7ff f864 	bl	8002de4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003d1c:	f7fe fe78 	bl	8002a10 <HAL_GetTick>
 8003d20:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d22:	e028      	b.n	8003d76 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7ff f883 	bl	8002e34 <LL_ADC_IsEnabled>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d104      	bne.n	8003d3e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7ff f853 	bl	8002de4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003d3e:	f7fe fe67 	bl	8002a10 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d914      	bls.n	8003d76 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d00d      	beq.n	8003d76 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d5e:	f043 0210 	orr.w	r2, r3, #16
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d6a:	f043 0201 	orr.w	r2, r3, #1
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e007      	b.n	8003d86 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0301 	and.w	r3, r3, #1
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d1cf      	bne.n	8003d24 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3710      	adds	r7, #16
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	8000003f 	.word	0x8000003f

08003d94 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7ff f85a 	bl	8002e5a <LL_ADC_IsDisableOngoing>
 8003da6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7ff f841 	bl	8002e34 <LL_ADC_IsEnabled>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d047      	beq.n	8003e48 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d144      	bne.n	8003e48 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f003 030d 	and.w	r3, r3, #13
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d10c      	bne.n	8003de6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7ff f81b 	bl	8002e0c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2203      	movs	r2, #3
 8003ddc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003dde:	f7fe fe17 	bl	8002a10 <HAL_GetTick>
 8003de2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003de4:	e029      	b.n	8003e3a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dea:	f043 0210 	orr.w	r2, r3, #16
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003df6:	f043 0201 	orr.w	r2, r3, #1
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e023      	b.n	8003e4a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003e02:	f7fe fe05 	bl	8002a10 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d914      	bls.n	8003e3a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00d      	beq.n	8003e3a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e22:	f043 0210 	orr.w	r2, r3, #16
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e2e:	f043 0201 	orr.w	r2, r3, #1
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e007      	b.n	8003e4a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1dc      	bne.n	8003e02 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b084      	sub	sp, #16
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d14b      	bne.n	8003f04 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e70:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0308 	and.w	r3, r3, #8
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d021      	beq.n	8003eca <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7fe fec0 	bl	8002c10 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d032      	beq.n	8003efc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d12b      	bne.n	8003efc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d11f      	bne.n	8003efc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec0:	f043 0201 	orr.w	r2, r3, #1
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ec8:	e018      	b.n	8003efc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d111      	bne.n	8003efc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003edc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d105      	bne.n	8003efc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef4:	f043 0201 	orr.w	r2, r3, #1
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f7ff fa89 	bl	8003414 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003f02:	e00e      	b.n	8003f22 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f08:	f003 0310 	and.w	r3, r3, #16
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d003      	beq.n	8003f18 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f7ff fa93 	bl	800343c <HAL_ADC_ErrorCallback>
}
 8003f16:	e004      	b.n	8003f22 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	4798      	blx	r3
}
 8003f22:	bf00      	nop
 8003f24:	3710      	adds	r7, #16
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b084      	sub	sp, #16
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f36:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f7ff fa75 	bl	8003428 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f3e:	bf00      	nop
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b084      	sub	sp, #16
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f52:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f58:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f64:	f043 0204 	orr.w	r2, r3, #4
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	f7ff fa65 	bl	800343c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f72:	bf00      	nop
 8003f74:	3710      	adds	r7, #16
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <LL_ADC_IsEnabled>:
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b083      	sub	sp, #12
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d101      	bne.n	8003f92 <LL_ADC_IsEnabled+0x18>
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e000      	b.n	8003f94 <LL_ADC_IsEnabled+0x1a>
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <LL_ADC_StartCalibration>:
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003fb2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	609a      	str	r2, [r3, #8]
}
 8003fc6:	bf00      	nop
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr

08003fd2 <LL_ADC_IsCalibrationOnGoing>:
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b083      	sub	sp, #12
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fe2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fe6:	d101      	bne.n	8003fec <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e000      	b.n	8003fee <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <LL_ADC_REG_IsConversionOngoing>:
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b083      	sub	sp, #12
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f003 0304 	and.w	r3, r3, #4
 800400a:	2b04      	cmp	r3, #4
 800400c:	d101      	bne.n	8004012 <LL_ADC_REG_IsConversionOngoing+0x18>
 800400e:	2301      	movs	r3, #1
 8004010:	e000      	b.n	8004014 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800402a:	2300      	movs	r3, #0
 800402c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004034:	2b01      	cmp	r3, #1
 8004036:	d101      	bne.n	800403c <HAL_ADCEx_Calibration_Start+0x1c>
 8004038:	2302      	movs	r3, #2
 800403a:	e04d      	b.n	80040d8 <HAL_ADCEx_Calibration_Start+0xb8>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f7ff fea5 	bl	8003d94 <ADC_Disable>
 800404a:	4603      	mov	r3, r0
 800404c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800404e:	7bfb      	ldrb	r3, [r7, #15]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d136      	bne.n	80040c2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004058:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800405c:	f023 0302 	bic.w	r3, r3, #2
 8004060:	f043 0202 	orr.w	r2, r3, #2
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	6839      	ldr	r1, [r7, #0]
 800406e:	4618      	mov	r0, r3
 8004070:	f7ff ff96 	bl	8003fa0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004074:	e014      	b.n	80040a0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	3301      	adds	r3, #1
 800407a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	4a18      	ldr	r2, [pc, #96]	; (80040e0 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d90d      	bls.n	80040a0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004088:	f023 0312 	bic.w	r3, r3, #18
 800408c:	f043 0210 	orr.w	r2, r3, #16
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e01b      	b.n	80040d8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7ff ff94 	bl	8003fd2 <LL_ADC_IsCalibrationOnGoing>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1e2      	bne.n	8004076 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b4:	f023 0303 	bic.w	r3, r3, #3
 80040b8:	f043 0201 	orr.w	r2, r3, #1
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	65da      	str	r2, [r3, #92]	; 0x5c
 80040c0:	e005      	b.n	80040ce <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c6:	f043 0210 	orr.w	r2, r3, #16
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80040d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3710      	adds	r7, #16
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	0004de01 	.word	0x0004de01

080040e4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80040e4:	b590      	push	{r4, r7, lr}
 80040e6:	b0a1      	sub	sp, #132	; 0x84
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040ee:	2300      	movs	r3, #0
 80040f0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d101      	bne.n	8004102 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80040fe:	2302      	movs	r3, #2
 8004100:	e0e7      	b.n	80042d2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2201      	movs	r2, #1
 8004106:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800410a:	2300      	movs	r3, #0
 800410c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800410e:	2300      	movs	r3, #0
 8004110:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800411a:	d102      	bne.n	8004122 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800411c:	4b6f      	ldr	r3, [pc, #444]	; (80042dc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800411e:	60bb      	str	r3, [r7, #8]
 8004120:	e009      	b.n	8004136 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a6e      	ldr	r2, [pc, #440]	; (80042e0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d102      	bne.n	8004132 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800412c:	4b6d      	ldr	r3, [pc, #436]	; (80042e4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800412e:	60bb      	str	r3, [r7, #8]
 8004130:	e001      	b.n	8004136 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004132:	2300      	movs	r3, #0
 8004134:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d10b      	bne.n	8004154 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004140:	f043 0220 	orr.w	r2, r3, #32
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e0be      	b.n	80042d2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	4618      	mov	r0, r3
 8004158:	f7ff ff4f 	bl	8003ffa <LL_ADC_REG_IsConversionOngoing>
 800415c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4618      	mov	r0, r3
 8004164:	f7ff ff49 	bl	8003ffa <LL_ADC_REG_IsConversionOngoing>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	f040 80a0 	bne.w	80042b0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004170:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004172:	2b00      	cmp	r3, #0
 8004174:	f040 809c 	bne.w	80042b0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004180:	d004      	beq.n	800418c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a55      	ldr	r2, [pc, #340]	; (80042dc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d101      	bne.n	8004190 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800418c:	4b56      	ldr	r3, [pc, #344]	; (80042e8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800418e:	e000      	b.n	8004192 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004190:	4b56      	ldr	r3, [pc, #344]	; (80042ec <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004192:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d04b      	beq.n	8004234 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800419c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	6859      	ldr	r1, [r3, #4]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80041ae:	035b      	lsls	r3, r3, #13
 80041b0:	430b      	orrs	r3, r1
 80041b2:	431a      	orrs	r2, r3
 80041b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041b6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041c0:	d004      	beq.n	80041cc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a45      	ldr	r2, [pc, #276]	; (80042dc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d10f      	bne.n	80041ec <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80041cc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80041d0:	f7ff fed3 	bl	8003f7a <LL_ADC_IsEnabled>
 80041d4:	4604      	mov	r4, r0
 80041d6:	4841      	ldr	r0, [pc, #260]	; (80042dc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80041d8:	f7ff fecf 	bl	8003f7a <LL_ADC_IsEnabled>
 80041dc:	4603      	mov	r3, r0
 80041de:	4323      	orrs	r3, r4
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	bf0c      	ite	eq
 80041e4:	2301      	moveq	r3, #1
 80041e6:	2300      	movne	r3, #0
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	e012      	b.n	8004212 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80041ec:	483c      	ldr	r0, [pc, #240]	; (80042e0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80041ee:	f7ff fec4 	bl	8003f7a <LL_ADC_IsEnabled>
 80041f2:	4604      	mov	r4, r0
 80041f4:	483b      	ldr	r0, [pc, #236]	; (80042e4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80041f6:	f7ff fec0 	bl	8003f7a <LL_ADC_IsEnabled>
 80041fa:	4603      	mov	r3, r0
 80041fc:	431c      	orrs	r4, r3
 80041fe:	483c      	ldr	r0, [pc, #240]	; (80042f0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004200:	f7ff febb 	bl	8003f7a <LL_ADC_IsEnabled>
 8004204:	4603      	mov	r3, r0
 8004206:	4323      	orrs	r3, r4
 8004208:	2b00      	cmp	r3, #0
 800420a:	bf0c      	ite	eq
 800420c:	2301      	moveq	r3, #1
 800420e:	2300      	movne	r3, #0
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d056      	beq.n	80042c4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004216:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800421e:	f023 030f 	bic.w	r3, r3, #15
 8004222:	683a      	ldr	r2, [r7, #0]
 8004224:	6811      	ldr	r1, [r2, #0]
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	6892      	ldr	r2, [r2, #8]
 800422a:	430a      	orrs	r2, r1
 800422c:	431a      	orrs	r2, r3
 800422e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004230:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004232:	e047      	b.n	80042c4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004234:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800423c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800423e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004248:	d004      	beq.n	8004254 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a23      	ldr	r2, [pc, #140]	; (80042dc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d10f      	bne.n	8004274 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004254:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004258:	f7ff fe8f 	bl	8003f7a <LL_ADC_IsEnabled>
 800425c:	4604      	mov	r4, r0
 800425e:	481f      	ldr	r0, [pc, #124]	; (80042dc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004260:	f7ff fe8b 	bl	8003f7a <LL_ADC_IsEnabled>
 8004264:	4603      	mov	r3, r0
 8004266:	4323      	orrs	r3, r4
 8004268:	2b00      	cmp	r3, #0
 800426a:	bf0c      	ite	eq
 800426c:	2301      	moveq	r3, #1
 800426e:	2300      	movne	r3, #0
 8004270:	b2db      	uxtb	r3, r3
 8004272:	e012      	b.n	800429a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004274:	481a      	ldr	r0, [pc, #104]	; (80042e0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004276:	f7ff fe80 	bl	8003f7a <LL_ADC_IsEnabled>
 800427a:	4604      	mov	r4, r0
 800427c:	4819      	ldr	r0, [pc, #100]	; (80042e4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800427e:	f7ff fe7c 	bl	8003f7a <LL_ADC_IsEnabled>
 8004282:	4603      	mov	r3, r0
 8004284:	431c      	orrs	r4, r3
 8004286:	481a      	ldr	r0, [pc, #104]	; (80042f0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004288:	f7ff fe77 	bl	8003f7a <LL_ADC_IsEnabled>
 800428c:	4603      	mov	r3, r0
 800428e:	4323      	orrs	r3, r4
 8004290:	2b00      	cmp	r3, #0
 8004292:	bf0c      	ite	eq
 8004294:	2301      	moveq	r3, #1
 8004296:	2300      	movne	r3, #0
 8004298:	b2db      	uxtb	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d012      	beq.n	80042c4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800429e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80042a6:	f023 030f 	bic.w	r3, r3, #15
 80042aa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80042ac:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80042ae:	e009      	b.n	80042c4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b4:	f043 0220 	orr.w	r2, r3, #32
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80042c2:	e000      	b.n	80042c6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80042c4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80042ce:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3784      	adds	r7, #132	; 0x84
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd90      	pop	{r4, r7, pc}
 80042da:	bf00      	nop
 80042dc:	50000100 	.word	0x50000100
 80042e0:	50000400 	.word	0x50000400
 80042e4:	50000500 	.word	0x50000500
 80042e8:	50000300 	.word	0x50000300
 80042ec:	50000700 	.word	0x50000700
 80042f0:	50000600 	.word	0x50000600

080042f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f003 0307 	and.w	r3, r3, #7
 8004302:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004304:	4b0c      	ldr	r3, [pc, #48]	; (8004338 <__NVIC_SetPriorityGrouping+0x44>)
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004310:	4013      	ands	r3, r2
 8004312:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800431c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004324:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004326:	4a04      	ldr	r2, [pc, #16]	; (8004338 <__NVIC_SetPriorityGrouping+0x44>)
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	60d3      	str	r3, [r2, #12]
}
 800432c:	bf00      	nop
 800432e:	3714      	adds	r7, #20
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr
 8004338:	e000ed00 	.word	0xe000ed00

0800433c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800433c:	b480      	push	{r7}
 800433e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004340:	4b04      	ldr	r3, [pc, #16]	; (8004354 <__NVIC_GetPriorityGrouping+0x18>)
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	0a1b      	lsrs	r3, r3, #8
 8004346:	f003 0307 	and.w	r3, r3, #7
}
 800434a:	4618      	mov	r0, r3
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr
 8004354:	e000ed00 	.word	0xe000ed00

08004358 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	4603      	mov	r3, r0
 8004360:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004366:	2b00      	cmp	r3, #0
 8004368:	db0b      	blt.n	8004382 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800436a:	79fb      	ldrb	r3, [r7, #7]
 800436c:	f003 021f 	and.w	r2, r3, #31
 8004370:	4907      	ldr	r1, [pc, #28]	; (8004390 <__NVIC_EnableIRQ+0x38>)
 8004372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004376:	095b      	lsrs	r3, r3, #5
 8004378:	2001      	movs	r0, #1
 800437a:	fa00 f202 	lsl.w	r2, r0, r2
 800437e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004382:	bf00      	nop
 8004384:	370c      	adds	r7, #12
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	e000e100 	.word	0xe000e100

08004394 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	4603      	mov	r3, r0
 800439c:	6039      	str	r1, [r7, #0]
 800439e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	db0a      	blt.n	80043be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	490c      	ldr	r1, [pc, #48]	; (80043e0 <__NVIC_SetPriority+0x4c>)
 80043ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043b2:	0112      	lsls	r2, r2, #4
 80043b4:	b2d2      	uxtb	r2, r2
 80043b6:	440b      	add	r3, r1
 80043b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043bc:	e00a      	b.n	80043d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	b2da      	uxtb	r2, r3
 80043c2:	4908      	ldr	r1, [pc, #32]	; (80043e4 <__NVIC_SetPriority+0x50>)
 80043c4:	79fb      	ldrb	r3, [r7, #7]
 80043c6:	f003 030f 	and.w	r3, r3, #15
 80043ca:	3b04      	subs	r3, #4
 80043cc:	0112      	lsls	r2, r2, #4
 80043ce:	b2d2      	uxtb	r2, r2
 80043d0:	440b      	add	r3, r1
 80043d2:	761a      	strb	r2, [r3, #24]
}
 80043d4:	bf00      	nop
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr
 80043e0:	e000e100 	.word	0xe000e100
 80043e4:	e000ed00 	.word	0xe000ed00

080043e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b089      	sub	sp, #36	; 0x24
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f003 0307 	and.w	r3, r3, #7
 80043fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	f1c3 0307 	rsb	r3, r3, #7
 8004402:	2b04      	cmp	r3, #4
 8004404:	bf28      	it	cs
 8004406:	2304      	movcs	r3, #4
 8004408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	3304      	adds	r3, #4
 800440e:	2b06      	cmp	r3, #6
 8004410:	d902      	bls.n	8004418 <NVIC_EncodePriority+0x30>
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	3b03      	subs	r3, #3
 8004416:	e000      	b.n	800441a <NVIC_EncodePriority+0x32>
 8004418:	2300      	movs	r3, #0
 800441a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800441c:	f04f 32ff 	mov.w	r2, #4294967295
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	fa02 f303 	lsl.w	r3, r2, r3
 8004426:	43da      	mvns	r2, r3
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	401a      	ands	r2, r3
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004430:	f04f 31ff 	mov.w	r1, #4294967295
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	fa01 f303 	lsl.w	r3, r1, r3
 800443a:	43d9      	mvns	r1, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004440:	4313      	orrs	r3, r2
         );
}
 8004442:	4618      	mov	r0, r3
 8004444:	3724      	adds	r7, #36	; 0x24
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
	...

08004450 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	3b01      	subs	r3, #1
 800445c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004460:	d301      	bcc.n	8004466 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004462:	2301      	movs	r3, #1
 8004464:	e00f      	b.n	8004486 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004466:	4a0a      	ldr	r2, [pc, #40]	; (8004490 <SysTick_Config+0x40>)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	3b01      	subs	r3, #1
 800446c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800446e:	210f      	movs	r1, #15
 8004470:	f04f 30ff 	mov.w	r0, #4294967295
 8004474:	f7ff ff8e 	bl	8004394 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004478:	4b05      	ldr	r3, [pc, #20]	; (8004490 <SysTick_Config+0x40>)
 800447a:	2200      	movs	r2, #0
 800447c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800447e:	4b04      	ldr	r3, [pc, #16]	; (8004490 <SysTick_Config+0x40>)
 8004480:	2207      	movs	r2, #7
 8004482:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3708      	adds	r7, #8
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	e000e010 	.word	0xe000e010

08004494 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f7ff ff29 	bl	80042f4 <__NVIC_SetPriorityGrouping>
}
 80044a2:	bf00      	nop
 80044a4:	3708      	adds	r7, #8
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b086      	sub	sp, #24
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	4603      	mov	r3, r0
 80044b2:	60b9      	str	r1, [r7, #8]
 80044b4:	607a      	str	r2, [r7, #4]
 80044b6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80044b8:	f7ff ff40 	bl	800433c <__NVIC_GetPriorityGrouping>
 80044bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	68b9      	ldr	r1, [r7, #8]
 80044c2:	6978      	ldr	r0, [r7, #20]
 80044c4:	f7ff ff90 	bl	80043e8 <NVIC_EncodePriority>
 80044c8:	4602      	mov	r2, r0
 80044ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044ce:	4611      	mov	r1, r2
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7ff ff5f 	bl	8004394 <__NVIC_SetPriority>
}
 80044d6:	bf00      	nop
 80044d8:	3718      	adds	r7, #24
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b082      	sub	sp, #8
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	4603      	mov	r3, r0
 80044e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ec:	4618      	mov	r0, r3
 80044ee:	f7ff ff33 	bl	8004358 <__NVIC_EnableIRQ>
}
 80044f2:	bf00      	nop
 80044f4:	3708      	adds	r7, #8
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}

080044fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b082      	sub	sp, #8
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f7ff ffa4 	bl	8004450 <SysTick_Config>
 8004508:	4603      	mov	r3, r0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3708      	adds	r7, #8
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
	...

08004514 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e08d      	b.n	8004642 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	461a      	mov	r2, r3
 800452c:	4b47      	ldr	r3, [pc, #284]	; (800464c <HAL_DMA_Init+0x138>)
 800452e:	429a      	cmp	r2, r3
 8004530:	d80f      	bhi.n	8004552 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	461a      	mov	r2, r3
 8004538:	4b45      	ldr	r3, [pc, #276]	; (8004650 <HAL_DMA_Init+0x13c>)
 800453a:	4413      	add	r3, r2
 800453c:	4a45      	ldr	r2, [pc, #276]	; (8004654 <HAL_DMA_Init+0x140>)
 800453e:	fba2 2303 	umull	r2, r3, r2, r3
 8004542:	091b      	lsrs	r3, r3, #4
 8004544:	009a      	lsls	r2, r3, #2
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a42      	ldr	r2, [pc, #264]	; (8004658 <HAL_DMA_Init+0x144>)
 800454e:	641a      	str	r2, [r3, #64]	; 0x40
 8004550:	e00e      	b.n	8004570 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	461a      	mov	r2, r3
 8004558:	4b40      	ldr	r3, [pc, #256]	; (800465c <HAL_DMA_Init+0x148>)
 800455a:	4413      	add	r3, r2
 800455c:	4a3d      	ldr	r2, [pc, #244]	; (8004654 <HAL_DMA_Init+0x140>)
 800455e:	fba2 2303 	umull	r2, r3, r2, r3
 8004562:	091b      	lsrs	r3, r3, #4
 8004564:	009a      	lsls	r2, r3, #2
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a3c      	ldr	r2, [pc, #240]	; (8004660 <HAL_DMA_Init+0x14c>)
 800456e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2202      	movs	r2, #2
 8004574:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800458a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004594:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 fa76 	bl	8004ab4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045d0:	d102      	bne.n	80045d8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685a      	ldr	r2, [r3, #4]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045e0:	b2d2      	uxtb	r2, r2
 80045e2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80045ec:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d010      	beq.n	8004618 <HAL_DMA_Init+0x104>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	2b04      	cmp	r3, #4
 80045fc:	d80c      	bhi.n	8004618 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 fa96 	bl	8004b30 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004608:	2200      	movs	r2, #0
 800460a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004614:	605a      	str	r2, [r3, #4]
 8004616:	e008      	b.n	800462a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3710      	adds	r7, #16
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	40020407 	.word	0x40020407
 8004650:	bffdfff8 	.word	0xbffdfff8
 8004654:	cccccccd 	.word	0xcccccccd
 8004658:	40020000 	.word	0x40020000
 800465c:	bffdfbf8 	.word	0xbffdfbf8
 8004660:	40020400 	.word	0x40020400

08004664 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b086      	sub	sp, #24
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
 8004670:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004672:	2300      	movs	r3, #0
 8004674:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800467c:	2b01      	cmp	r3, #1
 800467e:	d101      	bne.n	8004684 <HAL_DMA_Start_IT+0x20>
 8004680:	2302      	movs	r3, #2
 8004682:	e066      	b.n	8004752 <HAL_DMA_Start_IT+0xee>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004692:	b2db      	uxtb	r3, r3
 8004694:	2b01      	cmp	r3, #1
 8004696:	d155      	bne.n	8004744 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2202      	movs	r2, #2
 800469c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f022 0201 	bic.w	r2, r2, #1
 80046b4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	68b9      	ldr	r1, [r7, #8]
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f000 f9bb 	bl	8004a38 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d008      	beq.n	80046dc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f042 020e 	orr.w	r2, r2, #14
 80046d8:	601a      	str	r2, [r3, #0]
 80046da:	e00f      	b.n	80046fc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f022 0204 	bic.w	r2, r2, #4
 80046ea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f042 020a 	orr.w	r2, r2, #10
 80046fa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d007      	beq.n	800471a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004714:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004718:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800471e:	2b00      	cmp	r3, #0
 8004720:	d007      	beq.n	8004732 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800472c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004730:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f042 0201 	orr.w	r2, r2, #1
 8004740:	601a      	str	r2, [r3, #0]
 8004742:	e005      	b.n	8004750 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800474c:	2302      	movs	r3, #2
 800474e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004750:	7dfb      	ldrb	r3, [r7, #23]
}
 8004752:	4618      	mov	r0, r3
 8004754:	3718      	adds	r7, #24
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800475a:	b480      	push	{r7}
 800475c:	b085      	sub	sp, #20
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004762:	2300      	movs	r3, #0
 8004764:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2b02      	cmp	r3, #2
 8004770:	d005      	beq.n	800477e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2204      	movs	r2, #4
 8004776:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	73fb      	strb	r3, [r7, #15]
 800477c:	e037      	b.n	80047ee <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f022 020e 	bic.w	r2, r2, #14
 800478c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004798:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800479c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f022 0201 	bic.w	r2, r2, #1
 80047ac:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b2:	f003 021f 	and.w	r2, r3, #31
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ba:	2101      	movs	r1, #1
 80047bc:	fa01 f202 	lsl.w	r2, r1, r2
 80047c0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80047ca:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00c      	beq.n	80047ee <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047e2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80047ec:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2201      	movs	r2, #1
 80047f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80047fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004800:	4618      	mov	r0, r3
 8004802:	3714      	adds	r7, #20
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004814:	2300      	movs	r3, #0
 8004816:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800481e:	b2db      	uxtb	r3, r3
 8004820:	2b02      	cmp	r3, #2
 8004822:	d00d      	beq.n	8004840 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2204      	movs	r2, #4
 8004828:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	73fb      	strb	r3, [r7, #15]
 800483e:	e047      	b.n	80048d0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f022 020e 	bic.w	r2, r2, #14
 800484e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f022 0201 	bic.w	r2, r2, #1
 800485e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800486a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800486e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004874:	f003 021f 	and.w	r2, r3, #31
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487c:	2101      	movs	r1, #1
 800487e:	fa01 f202 	lsl.w	r2, r1, r2
 8004882:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800488c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00c      	beq.n	80048b0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048a4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80048ae:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d003      	beq.n	80048d0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	4798      	blx	r3
    }
  }
  return status;
 80048d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3710      	adds	r7, #16
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}

080048da <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80048da:	b580      	push	{r7, lr}
 80048dc:	b084      	sub	sp, #16
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f6:	f003 031f 	and.w	r3, r3, #31
 80048fa:	2204      	movs	r2, #4
 80048fc:	409a      	lsls	r2, r3
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	4013      	ands	r3, r2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d026      	beq.n	8004954 <HAL_DMA_IRQHandler+0x7a>
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	f003 0304 	and.w	r3, r3, #4
 800490c:	2b00      	cmp	r3, #0
 800490e:	d021      	beq.n	8004954 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0320 	and.w	r3, r3, #32
 800491a:	2b00      	cmp	r3, #0
 800491c:	d107      	bne.n	800492e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f022 0204 	bic.w	r2, r2, #4
 800492c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004932:	f003 021f 	and.w	r2, r3, #31
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493a:	2104      	movs	r1, #4
 800493c:	fa01 f202 	lsl.w	r2, r1, r2
 8004940:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004946:	2b00      	cmp	r3, #0
 8004948:	d071      	beq.n	8004a2e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004952:	e06c      	b.n	8004a2e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004958:	f003 031f 	and.w	r3, r3, #31
 800495c:	2202      	movs	r2, #2
 800495e:	409a      	lsls	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	4013      	ands	r3, r2
 8004964:	2b00      	cmp	r3, #0
 8004966:	d02e      	beq.n	80049c6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d029      	beq.n	80049c6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0320 	and.w	r3, r3, #32
 800497c:	2b00      	cmp	r3, #0
 800497e:	d10b      	bne.n	8004998 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f022 020a 	bic.w	r2, r2, #10
 800498e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800499c:	f003 021f 	and.w	r2, r3, #31
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a4:	2102      	movs	r1, #2
 80049a6:	fa01 f202 	lsl.w	r2, r1, r2
 80049aa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d038      	beq.n	8004a2e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80049c4:	e033      	b.n	8004a2e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ca:	f003 031f 	and.w	r3, r3, #31
 80049ce:	2208      	movs	r2, #8
 80049d0:	409a      	lsls	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	4013      	ands	r3, r2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d02a      	beq.n	8004a30 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	f003 0308 	and.w	r3, r3, #8
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d025      	beq.n	8004a30 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f022 020e 	bic.w	r2, r2, #14
 80049f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f8:	f003 021f 	and.w	r2, r3, #31
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a00:	2101      	movs	r1, #1
 8004a02:	fa01 f202 	lsl.w	r2, r1, r2
 8004a06:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2201      	movs	r2, #1
 8004a12:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d004      	beq.n	8004a30 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004a2e:	bf00      	nop
 8004a30:	bf00      	nop
}
 8004a32:	3710      	adds	r7, #16
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
 8004a44:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004a4e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d004      	beq.n	8004a62 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004a60:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a66:	f003 021f 	and.w	r2, r3, #31
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6e:	2101      	movs	r1, #1
 8004a70:	fa01 f202 	lsl.w	r2, r1, r2
 8004a74:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	683a      	ldr	r2, [r7, #0]
 8004a7c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	2b10      	cmp	r3, #16
 8004a84:	d108      	bne.n	8004a98 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68ba      	ldr	r2, [r7, #8]
 8004a94:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004a96:	e007      	b.n	8004aa8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68ba      	ldr	r2, [r7, #8]
 8004a9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	60da      	str	r2, [r3, #12]
}
 8004aa8:	bf00      	nop
 8004aaa:	3714      	adds	r7, #20
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b087      	sub	sp, #28
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	4b16      	ldr	r3, [pc, #88]	; (8004b1c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d802      	bhi.n	8004ace <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004ac8:	4b15      	ldr	r3, [pc, #84]	; (8004b20 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004aca:	617b      	str	r3, [r7, #20]
 8004acc:	e001      	b.n	8004ad2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004ace:	4b15      	ldr	r3, [pc, #84]	; (8004b24 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004ad0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	3b08      	subs	r3, #8
 8004ade:	4a12      	ldr	r2, [pc, #72]	; (8004b28 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae4:	091b      	lsrs	r3, r3, #4
 8004ae6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aec:	089b      	lsrs	r3, r3, #2
 8004aee:	009a      	lsls	r2, r3, #2
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	4413      	add	r3, r2
 8004af4:	461a      	mov	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a0b      	ldr	r2, [pc, #44]	; (8004b2c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004afe:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f003 031f 	and.w	r3, r3, #31
 8004b06:	2201      	movs	r2, #1
 8004b08:	409a      	lsls	r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004b0e:	bf00      	nop
 8004b10:	371c      	adds	r7, #28
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	40020407 	.word	0x40020407
 8004b20:	40020800 	.word	0x40020800
 8004b24:	40020820 	.word	0x40020820
 8004b28:	cccccccd 	.word	0xcccccccd
 8004b2c:	40020880 	.word	0x40020880

08004b30 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	4b0b      	ldr	r3, [pc, #44]	; (8004b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004b44:	4413      	add	r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	461a      	mov	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a08      	ldr	r2, [pc, #32]	; (8004b74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004b52:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	3b01      	subs	r3, #1
 8004b58:	f003 031f 	and.w	r3, r3, #31
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	409a      	lsls	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004b64:	bf00      	nop
 8004b66:	3714      	adds	r7, #20
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr
 8004b70:	1000823f 	.word	0x1000823f
 8004b74:	40020940 	.word	0x40020940

08004b78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b087      	sub	sp, #28
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004b82:	2300      	movs	r3, #0
 8004b84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004b86:	e15a      	b.n	8004e3e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	2101      	movs	r1, #1
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	fa01 f303 	lsl.w	r3, r1, r3
 8004b94:	4013      	ands	r3, r2
 8004b96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f000 814c 	beq.w	8004e38 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d00b      	beq.n	8004bc0 <HAL_GPIO_Init+0x48>
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d007      	beq.n	8004bc0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004bb4:	2b11      	cmp	r3, #17
 8004bb6:	d003      	beq.n	8004bc0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	2b12      	cmp	r3, #18
 8004bbe:	d130      	bne.n	8004c22 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	005b      	lsls	r3, r3, #1
 8004bca:	2203      	movs	r2, #3
 8004bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd0:	43db      	mvns	r3, r3
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	68da      	ldr	r2, [r3, #12]
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	005b      	lsls	r3, r3, #1
 8004be0:	fa02 f303 	lsl.w	r3, r2, r3
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfe:	43db      	mvns	r3, r3
 8004c00:	693a      	ldr	r2, [r7, #16]
 8004c02:	4013      	ands	r3, r2
 8004c04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	091b      	lsrs	r3, r3, #4
 8004c0c:	f003 0201 	and.w	r2, r3, #1
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	fa02 f303 	lsl.w	r3, r2, r3
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	005b      	lsls	r3, r3, #1
 8004c2c:	2203      	movs	r2, #3
 8004c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c32:	43db      	mvns	r3, r3
 8004c34:	693a      	ldr	r2, [r7, #16]
 8004c36:	4013      	ands	r3, r2
 8004c38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	689a      	ldr	r2, [r3, #8]
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	005b      	lsls	r3, r3, #1
 8004c42:	fa02 f303 	lsl.w	r3, r2, r3
 8004c46:	693a      	ldr	r2, [r7, #16]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d003      	beq.n	8004c62 <HAL_GPIO_Init+0xea>
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	2b12      	cmp	r3, #18
 8004c60:	d123      	bne.n	8004caa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	08da      	lsrs	r2, r3, #3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	3208      	adds	r2, #8
 8004c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	f003 0307 	and.w	r3, r3, #7
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	220f      	movs	r2, #15
 8004c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7e:	43db      	mvns	r3, r3
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	4013      	ands	r3, r2
 8004c84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	691a      	ldr	r2, [r3, #16]
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	f003 0307 	and.w	r3, r3, #7
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	fa02 f303 	lsl.w	r3, r2, r3
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	08da      	lsrs	r2, r3, #3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	3208      	adds	r2, #8
 8004ca4:	6939      	ldr	r1, [r7, #16]
 8004ca6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	005b      	lsls	r3, r3, #1
 8004cb4:	2203      	movs	r2, #3
 8004cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cba:	43db      	mvns	r3, r3
 8004cbc:	693a      	ldr	r2, [r7, #16]
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f003 0203 	and.w	r2, r3, #3
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	005b      	lsls	r3, r3, #1
 8004cce:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	f000 80a6 	beq.w	8004e38 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cec:	4b5b      	ldr	r3, [pc, #364]	; (8004e5c <HAL_GPIO_Init+0x2e4>)
 8004cee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cf0:	4a5a      	ldr	r2, [pc, #360]	; (8004e5c <HAL_GPIO_Init+0x2e4>)
 8004cf2:	f043 0301 	orr.w	r3, r3, #1
 8004cf6:	6613      	str	r3, [r2, #96]	; 0x60
 8004cf8:	4b58      	ldr	r3, [pc, #352]	; (8004e5c <HAL_GPIO_Init+0x2e4>)
 8004cfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cfc:	f003 0301 	and.w	r3, r3, #1
 8004d00:	60bb      	str	r3, [r7, #8]
 8004d02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d04:	4a56      	ldr	r2, [pc, #344]	; (8004e60 <HAL_GPIO_Init+0x2e8>)
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	089b      	lsrs	r3, r3, #2
 8004d0a:	3302      	adds	r3, #2
 8004d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	f003 0303 	and.w	r3, r3, #3
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	220f      	movs	r2, #15
 8004d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d20:	43db      	mvns	r3, r3
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	4013      	ands	r3, r2
 8004d26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004d2e:	d01f      	beq.n	8004d70 <HAL_GPIO_Init+0x1f8>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a4c      	ldr	r2, [pc, #304]	; (8004e64 <HAL_GPIO_Init+0x2ec>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d019      	beq.n	8004d6c <HAL_GPIO_Init+0x1f4>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a4b      	ldr	r2, [pc, #300]	; (8004e68 <HAL_GPIO_Init+0x2f0>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d013      	beq.n	8004d68 <HAL_GPIO_Init+0x1f0>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a4a      	ldr	r2, [pc, #296]	; (8004e6c <HAL_GPIO_Init+0x2f4>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d00d      	beq.n	8004d64 <HAL_GPIO_Init+0x1ec>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a49      	ldr	r2, [pc, #292]	; (8004e70 <HAL_GPIO_Init+0x2f8>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d007      	beq.n	8004d60 <HAL_GPIO_Init+0x1e8>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a48      	ldr	r2, [pc, #288]	; (8004e74 <HAL_GPIO_Init+0x2fc>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d101      	bne.n	8004d5c <HAL_GPIO_Init+0x1e4>
 8004d58:	2305      	movs	r3, #5
 8004d5a:	e00a      	b.n	8004d72 <HAL_GPIO_Init+0x1fa>
 8004d5c:	2306      	movs	r3, #6
 8004d5e:	e008      	b.n	8004d72 <HAL_GPIO_Init+0x1fa>
 8004d60:	2304      	movs	r3, #4
 8004d62:	e006      	b.n	8004d72 <HAL_GPIO_Init+0x1fa>
 8004d64:	2303      	movs	r3, #3
 8004d66:	e004      	b.n	8004d72 <HAL_GPIO_Init+0x1fa>
 8004d68:	2302      	movs	r3, #2
 8004d6a:	e002      	b.n	8004d72 <HAL_GPIO_Init+0x1fa>
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e000      	b.n	8004d72 <HAL_GPIO_Init+0x1fa>
 8004d70:	2300      	movs	r3, #0
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	f002 0203 	and.w	r2, r2, #3
 8004d78:	0092      	lsls	r2, r2, #2
 8004d7a:	4093      	lsls	r3, r2
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d82:	4937      	ldr	r1, [pc, #220]	; (8004e60 <HAL_GPIO_Init+0x2e8>)
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	089b      	lsrs	r3, r3, #2
 8004d88:	3302      	adds	r3, #2
 8004d8a:	693a      	ldr	r2, [r7, #16]
 8004d8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004d90:	4b39      	ldr	r3, [pc, #228]	; (8004e78 <HAL_GPIO_Init+0x300>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	43db      	mvns	r3, r3
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d003      	beq.n	8004db4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004db4:	4a30      	ldr	r2, [pc, #192]	; (8004e78 <HAL_GPIO_Init+0x300>)
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004dba:	4b2f      	ldr	r3, [pc, #188]	; (8004e78 <HAL_GPIO_Init+0x300>)
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	43db      	mvns	r3, r3
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d003      	beq.n	8004dde <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004dde:	4a26      	ldr	r2, [pc, #152]	; (8004e78 <HAL_GPIO_Init+0x300>)
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004de4:	4b24      	ldr	r3, [pc, #144]	; (8004e78 <HAL_GPIO_Init+0x300>)
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	43db      	mvns	r3, r3
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	4013      	ands	r3, r2
 8004df2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d003      	beq.n	8004e08 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004e08:	4a1b      	ldr	r2, [pc, #108]	; (8004e78 <HAL_GPIO_Init+0x300>)
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004e0e:	4b1a      	ldr	r3, [pc, #104]	; (8004e78 <HAL_GPIO_Init+0x300>)
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	43db      	mvns	r3, r3
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d003      	beq.n	8004e32 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004e32:	4a11      	ldr	r2, [pc, #68]	; (8004e78 <HAL_GPIO_Init+0x300>)
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	fa22 f303 	lsr.w	r3, r2, r3
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	f47f ae9d 	bne.w	8004b88 <HAL_GPIO_Init+0x10>
  }
}
 8004e4e:	bf00      	nop
 8004e50:	bf00      	nop
 8004e52:	371c      	adds	r7, #28
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr
 8004e5c:	40021000 	.word	0x40021000
 8004e60:	40010000 	.word	0x40010000
 8004e64:	48000400 	.word	0x48000400
 8004e68:	48000800 	.word	0x48000800
 8004e6c:	48000c00 	.word	0x48000c00
 8004e70:	48001000 	.word	0x48001000
 8004e74:	48001400 	.word	0x48001400
 8004e78:	40010400 	.word	0x40010400

08004e7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	460b      	mov	r3, r1
 8004e86:	807b      	strh	r3, [r7, #2]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e8c:	787b      	ldrb	r3, [r7, #1]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d003      	beq.n	8004e9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e92:	887a      	ldrh	r2, [r7, #2]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004e98:	e002      	b.n	8004ea0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004e9a:	887a      	ldrh	r2, [r7, #2]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004ea0:	bf00      	nop
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b086      	sub	sp, #24
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d101      	bne.n	8004ebe <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e0be      	b.n	800503c <HAL_HRTIM_Init+0x190>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2202      	movs	r2, #2
 8004ec2:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  hhrtim->hdmaTimerF = (DMA_HandleTypeDef *)NULL;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d02e      	beq.n	8004f68 <HAL_HRTIM_Init+0xbc>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a4d      	ldr	r2, [pc, #308]	; (8005044 <HAL_HRTIM_Init+0x198>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d10b      	bne.n	8004f2c <HAL_HRTIM_Init+0x80>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8004f14:	4b4c      	ldr	r3, [pc, #304]	; (8005048 <HAL_HRTIM_Init+0x19c>)
 8004f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f18:	4a4b      	ldr	r2, [pc, #300]	; (8005048 <HAL_HRTIM_Init+0x19c>)
 8004f1a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f1e:	6613      	str	r3, [r2, #96]	; 0x60
 8004f20:	4b49      	ldr	r3, [pc, #292]	; (8005048 <HAL_HRTIM_Init+0x19c>)
 8004f22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f28:	60fb      	str	r3, [r7, #12]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004f3a:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004f50:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	693a      	ldr	r2, [r7, #16]
 8004f66:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f7fd f893 	bl	8002094 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d012      	beq.n	8004fa0 <HAL_HRTIM_Init+0xf4>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f88:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	75fb      	strb	r3, [r7, #23]
 8004fb4:	e03e      	b.n	8005034 <HAL_HRTIM_Init+0x188>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8004fb6:	7dfa      	ldrb	r2, [r7, #23]
 8004fb8:	6879      	ldr	r1, [r7, #4]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	00db      	lsls	r3, r3, #3
 8004fbe:	1a9b      	subs	r3, r3, r2
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	440b      	add	r3, r1
 8004fc4:	3318      	adds	r3, #24
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8004fca:	7dfa      	ldrb	r2, [r7, #23]
 8004fcc:	6879      	ldr	r1, [r7, #4]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	00db      	lsls	r3, r3, #3
 8004fd2:	1a9b      	subs	r3, r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	440b      	add	r3, r1
 8004fd8:	331c      	adds	r3, #28
 8004fda:	2200      	movs	r2, #0
 8004fdc:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8004fde:	7dfa      	ldrb	r2, [r7, #23]
 8004fe0:	6879      	ldr	r1, [r7, #4]
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	00db      	lsls	r3, r3, #3
 8004fe6:	1a9b      	subs	r3, r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	440b      	add	r3, r1
 8004fec:	3320      	adds	r3, #32
 8004fee:	2200      	movs	r2, #0
 8004ff0:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8004ff2:	7dfa      	ldrb	r2, [r7, #23]
 8004ff4:	6879      	ldr	r1, [r7, #4]
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	00db      	lsls	r3, r3, #3
 8004ffa:	1a9b      	subs	r3, r3, r2
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	440b      	add	r3, r1
 8005000:	3324      	adds	r3, #36	; 0x24
 8005002:	2200      	movs	r2, #0
 8005004:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8005006:	7dfa      	ldrb	r2, [r7, #23]
 8005008:	6879      	ldr	r1, [r7, #4]
 800500a:	4613      	mov	r3, r2
 800500c:	00db      	lsls	r3, r3, #3
 800500e:	1a9b      	subs	r3, r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	440b      	add	r3, r1
 8005014:	3328      	adds	r3, #40	; 0x28
 8005016:	2200      	movs	r2, #0
 8005018:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 800501a:	7dfa      	ldrb	r2, [r7, #23]
 800501c:	6879      	ldr	r1, [r7, #4]
 800501e:	4613      	mov	r3, r2
 8005020:	00db      	lsls	r3, r3, #3
 8005022:	1a9b      	subs	r3, r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	440b      	add	r3, r1
 8005028:	3330      	adds	r3, #48	; 0x30
 800502a:	2200      	movs	r2, #0
 800502c:	601a      	str	r2, [r3, #0]
       timer_idx++)
 800502e:	7dfb      	ldrb	r3, [r7, #23]
 8005030:	3301      	adds	r3, #1
 8005032:	75fb      	strb	r3, [r7, #23]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8005034:	7dfb      	ldrb	r3, [r7, #23]
 8005036:	2b06      	cmp	r3, #6
 8005038:	d9bd      	bls.n	8004fb6 <HAL_HRTIM_Init+0x10a>
  }

  return HAL_OK;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	3718      	adds	r7, #24
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	40016800 	.word	0x40016800
 8005048:	40021000 	.word	0x40021000

0800504c <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t CalibrationRate)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800505c:	2b01      	cmp	r3, #1
 800505e:	d101      	bne.n	8005064 <HAL_HRTIM_DLLCalibrationStart+0x18>
 8005060:	2302      	movs	r3, #2
 8005062:	e045      	b.n	80050f0 <HAL_HRTIM_DLLCalibrationStart+0xa4>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2202      	movs	r2, #2
 8005070:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800507a:	d114      	bne.n	80050a6 <HAL_HRTIM_DLLCalibrationStart+0x5a>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f022 0202 	bic.w	r2, r2, #2
 800508c:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f042 0201 	orr.w	r2, r2, #1
 80050a0:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
 80050a4:	e01f      	b.n	80050e6 <HAL_HRTIM_DLLCalibrationStart+0x9a>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f042 0202 	orr.w	r2, r2, #2
 80050b6:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 80050c2:	f023 010c 	bic.w	r1, r3, #12
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	683a      	ldr	r2, [r7, #0]
 80050cc:	430a      	orrs	r2, r1
 80050ce:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f042 0201 	orr.w	r2, r2, #1
 80050e2:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  return HAL_OK;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t Timeout)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 8005106:	f7fd fc83 	bl	8002a10 <HAL_GetTick>
 800510a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 800510c:	e014      	b.n	8005138 <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005114:	d010      	beq.n	8005138 <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0U))
 8005116:	f7fd fc7b 	bl	8002a10 <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	683a      	ldr	r2, [r7, #0]
 8005122:	429a      	cmp	r2, r3
 8005124:	d302      	bcc.n	800512c <HAL_HRTIM_PollForDLLCalibration+0x30>
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d105      	bne.n	8005138 <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2207      	movs	r2, #7
 8005130:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
        return HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	e011      	b.n	800515c <HAL_HRTIM_PollForDLLCalibration+0x60>
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8005140:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005148:	d1e1      	bne.n	800510e <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2201      	movs	r2, #1
 800514e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 800515a:	2300      	movs	r3, #0
}
 800515c:	4618      	mov	r0, r3
 800515e:	3710      	adds	r7, #16
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8005176:	b2db      	uxtb	r3, r3
 8005178:	2b02      	cmp	r3, #2
 800517a:	d101      	bne.n	8005180 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 800517c:	2302      	movs	r3, #2
 800517e:	e015      	b.n	80051ac <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2202      	movs	r2, #2
 8005184:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	2b06      	cmp	r3, #6
 800518c:	d104      	bne.n	8005198 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 800518e:	6879      	ldr	r1, [r7, #4]
 8005190:	68f8      	ldr	r0, [r7, #12]
 8005192:	f000 fe62 	bl	8005e5a <HRTIM_MasterBase_Config>
 8005196:	e004      	b.n	80051a2 <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	68b9      	ldr	r1, [r7, #8]
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	f000 fe8b 	bl	8005eb8 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <HAL_HRTIM_ADCTriggerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_ADCTriggerConfig(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t ADCTrigger,
                                             HRTIM_ADCTriggerCfgTypeDef* pADCTriggerCfg)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b087      	sub	sp, #28
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]

  /* Check parameters */
  assert_param(IS_HRTIM_ADCTRIGGER(ADCTrigger));
  assert_param(IS_HRTIM_ADCTRIGGERUPDATE(pADCTriggerCfg->UpdateSource));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d101      	bne.n	80051d0 <HAL_HRTIM_ADCTriggerConfig+0x1c>
  {
     return HAL_BUSY;
 80051cc:	2302      	movs	r3, #2
 80051ce:	e1d7      	b.n	8005580 <HAL_HRTIM_ADCTriggerConfig+0x3cc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d101      	bne.n	80051de <HAL_HRTIM_ADCTriggerConfig+0x2a>
 80051da:	2302      	movs	r3, #2
 80051dc:	e1d0      	b.n	8005580 <HAL_HRTIM_ADCTriggerConfig+0x3cc>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2201      	movs	r2, #1
 80051e2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2202      	movs	r2, #2
 80051ea:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Set the ADC trigger update source */
  hrtim_cr1 = hhrtim->Instance->sCommonRegs.CR1;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80051f6:	617b      	str	r3, [r7, #20]
  hrtim_adcur = hhrtim->Instance->sCommonRegs.ADCUR;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8005200:	613b      	str	r3, [r7, #16]

  switch (ADCTrigger)
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005208:	f000 816d 	beq.w	80054e6 <HAL_HRTIM_ADCTriggerConfig+0x332>
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005212:	f200 818d 	bhi.w	8005530 <HAL_HRTIM_ADCTriggerConfig+0x37c>
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800521c:	f000 813f 	beq.w	800549e <HAL_HRTIM_ADCTriggerConfig+0x2ea>
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005226:	f200 8183 	bhi.w	8005530 <HAL_HRTIM_ADCTriggerConfig+0x37c>
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	2b80      	cmp	r3, #128	; 0x80
 800522e:	f000 8111 	beq.w	8005454 <HAL_HRTIM_ADCTriggerConfig+0x2a0>
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	2b80      	cmp	r3, #128	; 0x80
 8005236:	f200 817b 	bhi.w	8005530 <HAL_HRTIM_ADCTriggerConfig+0x37c>
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	2b20      	cmp	r3, #32
 800523e:	d84b      	bhi.n	80052d8 <HAL_HRTIM_ADCTriggerConfig+0x124>
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	2b00      	cmp	r3, #0
 8005244:	f000 8174 	beq.w	8005530 <HAL_HRTIM_ADCTriggerConfig+0x37c>
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	3b01      	subs	r3, #1
 800524c:	2b1f      	cmp	r3, #31
 800524e:	f200 816f 	bhi.w	8005530 <HAL_HRTIM_ADCTriggerConfig+0x37c>
 8005252:	a201      	add	r2, pc, #4	; (adr r2, 8005258 <HAL_HRTIM_ADCTriggerConfig+0xa4>)
 8005254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005258:	080052e3 	.word	0x080052e3
 800525c:	08005307 	.word	0x08005307
 8005260:	08005531 	.word	0x08005531
 8005264:	0800532d 	.word	0x0800532d
 8005268:	08005531 	.word	0x08005531
 800526c:	08005531 	.word	0x08005531
 8005270:	08005531 	.word	0x08005531
 8005274:	08005353 	.word	0x08005353
 8005278:	08005531 	.word	0x08005531
 800527c:	08005531 	.word	0x08005531
 8005280:	08005531 	.word	0x08005531
 8005284:	08005531 	.word	0x08005531
 8005288:	08005531 	.word	0x08005531
 800528c:	08005531 	.word	0x08005531
 8005290:	08005531 	.word	0x08005531
 8005294:	08005379 	.word	0x08005379
 8005298:	08005531 	.word	0x08005531
 800529c:	08005531 	.word	0x08005531
 80052a0:	08005531 	.word	0x08005531
 80052a4:	08005531 	.word	0x08005531
 80052a8:	08005531 	.word	0x08005531
 80052ac:	08005531 	.word	0x08005531
 80052b0:	08005531 	.word	0x08005531
 80052b4:	08005531 	.word	0x08005531
 80052b8:	08005531 	.word	0x08005531
 80052bc:	08005531 	.word	0x08005531
 80052c0:	08005531 	.word	0x08005531
 80052c4:	08005531 	.word	0x08005531
 80052c8:	08005531 	.word	0x08005531
 80052cc:	08005531 	.word	0x08005531
 80052d0:	08005531 	.word	0x08005531
 80052d4:	080053c1 	.word	0x080053c1
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	2b40      	cmp	r3, #64	; 0x40
 80052dc:	f000 8095 	beq.w	800540a <HAL_HRTIM_ADCTriggerConfig+0x256>
 80052e0:	e126      	b.n	8005530 <HAL_HRTIM_ADCTriggerConfig+0x37c>
  {
  case HRTIM_ADCTRIGGER_1:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC1USRC);
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80052e8:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= (pADCTriggerCfg->UpdateSource & HRTIM_CR1_ADC1USRC);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80052f2:	697a      	ldr	r2, [r7, #20]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 1 source */
      hhrtim->Instance->sCommonRegs.ADC1R = pADCTriggerCfg->Trigger;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	6852      	ldr	r2, [r2, #4]
 8005300:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
      break;
 8005304:	e11d      	b.n	8005542 <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_2:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC2USRC);
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 800530c:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 3U) & HRTIM_CR1_ADC2USRC);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	00db      	lsls	r3, r3, #3
 8005314:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8005318:	697a      	ldr	r2, [r7, #20]
 800531a:	4313      	orrs	r3, r2
 800531c:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 2 source */
      hhrtim->Instance->sCommonRegs.ADC2R = pADCTriggerCfg->Trigger;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	6852      	ldr	r2, [r2, #4]
 8005326:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
      break;
 800532a:	e10a      	b.n	8005542 <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_3:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC3USRC);
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8005332:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 6U) & HRTIM_CR1_ADC3USRC);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	019b      	lsls	r3, r3, #6
 800533a:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	4313      	orrs	r3, r2
 8005342:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 3 source */
      hhrtim->Instance->sCommonRegs.ADC3R = pADCTriggerCfg->Trigger;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	6852      	ldr	r2, [r2, #4]
 800534c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
      break;
 8005350:	e0f7      	b.n	8005542 <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_4:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC4USRC);
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8005358:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 9U) & HRTIM_CR1_ADC4USRC);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	025b      	lsls	r3, r3, #9
 8005360:	f003 6360 	and.w	r3, r3, #234881024	; 0xe000000
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	4313      	orrs	r3, r2
 8005368:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 4 source */
      hhrtim->Instance->sCommonRegs.ADC4R = pADCTriggerCfg->Trigger;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	6852      	ldr	r2, [r2, #4]
 8005372:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
      break;
 8005376:	e0e4      	b.n	8005542 <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_5:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD5USRC);
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	f023 0307 	bic.w	r3, r3, #7
 800537e:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 16U) & HRTIM_ADCUR_AD5USRC);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	0c1b      	lsrs	r3, r3, #16
 8005386:	f003 0307 	and.w	r3, r3, #7
 800538a:	693a      	ldr	r2, [r7, #16]
 800538c:	4313      	orrs	r3, r2
 800538e:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 5 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD5TRG);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	; 0x3f8
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f022 021f 	bic.w	r2, r2, #31
 80053a0:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD5TRG_Pos) & HRTIM_ADCER_AD5TRG);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	; 0x3f8
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	f003 021f 	and.w	r2, r3, #31
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	430a      	orrs	r2, r1
 80053ba:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      break;
 80053be:	e0c0      	b.n	8005542 <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_6:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD6USRC);
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053c6:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 12U) & HRTIM_ADCUR_AD6USRC);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	0b1b      	lsrs	r3, r3, #12
 80053ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 6 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD6TRG);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	; 0x3f8
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f422 7278 	bic.w	r2, r2, #992	; 0x3e0
 80053e8:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD6TRG_Pos) & HRTIM_ADCER_AD6TRG);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	; 0x3f8
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	015b      	lsls	r3, r3, #5
 80053fa:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	430a      	orrs	r2, r1
 8005404:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      break;
 8005408:	e09b      	b.n	8005542 <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_7:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD7USRC);
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005410:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 8U) & HRTIM_ADCUR_AD7USRC);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	0a1b      	lsrs	r3, r3, #8
 8005418:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	4313      	orrs	r3, r2
 8005420:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 7 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD7TRG);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	; 0x3f8
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8005432:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD7TRG_Pos) & HRTIM_ADCER_AD7TRG);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	; 0x3f8
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	029b      	lsls	r3, r3, #10
 8005444:	f403 42f8 	and.w	r2, r3, #31744	; 0x7c00
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	430a      	orrs	r2, r1
 800544e:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      break;
 8005452:	e076      	b.n	8005542 <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_8:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD8USRC);
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800545a:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 4U) & HRTIM_ADCUR_AD8USRC);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	091b      	lsrs	r3, r3, #4
 8005462:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005466:	693a      	ldr	r2, [r7, #16]
 8005468:	4313      	orrs	r3, r2
 800546a:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 8 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD8TRG);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	; 0x3f8
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800547c:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD8TRG_Pos) & HRTIM_ADCER_AD8TRG);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	; 0x3f8
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	041b      	lsls	r3, r3, #16
 800548e:	f403 12f8 	and.w	r2, r3, #2031616	; 0x1f0000
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	430a      	orrs	r2, r1
 8005498:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      break;
 800549c:	e051      	b.n	8005542 <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_9:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD9USRC);
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80054a4:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource) & HRTIM_ADCUR_AD9USRC);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80054ae:	693a      	ldr	r2, [r7, #16]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 9 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD9TRG);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	; 0x3f8
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f022 7278 	bic.w	r2, r2, #65011712	; 0x3e00000
 80054c4:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD9TRG_Pos) & HRTIM_ADCER_AD9TRG);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	; 0x3f8
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	055b      	lsls	r3, r3, #21
 80054d6:	f003 7278 	and.w	r2, r3, #65011712	; 0x3e00000
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	430a      	orrs	r2, r1
 80054e0:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      break;
 80054e4:	e02d      	b.n	8005542 <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_10:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD10USRC);
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80054ec:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource << 4U) & HRTIM_ADCUR_AD10USRC);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	011b      	lsls	r3, r3, #4
 80054f4:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
 80054f8:	693a      	ldr	r2, [r7, #16]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 10 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD10TRG);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	; 0x3f8
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f022 42f8 	bic.w	r2, r2, #2080374784	; 0x7c000000
 800550e:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD10TRG_Pos) & HRTIM_ADCER_AD10TRG);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	; 0x3f8
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	069b      	lsls	r3, r3, #26
 8005520:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	430a      	orrs	r2, r1
 800552a:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      break;
 800552e:	e008      	b.n	8005542 <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2207      	movs	r2, #7
 8005534:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 8005540:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b07      	cmp	r3, #7
 800554c:	d101      	bne.n	8005552 <HAL_HRTIM_ADCTriggerConfig+0x39e>
  {
     return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e016      	b.n	8005580 <HAL_HRTIM_ADCTriggerConfig+0x3cc>
  }

  /* Update the HRTIM registers */
  if (ADCTrigger < HRTIM_ADCTRIGGER_5)
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	2b0f      	cmp	r3, #15
 8005556:	d805      	bhi.n	8005564 <HAL_HRTIM_ADCTriggerConfig+0x3b0>
  {
   hhrtim->Instance->sCommonRegs.CR1 = hrtim_cr1;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	697a      	ldr	r2, [r7, #20]
 800555e:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
 8005562:	e004      	b.n	800556e <HAL_HRTIM_ADCTriggerConfig+0x3ba>
  }
  else
  {
   hhrtim->Instance->sCommonRegs.ADCUR = hrtim_adcur;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 800557e:	2300      	movs	r3, #0
}
 8005580:	4618      	mov	r0, r3
 8005582:	371c      	adds	r7, #28
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <HAL_HRTIM_ADCPostScalerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_ADCPostScalerConfig(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t ADCTrigger,
                                             uint32_t Postscaler)
{
 800558c:	b480      	push	{r7}
 800558e:	b085      	sub	sp, #20
 8005590:	af00      	add	r7, sp, #0
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	607a      	str	r2, [r7, #4]
  /* Check parameters */
  assert_param(IS_HRTIM_ADCTRIGGER(ADCTrigger));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d101      	bne.n	80055a8 <HAL_HRTIM_ADCPostScalerConfig+0x1c>
  {
     return HAL_BUSY;
 80055a4:	2302      	movs	r3, #2
 80055a6:	e135      	b.n	8005814 <HAL_HRTIM_ADCPostScalerConfig+0x288>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d101      	bne.n	80055b6 <HAL_HRTIM_ADCPostScalerConfig+0x2a>
 80055b2:	2302      	movs	r3, #2
 80055b4:	e12e      	b.n	8005814 <HAL_HRTIM_ADCPostScalerConfig+0x288>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2202      	movs	r2, #2
 80055c2:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  switch (ADCTrigger)
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055cc:	f000 80f8 	beq.w	80057c0 <HAL_HRTIM_ADCPostScalerConfig+0x234>
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055d6:	f200 8103 	bhi.w	80057e0 <HAL_HRTIM_ADCPostScalerConfig+0x254>
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055e0:	f000 80de 	beq.w	80057a0 <HAL_HRTIM_ADCPostScalerConfig+0x214>
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055ea:	f200 80f9 	bhi.w	80057e0 <HAL_HRTIM_ADCPostScalerConfig+0x254>
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	2b80      	cmp	r3, #128	; 0x80
 80055f2:	f000 80c5 	beq.w	8005780 <HAL_HRTIM_ADCPostScalerConfig+0x1f4>
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	2b80      	cmp	r3, #128	; 0x80
 80055fa:	f200 80f1 	bhi.w	80057e0 <HAL_HRTIM_ADCPostScalerConfig+0x254>
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	2b20      	cmp	r3, #32
 8005602:	d84b      	bhi.n	800569c <HAL_HRTIM_ADCPostScalerConfig+0x110>
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	2b00      	cmp	r3, #0
 8005608:	f000 80ea 	beq.w	80057e0 <HAL_HRTIM_ADCPostScalerConfig+0x254>
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	3b01      	subs	r3, #1
 8005610:	2b1f      	cmp	r3, #31
 8005612:	f200 80e5 	bhi.w	80057e0 <HAL_HRTIM_ADCPostScalerConfig+0x254>
 8005616:	a201      	add	r2, pc, #4	; (adr r2, 800561c <HAL_HRTIM_ADCPostScalerConfig+0x90>)
 8005618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800561c:	080056a5 	.word	0x080056a5
 8005620:	080056c3 	.word	0x080056c3
 8005624:	080057e1 	.word	0x080057e1
 8005628:	080056e3 	.word	0x080056e3
 800562c:	080057e1 	.word	0x080057e1
 8005630:	080057e1 	.word	0x080057e1
 8005634:	080057e1 	.word	0x080057e1
 8005638:	08005703 	.word	0x08005703
 800563c:	080057e1 	.word	0x080057e1
 8005640:	080057e1 	.word	0x080057e1
 8005644:	080057e1 	.word	0x080057e1
 8005648:	080057e1 	.word	0x080057e1
 800564c:	080057e1 	.word	0x080057e1
 8005650:	080057e1 	.word	0x080057e1
 8005654:	080057e1 	.word	0x080057e1
 8005658:	08005723 	.word	0x08005723
 800565c:	080057e1 	.word	0x080057e1
 8005660:	080057e1 	.word	0x080057e1
 8005664:	080057e1 	.word	0x080057e1
 8005668:	080057e1 	.word	0x080057e1
 800566c:	080057e1 	.word	0x080057e1
 8005670:	080057e1 	.word	0x080057e1
 8005674:	080057e1 	.word	0x080057e1
 8005678:	080057e1 	.word	0x080057e1
 800567c:	080057e1 	.word	0x080057e1
 8005680:	080057e1 	.word	0x080057e1
 8005684:	080057e1 	.word	0x080057e1
 8005688:	080057e1 	.word	0x080057e1
 800568c:	080057e1 	.word	0x080057e1
 8005690:	080057e1 	.word	0x080057e1
 8005694:	080057e1 	.word	0x080057e1
 8005698:	08005743 	.word	0x08005743
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	2b40      	cmp	r3, #64	; 0x40
 80056a0:	d05e      	beq.n	8005760 <HAL_HRTIM_ADCPostScalerConfig+0x1d4>
 80056a2:	e09d      	b.n	80057e0 <HAL_HRTIM_ADCPostScalerConfig+0x254>
  {
  case HRTIM_ADCTRIGGER_1:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD1PSC, (Postscaler & HRTIM_ADCPS1_AD1PSC));
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80056ac:	f023 011f 	bic.w	r1, r3, #31
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f003 021f 	and.w	r2, r3, #31
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	430a      	orrs	r2, r1
 80056bc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      break;
 80056c0:	e097      	b.n	80057f2 <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_2:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD2PSC, ((Postscaler << HRTIM_ADCPS1_AD2PSC_Pos) & HRTIM_ADCPS1_AD2PSC));
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80056ca:	f423 61f8 	bic.w	r1, r3, #1984	; 0x7c0
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	019b      	lsls	r3, r3, #6
 80056d2:	f403 62f8 	and.w	r2, r3, #1984	; 0x7c0
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	430a      	orrs	r2, r1
 80056dc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      break;
 80056e0:	e087      	b.n	80057f2 <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_3:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD3PSC, ((Postscaler << HRTIM_ADCPS1_AD3PSC_Pos) & HRTIM_ADCPS1_AD3PSC));
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80056ea:	f423 31f8 	bic.w	r1, r3, #126976	; 0x1f000
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	031b      	lsls	r3, r3, #12
 80056f2:	f403 32f8 	and.w	r2, r3, #126976	; 0x1f000
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	430a      	orrs	r2, r1
 80056fc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      break;
 8005700:	e077      	b.n	80057f2 <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_4:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD4PSC, ((Postscaler << HRTIM_ADCPS1_AD4PSC_Pos) & HRTIM_ADCPS1_AD4PSC));
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800570a:	f423 01f8 	bic.w	r1, r3, #8126464	; 0x7c0000
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	049b      	lsls	r3, r3, #18
 8005712:	f403 02f8 	and.w	r2, r3, #8126464	; 0x7c0000
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	430a      	orrs	r2, r1
 800571c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      break;
 8005720:	e067      	b.n	80057f2 <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_5:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD5PSC, ((Postscaler << HRTIM_ADCPS1_AD5PSC_Pos) & HRTIM_ADCPS1_AD5PSC));
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800572a:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	061b      	lsls	r3, r3, #24
 8005732:	f003 52f8 	and.w	r2, r3, #520093696	; 0x1f000000
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	430a      	orrs	r2, r1
 800573c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      break;
 8005740:	e057      	b.n	80057f2 <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_6:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD6PSC, ((Postscaler << HRTIM_ADCPS2_AD6PSC_Pos) & HRTIM_ADCPS2_AD6PSC));
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800574a:	f023 011f 	bic.w	r1, r3, #31
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f003 021f 	and.w	r2, r3, #31
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	430a      	orrs	r2, r1
 800575a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      break;
 800575e:	e048      	b.n	80057f2 <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_7:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD7PSC, ((Postscaler << HRTIM_ADCPS2_AD7PSC_Pos) & HRTIM_ADCPS2_AD7PSC));
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005768:	f423 61f8 	bic.w	r1, r3, #1984	; 0x7c0
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	019b      	lsls	r3, r3, #6
 8005770:	f403 62f8 	and.w	r2, r3, #1984	; 0x7c0
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	430a      	orrs	r2, r1
 800577a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      break;
 800577e:	e038      	b.n	80057f2 <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_8:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD8PSC, ((Postscaler << HRTIM_ADCPS2_AD8PSC_Pos) & HRTIM_ADCPS2_AD8PSC));
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005788:	f423 31f8 	bic.w	r1, r3, #126976	; 0x1f000
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	031b      	lsls	r3, r3, #12
 8005790:	f403 32f8 	and.w	r2, r3, #126976	; 0x1f000
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	430a      	orrs	r2, r1
 800579a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      break;
 800579e:	e028      	b.n	80057f2 <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_9:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD9PSC, ((Postscaler << HRTIM_ADCPS2_AD9PSC_Pos) & HRTIM_ADCPS2_AD9PSC));
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80057a8:	f423 01f8 	bic.w	r1, r3, #8126464	; 0x7c0000
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	049b      	lsls	r3, r3, #18
 80057b0:	f403 02f8 	and.w	r2, r3, #8126464	; 0x7c0000
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	430a      	orrs	r2, r1
 80057ba:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      break;
 80057be:	e018      	b.n	80057f2 <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_10:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD10PSC, ((Postscaler << HRTIM_ADCPS2_AD10PSC_Pos) & HRTIM_ADCPS2_AD10PSC));
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80057c8:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	061b      	lsls	r3, r3, #24
 80057d0:	f003 52f8 	and.w	r2, r3, #520093696	; 0x1f000000
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	430a      	orrs	r2, r1
 80057da:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      break;
 80057de:	e008      	b.n	80057f2 <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2207      	movs	r2, #7
 80057e4:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 80057f0:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b07      	cmp	r3, #7
 80057fc:	d101      	bne.n	8005802 <HAL_HRTIM_ADCPostScalerConfig+0x276>
  {
     return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e008      	b.n	8005814 <HAL_HRTIM_ADCPostScalerConfig+0x288>
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8005812:	2300      	movs	r3, #0
}
 8005814:	4618      	mov	r0, r3
 8005816:	3714      	adds	r7, #20
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8005832:	b2db      	uxtb	r3, r3
 8005834:	2b02      	cmp	r3, #2
 8005836:	d101      	bne.n	800583c <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8005838:	2302      	movs	r3, #2
 800583a:	e05f      	b.n	80058fc <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8005842:	2b01      	cmp	r3, #1
 8005844:	d101      	bne.n	800584a <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8005846:	2302      	movs	r3, #2
 8005848:	e058      	b.n	80058fc <HAL_HRTIM_WaveformTimerConfig+0xdc>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2201      	movs	r2, #1
 800584e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2202      	movs	r2, #2
 8005856:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	2b06      	cmp	r3, #6
 800585e:	d104      	bne.n	800586a <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8005860:	6879      	ldr	r1, [r7, #4]
 8005862:	68f8      	ldr	r0, [r7, #12]
 8005864:	f000 fb68 	bl	8005f38 <HRTIM_MasterWaveform_Config>
 8005868:	e004      	b.n	8005874 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));
    assert_param(IS_HRTIM_TIMSYNCUPDATE(pTimerCfg->ReSyncUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	68b9      	ldr	r1, [r7, #8]
 800586e:	68f8      	ldr	r0, [r7, #12]
 8005870:	f000 fc00 	bl	8006074 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6819      	ldr	r1, [r3, #0]
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	68ba      	ldr	r2, [r7, #8]
 800587c:	4613      	mov	r3, r2
 800587e:	00db      	lsls	r3, r3, #3
 8005880:	1a9b      	subs	r3, r3, r2
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	4403      	add	r3, r0
 8005886:	3320      	adds	r3, #32
 8005888:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6859      	ldr	r1, [r3, #4]
 800588e:	68f8      	ldr	r0, [r7, #12]
 8005890:	68ba      	ldr	r2, [r7, #8]
 8005892:	4613      	mov	r3, r2
 8005894:	00db      	lsls	r3, r3, #3
 8005896:	1a9b      	subs	r3, r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	4403      	add	r3, r0
 800589c:	3324      	adds	r3, #36	; 0x24
 800589e:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6899      	ldr	r1, [r3, #8]
 80058a4:	68f8      	ldr	r0, [r7, #12]
 80058a6:	68ba      	ldr	r2, [r7, #8]
 80058a8:	4613      	mov	r3, r2
 80058aa:	00db      	lsls	r3, r3, #3
 80058ac:	1a9b      	subs	r3, r3, r2
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4403      	add	r3, r0
 80058b2:	3328      	adds	r3, #40	; 0x28
 80058b4:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	68d9      	ldr	r1, [r3, #12]
 80058ba:	68f8      	ldr	r0, [r7, #12]
 80058bc:	68ba      	ldr	r2, [r7, #8]
 80058be:	4613      	mov	r3, r2
 80058c0:	00db      	lsls	r3, r3, #3
 80058c2:	1a9b      	subs	r3, r3, r2
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	4403      	add	r3, r0
 80058c8:	332c      	adds	r3, #44	; 0x2c
 80058ca:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6919      	ldr	r1, [r3, #16]
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	68ba      	ldr	r2, [r7, #8]
 80058d4:	4613      	mov	r3, r2
 80058d6:	00db      	lsls	r3, r3, #3
 80058d8:	1a9b      	subs	r3, r3, r2
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	4403      	add	r3, r0
 80058de:	3330      	adds	r3, #48	; 0x30
 80058e0:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 80058e2:	68b9      	ldr	r1, [r7, #8]
 80058e4:	68f8      	ldr	r0, [r7, #12]
 80058e6:	f000 fec9 	bl	800667c <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2201      	movs	r2, #1
 80058ee:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3710      	adds	r7, #16
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <HAL_HRTIM_WaveformTimerControl>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerControl(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                HRTIM_TimerCtlTypeDef * pTimerCtl)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	607a      	str	r2, [r7, #4]
    assert_param(IS_HRTIM_TIMERGTCMP1(pTimerCtl->GreaterCMP1));
    assert_param(IS_HRTIM_DUALDAC_RESET(pTimerCtl->DualChannelDacReset));
    assert_param(IS_HRTIM_DUALDAC_STEP(pTimerCtl->DualChannelDacStep));
    assert_param(IS_HRTIM_DUALDAC_ENABLE(pTimerCtl->DualChannelDacEnable));

    if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8005916:	b2db      	uxtb	r3, r3
 8005918:	2b02      	cmp	r3, #2
 800591a:	d101      	bne.n	8005920 <HAL_HRTIM_WaveformTimerControl+0x1c>
    {
       return HAL_BUSY;
 800591c:	2302      	movs	r3, #2
 800591e:	e020      	b.n	8005962 <HAL_HRTIM_WaveformTimerControl+0x5e>
    }

    /* Process Locked */
    __HAL_LOCK(hhrtim);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8005926:	2b01      	cmp	r3, #1
 8005928:	d101      	bne.n	800592e <HAL_HRTIM_WaveformTimerControl+0x2a>
 800592a:	2302      	movs	r3, #2
 800592c:	e019      	b.n	8005962 <HAL_HRTIM_WaveformTimerControl+0x5e>
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2201      	movs	r2, #1
 8005932:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2202      	movs	r2, #2
 800593a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Control(hhrtim, TimerIdx, pTimerCtl);
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	68b9      	ldr	r1, [r7, #8]
 8005942:	68f8      	ldr	r0, [r7, #12]
 8005944:	f000 fd2a 	bl	800639c <HRTIM_TimingUnitWaveform_Control>

    /* Force a software update */
    HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8005948:	68b9      	ldr	r1, [r7, #8]
 800594a:	68f8      	ldr	r0, [r7, #12]
 800594c:	f000 fe96 	bl	800667c <HRTIM_ForceRegistersUpdate>

    hhrtim->State = HAL_HRTIM_STATE_READY;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    /* Process Unlocked */
    __HAL_UNLOCK(hhrtim);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    return HAL_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3710      	adds	r7, #16
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
	...

0800596c <HAL_HRTIM_DeadTimeConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_DeadTimeConfig(HRTIM_HandleTypeDef * hhrtim,
                                           uint32_t TimerIdx,
                                           HRTIM_DeadTimeCfgTypeDef* pDeadTimeCfg)
{
 800596c:	b480      	push	{r7}
 800596e:	b087      	sub	sp, #28
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_TIMDEADTIME_RISINGSIGNLOCK(pDeadTimeCfg->RisingSignLock));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGSIGN(pDeadTimeCfg->FallingSign));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGLOCK(pDeadTimeCfg->FallingLock));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGSIGNLOCK(pDeadTimeCfg->FallingSignLock));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800597e:	b2db      	uxtb	r3, r3
 8005980:	2b02      	cmp	r3, #2
 8005982:	d101      	bne.n	8005988 <HAL_HRTIM_DeadTimeConfig+0x1c>
  {
     return HAL_BUSY;
 8005984:	2302      	movs	r3, #2
 8005986:	e067      	b.n	8005a58 <HAL_HRTIM_DeadTimeConfig+0xec>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800598e:	2b01      	cmp	r3, #1
 8005990:	d101      	bne.n	8005996 <HAL_HRTIM_DeadTimeConfig+0x2a>
 8005992:	2302      	movs	r3, #2
 8005994:	e060      	b.n	8005a58 <HAL_HRTIM_DeadTimeConfig+0xec>
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2201      	movs	r2, #1
 800599a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2202      	movs	r2, #2
 80059a2:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Set timer deadtime configuration */
  hrtim_dtr  = (pDeadTimeCfg->Prescaler & HRTIM_DTR_DTPRSC);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80059ae:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingValue & HRTIM_DTR_DTR);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059b8:	697a      	ldr	r2, [r7, #20]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingSign & HRTIM_DTR_SDTR);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059c6:	697a      	ldr	r2, [r7, #20]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingSignLock & HRTIM_DTR_DTRSLK);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059d4:	697a      	ldr	r2, [r7, #20]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingLock & HRTIM_DTR_DTRLK);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059e2:	697a      	ldr	r2, [r7, #20]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= ((pDeadTimeCfg->FallingValue << 16U) & HRTIM_DTR_DTF);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	695b      	ldr	r3, [r3, #20]
 80059ec:	041a      	lsls	r2, r3, #16
 80059ee:	4b1d      	ldr	r3, [pc, #116]	; (8005a64 <HAL_HRTIM_DeadTimeConfig+0xf8>)
 80059f0:	4013      	ands	r3, r2
 80059f2:	697a      	ldr	r2, [r7, #20]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingSign & HRTIM_DTR_SDTF);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	699b      	ldr	r3, [r3, #24]
 80059fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingSignLock & HRTIM_DTR_DTFSLK);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a1b      	ldr	r3, [r3, #32]
 8005a0a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005a0e:	697a      	ldr	r2, [r7, #20]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingLock & HRTIM_DTR_DTFLK);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	69db      	ldr	r3, [r3, #28]
 8005a18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a1c:	697a      	ldr	r2, [r7, #20]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR, (
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	01db      	lsls	r3, r3, #7
 8005a2a:	4413      	add	r3, r2
 8005a2c:	33b8      	adds	r3, #184	; 0xb8
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	4b0d      	ldr	r3, [pc, #52]	; (8005a68 <HAL_HRTIM_DeadTimeConfig+0xfc>)
 8005a32:	4013      	ands	r3, r2
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	6811      	ldr	r1, [r2, #0]
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	431a      	orrs	r2, r3
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	01db      	lsls	r3, r3, #7
 8005a40:	440b      	add	r3, r1
 8005a42:	33b8      	adds	r3, #184	; 0xb8
 8005a44:	601a      	str	r2, [r3, #0]
                 HRTIM_DTR_DTR | HRTIM_DTR_SDTR | HRTIM_DTR_DTPRSC |
                 HRTIM_DTR_DTRSLK | HRTIM_DTR_DTRLK | HRTIM_DTR_DTF |
                 HRTIM_DTR_SDTF | HRTIM_DTR_DTFSLK | HRTIM_DTR_DTFLK), hrtim_dtr);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	371c      	adds	r7, #28
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr
 8005a64:	01ff0000 	.word	0x01ff0000
 8005a68:	3c002000 	.word	0x3c002000

08005a6c <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	607a      	str	r2, [r7, #4]
 8005a78:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d101      	bne.n	8005a8a <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 8005a86:	2302      	movs	r3, #2
 8005a88:	e157      	b.n	8005d3a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d101      	bne.n	8005a98 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 8005a94:	2302      	movs	r3, #2
 8005a96:	e150      	b.n	8005d3a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	2b06      	cmp	r3, #6
 8005aac:	d140      	bne.n	8005b30 <HAL_HRTIM_WaveformCompareConfig+0xc4>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	2b07      	cmp	r3, #7
 8005ab4:	d82a      	bhi.n	8005b0c <HAL_HRTIM_WaveformCompareConfig+0xa0>
 8005ab6:	a201      	add	r2, pc, #4	; (adr r2, 8005abc <HAL_HRTIM_WaveformCompareConfig+0x50>)
 8005ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005abc:	08005add 	.word	0x08005add
 8005ac0:	08005ae9 	.word	0x08005ae9
 8005ac4:	08005b0d 	.word	0x08005b0d
 8005ac8:	08005af5 	.word	0x08005af5
 8005acc:	08005b0d 	.word	0x08005b0d
 8005ad0:	08005b0d 	.word	0x08005b0d
 8005ad4:	08005b0d 	.word	0x08005b0d
 8005ad8:	08005b01 	.word	0x08005b01
  {
    switch (CompareUnit)
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	683a      	ldr	r2, [r7, #0]
 8005ae2:	6812      	ldr	r2, [r2, #0]
 8005ae4:	61da      	str	r2, [r3, #28]
        break;
 8005ae6:	e01a      	b.n	8005b1e <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	683a      	ldr	r2, [r7, #0]
 8005aee:	6812      	ldr	r2, [r2, #0]
 8005af0:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 8005af2:	e014      	b.n	8005b1e <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	683a      	ldr	r2, [r7, #0]
 8005afa:	6812      	ldr	r2, [r2, #0]
 8005afc:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 8005afe:	e00e      	b.n	8005b1e <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	683a      	ldr	r2, [r7, #0]
 8005b06:	6812      	ldr	r2, [r2, #0]
 8005b08:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 8005b0a:	e008      	b.n	8005b1e <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2207      	movs	r2, #7
 8005b10:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

        break;
 8005b1c:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	2b07      	cmp	r3, #7
 8005b28:	f040 80fe 	bne.w	8005d28 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e104      	b.n	8005d3a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	3b01      	subs	r3, #1
 8005b34:	2b07      	cmp	r3, #7
 8005b36:	f200 80e3 	bhi.w	8005d00 <HAL_HRTIM_WaveformCompareConfig+0x294>
 8005b3a:	a201      	add	r2, pc, #4	; (adr r2, 8005b40 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 8005b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b40:	08005b61 	.word	0x08005b61
 8005b44:	08005b75 	.word	0x08005b75
 8005b48:	08005d01 	.word	0x08005d01
 8005b4c:	08005c31 	.word	0x08005c31
 8005b50:	08005d01 	.word	0x08005d01
 8005b54:	08005d01 	.word	0x08005d01
 8005b58:	08005d01 	.word	0x08005d01
 8005b5c:	08005c45 	.word	0x08005c45
    switch (CompareUnit)
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6819      	ldr	r1, [r3, #0]
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	01db      	lsls	r3, r3, #7
 8005b6c:	440b      	add	r3, r1
 8005b6e:	339c      	adds	r3, #156	; 0x9c
 8005b70:	601a      	str	r2, [r3, #0]
        break;
 8005b72:	e0d1      	b.n	8005d18 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6819      	ldr	r1, [r3, #0]
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	01db      	lsls	r3, r3, #7
 8005b80:	440b      	add	r3, r1
 8005b82:	33a4      	adds	r3, #164	; 0xa4
 8005b84:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d03f      	beq.n	8005c0e <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	3301      	adds	r3, #1
 8005b96:	01db      	lsls	r3, r3, #7
 8005b98:	4413      	add	r3, r2
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	6811      	ldr	r1, [r2, #0]
 8005ba0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	01db      	lsls	r3, r3, #7
 8005baa:	440b      	add	r3, r1
 8005bac:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	01db      	lsls	r3, r3, #7
 8005bb8:	4413      	add	r3, r2
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	68f9      	ldr	r1, [r7, #12]
 8005bc2:	6809      	ldr	r1, [r1, #0]
 8005bc4:	431a      	orrs	r2, r3
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	01db      	lsls	r3, r3, #7
 8005bcc:	440b      	add	r3, r1
 8005bce:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bd8:	d109      	bne.n	8005bee <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6819      	ldr	r1, [r3, #0]
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	689a      	ldr	r2, [r3, #8]
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	01db      	lsls	r3, r3, #7
 8005be6:	440b      	add	r3, r1
 8005be8:	339c      	adds	r3, #156	; 0x9c
 8005bea:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 8005bec:	e091      	b.n	8005d12 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005bf6:	f040 808c 	bne.w	8005d12 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6819      	ldr	r1, [r3, #0]
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	689a      	ldr	r2, [r3, #8]
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	01db      	lsls	r3, r3, #7
 8005c06:	440b      	add	r3, r1
 8005c08:	33a8      	adds	r3, #168	; 0xa8
 8005c0a:	601a      	str	r2, [r3, #0]
         break;
 8005c0c:	e081      	b.n	8005d12 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	3301      	adds	r3, #1
 8005c16:	01db      	lsls	r3, r3, #7
 8005c18:	4413      	add	r3, r2
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	6811      	ldr	r1, [r2, #0]
 8005c20:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	3301      	adds	r3, #1
 8005c28:	01db      	lsls	r3, r3, #7
 8005c2a:	440b      	add	r3, r1
 8005c2c:	601a      	str	r2, [r3, #0]
         break;
 8005c2e:	e070      	b.n	8005d12 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6819      	ldr	r1, [r3, #0]
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	01db      	lsls	r3, r3, #7
 8005c3c:	440b      	add	r3, r1
 8005c3e:	33a8      	adds	r3, #168	; 0xa8
 8005c40:	601a      	str	r2, [r3, #0]
        break;
 8005c42:	e069      	b.n	8005d18 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6819      	ldr	r1, [r3, #0]
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	01db      	lsls	r3, r3, #7
 8005c50:	440b      	add	r3, r1
 8005c52:	33ac      	adds	r3, #172	; 0xac
 8005c54:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d03f      	beq.n	8005cde <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	3301      	adds	r3, #1
 8005c66:	01db      	lsls	r3, r3, #7
 8005c68:	4413      	add	r3, r2
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	6811      	ldr	r1, [r2, #0]
 8005c70:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	3301      	adds	r3, #1
 8005c78:	01db      	lsls	r3, r3, #7
 8005c7a:	440b      	add	r3, r1
 8005c7c:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	3301      	adds	r3, #1
 8005c86:	01db      	lsls	r3, r3, #7
 8005c88:	4413      	add	r3, r2
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	68f9      	ldr	r1, [r7, #12]
 8005c94:	6809      	ldr	r1, [r1, #0]
 8005c96:	431a      	orrs	r2, r3
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	01db      	lsls	r3, r3, #7
 8005c9e:	440b      	add	r3, r1
 8005ca0:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005caa:	d109      	bne.n	8005cc0 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6819      	ldr	r1, [r3, #0]
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	689a      	ldr	r2, [r3, #8]
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	01db      	lsls	r3, r3, #7
 8005cb8:	440b      	add	r3, r1
 8005cba:	339c      	adds	r3, #156	; 0x9c
 8005cbc:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 8005cbe:	e02a      	b.n	8005d16 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005cc8:	d125      	bne.n	8005d16 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6819      	ldr	r1, [r3, #0]
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	689a      	ldr	r2, [r3, #8]
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	01db      	lsls	r3, r3, #7
 8005cd6:	440b      	add	r3, r1
 8005cd8:	33a8      	adds	r3, #168	; 0xa8
 8005cda:	601a      	str	r2, [r3, #0]
         break;
 8005cdc:	e01b      	b.n	8005d16 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	01db      	lsls	r3, r3, #7
 8005ce8:	4413      	add	r3, r2
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	6811      	ldr	r1, [r2, #0]
 8005cf0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	01db      	lsls	r3, r3, #7
 8005cfa:	440b      	add	r3, r1
 8005cfc:	601a      	str	r2, [r3, #0]
         break;
 8005cfe:	e00a      	b.n	8005d16 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2207      	movs	r2, #7
 8005d04:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 8005d10:	e002      	b.n	8005d18 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8005d12:	bf00      	nop
 8005d14:	e000      	b.n	8005d18 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8005d16:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	2b07      	cmp	r3, #7
 8005d22:	d101      	bne.n	8005d28 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e008      	b.n	8005d3a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3714      	adds	r7, #20
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop

08005d48 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	607a      	str	r2, [r7, #4]
 8005d54:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	d101      	bne.n	8005d66 <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 8005d62:	2302      	movs	r3, #2
 8005d64:	e01d      	b.n	8005da2 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d101      	bne.n	8005d74 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8005d70:	2302      	movs	r3, #2
 8005d72:	e016      	b.n	8005da2 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2202      	movs	r2, #2
 8005d80:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	68b9      	ldr	r1, [r7, #8]
 8005d8a:	68f8      	ldr	r0, [r7, #12]
 8005d8c:	f000 fb66 	bl	800645c <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3710      	adds	r7, #16
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}

08005daa <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TF2: Timer F - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t OutputsToStart)
{
 8005daa:	b480      	push	{r7}
 8005dac:	b083      	sub	sp, #12
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
 8005db2:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d101      	bne.n	8005dc2 <HAL_HRTIM_WaveformOutputStart+0x18>
 8005dbe:	2302      	movs	r3, #2
 8005dc0:	e01a      	b.n	8005df8 <HAL_HRTIM_WaveformOutputStart+0x4e>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2202      	movs	r2, #2
 8005dce:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f8d3 1394 	ldr.w	r1, [r3, #916]	; 0x394
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	683a      	ldr	r2, [r7, #0]
 8005de0:	430a      	orrs	r2, r1
 8005de2:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <HAL_HRTIM_WaveformCountStart>:
  *                   @arg HRTIM_TIMERID_TIMER_F
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart(HRTIM_HandleTypeDef * hhrtim,
                                                 uint32_t Timers)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d101      	bne.n	8005e1c <HAL_HRTIM_WaveformCountStart+0x18>
 8005e18:	2302      	movs	r3, #2
 8005e1a:	e018      	b.n	8005e4e <HAL_HRTIM_WaveformCountStart+0x4a>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2202      	movs	r2, #2
 8005e28:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	6819      	ldr	r1, [r3, #0]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	683a      	ldr	r2, [r7, #0]
 8005e38:	430a      	orrs	r2, r1
 8005e3a:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	370c      	adds	r7, #12
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr

08005e5a <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                     HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	b085      	sub	sp, #20
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
 8005e62:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f023 0307 	bic.w	r3, r3, #7
 8005e72:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f023 0318 	bic.w	r3, r3, #24
 8005e84:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	683a      	ldr	r2, [r7, #0]
 8005e9e:	6812      	ldr	r2, [r2, #0]
 8005ea0:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	683a      	ldr	r2, [r7, #0]
 8005ea8:	6852      	ldr	r2, [r2, #4]
 8005eaa:	619a      	str	r2, [r3, #24]
}
 8005eac:	bf00      	nop
 8005eae:	3714      	adds	r7, #20
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                         uint32_t TimerIdx ,
                                         HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b087      	sub	sp, #28
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	3301      	adds	r3, #1
 8005ecc:	01db      	lsls	r3, r3, #7
 8005ece:	4413      	add	r3, r2
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	f023 0307 	bic.w	r3, r3, #7
 8005eda:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	697a      	ldr	r2, [r7, #20]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	f023 0318 	bic.w	r3, r3, #24
 8005eec:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	697a      	ldr	r2, [r7, #20]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	3301      	adds	r3, #1
 8005f00:	01db      	lsls	r3, r3, #7
 8005f02:	4413      	add	r3, r2
 8005f04:	697a      	ldr	r2, [r7, #20]
 8005f06:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6819      	ldr	r1, [r3, #0]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	01db      	lsls	r3, r3, #7
 8005f14:	440b      	add	r3, r1
 8005f16:	3394      	adds	r3, #148	; 0x94
 8005f18:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6819      	ldr	r1, [r3, #0]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	685a      	ldr	r2, [r3, #4]
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	01db      	lsls	r3, r3, #7
 8005f26:	440b      	add	r3, r1
 8005f28:	3398      	adds	r3, #152	; 0x98
 8005f2a:	601a      	str	r2, [r3, #0]
}
 8005f2c:	bf00      	nop
 8005f2e:	371c      	adds	r7, #28
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                         HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8005f52:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f023 0320 	bic.w	r3, r3, #32
 8005f5a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	695b      	ldr	r3, [r3, #20]
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	60fb      	str	r3, [r7, #12]

  /* INTLVD bits are set to 00 */
  hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005f6c:	60fb      	str	r3, [r7, #12]
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	2b20      	cmp	r3, #32
 8005f74:	d003      	beq.n	8005f7e <HRTIM_MasterWaveform_Config+0x46>
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d108      	bne.n	8005f90 <HRTIM_MasterWaveform_Config+0x58>
  {
    /* INTLVD bits set to 00 */
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005f84:	60fb      	str	r3, [r7, #12]
    hrtim_mcr |= (HRTIM_MCR_HALF);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f043 0320 	orr.w	r3, r3, #32
 8005f8c:	60fb      	str	r3, [r7, #12]
 8005f8e:	e021      	b.n	8005fd4 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	2b03      	cmp	r3, #3
 8005f96:	d108      	bne.n	8005faa <HRTIM_MasterWaveform_Config+0x72>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_0);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f9e:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_1);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fa6:	60fb      	str	r3, [r7, #12]
 8005fa8:	e014      	b.n	8005fd4 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	2b04      	cmp	r3, #4
 8005fb0:	d108      	bne.n	8005fc4 <HRTIM_MasterWaveform_Config+0x8c>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_1);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fb8:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_0);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fc0:	60fb      	str	r3, [r7, #12]
 8005fc2:	e007      	b.n	8005fd4 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else
  {
        hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f023 0320 	bic.w	r3, r3, #32
 8005fca:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005fd2:	60fb      	str	r3, [r7, #12]
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fda:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	69db      	ldr	r3, [r3, #28]
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fec:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	6a1b      	ldr	r3, [r3, #32]
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005ffe:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	4313      	orrs	r3, r2
 8006008:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8006010:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	4313      	orrs	r3, r2
 800601a:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006022:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	4313      	orrs	r3, r2
 800602e:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006036:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	4313      	orrs	r3, r2
 8006040:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006048:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800604e:	68ba      	ldr	r2, [r7, #8]
 8006050:	4313      	orrs	r3, r2
 8006052:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68ba      	ldr	r2, [r7, #8]
 8006062:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8006066:	bf00      	nop
 8006068:	3714      	adds	r7, #20
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
	...

08006074 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8006074:	b480      	push	{r7}
 8006076:	b08b      	sub	sp, #44	; 0x2c
 8006078:	af00      	add	r7, sp, #0
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	3301      	adds	r3, #1
 8006088:	01db      	lsls	r3, r3, #7
 800608a:	4413      	add	r3, r2
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68fa      	ldr	r2, [r7, #12]
 8006090:	6811      	ldr	r1, [r2, #0]
 8006092:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	3301      	adds	r3, #1
 800609a:	01db      	lsls	r3, r3, #7
 800609c:	440b      	add	r3, r1
 800609e:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	3301      	adds	r3, #1
 80060a8:	01db      	lsls	r3, r3, #7
 80060aa:	4413      	add	r3, r2
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	01db      	lsls	r3, r3, #7
 80060b8:	4413      	add	r3, r2
 80060ba:	33e8      	adds	r3, #232	; 0xe8
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	01db      	lsls	r3, r3, #7
 80060c8:	4413      	add	r3, r2
 80060ca:	33e4      	adds	r3, #228	; 0xe4
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 80060d8:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 80060da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060dc:	f023 0320 	bic.w	r3, r3, #32
 80060e0:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	695b      	ldr	r3, [r3, #20]
 80060e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060e8:	4313      	orrs	r3, r2
 80060ea:	627b      	str	r3, [r7, #36]	; 0x24

  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	695b      	ldr	r3, [r3, #20]
 80060f0:	2b20      	cmp	r3, #32
 80060f2:	d003      	beq.n	80060fc <HRTIM_TimingUnitWaveform_Config+0x88>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	699b      	ldr	r3, [r3, #24]
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	d108      	bne.n	800610e <HRTIM_TimingUnitWaveform_Config+0x9a>
  {
    /* INTLVD bits set to 00 */
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 80060fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fe:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 8006102:	627b      	str	r3, [r7, #36]	; 0x24
    hrtim_timcr |= (HRTIM_TIMCR_HALF);
 8006104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006106:	f043 0320 	orr.w	r3, r3, #32
 800610a:	627b      	str	r3, [r7, #36]	; 0x24
 800610c:	e021      	b.n	8006152 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	699b      	ldr	r3, [r3, #24]
 8006112:	2b03      	cmp	r3, #3
 8006114:	d108      	bne.n	8006128 <HRTIM_TimingUnitWaveform_Config+0xb4>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_0);
 8006116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800611c:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_1);
 800611e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006120:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006124:	627b      	str	r3, [r7, #36]	; 0x24
 8006126:	e014      	b.n	8006152 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	699b      	ldr	r3, [r3, #24]
 800612c:	2b04      	cmp	r3, #4
 800612e:	d108      	bne.n	8006142 <HRTIM_TimingUnitWaveform_Config+0xce>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_1);
 8006130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006132:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006136:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_0);
 8006138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800613e:	627b      	str	r3, [r7, #36]	; 0x24
 8006140:	e007      	b.n	8006152 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else
  {
        hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8006142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006144:	f023 0320 	bic.w	r3, r3, #32
 8006148:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 800614a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614c:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 8006150:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8006152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006154:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006158:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	69db      	ldr	r3, [r3, #28]
 800615e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006160:	4313      	orrs	r3, r2
 8006162:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8006164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006166:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800616a:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a1b      	ldr	r3, [r3, #32]
 8006170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006172:	4313      	orrs	r3, r2
 8006174:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8006176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006178:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800617c:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006184:	4313      	orrs	r3, r2
 8006186:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8006188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618a:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800618e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006196:	4313      	orrs	r3, r2
 8006198:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 800619a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80061a0:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061a8:	4313      	orrs	r3, r2
 80061aa:	627b      	str	r3, [r7, #36]	; 0x24

  if (pTimerCfg->UpdateGating == HRTIM_UPDATEGATING_INDEPENDENT)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d109      	bne.n	80061c8 <HRTIM_TimingUnitWaveform_Config+0x154>
  {
    /* Timing unit Re-Synchronized Update */
    hrtim_timcr &= ~(HRTIM_TIMCR_RSYNCU);
 80061b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061ba:	627b      	str	r3, [r7, #36]	; 0x24
    hrtim_timcr |= (pTimerCfg->ReSyncUpdate) << HRTIM_TIMCR_RSYNCU_Pos;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061c0:	025b      	lsls	r3, r3, #9
 80061c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061c4:	4313      	orrs	r3, r2
 80061c6:	627b      	str	r3, [r7, #36]	; 0x24
  }


  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 80061c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ca:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80061ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061d8:	d103      	bne.n	80061e2 <HRTIM_TimingUnitWaveform_Config+0x16e>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 80061da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061e0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 80061e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061e8:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061f0:	4313      	orrs	r3, r2
 80061f2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 80061f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061fa:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006202:	4313      	orrs	r3, r2
 8006204:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8006206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006208:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 800620c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006210:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006218:	4313      	orrs	r3, r2
 800621a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006222:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006228:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800622c:	69ba      	ldr	r2, [r7, #24]
 800622e:	4313      	orrs	r3, r2
 8006230:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006238:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623e:	69ba      	ldr	r2, [r7, #24]
 8006240:	4313      	orrs	r3, r2
 8006242:	61bb      	str	r3, [r7, #24]

    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8006244:	6a3b      	ldr	r3, [r7, #32]
 8006246:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800624a:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006250:	6a3a      	ldr	r2, [r7, #32]
 8006252:	4313      	orrs	r3, r2
 8006254:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800625a:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 800625e:	d004      	beq.n	800626a <HRTIM_TimingUnitWaveform_Config+0x1f6>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006264:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8006268:	d103      	bne.n	8006272 <HRTIM_TimingUnitWaveform_Config+0x1fe>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800626e:	2b40      	cmp	r3, #64	; 0x40
 8006270:	d108      	bne.n	8006284 <HRTIM_TimingUnitWaveform_Config+0x210>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8006272:	6a3b      	ldr	r3, [r7, #32]
 8006274:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 8006278:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800627e:	6a3a      	ldr	r2, [r7, #32]
 8006280:	4313      	orrs	r3, r2
 8006282:	623b      	str	r3, [r7, #32]
  }

  /* Set the BIAR mode : one bit for both outputs */
  hrtim_timoutr &= ~(HRTIM_OUTR_BIAR);
 8006284:	6a3b      	ldr	r3, [r7, #32]
 8006286:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800628a:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006290:	6a3a      	ldr	r2, [r7, #32]
 8006292:	4313      	orrs	r3, r2
 8006294:	623b      	str	r3, [r7, #32]

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800629a:	617b      	str	r3, [r7, #20]
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	2b05      	cmp	r3, #5
 80062a0:	d850      	bhi.n	8006344 <HRTIM_TimingUnitWaveform_Config+0x2d0>
 80062a2:	a201      	add	r2, pc, #4	; (adr r2, 80062a8 <HRTIM_TimingUnitWaveform_Config+0x234>)
 80062a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a8:	080062c1 	.word	0x080062c1
 80062ac:	080062d7 	.word	0x080062d7
 80062b0:	080062ed 	.word	0x080062ed
 80062b4:	08006303 	.word	0x08006303
 80062b8:	08006319 	.word	0x08006319
 80062bc:	0800632f 	.word	0x0800632f
  /* Set the timer burst mode */
  switch (TimerIdx)
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80062c6:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062cc:	005b      	lsls	r3, r3, #1
 80062ce:	69fa      	ldr	r2, [r7, #28]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	61fb      	str	r3, [r7, #28]
      break;
 80062d4:	e037      	b.n	8006346 <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062dc:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	69fa      	ldr	r2, [r7, #28]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	61fb      	str	r3, [r7, #28]
      break;
 80062ea:	e02c      	b.n	8006346 <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80062f2:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f8:	00db      	lsls	r3, r3, #3
 80062fa:	69fa      	ldr	r2, [r7, #28]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	61fb      	str	r3, [r7, #28]
      break;
 8006300:	e021      	b.n	8006346 <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006308:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800630e:	011b      	lsls	r3, r3, #4
 8006310:	69fa      	ldr	r2, [r7, #28]
 8006312:	4313      	orrs	r3, r2
 8006314:	61fb      	str	r3, [r7, #28]
      break;
 8006316:	e016      	b.n	8006346 <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800631e:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006324:	015b      	lsls	r3, r3, #5
 8006326:	69fa      	ldr	r2, [r7, #28]
 8006328:	4313      	orrs	r3, r2
 800632a:	61fb      	str	r3, [r7, #28]
      break;
 800632c:	e00b      	b.n	8006346 <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TFBM);
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8006334:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 6U);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800633a:	019b      	lsls	r3, r3, #6
 800633c:	69fa      	ldr	r2, [r7, #28]
 800633e:	4313      	orrs	r3, r2
 8006340:	61fb      	str	r3, [r7, #28]
      break;
 8006342:	e000      	b.n	8006346 <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  default:
    break;
 8006344:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	3301      	adds	r3, #1
 800634e:	01db      	lsls	r3, r3, #7
 8006350:	4413      	add	r3, r2
 8006352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006354:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	01db      	lsls	r3, r3, #7
 800635e:	4413      	add	r3, r2
 8006360:	33e8      	adds	r3, #232	; 0xe8
 8006362:	69ba      	ldr	r2, [r7, #24]
 8006364:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	01db      	lsls	r3, r3, #7
 800636e:	4413      	add	r3, r2
 8006370:	33e4      	adds	r3, #228	; 0xe4
 8006372:	6a3a      	ldr	r2, [r7, #32]
 8006374:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	01db      	lsls	r3, r3, #7
 800637e:	4413      	add	r3, r2
 8006380:	33d4      	adds	r3, #212	; 0xd4
 8006382:	697a      	ldr	r2, [r7, #20]
 8006384:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	69fa      	ldr	r2, [r7, #28]
 800638c:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8006390:	bf00      	nop
 8006392:	372c      	adds	r7, #44	; 0x2c
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <HRTIM_TimingUnitWaveform_Control>:
  * @retval None
  */
static void HRTIM_TimingUnitWaveform_Control(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             HRTIM_TimerCtlTypeDef * pTimerCtl)
{
 800639c:	b480      	push	{r7}
 800639e:	b087      	sub	sp, #28
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	607a      	str	r2, [r7, #4]
   uint32_t hrtim_timcr2;

   /* Configure timing unit (Timer A to Timer F) */
   hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	01db      	lsls	r3, r3, #7
 80063b0:	4413      	add	r3, r2
 80063b2:	33ec      	adds	r3, #236	; 0xec
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	617b      	str	r3, [r7, #20]

   /* Set the UpDown counting Mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_UDM);
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	f023 0310 	bic.w	r3, r3, #16
 80063be:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= (pTimerCtl->UpDownMode << HRTIM_TIMCR2_UDM_Pos) ;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	011b      	lsls	r3, r3, #4
 80063c6:	697a      	ldr	r2, [r7, #20]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	617b      	str	r3, [r7, #20]

   /* Set the TrigHalf Mode : requires the counter to be disabled */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_TRGHLF);
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80063d2:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->TrigHalf;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	697a      	ldr	r2, [r7, #20]
 80063da:	4313      	orrs	r3, r2
 80063dc:	617b      	str	r3, [r7, #20]

   /* define the compare event operating mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP1);
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063e4:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->GreaterCMP1;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	697a      	ldr	r2, [r7, #20]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	617b      	str	r3, [r7, #20]

   /* define the compare event operating mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP3);
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80063f6:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->GreaterCMP3;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	697a      	ldr	r2, [r7, #20]
 80063fe:	4313      	orrs	r3, r2
 8006400:	617b      	str	r3, [r7, #20]

   if (pTimerCtl->DualChannelDacEnable == HRTIM_TIMER_DCDE_ENABLED)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	699b      	ldr	r3, [r3, #24]
 8006406:	2b01      	cmp	r3, #1
 8006408:	d11a      	bne.n	8006440 <HRTIM_TimingUnitWaveform_Control+0xa4>
   {
      /* Set the DualChannel DAC Reset trigger : requires DCDE enabled */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDR);
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	f023 0304 	bic.w	r3, r3, #4
 8006410:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacReset;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	697a      	ldr	r2, [r7, #20]
 8006418:	4313      	orrs	r3, r2
 800641a:	617b      	str	r3, [r7, #20]

      /* Set the DualChannel DAC Step trigger : requires DCDE enabled */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDS);
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	f023 0302 	bic.w	r3, r3, #2
 8006422:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacStep;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	695b      	ldr	r3, [r3, #20]
 8006428:	697a      	ldr	r2, [r7, #20]
 800642a:	4313      	orrs	r3, r2
 800642c:	617b      	str	r3, [r7, #20]

      /* Enable the DualChannel DAC trigger */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDE);
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	f023 0301 	bic.w	r3, r3, #1
 8006434:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacEnable;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	699b      	ldr	r3, [r3, #24]
 800643a:	697a      	ldr	r2, [r7, #20]
 800643c:	4313      	orrs	r3, r2
 800643e:	617b      	str	r3, [r7, #20]
   }
   /* Update the HRTIM registers */
   hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2  = hrtim_timcr2;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	01db      	lsls	r3, r3, #7
 8006448:	4413      	add	r3, r2
 800644a:	33ec      	adds	r3, #236	; 0xec
 800644c:	697a      	ldr	r2, [r7, #20]
 800644e:	601a      	str	r2, [r3, #0]

}
 8006450:	bf00      	nop
 8006452:	371c      	adds	r7, #28
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 800645c:	b480      	push	{r7}
 800645e:	b089      	sub	sp, #36	; 0x24
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	607a      	str	r2, [r7, #4]
 8006468:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 800646a:	2300      	movs	r3, #0
 800646c:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	01db      	lsls	r3, r3, #7
 8006476:	4413      	add	r3, r2
 8006478:	33e4      	adds	r3, #228	; 0xe4
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	01db      	lsls	r3, r3, #7
 8006486:	4413      	add	r3, r2
 8006488:	33b8      	adds	r3, #184	; 0xb8
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	617b      	str	r3, [r7, #20]

  switch (Output)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006494:	f000 8088 	beq.w	80065a8 <HRTIM_OutputConfig+0x14c>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800649e:	f200 8098 	bhi.w	80065d2 <HRTIM_OutputConfig+0x176>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064a8:	d06b      	beq.n	8006582 <HRTIM_OutputConfig+0x126>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064b0:	f200 808f 	bhi.w	80065d2 <HRTIM_OutputConfig+0x176>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064ba:	d075      	beq.n	80065a8 <HRTIM_OutputConfig+0x14c>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064c2:	f200 8086 	bhi.w	80065d2 <HRTIM_OutputConfig+0x176>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064cc:	d059      	beq.n	8006582 <HRTIM_OutputConfig+0x126>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064d4:	d87d      	bhi.n	80065d2 <HRTIM_OutputConfig+0x176>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2b80      	cmp	r3, #128	; 0x80
 80064da:	d065      	beq.n	80065a8 <HRTIM_OutputConfig+0x14c>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2b80      	cmp	r3, #128	; 0x80
 80064e0:	d877      	bhi.n	80065d2 <HRTIM_OutputConfig+0x176>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2b20      	cmp	r3, #32
 80064e6:	d849      	bhi.n	800657c <HRTIM_OutputConfig+0x120>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d071      	beq.n	80065d2 <HRTIM_OutputConfig+0x176>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	3b01      	subs	r3, #1
 80064f2:	2b1f      	cmp	r3, #31
 80064f4:	d86d      	bhi.n	80065d2 <HRTIM_OutputConfig+0x176>
 80064f6:	a201      	add	r2, pc, #4	; (adr r2, 80064fc <HRTIM_OutputConfig+0xa0>)
 80064f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064fc:	08006583 	.word	0x08006583
 8006500:	080065a9 	.word	0x080065a9
 8006504:	080065d3 	.word	0x080065d3
 8006508:	08006583 	.word	0x08006583
 800650c:	080065d3 	.word	0x080065d3
 8006510:	080065d3 	.word	0x080065d3
 8006514:	080065d3 	.word	0x080065d3
 8006518:	080065a9 	.word	0x080065a9
 800651c:	080065d3 	.word	0x080065d3
 8006520:	080065d3 	.word	0x080065d3
 8006524:	080065d3 	.word	0x080065d3
 8006528:	080065d3 	.word	0x080065d3
 800652c:	080065d3 	.word	0x080065d3
 8006530:	080065d3 	.word	0x080065d3
 8006534:	080065d3 	.word	0x080065d3
 8006538:	08006583 	.word	0x08006583
 800653c:	080065d3 	.word	0x080065d3
 8006540:	080065d3 	.word	0x080065d3
 8006544:	080065d3 	.word	0x080065d3
 8006548:	080065d3 	.word	0x080065d3
 800654c:	080065d3 	.word	0x080065d3
 8006550:	080065d3 	.word	0x080065d3
 8006554:	080065d3 	.word	0x080065d3
 8006558:	080065d3 	.word	0x080065d3
 800655c:	080065d3 	.word	0x080065d3
 8006560:	080065d3 	.word	0x080065d3
 8006564:	080065d3 	.word	0x080065d3
 8006568:	080065d3 	.word	0x080065d3
 800656c:	080065d3 	.word	0x080065d3
 8006570:	080065d3 	.word	0x080065d3
 8006574:	080065d3 	.word	0x080065d3
 8006578:	080065a9 	.word	0x080065a9
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2b40      	cmp	r3, #64	; 0x40
 8006580:	d127      	bne.n	80065d2 <HRTIM_OutputConfig+0x176>
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
  case HRTIM_OUTPUT_TF1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6819      	ldr	r1, [r3, #0]
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	685a      	ldr	r2, [r3, #4]
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	01db      	lsls	r3, r3, #7
 800658e:	440b      	add	r3, r1
 8006590:	33bc      	adds	r3, #188	; 0xbc
 8006592:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6819      	ldr	r1, [r3, #0]
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	689a      	ldr	r2, [r3, #8]
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	01db      	lsls	r3, r3, #7
 80065a0:	440b      	add	r3, r1
 80065a2:	33c0      	adds	r3, #192	; 0xc0
 80065a4:	601a      	str	r2, [r3, #0]
      break;
 80065a6:	e015      	b.n	80065d4 <HRTIM_OutputConfig+0x178>
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
  case HRTIM_OUTPUT_TF2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6819      	ldr	r1, [r3, #0]
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	685a      	ldr	r2, [r3, #4]
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	01db      	lsls	r3, r3, #7
 80065b4:	440b      	add	r3, r1
 80065b6:	33c4      	adds	r3, #196	; 0xc4
 80065b8:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6819      	ldr	r1, [r3, #0]
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	689a      	ldr	r2, [r3, #8]
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	01db      	lsls	r3, r3, #7
 80065c6:	440b      	add	r3, r1
 80065c8:	33c8      	adds	r3, #200	; 0xc8
 80065ca:	601a      	str	r2, [r3, #0]
      shift = 16U;
 80065cc:	2310      	movs	r3, #16
 80065ce:	61bb      	str	r3, [r7, #24]
      break;
 80065d0:	e000      	b.n	80065d4 <HRTIM_OutputConfig+0x178>
    }

  default:
    break;
 80065d2:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 80065d4:	22fe      	movs	r2, #254	; 0xfe
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 80065dc:	43db      	mvns	r3, r3
 80065de:	69fa      	ldr	r2, [r7, #28]
 80065e0:	4013      	ands	r3, r2
 80065e2:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	fa02 f303 	lsl.w	r3, r2, r3
 80065ee:	69fa      	ldr	r2, [r7, #28]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	68da      	ldr	r2, [r3, #12]
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	fa02 f303 	lsl.w	r3, r2, r3
 80065fe:	69fa      	ldr	r2, [r7, #28]
 8006600:	4313      	orrs	r3, r2
 8006602:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	691a      	ldr	r2, [r3, #16]
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	fa02 f303 	lsl.w	r3, r2, r3
 800660e:	69fa      	ldr	r2, [r7, #28]
 8006610:	4313      	orrs	r3, r2
 8006612:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	695a      	ldr	r2, [r3, #20]
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	fa02 f303 	lsl.w	r3, r2, r3
 800661e:	69fa      	ldr	r2, [r7, #28]
 8006620:	4313      	orrs	r3, r2
 8006622:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	699a      	ldr	r2, [r3, #24]
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	fa02 f303 	lsl.w	r3, r2, r3
 800662e:	69fa      	ldr	r2, [r7, #28]
 8006630:	4313      	orrs	r3, r2
 8006632:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	691b      	ldr	r3, [r3, #16]
 8006638:	2b08      	cmp	r3, #8
 800663a:	d111      	bne.n	8006660 <HRTIM_OutputConfig+0x204>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8006642:	2b00      	cmp	r3, #0
 8006644:	d10c      	bne.n	8006660 <HRTIM_OutputConfig+0x204>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 800664c:	2b00      	cmp	r3, #0
 800664e:	d107      	bne.n	8006660 <HRTIM_OutputConfig+0x204>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	69da      	ldr	r2, [r3, #28]
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	fa02 f303 	lsl.w	r3, r2, r3
 800665a:	69fa      	ldr	r2, [r7, #28]
 800665c:	4313      	orrs	r3, r2
 800665e:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	01db      	lsls	r3, r3, #7
 8006668:	4413      	add	r3, r2
 800666a:	33e4      	adds	r3, #228	; 0xe4
 800666c:	69fa      	ldr	r2, [r7, #28]
 800666e:	601a      	str	r2, [r3, #0]
}
 8006670:	bf00      	nop
 8006672:	3724      	adds	r7, #36	; 0x24
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	2b06      	cmp	r3, #6
 800668a:	d85e      	bhi.n	800674a <HRTIM_ForceRegistersUpdate+0xce>
 800668c:	a201      	add	r2, pc, #4	; (adr r2, 8006694 <HRTIM_ForceRegistersUpdate+0x18>)
 800668e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006692:	bf00      	nop
 8006694:	080066c7 	.word	0x080066c7
 8006698:	080066dd 	.word	0x080066dd
 800669c:	080066f3 	.word	0x080066f3
 80066a0:	08006709 	.word	0x08006709
 80066a4:	0800671f 	.word	0x0800671f
 80066a8:	08006735 	.word	0x08006735
 80066ac:	080066b1 	.word	0x080066b1
  switch (TimerIdx)
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f042 0201 	orr.w	r2, r2, #1
 80066c0:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80066c4:	e042      	b.n	800674c <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f042 0202 	orr.w	r2, r2, #2
 80066d6:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80066da:	e037      	b.n	800674c <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f042 0204 	orr.w	r2, r2, #4
 80066ec:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80066f0:	e02c      	b.n	800674c <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f042 0208 	orr.w	r2, r2, #8
 8006702:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8006706:	e021      	b.n	800674c <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f042 0210 	orr.w	r2, r2, #16
 8006718:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800671c:	e016      	b.n	800674c <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f042 0220 	orr.w	r2, r2, #32
 800672e:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8006732:	e00b      	b.n	800674c <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006744:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8006748:	e000      	b.n	800674c <HRTIM_ForceRegistersUpdate+0xd0>
    }

  default:
    break;
 800674a:	bf00      	nop
  }
}
 800674c:	bf00      	nop
 800674e:	370c      	adds	r7, #12
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d141      	bne.n	80067ea <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006766:	4b4b      	ldr	r3, [pc, #300]	; (8006894 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800676e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006772:	d131      	bne.n	80067d8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006774:	4b47      	ldr	r3, [pc, #284]	; (8006894 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006776:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800677a:	4a46      	ldr	r2, [pc, #280]	; (8006894 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800677c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006780:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006784:	4b43      	ldr	r3, [pc, #268]	; (8006894 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800678c:	4a41      	ldr	r2, [pc, #260]	; (8006894 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800678e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006792:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006794:	4b40      	ldr	r3, [pc, #256]	; (8006898 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2232      	movs	r2, #50	; 0x32
 800679a:	fb02 f303 	mul.w	r3, r2, r3
 800679e:	4a3f      	ldr	r2, [pc, #252]	; (800689c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80067a0:	fba2 2303 	umull	r2, r3, r2, r3
 80067a4:	0c9b      	lsrs	r3, r3, #18
 80067a6:	3301      	adds	r3, #1
 80067a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067aa:	e002      	b.n	80067b2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	3b01      	subs	r3, #1
 80067b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067b2:	4b38      	ldr	r3, [pc, #224]	; (8006894 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067b4:	695b      	ldr	r3, [r3, #20]
 80067b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067be:	d102      	bne.n	80067c6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d1f2      	bne.n	80067ac <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80067c6:	4b33      	ldr	r3, [pc, #204]	; (8006894 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067c8:	695b      	ldr	r3, [r3, #20]
 80067ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067d2:	d158      	bne.n	8006886 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80067d4:	2303      	movs	r3, #3
 80067d6:	e057      	b.n	8006888 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80067d8:	4b2e      	ldr	r3, [pc, #184]	; (8006894 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067de:	4a2d      	ldr	r2, [pc, #180]	; (8006894 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80067e8:	e04d      	b.n	8006886 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067f0:	d141      	bne.n	8006876 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80067f2:	4b28      	ldr	r3, [pc, #160]	; (8006894 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80067fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067fe:	d131      	bne.n	8006864 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006800:	4b24      	ldr	r3, [pc, #144]	; (8006894 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006802:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006806:	4a23      	ldr	r2, [pc, #140]	; (8006894 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800680c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006810:	4b20      	ldr	r3, [pc, #128]	; (8006894 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006818:	4a1e      	ldr	r2, [pc, #120]	; (8006894 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800681a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800681e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006820:	4b1d      	ldr	r3, [pc, #116]	; (8006898 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2232      	movs	r2, #50	; 0x32
 8006826:	fb02 f303 	mul.w	r3, r2, r3
 800682a:	4a1c      	ldr	r2, [pc, #112]	; (800689c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800682c:	fba2 2303 	umull	r2, r3, r2, r3
 8006830:	0c9b      	lsrs	r3, r3, #18
 8006832:	3301      	adds	r3, #1
 8006834:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006836:	e002      	b.n	800683e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	3b01      	subs	r3, #1
 800683c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800683e:	4b15      	ldr	r3, [pc, #84]	; (8006894 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006840:	695b      	ldr	r3, [r3, #20]
 8006842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800684a:	d102      	bne.n	8006852 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d1f2      	bne.n	8006838 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006852:	4b10      	ldr	r3, [pc, #64]	; (8006894 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006854:	695b      	ldr	r3, [r3, #20]
 8006856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800685a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800685e:	d112      	bne.n	8006886 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006860:	2303      	movs	r3, #3
 8006862:	e011      	b.n	8006888 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006864:	4b0b      	ldr	r3, [pc, #44]	; (8006894 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800686a:	4a0a      	ldr	r2, [pc, #40]	; (8006894 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800686c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006870:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006874:	e007      	b.n	8006886 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006876:	4b07      	ldr	r3, [pc, #28]	; (8006894 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800687e:	4a05      	ldr	r2, [pc, #20]	; (8006894 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006880:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006884:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	3714      	adds	r7, #20
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr
 8006894:	40007000 	.word	0x40007000
 8006898:	20000004 	.word	0x20000004
 800689c:	431bde83 	.word	0x431bde83

080068a0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80068a0:	b480      	push	{r7}
 80068a2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80068a4:	4b05      	ldr	r3, [pc, #20]	; (80068bc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	4a04      	ldr	r2, [pc, #16]	; (80068bc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80068aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80068ae:	6093      	str	r3, [r2, #8]
}
 80068b0:	bf00      	nop
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop
 80068bc:	40007000 	.word	0x40007000

080068c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b088      	sub	sp, #32
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d101      	bne.n	80068d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e308      	b.n	8006ee4 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 0301 	and.w	r3, r3, #1
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d075      	beq.n	80069ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068de:	4ba3      	ldr	r3, [pc, #652]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	f003 030c 	and.w	r3, r3, #12
 80068e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80068e8:	4ba0      	ldr	r3, [pc, #640]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	f003 0303 	and.w	r3, r3, #3
 80068f0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	2b0c      	cmp	r3, #12
 80068f6:	d102      	bne.n	80068fe <HAL_RCC_OscConfig+0x3e>
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	2b03      	cmp	r3, #3
 80068fc:	d002      	beq.n	8006904 <HAL_RCC_OscConfig+0x44>
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	2b08      	cmp	r3, #8
 8006902:	d10b      	bne.n	800691c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006904:	4b99      	ldr	r3, [pc, #612]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800690c:	2b00      	cmp	r3, #0
 800690e:	d05b      	beq.n	80069c8 <HAL_RCC_OscConfig+0x108>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d157      	bne.n	80069c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	e2e3      	b.n	8006ee4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006924:	d106      	bne.n	8006934 <HAL_RCC_OscConfig+0x74>
 8006926:	4b91      	ldr	r3, [pc, #580]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a90      	ldr	r2, [pc, #576]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 800692c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006930:	6013      	str	r3, [r2, #0]
 8006932:	e01d      	b.n	8006970 <HAL_RCC_OscConfig+0xb0>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800693c:	d10c      	bne.n	8006958 <HAL_RCC_OscConfig+0x98>
 800693e:	4b8b      	ldr	r3, [pc, #556]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a8a      	ldr	r2, [pc, #552]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006944:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006948:	6013      	str	r3, [r2, #0]
 800694a:	4b88      	ldr	r3, [pc, #544]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a87      	ldr	r2, [pc, #540]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006954:	6013      	str	r3, [r2, #0]
 8006956:	e00b      	b.n	8006970 <HAL_RCC_OscConfig+0xb0>
 8006958:	4b84      	ldr	r3, [pc, #528]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a83      	ldr	r2, [pc, #524]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 800695e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006962:	6013      	str	r3, [r2, #0]
 8006964:	4b81      	ldr	r3, [pc, #516]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a80      	ldr	r2, [pc, #512]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 800696a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800696e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d013      	beq.n	80069a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006978:	f7fc f84a 	bl	8002a10 <HAL_GetTick>
 800697c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800697e:	e008      	b.n	8006992 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006980:	f7fc f846 	bl	8002a10 <HAL_GetTick>
 8006984:	4602      	mov	r2, r0
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	1ad3      	subs	r3, r2, r3
 800698a:	2b64      	cmp	r3, #100	; 0x64
 800698c:	d901      	bls.n	8006992 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800698e:	2303      	movs	r3, #3
 8006990:	e2a8      	b.n	8006ee4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006992:	4b76      	ldr	r3, [pc, #472]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800699a:	2b00      	cmp	r3, #0
 800699c:	d0f0      	beq.n	8006980 <HAL_RCC_OscConfig+0xc0>
 800699e:	e014      	b.n	80069ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069a0:	f7fc f836 	bl	8002a10 <HAL_GetTick>
 80069a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80069a6:	e008      	b.n	80069ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069a8:	f7fc f832 	bl	8002a10 <HAL_GetTick>
 80069ac:	4602      	mov	r2, r0
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	2b64      	cmp	r3, #100	; 0x64
 80069b4:	d901      	bls.n	80069ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80069b6:	2303      	movs	r3, #3
 80069b8:	e294      	b.n	8006ee4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80069ba:	4b6c      	ldr	r3, [pc, #432]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d1f0      	bne.n	80069a8 <HAL_RCC_OscConfig+0xe8>
 80069c6:	e000      	b.n	80069ca <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0302 	and.w	r3, r3, #2
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d075      	beq.n	8006ac2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069d6:	4b65      	ldr	r3, [pc, #404]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	f003 030c 	and.w	r3, r3, #12
 80069de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80069e0:	4b62      	ldr	r3, [pc, #392]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	f003 0303 	and.w	r3, r3, #3
 80069e8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80069ea:	69bb      	ldr	r3, [r7, #24]
 80069ec:	2b0c      	cmp	r3, #12
 80069ee:	d102      	bne.n	80069f6 <HAL_RCC_OscConfig+0x136>
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	d002      	beq.n	80069fc <HAL_RCC_OscConfig+0x13c>
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	2b04      	cmp	r3, #4
 80069fa:	d11f      	bne.n	8006a3c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80069fc:	4b5b      	ldr	r3, [pc, #364]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d005      	beq.n	8006a14 <HAL_RCC_OscConfig+0x154>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d101      	bne.n	8006a14 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e267      	b.n	8006ee4 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a14:	4b55      	ldr	r3, [pc, #340]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	691b      	ldr	r3, [r3, #16]
 8006a20:	061b      	lsls	r3, r3, #24
 8006a22:	4952      	ldr	r1, [pc, #328]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006a24:	4313      	orrs	r3, r2
 8006a26:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006a28:	4b51      	ldr	r3, [pc, #324]	; (8006b70 <HAL_RCC_OscConfig+0x2b0>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f7fb ffa3 	bl	8002978 <HAL_InitTick>
 8006a32:	4603      	mov	r3, r0
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d043      	beq.n	8006ac0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	e253      	b.n	8006ee4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d023      	beq.n	8006a8c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a44:	4b49      	ldr	r3, [pc, #292]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a48      	ldr	r2, [pc, #288]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006a4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a50:	f7fb ffde 	bl	8002a10 <HAL_GetTick>
 8006a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a56:	e008      	b.n	8006a6a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a58:	f7fb ffda 	bl	8002a10 <HAL_GetTick>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	2b02      	cmp	r3, #2
 8006a64:	d901      	bls.n	8006a6a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006a66:	2303      	movs	r3, #3
 8006a68:	e23c      	b.n	8006ee4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a6a:	4b40      	ldr	r3, [pc, #256]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d0f0      	beq.n	8006a58 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a76:	4b3d      	ldr	r3, [pc, #244]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	061b      	lsls	r3, r3, #24
 8006a84:	4939      	ldr	r1, [pc, #228]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006a86:	4313      	orrs	r3, r2
 8006a88:	604b      	str	r3, [r1, #4]
 8006a8a:	e01a      	b.n	8006ac2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a8c:	4b37      	ldr	r3, [pc, #220]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a36      	ldr	r2, [pc, #216]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006a92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a98:	f7fb ffba 	bl	8002a10 <HAL_GetTick>
 8006a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006a9e:	e008      	b.n	8006ab2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006aa0:	f7fb ffb6 	bl	8002a10 <HAL_GetTick>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	1ad3      	subs	r3, r2, r3
 8006aaa:	2b02      	cmp	r3, #2
 8006aac:	d901      	bls.n	8006ab2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006aae:	2303      	movs	r3, #3
 8006ab0:	e218      	b.n	8006ee4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006ab2:	4b2e      	ldr	r3, [pc, #184]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1f0      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x1e0>
 8006abe:	e000      	b.n	8006ac2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ac0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 0308 	and.w	r3, r3, #8
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d03c      	beq.n	8006b48 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	695b      	ldr	r3, [r3, #20]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d01c      	beq.n	8006b10 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ad6:	4b25      	ldr	r3, [pc, #148]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006ad8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006adc:	4a23      	ldr	r2, [pc, #140]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006ade:	f043 0301 	orr.w	r3, r3, #1
 8006ae2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ae6:	f7fb ff93 	bl	8002a10 <HAL_GetTick>
 8006aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006aec:	e008      	b.n	8006b00 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006aee:	f7fb ff8f 	bl	8002a10 <HAL_GetTick>
 8006af2:	4602      	mov	r2, r0
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	1ad3      	subs	r3, r2, r3
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d901      	bls.n	8006b00 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006afc:	2303      	movs	r3, #3
 8006afe:	e1f1      	b.n	8006ee4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006b00:	4b1a      	ldr	r3, [pc, #104]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006b02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b06:	f003 0302 	and.w	r3, r3, #2
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d0ef      	beq.n	8006aee <HAL_RCC_OscConfig+0x22e>
 8006b0e:	e01b      	b.n	8006b48 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b10:	4b16      	ldr	r3, [pc, #88]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b16:	4a15      	ldr	r2, [pc, #84]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006b18:	f023 0301 	bic.w	r3, r3, #1
 8006b1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b20:	f7fb ff76 	bl	8002a10 <HAL_GetTick>
 8006b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006b26:	e008      	b.n	8006b3a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b28:	f7fb ff72 	bl	8002a10 <HAL_GetTick>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	1ad3      	subs	r3, r2, r3
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	d901      	bls.n	8006b3a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8006b36:	2303      	movs	r3, #3
 8006b38:	e1d4      	b.n	8006ee4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006b3a:	4b0c      	ldr	r3, [pc, #48]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006b3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b40:	f003 0302 	and.w	r3, r3, #2
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d1ef      	bne.n	8006b28 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f003 0304 	and.w	r3, r3, #4
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	f000 80ab 	beq.w	8006cac <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b56:	2300      	movs	r3, #0
 8006b58:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006b5a:	4b04      	ldr	r3, [pc, #16]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d106      	bne.n	8006b74 <HAL_RCC_OscConfig+0x2b4>
 8006b66:	2301      	movs	r3, #1
 8006b68:	e005      	b.n	8006b76 <HAL_RCC_OscConfig+0x2b6>
 8006b6a:	bf00      	nop
 8006b6c:	40021000 	.word	0x40021000
 8006b70:	20000008 	.word	0x20000008
 8006b74:	2300      	movs	r3, #0
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d00d      	beq.n	8006b96 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b7a:	4baf      	ldr	r3, [pc, #700]	; (8006e38 <HAL_RCC_OscConfig+0x578>)
 8006b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b7e:	4aae      	ldr	r2, [pc, #696]	; (8006e38 <HAL_RCC_OscConfig+0x578>)
 8006b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b84:	6593      	str	r3, [r2, #88]	; 0x58
 8006b86:	4bac      	ldr	r3, [pc, #688]	; (8006e38 <HAL_RCC_OscConfig+0x578>)
 8006b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b8e:	60fb      	str	r3, [r7, #12]
 8006b90:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006b92:	2301      	movs	r3, #1
 8006b94:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b96:	4ba9      	ldr	r3, [pc, #676]	; (8006e3c <HAL_RCC_OscConfig+0x57c>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d118      	bne.n	8006bd4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ba2:	4ba6      	ldr	r3, [pc, #664]	; (8006e3c <HAL_RCC_OscConfig+0x57c>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4aa5      	ldr	r2, [pc, #660]	; (8006e3c <HAL_RCC_OscConfig+0x57c>)
 8006ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006bae:	f7fb ff2f 	bl	8002a10 <HAL_GetTick>
 8006bb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006bb4:	e008      	b.n	8006bc8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bb6:	f7fb ff2b 	bl	8002a10 <HAL_GetTick>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	1ad3      	subs	r3, r2, r3
 8006bc0:	2b02      	cmp	r3, #2
 8006bc2:	d901      	bls.n	8006bc8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006bc4:	2303      	movs	r3, #3
 8006bc6:	e18d      	b.n	8006ee4 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006bc8:	4b9c      	ldr	r3, [pc, #624]	; (8006e3c <HAL_RCC_OscConfig+0x57c>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d0f0      	beq.n	8006bb6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d108      	bne.n	8006bee <HAL_RCC_OscConfig+0x32e>
 8006bdc:	4b96      	ldr	r3, [pc, #600]	; (8006e38 <HAL_RCC_OscConfig+0x578>)
 8006bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006be2:	4a95      	ldr	r2, [pc, #596]	; (8006e38 <HAL_RCC_OscConfig+0x578>)
 8006be4:	f043 0301 	orr.w	r3, r3, #1
 8006be8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006bec:	e024      	b.n	8006c38 <HAL_RCC_OscConfig+0x378>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	2b05      	cmp	r3, #5
 8006bf4:	d110      	bne.n	8006c18 <HAL_RCC_OscConfig+0x358>
 8006bf6:	4b90      	ldr	r3, [pc, #576]	; (8006e38 <HAL_RCC_OscConfig+0x578>)
 8006bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bfc:	4a8e      	ldr	r2, [pc, #568]	; (8006e38 <HAL_RCC_OscConfig+0x578>)
 8006bfe:	f043 0304 	orr.w	r3, r3, #4
 8006c02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006c06:	4b8c      	ldr	r3, [pc, #560]	; (8006e38 <HAL_RCC_OscConfig+0x578>)
 8006c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c0c:	4a8a      	ldr	r2, [pc, #552]	; (8006e38 <HAL_RCC_OscConfig+0x578>)
 8006c0e:	f043 0301 	orr.w	r3, r3, #1
 8006c12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006c16:	e00f      	b.n	8006c38 <HAL_RCC_OscConfig+0x378>
 8006c18:	4b87      	ldr	r3, [pc, #540]	; (8006e38 <HAL_RCC_OscConfig+0x578>)
 8006c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c1e:	4a86      	ldr	r2, [pc, #536]	; (8006e38 <HAL_RCC_OscConfig+0x578>)
 8006c20:	f023 0301 	bic.w	r3, r3, #1
 8006c24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006c28:	4b83      	ldr	r3, [pc, #524]	; (8006e38 <HAL_RCC_OscConfig+0x578>)
 8006c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c2e:	4a82      	ldr	r2, [pc, #520]	; (8006e38 <HAL_RCC_OscConfig+0x578>)
 8006c30:	f023 0304 	bic.w	r3, r3, #4
 8006c34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d016      	beq.n	8006c6e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c40:	f7fb fee6 	bl	8002a10 <HAL_GetTick>
 8006c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c46:	e00a      	b.n	8006c5e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c48:	f7fb fee2 	bl	8002a10 <HAL_GetTick>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	1ad3      	subs	r3, r2, r3
 8006c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d901      	bls.n	8006c5e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006c5a:	2303      	movs	r3, #3
 8006c5c:	e142      	b.n	8006ee4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c5e:	4b76      	ldr	r3, [pc, #472]	; (8006e38 <HAL_RCC_OscConfig+0x578>)
 8006c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c64:	f003 0302 	and.w	r3, r3, #2
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d0ed      	beq.n	8006c48 <HAL_RCC_OscConfig+0x388>
 8006c6c:	e015      	b.n	8006c9a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c6e:	f7fb fecf 	bl	8002a10 <HAL_GetTick>
 8006c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006c74:	e00a      	b.n	8006c8c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c76:	f7fb fecb 	bl	8002a10 <HAL_GetTick>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	1ad3      	subs	r3, r2, r3
 8006c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d901      	bls.n	8006c8c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006c88:	2303      	movs	r3, #3
 8006c8a:	e12b      	b.n	8006ee4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006c8c:	4b6a      	ldr	r3, [pc, #424]	; (8006e38 <HAL_RCC_OscConfig+0x578>)
 8006c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c92:	f003 0302 	and.w	r3, r3, #2
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d1ed      	bne.n	8006c76 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006c9a:	7ffb      	ldrb	r3, [r7, #31]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d105      	bne.n	8006cac <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ca0:	4b65      	ldr	r3, [pc, #404]	; (8006e38 <HAL_RCC_OscConfig+0x578>)
 8006ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ca4:	4a64      	ldr	r2, [pc, #400]	; (8006e38 <HAL_RCC_OscConfig+0x578>)
 8006ca6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006caa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 0320 	and.w	r3, r3, #32
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d03c      	beq.n	8006d32 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	699b      	ldr	r3, [r3, #24]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d01c      	beq.n	8006cfa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006cc0:	4b5d      	ldr	r3, [pc, #372]	; (8006e38 <HAL_RCC_OscConfig+0x578>)
 8006cc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006cc6:	4a5c      	ldr	r2, [pc, #368]	; (8006e38 <HAL_RCC_OscConfig+0x578>)
 8006cc8:	f043 0301 	orr.w	r3, r3, #1
 8006ccc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cd0:	f7fb fe9e 	bl	8002a10 <HAL_GetTick>
 8006cd4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006cd6:	e008      	b.n	8006cea <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006cd8:	f7fb fe9a 	bl	8002a10 <HAL_GetTick>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	2b02      	cmp	r3, #2
 8006ce4:	d901      	bls.n	8006cea <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	e0fc      	b.n	8006ee4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006cea:	4b53      	ldr	r3, [pc, #332]	; (8006e38 <HAL_RCC_OscConfig+0x578>)
 8006cec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006cf0:	f003 0302 	and.w	r3, r3, #2
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d0ef      	beq.n	8006cd8 <HAL_RCC_OscConfig+0x418>
 8006cf8:	e01b      	b.n	8006d32 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006cfa:	4b4f      	ldr	r3, [pc, #316]	; (8006e38 <HAL_RCC_OscConfig+0x578>)
 8006cfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d00:	4a4d      	ldr	r2, [pc, #308]	; (8006e38 <HAL_RCC_OscConfig+0x578>)
 8006d02:	f023 0301 	bic.w	r3, r3, #1
 8006d06:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d0a:	f7fb fe81 	bl	8002a10 <HAL_GetTick>
 8006d0e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006d10:	e008      	b.n	8006d24 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d12:	f7fb fe7d 	bl	8002a10 <HAL_GetTick>
 8006d16:	4602      	mov	r2, r0
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	1ad3      	subs	r3, r2, r3
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d901      	bls.n	8006d24 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006d20:	2303      	movs	r3, #3
 8006d22:	e0df      	b.n	8006ee4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006d24:	4b44      	ldr	r3, [pc, #272]	; (8006e38 <HAL_RCC_OscConfig+0x578>)
 8006d26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d2a:	f003 0302 	and.w	r3, r3, #2
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d1ef      	bne.n	8006d12 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	69db      	ldr	r3, [r3, #28]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	f000 80d3 	beq.w	8006ee2 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d3c:	4b3e      	ldr	r3, [pc, #248]	; (8006e38 <HAL_RCC_OscConfig+0x578>)
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	f003 030c 	and.w	r3, r3, #12
 8006d44:	2b0c      	cmp	r3, #12
 8006d46:	f000 808d 	beq.w	8006e64 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	69db      	ldr	r3, [r3, #28]
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	d15a      	bne.n	8006e08 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d52:	4b39      	ldr	r3, [pc, #228]	; (8006e38 <HAL_RCC_OscConfig+0x578>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a38      	ldr	r2, [pc, #224]	; (8006e38 <HAL_RCC_OscConfig+0x578>)
 8006d58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d5e:	f7fb fe57 	bl	8002a10 <HAL_GetTick>
 8006d62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d64:	e008      	b.n	8006d78 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d66:	f7fb fe53 	bl	8002a10 <HAL_GetTick>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	2b02      	cmp	r3, #2
 8006d72:	d901      	bls.n	8006d78 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8006d74:	2303      	movs	r3, #3
 8006d76:	e0b5      	b.n	8006ee4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d78:	4b2f      	ldr	r3, [pc, #188]	; (8006e38 <HAL_RCC_OscConfig+0x578>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d1f0      	bne.n	8006d66 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d84:	4b2c      	ldr	r3, [pc, #176]	; (8006e38 <HAL_RCC_OscConfig+0x578>)
 8006d86:	68da      	ldr	r2, [r3, #12]
 8006d88:	4b2d      	ldr	r3, [pc, #180]	; (8006e40 <HAL_RCC_OscConfig+0x580>)
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	6a11      	ldr	r1, [r2, #32]
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006d94:	3a01      	subs	r2, #1
 8006d96:	0112      	lsls	r2, r2, #4
 8006d98:	4311      	orrs	r1, r2
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006d9e:	0212      	lsls	r2, r2, #8
 8006da0:	4311      	orrs	r1, r2
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006da6:	0852      	lsrs	r2, r2, #1
 8006da8:	3a01      	subs	r2, #1
 8006daa:	0552      	lsls	r2, r2, #21
 8006dac:	4311      	orrs	r1, r2
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006db2:	0852      	lsrs	r2, r2, #1
 8006db4:	3a01      	subs	r2, #1
 8006db6:	0652      	lsls	r2, r2, #25
 8006db8:	4311      	orrs	r1, r2
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006dbe:	06d2      	lsls	r2, r2, #27
 8006dc0:	430a      	orrs	r2, r1
 8006dc2:	491d      	ldr	r1, [pc, #116]	; (8006e38 <HAL_RCC_OscConfig+0x578>)
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006dc8:	4b1b      	ldr	r3, [pc, #108]	; (8006e38 <HAL_RCC_OscConfig+0x578>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a1a      	ldr	r2, [pc, #104]	; (8006e38 <HAL_RCC_OscConfig+0x578>)
 8006dce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006dd2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006dd4:	4b18      	ldr	r3, [pc, #96]	; (8006e38 <HAL_RCC_OscConfig+0x578>)
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	4a17      	ldr	r2, [pc, #92]	; (8006e38 <HAL_RCC_OscConfig+0x578>)
 8006dda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006dde:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006de0:	f7fb fe16 	bl	8002a10 <HAL_GetTick>
 8006de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006de6:	e008      	b.n	8006dfa <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006de8:	f7fb fe12 	bl	8002a10 <HAL_GetTick>
 8006dec:	4602      	mov	r2, r0
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	1ad3      	subs	r3, r2, r3
 8006df2:	2b02      	cmp	r3, #2
 8006df4:	d901      	bls.n	8006dfa <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8006df6:	2303      	movs	r3, #3
 8006df8:	e074      	b.n	8006ee4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006dfa:	4b0f      	ldr	r3, [pc, #60]	; (8006e38 <HAL_RCC_OscConfig+0x578>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d0f0      	beq.n	8006de8 <HAL_RCC_OscConfig+0x528>
 8006e06:	e06c      	b.n	8006ee2 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e08:	4b0b      	ldr	r3, [pc, #44]	; (8006e38 <HAL_RCC_OscConfig+0x578>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a0a      	ldr	r2, [pc, #40]	; (8006e38 <HAL_RCC_OscConfig+0x578>)
 8006e0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e12:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006e14:	4b08      	ldr	r3, [pc, #32]	; (8006e38 <HAL_RCC_OscConfig+0x578>)
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	4a07      	ldr	r2, [pc, #28]	; (8006e38 <HAL_RCC_OscConfig+0x578>)
 8006e1a:	f023 0303 	bic.w	r3, r3, #3
 8006e1e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006e20:	4b05      	ldr	r3, [pc, #20]	; (8006e38 <HAL_RCC_OscConfig+0x578>)
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	4a04      	ldr	r2, [pc, #16]	; (8006e38 <HAL_RCC_OscConfig+0x578>)
 8006e26:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006e2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e2e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e30:	f7fb fdee 	bl	8002a10 <HAL_GetTick>
 8006e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e36:	e00e      	b.n	8006e56 <HAL_RCC_OscConfig+0x596>
 8006e38:	40021000 	.word	0x40021000
 8006e3c:	40007000 	.word	0x40007000
 8006e40:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e44:	f7fb fde4 	bl	8002a10 <HAL_GetTick>
 8006e48:	4602      	mov	r2, r0
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	1ad3      	subs	r3, r2, r3
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	d901      	bls.n	8006e56 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8006e52:	2303      	movs	r3, #3
 8006e54:	e046      	b.n	8006ee4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e56:	4b25      	ldr	r3, [pc, #148]	; (8006eec <HAL_RCC_OscConfig+0x62c>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1f0      	bne.n	8006e44 <HAL_RCC_OscConfig+0x584>
 8006e62:	e03e      	b.n	8006ee2 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	69db      	ldr	r3, [r3, #28]
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d101      	bne.n	8006e70 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e039      	b.n	8006ee4 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006e70:	4b1e      	ldr	r3, [pc, #120]	; (8006eec <HAL_RCC_OscConfig+0x62c>)
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	f003 0203 	and.w	r2, r3, #3
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6a1b      	ldr	r3, [r3, #32]
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d12c      	bne.n	8006ede <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d123      	bne.n	8006ede <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d11b      	bne.n	8006ede <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d113      	bne.n	8006ede <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec0:	085b      	lsrs	r3, r3, #1
 8006ec2:	3b01      	subs	r3, #1
 8006ec4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d109      	bne.n	8006ede <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ed4:	085b      	lsrs	r3, r3, #1
 8006ed6:	3b01      	subs	r3, #1
 8006ed8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d001      	beq.n	8006ee2 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e000      	b.n	8006ee4 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8006ee2:	2300      	movs	r3, #0
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3720      	adds	r7, #32
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	40021000 	.word	0x40021000

08006ef0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b086      	sub	sp, #24
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006efa:	2300      	movs	r3, #0
 8006efc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d101      	bne.n	8006f08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	e11e      	b.n	8007146 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006f08:	4b91      	ldr	r3, [pc, #580]	; (8007150 <HAL_RCC_ClockConfig+0x260>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f003 030f 	and.w	r3, r3, #15
 8006f10:	683a      	ldr	r2, [r7, #0]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d910      	bls.n	8006f38 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f16:	4b8e      	ldr	r3, [pc, #568]	; (8007150 <HAL_RCC_ClockConfig+0x260>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f023 020f 	bic.w	r2, r3, #15
 8006f1e:	498c      	ldr	r1, [pc, #560]	; (8007150 <HAL_RCC_ClockConfig+0x260>)
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f26:	4b8a      	ldr	r3, [pc, #552]	; (8007150 <HAL_RCC_ClockConfig+0x260>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f003 030f 	and.w	r3, r3, #15
 8006f2e:	683a      	ldr	r2, [r7, #0]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d001      	beq.n	8006f38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	e106      	b.n	8007146 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 0301 	and.w	r3, r3, #1
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d073      	beq.n	800702c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	2b03      	cmp	r3, #3
 8006f4a:	d129      	bne.n	8006fa0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f4c:	4b81      	ldr	r3, [pc, #516]	; (8007154 <HAL_RCC_ClockConfig+0x264>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d101      	bne.n	8006f5c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e0f4      	b.n	8007146 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006f5c:	f000 f99e 	bl	800729c <RCC_GetSysClockFreqFromPLLSource>
 8006f60:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	4a7c      	ldr	r2, [pc, #496]	; (8007158 <HAL_RCC_ClockConfig+0x268>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d93f      	bls.n	8006fea <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006f6a:	4b7a      	ldr	r3, [pc, #488]	; (8007154 <HAL_RCC_ClockConfig+0x264>)
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d009      	beq.n	8006f8a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d033      	beq.n	8006fea <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d12f      	bne.n	8006fea <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006f8a:	4b72      	ldr	r3, [pc, #456]	; (8007154 <HAL_RCC_ClockConfig+0x264>)
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f92:	4a70      	ldr	r2, [pc, #448]	; (8007154 <HAL_RCC_ClockConfig+0x264>)
 8006f94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f98:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006f9a:	2380      	movs	r3, #128	; 0x80
 8006f9c:	617b      	str	r3, [r7, #20]
 8006f9e:	e024      	b.n	8006fea <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	2b02      	cmp	r3, #2
 8006fa6:	d107      	bne.n	8006fb8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006fa8:	4b6a      	ldr	r3, [pc, #424]	; (8007154 <HAL_RCC_ClockConfig+0x264>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d109      	bne.n	8006fc8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e0c6      	b.n	8007146 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006fb8:	4b66      	ldr	r3, [pc, #408]	; (8007154 <HAL_RCC_ClockConfig+0x264>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d101      	bne.n	8006fc8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e0be      	b.n	8007146 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006fc8:	f000 f8ce 	bl	8007168 <HAL_RCC_GetSysClockFreq>
 8006fcc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	4a61      	ldr	r2, [pc, #388]	; (8007158 <HAL_RCC_ClockConfig+0x268>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d909      	bls.n	8006fea <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006fd6:	4b5f      	ldr	r3, [pc, #380]	; (8007154 <HAL_RCC_ClockConfig+0x264>)
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006fde:	4a5d      	ldr	r2, [pc, #372]	; (8007154 <HAL_RCC_ClockConfig+0x264>)
 8006fe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fe4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006fe6:	2380      	movs	r3, #128	; 0x80
 8006fe8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006fea:	4b5a      	ldr	r3, [pc, #360]	; (8007154 <HAL_RCC_ClockConfig+0x264>)
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	f023 0203 	bic.w	r2, r3, #3
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	4957      	ldr	r1, [pc, #348]	; (8007154 <HAL_RCC_ClockConfig+0x264>)
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ffc:	f7fb fd08 	bl	8002a10 <HAL_GetTick>
 8007000:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007002:	e00a      	b.n	800701a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007004:	f7fb fd04 	bl	8002a10 <HAL_GetTick>
 8007008:	4602      	mov	r2, r0
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	1ad3      	subs	r3, r2, r3
 800700e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007012:	4293      	cmp	r3, r2
 8007014:	d901      	bls.n	800701a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007016:	2303      	movs	r3, #3
 8007018:	e095      	b.n	8007146 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800701a:	4b4e      	ldr	r3, [pc, #312]	; (8007154 <HAL_RCC_ClockConfig+0x264>)
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	f003 020c 	and.w	r2, r3, #12
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	429a      	cmp	r2, r3
 800702a:	d1eb      	bne.n	8007004 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 0302 	and.w	r3, r3, #2
 8007034:	2b00      	cmp	r3, #0
 8007036:	d023      	beq.n	8007080 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 0304 	and.w	r3, r3, #4
 8007040:	2b00      	cmp	r3, #0
 8007042:	d005      	beq.n	8007050 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007044:	4b43      	ldr	r3, [pc, #268]	; (8007154 <HAL_RCC_ClockConfig+0x264>)
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	4a42      	ldr	r2, [pc, #264]	; (8007154 <HAL_RCC_ClockConfig+0x264>)
 800704a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800704e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 0308 	and.w	r3, r3, #8
 8007058:	2b00      	cmp	r3, #0
 800705a:	d007      	beq.n	800706c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800705c:	4b3d      	ldr	r3, [pc, #244]	; (8007154 <HAL_RCC_ClockConfig+0x264>)
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007064:	4a3b      	ldr	r2, [pc, #236]	; (8007154 <HAL_RCC_ClockConfig+0x264>)
 8007066:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800706a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800706c:	4b39      	ldr	r3, [pc, #228]	; (8007154 <HAL_RCC_ClockConfig+0x264>)
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	4936      	ldr	r1, [pc, #216]	; (8007154 <HAL_RCC_ClockConfig+0x264>)
 800707a:	4313      	orrs	r3, r2
 800707c:	608b      	str	r3, [r1, #8]
 800707e:	e008      	b.n	8007092 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	2b80      	cmp	r3, #128	; 0x80
 8007084:	d105      	bne.n	8007092 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007086:	4b33      	ldr	r3, [pc, #204]	; (8007154 <HAL_RCC_ClockConfig+0x264>)
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	4a32      	ldr	r2, [pc, #200]	; (8007154 <HAL_RCC_ClockConfig+0x264>)
 800708c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007090:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007092:	4b2f      	ldr	r3, [pc, #188]	; (8007150 <HAL_RCC_ClockConfig+0x260>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f003 030f 	and.w	r3, r3, #15
 800709a:	683a      	ldr	r2, [r7, #0]
 800709c:	429a      	cmp	r2, r3
 800709e:	d21d      	bcs.n	80070dc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070a0:	4b2b      	ldr	r3, [pc, #172]	; (8007150 <HAL_RCC_ClockConfig+0x260>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f023 020f 	bic.w	r2, r3, #15
 80070a8:	4929      	ldr	r1, [pc, #164]	; (8007150 <HAL_RCC_ClockConfig+0x260>)
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80070b0:	f7fb fcae 	bl	8002a10 <HAL_GetTick>
 80070b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070b6:	e00a      	b.n	80070ce <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070b8:	f7fb fcaa 	bl	8002a10 <HAL_GetTick>
 80070bc:	4602      	mov	r2, r0
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	1ad3      	subs	r3, r2, r3
 80070c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d901      	bls.n	80070ce <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80070ca:	2303      	movs	r3, #3
 80070cc:	e03b      	b.n	8007146 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070ce:	4b20      	ldr	r3, [pc, #128]	; (8007150 <HAL_RCC_ClockConfig+0x260>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 030f 	and.w	r3, r3, #15
 80070d6:	683a      	ldr	r2, [r7, #0]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d1ed      	bne.n	80070b8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f003 0304 	and.w	r3, r3, #4
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d008      	beq.n	80070fa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80070e8:	4b1a      	ldr	r3, [pc, #104]	; (8007154 <HAL_RCC_ClockConfig+0x264>)
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	4917      	ldr	r1, [pc, #92]	; (8007154 <HAL_RCC_ClockConfig+0x264>)
 80070f6:	4313      	orrs	r3, r2
 80070f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 0308 	and.w	r3, r3, #8
 8007102:	2b00      	cmp	r3, #0
 8007104:	d009      	beq.n	800711a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007106:	4b13      	ldr	r3, [pc, #76]	; (8007154 <HAL_RCC_ClockConfig+0x264>)
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	00db      	lsls	r3, r3, #3
 8007114:	490f      	ldr	r1, [pc, #60]	; (8007154 <HAL_RCC_ClockConfig+0x264>)
 8007116:	4313      	orrs	r3, r2
 8007118:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800711a:	f000 f825 	bl	8007168 <HAL_RCC_GetSysClockFreq>
 800711e:	4602      	mov	r2, r0
 8007120:	4b0c      	ldr	r3, [pc, #48]	; (8007154 <HAL_RCC_ClockConfig+0x264>)
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	091b      	lsrs	r3, r3, #4
 8007126:	f003 030f 	and.w	r3, r3, #15
 800712a:	490c      	ldr	r1, [pc, #48]	; (800715c <HAL_RCC_ClockConfig+0x26c>)
 800712c:	5ccb      	ldrb	r3, [r1, r3]
 800712e:	f003 031f 	and.w	r3, r3, #31
 8007132:	fa22 f303 	lsr.w	r3, r2, r3
 8007136:	4a0a      	ldr	r2, [pc, #40]	; (8007160 <HAL_RCC_ClockConfig+0x270>)
 8007138:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800713a:	4b0a      	ldr	r3, [pc, #40]	; (8007164 <HAL_RCC_ClockConfig+0x274>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4618      	mov	r0, r3
 8007140:	f7fb fc1a 	bl	8002978 <HAL_InitTick>
 8007144:	4603      	mov	r3, r0
}
 8007146:	4618      	mov	r0, r3
 8007148:	3718      	adds	r7, #24
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	40022000 	.word	0x40022000
 8007154:	40021000 	.word	0x40021000
 8007158:	04c4b400 	.word	0x04c4b400
 800715c:	0800c86c 	.word	0x0800c86c
 8007160:	20000004 	.word	0x20000004
 8007164:	20000008 	.word	0x20000008

08007168 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007168:	b480      	push	{r7}
 800716a:	b087      	sub	sp, #28
 800716c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800716e:	4b2c      	ldr	r3, [pc, #176]	; (8007220 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	f003 030c 	and.w	r3, r3, #12
 8007176:	2b04      	cmp	r3, #4
 8007178:	d102      	bne.n	8007180 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800717a:	4b2a      	ldr	r3, [pc, #168]	; (8007224 <HAL_RCC_GetSysClockFreq+0xbc>)
 800717c:	613b      	str	r3, [r7, #16]
 800717e:	e047      	b.n	8007210 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007180:	4b27      	ldr	r3, [pc, #156]	; (8007220 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	f003 030c 	and.w	r3, r3, #12
 8007188:	2b08      	cmp	r3, #8
 800718a:	d102      	bne.n	8007192 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800718c:	4b26      	ldr	r3, [pc, #152]	; (8007228 <HAL_RCC_GetSysClockFreq+0xc0>)
 800718e:	613b      	str	r3, [r7, #16]
 8007190:	e03e      	b.n	8007210 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007192:	4b23      	ldr	r3, [pc, #140]	; (8007220 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	f003 030c 	and.w	r3, r3, #12
 800719a:	2b0c      	cmp	r3, #12
 800719c:	d136      	bne.n	800720c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800719e:	4b20      	ldr	r3, [pc, #128]	; (8007220 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	f003 0303 	and.w	r3, r3, #3
 80071a6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80071a8:	4b1d      	ldr	r3, [pc, #116]	; (8007220 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	091b      	lsrs	r3, r3, #4
 80071ae:	f003 030f 	and.w	r3, r3, #15
 80071b2:	3301      	adds	r3, #1
 80071b4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2b03      	cmp	r3, #3
 80071ba:	d10c      	bne.n	80071d6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80071bc:	4a1a      	ldr	r2, [pc, #104]	; (8007228 <HAL_RCC_GetSysClockFreq+0xc0>)
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80071c4:	4a16      	ldr	r2, [pc, #88]	; (8007220 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071c6:	68d2      	ldr	r2, [r2, #12]
 80071c8:	0a12      	lsrs	r2, r2, #8
 80071ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80071ce:	fb02 f303 	mul.w	r3, r2, r3
 80071d2:	617b      	str	r3, [r7, #20]
      break;
 80071d4:	e00c      	b.n	80071f0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80071d6:	4a13      	ldr	r2, [pc, #76]	; (8007224 <HAL_RCC_GetSysClockFreq+0xbc>)
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	fbb2 f3f3 	udiv	r3, r2, r3
 80071de:	4a10      	ldr	r2, [pc, #64]	; (8007220 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071e0:	68d2      	ldr	r2, [r2, #12]
 80071e2:	0a12      	lsrs	r2, r2, #8
 80071e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80071e8:	fb02 f303 	mul.w	r3, r2, r3
 80071ec:	617b      	str	r3, [r7, #20]
      break;
 80071ee:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80071f0:	4b0b      	ldr	r3, [pc, #44]	; (8007220 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	0e5b      	lsrs	r3, r3, #25
 80071f6:	f003 0303 	and.w	r3, r3, #3
 80071fa:	3301      	adds	r3, #1
 80071fc:	005b      	lsls	r3, r3, #1
 80071fe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007200:	697a      	ldr	r2, [r7, #20]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	fbb2 f3f3 	udiv	r3, r2, r3
 8007208:	613b      	str	r3, [r7, #16]
 800720a:	e001      	b.n	8007210 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800720c:	2300      	movs	r3, #0
 800720e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007210:	693b      	ldr	r3, [r7, #16]
}
 8007212:	4618      	mov	r0, r3
 8007214:	371c      	adds	r7, #28
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr
 800721e:	bf00      	nop
 8007220:	40021000 	.word	0x40021000
 8007224:	00f42400 	.word	0x00f42400
 8007228:	007a1200 	.word	0x007a1200

0800722c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800722c:	b480      	push	{r7}
 800722e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007230:	4b03      	ldr	r3, [pc, #12]	; (8007240 <HAL_RCC_GetHCLKFreq+0x14>)
 8007232:	681b      	ldr	r3, [r3, #0]
}
 8007234:	4618      	mov	r0, r3
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop
 8007240:	20000004 	.word	0x20000004

08007244 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007248:	f7ff fff0 	bl	800722c <HAL_RCC_GetHCLKFreq>
 800724c:	4602      	mov	r2, r0
 800724e:	4b06      	ldr	r3, [pc, #24]	; (8007268 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	0a1b      	lsrs	r3, r3, #8
 8007254:	f003 0307 	and.w	r3, r3, #7
 8007258:	4904      	ldr	r1, [pc, #16]	; (800726c <HAL_RCC_GetPCLK1Freq+0x28>)
 800725a:	5ccb      	ldrb	r3, [r1, r3]
 800725c:	f003 031f 	and.w	r3, r3, #31
 8007260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007264:	4618      	mov	r0, r3
 8007266:	bd80      	pop	{r7, pc}
 8007268:	40021000 	.word	0x40021000
 800726c:	0800c87c 	.word	0x0800c87c

08007270 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007274:	f7ff ffda 	bl	800722c <HAL_RCC_GetHCLKFreq>
 8007278:	4602      	mov	r2, r0
 800727a:	4b06      	ldr	r3, [pc, #24]	; (8007294 <HAL_RCC_GetPCLK2Freq+0x24>)
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	0adb      	lsrs	r3, r3, #11
 8007280:	f003 0307 	and.w	r3, r3, #7
 8007284:	4904      	ldr	r1, [pc, #16]	; (8007298 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007286:	5ccb      	ldrb	r3, [r1, r3]
 8007288:	f003 031f 	and.w	r3, r3, #31
 800728c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007290:	4618      	mov	r0, r3
 8007292:	bd80      	pop	{r7, pc}
 8007294:	40021000 	.word	0x40021000
 8007298:	0800c87c 	.word	0x0800c87c

0800729c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800729c:	b480      	push	{r7}
 800729e:	b087      	sub	sp, #28
 80072a0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80072a2:	4b1e      	ldr	r3, [pc, #120]	; (800731c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80072a4:	68db      	ldr	r3, [r3, #12]
 80072a6:	f003 0303 	and.w	r3, r3, #3
 80072aa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80072ac:	4b1b      	ldr	r3, [pc, #108]	; (800731c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	091b      	lsrs	r3, r3, #4
 80072b2:	f003 030f 	and.w	r3, r3, #15
 80072b6:	3301      	adds	r3, #1
 80072b8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	2b03      	cmp	r3, #3
 80072be:	d10c      	bne.n	80072da <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80072c0:	4a17      	ldr	r2, [pc, #92]	; (8007320 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80072c8:	4a14      	ldr	r2, [pc, #80]	; (800731c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80072ca:	68d2      	ldr	r2, [r2, #12]
 80072cc:	0a12      	lsrs	r2, r2, #8
 80072ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80072d2:	fb02 f303 	mul.w	r3, r2, r3
 80072d6:	617b      	str	r3, [r7, #20]
    break;
 80072d8:	e00c      	b.n	80072f4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80072da:	4a12      	ldr	r2, [pc, #72]	; (8007324 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	fbb2 f3f3 	udiv	r3, r2, r3
 80072e2:	4a0e      	ldr	r2, [pc, #56]	; (800731c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80072e4:	68d2      	ldr	r2, [r2, #12]
 80072e6:	0a12      	lsrs	r2, r2, #8
 80072e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80072ec:	fb02 f303 	mul.w	r3, r2, r3
 80072f0:	617b      	str	r3, [r7, #20]
    break;
 80072f2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80072f4:	4b09      	ldr	r3, [pc, #36]	; (800731c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	0e5b      	lsrs	r3, r3, #25
 80072fa:	f003 0303 	and.w	r3, r3, #3
 80072fe:	3301      	adds	r3, #1
 8007300:	005b      	lsls	r3, r3, #1
 8007302:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007304:	697a      	ldr	r2, [r7, #20]
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	fbb2 f3f3 	udiv	r3, r2, r3
 800730c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800730e:	687b      	ldr	r3, [r7, #4]
}
 8007310:	4618      	mov	r0, r3
 8007312:	371c      	adds	r7, #28
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr
 800731c:	40021000 	.word	0x40021000
 8007320:	007a1200 	.word	0x007a1200
 8007324:	00f42400 	.word	0x00f42400

08007328 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b086      	sub	sp, #24
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007330:	2300      	movs	r3, #0
 8007332:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007334:	2300      	movs	r3, #0
 8007336:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007340:	2b00      	cmp	r3, #0
 8007342:	f000 8098 	beq.w	8007476 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007346:	2300      	movs	r3, #0
 8007348:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800734a:	4b43      	ldr	r3, [pc, #268]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800734c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800734e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007352:	2b00      	cmp	r3, #0
 8007354:	d10d      	bne.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007356:	4b40      	ldr	r3, [pc, #256]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800735a:	4a3f      	ldr	r2, [pc, #252]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800735c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007360:	6593      	str	r3, [r2, #88]	; 0x58
 8007362:	4b3d      	ldr	r3, [pc, #244]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800736a:	60bb      	str	r3, [r7, #8]
 800736c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800736e:	2301      	movs	r3, #1
 8007370:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007372:	4b3a      	ldr	r3, [pc, #232]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a39      	ldr	r2, [pc, #228]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800737c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800737e:	f7fb fb47 	bl	8002a10 <HAL_GetTick>
 8007382:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007384:	e009      	b.n	800739a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007386:	f7fb fb43 	bl	8002a10 <HAL_GetTick>
 800738a:	4602      	mov	r2, r0
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	1ad3      	subs	r3, r2, r3
 8007390:	2b02      	cmp	r3, #2
 8007392:	d902      	bls.n	800739a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007394:	2303      	movs	r3, #3
 8007396:	74fb      	strb	r3, [r7, #19]
        break;
 8007398:	e005      	b.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800739a:	4b30      	ldr	r3, [pc, #192]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d0ef      	beq.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80073a6:	7cfb      	ldrb	r3, [r7, #19]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d159      	bne.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80073ac:	4b2a      	ldr	r3, [pc, #168]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073b6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d01e      	beq.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073c2:	697a      	ldr	r2, [r7, #20]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d019      	beq.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80073c8:	4b23      	ldr	r3, [pc, #140]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80073d4:	4b20      	ldr	r3, [pc, #128]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073da:	4a1f      	ldr	r2, [pc, #124]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80073e4:	4b1c      	ldr	r3, [pc, #112]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073ea:	4a1b      	ldr	r2, [pc, #108]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80073f4:	4a18      	ldr	r2, [pc, #96]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	f003 0301 	and.w	r3, r3, #1
 8007402:	2b00      	cmp	r3, #0
 8007404:	d016      	beq.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007406:	f7fb fb03 	bl	8002a10 <HAL_GetTick>
 800740a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800740c:	e00b      	b.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800740e:	f7fb faff 	bl	8002a10 <HAL_GetTick>
 8007412:	4602      	mov	r2, r0
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	1ad3      	subs	r3, r2, r3
 8007418:	f241 3288 	movw	r2, #5000	; 0x1388
 800741c:	4293      	cmp	r3, r2
 800741e:	d902      	bls.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007420:	2303      	movs	r3, #3
 8007422:	74fb      	strb	r3, [r7, #19]
            break;
 8007424:	e006      	b.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007426:	4b0c      	ldr	r3, [pc, #48]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800742c:	f003 0302 	and.w	r3, r3, #2
 8007430:	2b00      	cmp	r3, #0
 8007432:	d0ec      	beq.n	800740e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007434:	7cfb      	ldrb	r3, [r7, #19]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d10b      	bne.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800743a:	4b07      	ldr	r3, [pc, #28]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800743c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007440:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007448:	4903      	ldr	r1, [pc, #12]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800744a:	4313      	orrs	r3, r2
 800744c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007450:	e008      	b.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007452:	7cfb      	ldrb	r3, [r7, #19]
 8007454:	74bb      	strb	r3, [r7, #18]
 8007456:	e005      	b.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007458:	40021000 	.word	0x40021000
 800745c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007460:	7cfb      	ldrb	r3, [r7, #19]
 8007462:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007464:	7c7b      	ldrb	r3, [r7, #17]
 8007466:	2b01      	cmp	r3, #1
 8007468:	d105      	bne.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800746a:	4baf      	ldr	r3, [pc, #700]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800746c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800746e:	4aae      	ldr	r2, [pc, #696]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007470:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007474:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f003 0301 	and.w	r3, r3, #1
 800747e:	2b00      	cmp	r3, #0
 8007480:	d00a      	beq.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007482:	4ba9      	ldr	r3, [pc, #676]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007488:	f023 0203 	bic.w	r2, r3, #3
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	49a5      	ldr	r1, [pc, #660]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007492:	4313      	orrs	r3, r2
 8007494:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f003 0302 	and.w	r3, r3, #2
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d00a      	beq.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80074a4:	4ba0      	ldr	r3, [pc, #640]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80074a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074aa:	f023 020c 	bic.w	r2, r3, #12
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	499d      	ldr	r1, [pc, #628]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80074b4:	4313      	orrs	r3, r2
 80074b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f003 0304 	and.w	r3, r3, #4
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d00a      	beq.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80074c6:	4b98      	ldr	r3, [pc, #608]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80074c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	68db      	ldr	r3, [r3, #12]
 80074d4:	4994      	ldr	r1, [pc, #592]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80074d6:	4313      	orrs	r3, r2
 80074d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 0308 	and.w	r3, r3, #8
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d00a      	beq.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80074e8:	4b8f      	ldr	r3, [pc, #572]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80074ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	691b      	ldr	r3, [r3, #16]
 80074f6:	498c      	ldr	r1, [pc, #560]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80074f8:	4313      	orrs	r3, r2
 80074fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f003 0310 	and.w	r3, r3, #16
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00a      	beq.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800750a:	4b87      	ldr	r3, [pc, #540]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800750c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007510:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	695b      	ldr	r3, [r3, #20]
 8007518:	4983      	ldr	r1, [pc, #524]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800751a:	4313      	orrs	r3, r2
 800751c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 0320 	and.w	r3, r3, #32
 8007528:	2b00      	cmp	r3, #0
 800752a:	d00a      	beq.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800752c:	4b7e      	ldr	r3, [pc, #504]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800752e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007532:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	699b      	ldr	r3, [r3, #24]
 800753a:	497b      	ldr	r1, [pc, #492]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800753c:	4313      	orrs	r3, r2
 800753e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00a      	beq.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800754e:	4b76      	ldr	r3, [pc, #472]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007554:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	69db      	ldr	r3, [r3, #28]
 800755c:	4972      	ldr	r1, [pc, #456]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800755e:	4313      	orrs	r3, r2
 8007560:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00a      	beq.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007570:	4b6d      	ldr	r3, [pc, #436]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007576:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6a1b      	ldr	r3, [r3, #32]
 800757e:	496a      	ldr	r1, [pc, #424]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007580:	4313      	orrs	r3, r2
 8007582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800758e:	2b00      	cmp	r3, #0
 8007590:	d00a      	beq.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007592:	4b65      	ldr	r3, [pc, #404]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007598:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a0:	4961      	ldr	r1, [pc, #388]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80075a2:	4313      	orrs	r3, r2
 80075a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d00a      	beq.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80075b4:	4b5c      	ldr	r3, [pc, #368]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80075b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80075ba:	f023 0203 	bic.w	r2, r3, #3
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075c2:	4959      	ldr	r1, [pc, #356]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80075c4:	4313      	orrs	r3, r2
 80075c6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d00a      	beq.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80075d6:	4b54      	ldr	r3, [pc, #336]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80075d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e4:	4950      	ldr	r1, [pc, #320]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80075e6:	4313      	orrs	r3, r2
 80075e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d015      	beq.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80075f8:	4b4b      	ldr	r3, [pc, #300]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80075fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007606:	4948      	ldr	r1, [pc, #288]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007608:	4313      	orrs	r3, r2
 800760a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007612:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007616:	d105      	bne.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007618:	4b43      	ldr	r3, [pc, #268]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800761a:	68db      	ldr	r3, [r3, #12]
 800761c:	4a42      	ldr	r2, [pc, #264]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800761e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007622:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800762c:	2b00      	cmp	r3, #0
 800762e:	d015      	beq.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007630:	4b3d      	ldr	r3, [pc, #244]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007636:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800763e:	493a      	ldr	r1, [pc, #232]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007640:	4313      	orrs	r3, r2
 8007642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800764a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800764e:	d105      	bne.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007650:	4b35      	ldr	r3, [pc, #212]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	4a34      	ldr	r2, [pc, #208]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007656:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800765a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007664:	2b00      	cmp	r3, #0
 8007666:	d015      	beq.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007668:	4b2f      	ldr	r3, [pc, #188]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800766a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800766e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007676:	492c      	ldr	r1, [pc, #176]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007678:	4313      	orrs	r3, r2
 800767a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007682:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007686:	d105      	bne.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007688:	4b27      	ldr	r3, [pc, #156]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	4a26      	ldr	r2, [pc, #152]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800768e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007692:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800769c:	2b00      	cmp	r3, #0
 800769e:	d015      	beq.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80076a0:	4b21      	ldr	r3, [pc, #132]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80076a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ae:	491e      	ldr	r1, [pc, #120]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80076b0:	4313      	orrs	r3, r2
 80076b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076be:	d105      	bne.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80076c0:	4b19      	ldr	r3, [pc, #100]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	4a18      	ldr	r2, [pc, #96]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80076c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076ca:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d015      	beq.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80076d8:	4b13      	ldr	r3, [pc, #76]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80076da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e6:	4910      	ldr	r1, [pc, #64]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80076e8:	4313      	orrs	r3, r2
 80076ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076f6:	d105      	bne.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80076f8:	4b0b      	ldr	r3, [pc, #44]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	4a0a      	ldr	r2, [pc, #40]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80076fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007702:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800770c:	2b00      	cmp	r3, #0
 800770e:	d018      	beq.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007710:	4b05      	ldr	r3, [pc, #20]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007716:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800771e:	4902      	ldr	r1, [pc, #8]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007720:	4313      	orrs	r3, r2
 8007722:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007726:	e001      	b.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8007728:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007730:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007734:	d105      	bne.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007736:	4b21      	ldr	r3, [pc, #132]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8007738:	68db      	ldr	r3, [r3, #12]
 800773a:	4a20      	ldr	r2, [pc, #128]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800773c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007740:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800774a:	2b00      	cmp	r3, #0
 800774c:	d015      	beq.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800774e:	4b1b      	ldr	r3, [pc, #108]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8007750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007754:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800775c:	4917      	ldr	r1, [pc, #92]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800775e:	4313      	orrs	r3, r2
 8007760:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800776c:	d105      	bne.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800776e:	4b13      	ldr	r3, [pc, #76]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	4a12      	ldr	r2, [pc, #72]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8007774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007778:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007782:	2b00      	cmp	r3, #0
 8007784:	d015      	beq.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007786:	4b0d      	ldr	r3, [pc, #52]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8007788:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800778c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007794:	4909      	ldr	r1, [pc, #36]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8007796:	4313      	orrs	r3, r2
 8007798:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80077a4:	d105      	bne.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80077a6:	4b05      	ldr	r3, [pc, #20]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	4a04      	ldr	r2, [pc, #16]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80077ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077b0:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80077b2:	7cbb      	ldrb	r3, [r7, #18]
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3718      	adds	r7, #24
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}
 80077bc:	40021000 	.word	0x40021000

080077c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d101      	bne.n	80077d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80077ce:	2301      	movs	r3, #1
 80077d0:	e049      	b.n	8007866 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d106      	bne.n	80077ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f7fa ff9c 	bl	8002724 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2202      	movs	r2, #2
 80077f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	3304      	adds	r3, #4
 80077fc:	4619      	mov	r1, r3
 80077fe:	4610      	mov	r0, r2
 8007800:	f000 fb68 	bl	8007ed4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2201      	movs	r2, #1
 8007808:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2201      	movs	r2, #1
 8007810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2201      	movs	r2, #1
 8007818:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2201      	movs	r2, #1
 8007820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2201      	movs	r2, #1
 8007830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2201      	movs	r2, #1
 8007840:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2201      	movs	r2, #1
 8007850:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2201      	movs	r2, #1
 8007858:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2201      	movs	r2, #1
 8007860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	3708      	adds	r7, #8
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
	...

08007870 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007870:	b480      	push	{r7}
 8007872:	b085      	sub	sp, #20
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800787e:	b2db      	uxtb	r3, r3
 8007880:	2b01      	cmp	r3, #1
 8007882:	d001      	beq.n	8007888 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007884:	2301      	movs	r3, #1
 8007886:	e054      	b.n	8007932 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2202      	movs	r2, #2
 800788c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	68da      	ldr	r2, [r3, #12]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f042 0201 	orr.w	r2, r2, #1
 800789e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a26      	ldr	r2, [pc, #152]	; (8007940 <HAL_TIM_Base_Start_IT+0xd0>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d022      	beq.n	80078f0 <HAL_TIM_Base_Start_IT+0x80>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078b2:	d01d      	beq.n	80078f0 <HAL_TIM_Base_Start_IT+0x80>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a22      	ldr	r2, [pc, #136]	; (8007944 <HAL_TIM_Base_Start_IT+0xd4>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d018      	beq.n	80078f0 <HAL_TIM_Base_Start_IT+0x80>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a21      	ldr	r2, [pc, #132]	; (8007948 <HAL_TIM_Base_Start_IT+0xd8>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d013      	beq.n	80078f0 <HAL_TIM_Base_Start_IT+0x80>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a1f      	ldr	r2, [pc, #124]	; (800794c <HAL_TIM_Base_Start_IT+0xdc>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d00e      	beq.n	80078f0 <HAL_TIM_Base_Start_IT+0x80>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a1e      	ldr	r2, [pc, #120]	; (8007950 <HAL_TIM_Base_Start_IT+0xe0>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d009      	beq.n	80078f0 <HAL_TIM_Base_Start_IT+0x80>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a1c      	ldr	r2, [pc, #112]	; (8007954 <HAL_TIM_Base_Start_IT+0xe4>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d004      	beq.n	80078f0 <HAL_TIM_Base_Start_IT+0x80>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a1b      	ldr	r2, [pc, #108]	; (8007958 <HAL_TIM_Base_Start_IT+0xe8>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d115      	bne.n	800791c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	689a      	ldr	r2, [r3, #8]
 80078f6:	4b19      	ldr	r3, [pc, #100]	; (800795c <HAL_TIM_Base_Start_IT+0xec>)
 80078f8:	4013      	ands	r3, r2
 80078fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2b06      	cmp	r3, #6
 8007900:	d015      	beq.n	800792e <HAL_TIM_Base_Start_IT+0xbe>
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007908:	d011      	beq.n	800792e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f042 0201 	orr.w	r2, r2, #1
 8007918:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800791a:	e008      	b.n	800792e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f042 0201 	orr.w	r2, r2, #1
 800792a:	601a      	str	r2, [r3, #0]
 800792c:	e000      	b.n	8007930 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800792e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007930:	2300      	movs	r3, #0
}
 8007932:	4618      	mov	r0, r3
 8007934:	3714      	adds	r7, #20
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr
 800793e:	bf00      	nop
 8007940:	40012c00 	.word	0x40012c00
 8007944:	40000400 	.word	0x40000400
 8007948:	40000800 	.word	0x40000800
 800794c:	40000c00 	.word	0x40000c00
 8007950:	40013400 	.word	0x40013400
 8007954:	40014000 	.word	0x40014000
 8007958:	40015000 	.word	0x40015000
 800795c:	00010007 	.word	0x00010007

08007960 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	691b      	ldr	r3, [r3, #16]
 800796e:	f003 0302 	and.w	r3, r3, #2
 8007972:	2b02      	cmp	r3, #2
 8007974:	d122      	bne.n	80079bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	f003 0302 	and.w	r3, r3, #2
 8007980:	2b02      	cmp	r3, #2
 8007982:	d11b      	bne.n	80079bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f06f 0202 	mvn.w	r2, #2
 800798c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2201      	movs	r2, #1
 8007992:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	699b      	ldr	r3, [r3, #24]
 800799a:	f003 0303 	and.w	r3, r3, #3
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d003      	beq.n	80079aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 fa78 	bl	8007e98 <HAL_TIM_IC_CaptureCallback>
 80079a8:	e005      	b.n	80079b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 fa6a 	bl	8007e84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f000 fa7b 	bl	8007eac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	691b      	ldr	r3, [r3, #16]
 80079c2:	f003 0304 	and.w	r3, r3, #4
 80079c6:	2b04      	cmp	r3, #4
 80079c8:	d122      	bne.n	8007a10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	f003 0304 	and.w	r3, r3, #4
 80079d4:	2b04      	cmp	r3, #4
 80079d6:	d11b      	bne.n	8007a10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f06f 0204 	mvn.w	r2, #4
 80079e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2202      	movs	r2, #2
 80079e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	699b      	ldr	r3, [r3, #24]
 80079ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d003      	beq.n	80079fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 fa4e 	bl	8007e98 <HAL_TIM_IC_CaptureCallback>
 80079fc:	e005      	b.n	8007a0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 fa40 	bl	8007e84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 fa51 	bl	8007eac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	691b      	ldr	r3, [r3, #16]
 8007a16:	f003 0308 	and.w	r3, r3, #8
 8007a1a:	2b08      	cmp	r3, #8
 8007a1c:	d122      	bne.n	8007a64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	68db      	ldr	r3, [r3, #12]
 8007a24:	f003 0308 	and.w	r3, r3, #8
 8007a28:	2b08      	cmp	r3, #8
 8007a2a:	d11b      	bne.n	8007a64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f06f 0208 	mvn.w	r2, #8
 8007a34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2204      	movs	r2, #4
 8007a3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	69db      	ldr	r3, [r3, #28]
 8007a42:	f003 0303 	and.w	r3, r3, #3
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d003      	beq.n	8007a52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 fa24 	bl	8007e98 <HAL_TIM_IC_CaptureCallback>
 8007a50:	e005      	b.n	8007a5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 fa16 	bl	8007e84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 fa27 	bl	8007eac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	691b      	ldr	r3, [r3, #16]
 8007a6a:	f003 0310 	and.w	r3, r3, #16
 8007a6e:	2b10      	cmp	r3, #16
 8007a70:	d122      	bne.n	8007ab8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	68db      	ldr	r3, [r3, #12]
 8007a78:	f003 0310 	and.w	r3, r3, #16
 8007a7c:	2b10      	cmp	r3, #16
 8007a7e:	d11b      	bne.n	8007ab8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f06f 0210 	mvn.w	r2, #16
 8007a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2208      	movs	r2, #8
 8007a8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	69db      	ldr	r3, [r3, #28]
 8007a96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d003      	beq.n	8007aa6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 f9fa 	bl	8007e98 <HAL_TIM_IC_CaptureCallback>
 8007aa4:	e005      	b.n	8007ab2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 f9ec 	bl	8007e84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 f9fd 	bl	8007eac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	691b      	ldr	r3, [r3, #16]
 8007abe:	f003 0301 	and.w	r3, r3, #1
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d10e      	bne.n	8007ae4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	68db      	ldr	r3, [r3, #12]
 8007acc:	f003 0301 	and.w	r3, r3, #1
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d107      	bne.n	8007ae4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f06f 0201 	mvn.w	r2, #1
 8007adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f7fa fc3a 	bl	8002358 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	691b      	ldr	r3, [r3, #16]
 8007aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aee:	2b80      	cmp	r3, #128	; 0x80
 8007af0:	d10e      	bne.n	8007b10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007afc:	2b80      	cmp	r3, #128	; 0x80
 8007afe:	d107      	bne.n	8007b10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 fbc6 	bl	800829c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	691b      	ldr	r3, [r3, #16]
 8007b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b1e:	d10e      	bne.n	8007b3e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	68db      	ldr	r3, [r3, #12]
 8007b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b2a:	2b80      	cmp	r3, #128	; 0x80
 8007b2c:	d107      	bne.n	8007b3e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007b36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f000 fbb9 	bl	80082b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	691b      	ldr	r3, [r3, #16]
 8007b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b48:	2b40      	cmp	r3, #64	; 0x40
 8007b4a:	d10e      	bne.n	8007b6a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b56:	2b40      	cmp	r3, #64	; 0x40
 8007b58:	d107      	bne.n	8007b6a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007b62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 f9ab 	bl	8007ec0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	691b      	ldr	r3, [r3, #16]
 8007b70:	f003 0320 	and.w	r3, r3, #32
 8007b74:	2b20      	cmp	r3, #32
 8007b76:	d10e      	bne.n	8007b96 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	68db      	ldr	r3, [r3, #12]
 8007b7e:	f003 0320 	and.w	r3, r3, #32
 8007b82:	2b20      	cmp	r3, #32
 8007b84:	d107      	bne.n	8007b96 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f06f 0220 	mvn.w	r2, #32
 8007b8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 fb79 	bl	8008288 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	691b      	ldr	r3, [r3, #16]
 8007b9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ba0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ba4:	d10f      	bne.n	8007bc6 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	68db      	ldr	r3, [r3, #12]
 8007bac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007bb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bb4:	d107      	bne.n	8007bc6 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8007bbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 fb7f 	bl	80082c4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	691b      	ldr	r3, [r3, #16]
 8007bcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007bd0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007bd4:	d10f      	bne.n	8007bf6 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	68db      	ldr	r3, [r3, #12]
 8007bdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007be0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007be4:	d107      	bne.n	8007bf6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8007bee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 fb71 	bl	80082d8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	691b      	ldr	r3, [r3, #16]
 8007bfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c04:	d10f      	bne.n	8007c26 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	68db      	ldr	r3, [r3, #12]
 8007c0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c14:	d107      	bne.n	8007c26 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8007c1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 fb63 	bl	80082ec <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	691b      	ldr	r3, [r3, #16]
 8007c2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007c34:	d10f      	bne.n	8007c56 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	68db      	ldr	r3, [r3, #12]
 8007c3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007c44:	d107      	bne.n	8007c56 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8007c4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 fb55 	bl	8008300 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c56:	bf00      	nop
 8007c58:	3708      	adds	r7, #8
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
	...

08007c60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d101      	bne.n	8007c78 <HAL_TIM_ConfigClockSource+0x18>
 8007c74:	2302      	movs	r3, #2
 8007c76:	e0f5      	b.n	8007e64 <HAL_TIM_ConfigClockSource+0x204>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2202      	movs	r2, #2
 8007c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8007c96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007c9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ca2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	68fa      	ldr	r2, [r7, #12]
 8007caa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a6e      	ldr	r2, [pc, #440]	; (8007e6c <HAL_TIM_ConfigClockSource+0x20c>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	f000 80c1 	beq.w	8007e3a <HAL_TIM_ConfigClockSource+0x1da>
 8007cb8:	4a6c      	ldr	r2, [pc, #432]	; (8007e6c <HAL_TIM_ConfigClockSource+0x20c>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	f200 80c6 	bhi.w	8007e4c <HAL_TIM_ConfigClockSource+0x1ec>
 8007cc0:	4a6b      	ldr	r2, [pc, #428]	; (8007e70 <HAL_TIM_ConfigClockSource+0x210>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	f000 80b9 	beq.w	8007e3a <HAL_TIM_ConfigClockSource+0x1da>
 8007cc8:	4a69      	ldr	r2, [pc, #420]	; (8007e70 <HAL_TIM_ConfigClockSource+0x210>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	f200 80be 	bhi.w	8007e4c <HAL_TIM_ConfigClockSource+0x1ec>
 8007cd0:	4a68      	ldr	r2, [pc, #416]	; (8007e74 <HAL_TIM_ConfigClockSource+0x214>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	f000 80b1 	beq.w	8007e3a <HAL_TIM_ConfigClockSource+0x1da>
 8007cd8:	4a66      	ldr	r2, [pc, #408]	; (8007e74 <HAL_TIM_ConfigClockSource+0x214>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	f200 80b6 	bhi.w	8007e4c <HAL_TIM_ConfigClockSource+0x1ec>
 8007ce0:	4a65      	ldr	r2, [pc, #404]	; (8007e78 <HAL_TIM_ConfigClockSource+0x218>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	f000 80a9 	beq.w	8007e3a <HAL_TIM_ConfigClockSource+0x1da>
 8007ce8:	4a63      	ldr	r2, [pc, #396]	; (8007e78 <HAL_TIM_ConfigClockSource+0x218>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	f200 80ae 	bhi.w	8007e4c <HAL_TIM_ConfigClockSource+0x1ec>
 8007cf0:	4a62      	ldr	r2, [pc, #392]	; (8007e7c <HAL_TIM_ConfigClockSource+0x21c>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	f000 80a1 	beq.w	8007e3a <HAL_TIM_ConfigClockSource+0x1da>
 8007cf8:	4a60      	ldr	r2, [pc, #384]	; (8007e7c <HAL_TIM_ConfigClockSource+0x21c>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	f200 80a6 	bhi.w	8007e4c <HAL_TIM_ConfigClockSource+0x1ec>
 8007d00:	4a5f      	ldr	r2, [pc, #380]	; (8007e80 <HAL_TIM_ConfigClockSource+0x220>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	f000 8099 	beq.w	8007e3a <HAL_TIM_ConfigClockSource+0x1da>
 8007d08:	4a5d      	ldr	r2, [pc, #372]	; (8007e80 <HAL_TIM_ConfigClockSource+0x220>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	f200 809e 	bhi.w	8007e4c <HAL_TIM_ConfigClockSource+0x1ec>
 8007d10:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007d14:	f000 8091 	beq.w	8007e3a <HAL_TIM_ConfigClockSource+0x1da>
 8007d18:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007d1c:	f200 8096 	bhi.w	8007e4c <HAL_TIM_ConfigClockSource+0x1ec>
 8007d20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d24:	f000 8089 	beq.w	8007e3a <HAL_TIM_ConfigClockSource+0x1da>
 8007d28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d2c:	f200 808e 	bhi.w	8007e4c <HAL_TIM_ConfigClockSource+0x1ec>
 8007d30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d34:	d03e      	beq.n	8007db4 <HAL_TIM_ConfigClockSource+0x154>
 8007d36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d3a:	f200 8087 	bhi.w	8007e4c <HAL_TIM_ConfigClockSource+0x1ec>
 8007d3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d42:	f000 8085 	beq.w	8007e50 <HAL_TIM_ConfigClockSource+0x1f0>
 8007d46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d4a:	d87f      	bhi.n	8007e4c <HAL_TIM_ConfigClockSource+0x1ec>
 8007d4c:	2b70      	cmp	r3, #112	; 0x70
 8007d4e:	d01a      	beq.n	8007d86 <HAL_TIM_ConfigClockSource+0x126>
 8007d50:	2b70      	cmp	r3, #112	; 0x70
 8007d52:	d87b      	bhi.n	8007e4c <HAL_TIM_ConfigClockSource+0x1ec>
 8007d54:	2b60      	cmp	r3, #96	; 0x60
 8007d56:	d050      	beq.n	8007dfa <HAL_TIM_ConfigClockSource+0x19a>
 8007d58:	2b60      	cmp	r3, #96	; 0x60
 8007d5a:	d877      	bhi.n	8007e4c <HAL_TIM_ConfigClockSource+0x1ec>
 8007d5c:	2b50      	cmp	r3, #80	; 0x50
 8007d5e:	d03c      	beq.n	8007dda <HAL_TIM_ConfigClockSource+0x17a>
 8007d60:	2b50      	cmp	r3, #80	; 0x50
 8007d62:	d873      	bhi.n	8007e4c <HAL_TIM_ConfigClockSource+0x1ec>
 8007d64:	2b40      	cmp	r3, #64	; 0x40
 8007d66:	d058      	beq.n	8007e1a <HAL_TIM_ConfigClockSource+0x1ba>
 8007d68:	2b40      	cmp	r3, #64	; 0x40
 8007d6a:	d86f      	bhi.n	8007e4c <HAL_TIM_ConfigClockSource+0x1ec>
 8007d6c:	2b30      	cmp	r3, #48	; 0x30
 8007d6e:	d064      	beq.n	8007e3a <HAL_TIM_ConfigClockSource+0x1da>
 8007d70:	2b30      	cmp	r3, #48	; 0x30
 8007d72:	d86b      	bhi.n	8007e4c <HAL_TIM_ConfigClockSource+0x1ec>
 8007d74:	2b20      	cmp	r3, #32
 8007d76:	d060      	beq.n	8007e3a <HAL_TIM_ConfigClockSource+0x1da>
 8007d78:	2b20      	cmp	r3, #32
 8007d7a:	d867      	bhi.n	8007e4c <HAL_TIM_ConfigClockSource+0x1ec>
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d05c      	beq.n	8007e3a <HAL_TIM_ConfigClockSource+0x1da>
 8007d80:	2b10      	cmp	r3, #16
 8007d82:	d05a      	beq.n	8007e3a <HAL_TIM_ConfigClockSource+0x1da>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007d84:	e062      	b.n	8007e4c <HAL_TIM_ConfigClockSource+0x1ec>
      TIM_ETR_SetConfig(htim->Instance,
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6818      	ldr	r0, [r3, #0]
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	6899      	ldr	r1, [r3, #8]
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	685a      	ldr	r2, [r3, #4]
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	f000 f9c1 	bl	800811c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007da8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	68fa      	ldr	r2, [r7, #12]
 8007db0:	609a      	str	r2, [r3, #8]
      break;
 8007db2:	e04e      	b.n	8007e52 <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_ETR_SetConfig(htim->Instance,
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6818      	ldr	r0, [r3, #0]
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	6899      	ldr	r1, [r3, #8]
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	685a      	ldr	r2, [r3, #4]
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	68db      	ldr	r3, [r3, #12]
 8007dc4:	f000 f9aa 	bl	800811c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	689a      	ldr	r2, [r3, #8]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007dd6:	609a      	str	r2, [r3, #8]
      break;
 8007dd8:	e03b      	b.n	8007e52 <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6818      	ldr	r0, [r3, #0]
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	6859      	ldr	r1, [r3, #4]
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	461a      	mov	r2, r3
 8007de8:	f000 f91c 	bl	8008024 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	2150      	movs	r1, #80	; 0x50
 8007df2:	4618      	mov	r0, r3
 8007df4:	f000 f975 	bl	80080e2 <TIM_ITRx_SetConfig>
      break;
 8007df8:	e02b      	b.n	8007e52 <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6818      	ldr	r0, [r3, #0]
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	6859      	ldr	r1, [r3, #4]
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	68db      	ldr	r3, [r3, #12]
 8007e06:	461a      	mov	r2, r3
 8007e08:	f000 f93b 	bl	8008082 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	2160      	movs	r1, #96	; 0x60
 8007e12:	4618      	mov	r0, r3
 8007e14:	f000 f965 	bl	80080e2 <TIM_ITRx_SetConfig>
      break;
 8007e18:	e01b      	b.n	8007e52 <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6818      	ldr	r0, [r3, #0]
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	6859      	ldr	r1, [r3, #4]
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	68db      	ldr	r3, [r3, #12]
 8007e26:	461a      	mov	r2, r3
 8007e28:	f000 f8fc 	bl	8008024 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2140      	movs	r1, #64	; 0x40
 8007e32:	4618      	mov	r0, r3
 8007e34:	f000 f955 	bl	80080e2 <TIM_ITRx_SetConfig>
      break;
 8007e38:	e00b      	b.n	8007e52 <HAL_TIM_ConfigClockSource+0x1f2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681a      	ldr	r2, [r3, #0]
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4619      	mov	r1, r3
 8007e44:	4610      	mov	r0, r2
 8007e46:	f000 f94c 	bl	80080e2 <TIM_ITRx_SetConfig>
        break;
 8007e4a:	e002      	b.n	8007e52 <HAL_TIM_ConfigClockSource+0x1f2>
      break;
 8007e4c:	bf00      	nop
 8007e4e:	e000      	b.n	8007e52 <HAL_TIM_ConfigClockSource+0x1f2>
      break;
 8007e50:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2201      	movs	r2, #1
 8007e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e62:	2300      	movs	r3, #0
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3710      	adds	r7, #16
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}
 8007e6c:	00100070 	.word	0x00100070
 8007e70:	00100060 	.word	0x00100060
 8007e74:	00100050 	.word	0x00100050
 8007e78:	00100040 	.word	0x00100040
 8007e7c:	00100030 	.word	0x00100030
 8007e80:	00100020 	.word	0x00100020

08007e84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007e8c:	bf00      	nop
 8007e8e:	370c      	adds	r7, #12
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007ea0:	bf00      	nop
 8007ea2:	370c      	adds	r7, #12
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr

08007eac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007eb4:	bf00      	nop
 8007eb6:	370c      	adds	r7, #12
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b083      	sub	sp, #12
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ec8:	bf00      	nop
 8007eca:	370c      	adds	r7, #12
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr

08007ed4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b085      	sub	sp, #20
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	4a46      	ldr	r2, [pc, #280]	; (8008000 <TIM_Base_SetConfig+0x12c>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d017      	beq.n	8007f1c <TIM_Base_SetConfig+0x48>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ef2:	d013      	beq.n	8007f1c <TIM_Base_SetConfig+0x48>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	4a43      	ldr	r2, [pc, #268]	; (8008004 <TIM_Base_SetConfig+0x130>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d00f      	beq.n	8007f1c <TIM_Base_SetConfig+0x48>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	4a42      	ldr	r2, [pc, #264]	; (8008008 <TIM_Base_SetConfig+0x134>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d00b      	beq.n	8007f1c <TIM_Base_SetConfig+0x48>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	4a41      	ldr	r2, [pc, #260]	; (800800c <TIM_Base_SetConfig+0x138>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d007      	beq.n	8007f1c <TIM_Base_SetConfig+0x48>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	4a40      	ldr	r2, [pc, #256]	; (8008010 <TIM_Base_SetConfig+0x13c>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d003      	beq.n	8007f1c <TIM_Base_SetConfig+0x48>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	4a3f      	ldr	r2, [pc, #252]	; (8008014 <TIM_Base_SetConfig+0x140>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d108      	bne.n	8007f2e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	68fa      	ldr	r2, [r7, #12]
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4a33      	ldr	r2, [pc, #204]	; (8008000 <TIM_Base_SetConfig+0x12c>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d023      	beq.n	8007f7e <TIM_Base_SetConfig+0xaa>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f3c:	d01f      	beq.n	8007f7e <TIM_Base_SetConfig+0xaa>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	4a30      	ldr	r2, [pc, #192]	; (8008004 <TIM_Base_SetConfig+0x130>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d01b      	beq.n	8007f7e <TIM_Base_SetConfig+0xaa>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4a2f      	ldr	r2, [pc, #188]	; (8008008 <TIM_Base_SetConfig+0x134>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d017      	beq.n	8007f7e <TIM_Base_SetConfig+0xaa>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4a2e      	ldr	r2, [pc, #184]	; (800800c <TIM_Base_SetConfig+0x138>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d013      	beq.n	8007f7e <TIM_Base_SetConfig+0xaa>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4a2d      	ldr	r2, [pc, #180]	; (8008010 <TIM_Base_SetConfig+0x13c>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d00f      	beq.n	8007f7e <TIM_Base_SetConfig+0xaa>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4a2d      	ldr	r2, [pc, #180]	; (8008018 <TIM_Base_SetConfig+0x144>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d00b      	beq.n	8007f7e <TIM_Base_SetConfig+0xaa>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	4a2c      	ldr	r2, [pc, #176]	; (800801c <TIM_Base_SetConfig+0x148>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d007      	beq.n	8007f7e <TIM_Base_SetConfig+0xaa>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	4a2b      	ldr	r2, [pc, #172]	; (8008020 <TIM_Base_SetConfig+0x14c>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d003      	beq.n	8007f7e <TIM_Base_SetConfig+0xaa>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	4a26      	ldr	r2, [pc, #152]	; (8008014 <TIM_Base_SetConfig+0x140>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d108      	bne.n	8007f90 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	68db      	ldr	r3, [r3, #12]
 8007f8a:	68fa      	ldr	r2, [r7, #12]
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	695b      	ldr	r3, [r3, #20]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	68fa      	ldr	r2, [r7, #12]
 8007fa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	689a      	ldr	r2, [r3, #8]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	4a12      	ldr	r2, [pc, #72]	; (8008000 <TIM_Base_SetConfig+0x12c>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d013      	beq.n	8007fe4 <TIM_Base_SetConfig+0x110>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	4a14      	ldr	r2, [pc, #80]	; (8008010 <TIM_Base_SetConfig+0x13c>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d00f      	beq.n	8007fe4 <TIM_Base_SetConfig+0x110>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	4a14      	ldr	r2, [pc, #80]	; (8008018 <TIM_Base_SetConfig+0x144>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d00b      	beq.n	8007fe4 <TIM_Base_SetConfig+0x110>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	4a13      	ldr	r2, [pc, #76]	; (800801c <TIM_Base_SetConfig+0x148>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d007      	beq.n	8007fe4 <TIM_Base_SetConfig+0x110>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	4a12      	ldr	r2, [pc, #72]	; (8008020 <TIM_Base_SetConfig+0x14c>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d003      	beq.n	8007fe4 <TIM_Base_SetConfig+0x110>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	4a0d      	ldr	r2, [pc, #52]	; (8008014 <TIM_Base_SetConfig+0x140>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d103      	bne.n	8007fec <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	691a      	ldr	r2, [r3, #16]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	615a      	str	r2, [r3, #20]
}
 8007ff2:	bf00      	nop
 8007ff4:	3714      	adds	r7, #20
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr
 8007ffe:	bf00      	nop
 8008000:	40012c00 	.word	0x40012c00
 8008004:	40000400 	.word	0x40000400
 8008008:	40000800 	.word	0x40000800
 800800c:	40000c00 	.word	0x40000c00
 8008010:	40013400 	.word	0x40013400
 8008014:	40015000 	.word	0x40015000
 8008018:	40014000 	.word	0x40014000
 800801c:	40014400 	.word	0x40014400
 8008020:	40014800 	.word	0x40014800

08008024 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008024:	b480      	push	{r7}
 8008026:	b087      	sub	sp, #28
 8008028:	af00      	add	r7, sp, #0
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	60b9      	str	r1, [r7, #8]
 800802e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	6a1b      	ldr	r3, [r3, #32]
 8008034:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	6a1b      	ldr	r3, [r3, #32]
 800803a:	f023 0201 	bic.w	r2, r3, #1
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	699b      	ldr	r3, [r3, #24]
 8008046:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800804e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	011b      	lsls	r3, r3, #4
 8008054:	693a      	ldr	r2, [r7, #16]
 8008056:	4313      	orrs	r3, r2
 8008058:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	f023 030a 	bic.w	r3, r3, #10
 8008060:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008062:	697a      	ldr	r2, [r7, #20]
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	4313      	orrs	r3, r2
 8008068:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	693a      	ldr	r2, [r7, #16]
 800806e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	697a      	ldr	r2, [r7, #20]
 8008074:	621a      	str	r2, [r3, #32]
}
 8008076:	bf00      	nop
 8008078:	371c      	adds	r7, #28
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr

08008082 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008082:	b480      	push	{r7}
 8008084:	b087      	sub	sp, #28
 8008086:	af00      	add	r7, sp, #0
 8008088:	60f8      	str	r0, [r7, #12]
 800808a:	60b9      	str	r1, [r7, #8]
 800808c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	6a1b      	ldr	r3, [r3, #32]
 8008092:	f023 0210 	bic.w	r2, r3, #16
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	699b      	ldr	r3, [r3, #24]
 800809e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	6a1b      	ldr	r3, [r3, #32]
 80080a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80080ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	031b      	lsls	r3, r3, #12
 80080b2:	697a      	ldr	r2, [r7, #20]
 80080b4:	4313      	orrs	r3, r2
 80080b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80080be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	011b      	lsls	r3, r3, #4
 80080c4:	693a      	ldr	r2, [r7, #16]
 80080c6:	4313      	orrs	r3, r2
 80080c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	697a      	ldr	r2, [r7, #20]
 80080ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	693a      	ldr	r2, [r7, #16]
 80080d4:	621a      	str	r2, [r3, #32]
}
 80080d6:	bf00      	nop
 80080d8:	371c      	adds	r7, #28
 80080da:	46bd      	mov	sp, r7
 80080dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e0:	4770      	bx	lr

080080e2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80080e2:	b480      	push	{r7}
 80080e4:	b085      	sub	sp, #20
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
 80080ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	689b      	ldr	r3, [r3, #8]
 80080f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80080f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80080fe:	683a      	ldr	r2, [r7, #0]
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	4313      	orrs	r3, r2
 8008104:	f043 0307 	orr.w	r3, r3, #7
 8008108:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	68fa      	ldr	r2, [r7, #12]
 800810e:	609a      	str	r2, [r3, #8]
}
 8008110:	bf00      	nop
 8008112:	3714      	adds	r7, #20
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr

0800811c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800811c:	b480      	push	{r7}
 800811e:	b087      	sub	sp, #28
 8008120:	af00      	add	r7, sp, #0
 8008122:	60f8      	str	r0, [r7, #12]
 8008124:	60b9      	str	r1, [r7, #8]
 8008126:	607a      	str	r2, [r7, #4]
 8008128:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008136:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	021a      	lsls	r2, r3, #8
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	431a      	orrs	r2, r3
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	4313      	orrs	r3, r2
 8008144:	697a      	ldr	r2, [r7, #20]
 8008146:	4313      	orrs	r3, r2
 8008148:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	697a      	ldr	r2, [r7, #20]
 800814e:	609a      	str	r2, [r3, #8]
}
 8008150:	bf00      	nop
 8008152:	371c      	adds	r7, #28
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr

0800815c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800815c:	b480      	push	{r7}
 800815e:	b085      	sub	sp, #20
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800816c:	2b01      	cmp	r3, #1
 800816e:	d101      	bne.n	8008174 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008170:	2302      	movs	r3, #2
 8008172:	e074      	b.n	800825e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2201      	movs	r2, #1
 8008178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2202      	movs	r2, #2
 8008180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	689b      	ldr	r3, [r3, #8]
 8008192:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a34      	ldr	r2, [pc, #208]	; (800826c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d009      	beq.n	80081b2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a33      	ldr	r2, [pc, #204]	; (8008270 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d004      	beq.n	80081b2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a31      	ldr	r2, [pc, #196]	; (8008274 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d108      	bne.n	80081c4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80081b8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	68fa      	ldr	r2, [r7, #12]
 80081c0:	4313      	orrs	r3, r2
 80081c2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80081ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	68fa      	ldr	r2, [r7, #12]
 80081d6:	4313      	orrs	r3, r2
 80081d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	68fa      	ldr	r2, [r7, #12]
 80081e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a21      	ldr	r2, [pc, #132]	; (800826c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d022      	beq.n	8008232 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081f4:	d01d      	beq.n	8008232 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a1f      	ldr	r2, [pc, #124]	; (8008278 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d018      	beq.n	8008232 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a1d      	ldr	r2, [pc, #116]	; (800827c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d013      	beq.n	8008232 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a1c      	ldr	r2, [pc, #112]	; (8008280 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d00e      	beq.n	8008232 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a15      	ldr	r2, [pc, #84]	; (8008270 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d009      	beq.n	8008232 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a18      	ldr	r2, [pc, #96]	; (8008284 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d004      	beq.n	8008232 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a11      	ldr	r2, [pc, #68]	; (8008274 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d10c      	bne.n	800824c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008238:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	689b      	ldr	r3, [r3, #8]
 800823e:	68ba      	ldr	r2, [r7, #8]
 8008240:	4313      	orrs	r3, r2
 8008242:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	68ba      	ldr	r2, [r7, #8]
 800824a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2201      	movs	r2, #1
 8008250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2200      	movs	r2, #0
 8008258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800825c:	2300      	movs	r3, #0
}
 800825e:	4618      	mov	r0, r3
 8008260:	3714      	adds	r7, #20
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr
 800826a:	bf00      	nop
 800826c:	40012c00 	.word	0x40012c00
 8008270:	40013400 	.word	0x40013400
 8008274:	40015000 	.word	0x40015000
 8008278:	40000400 	.word	0x40000400
 800827c:	40000800 	.word	0x40000800
 8008280:	40000c00 	.word	0x40000c00
 8008284:	40014000 	.word	0x40014000

08008288 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008288:	b480      	push	{r7}
 800828a:	b083      	sub	sp, #12
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008290:	bf00      	nop
 8008292:	370c      	adds	r7, #12
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr

0800829c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800829c:	b480      	push	{r7}
 800829e:	b083      	sub	sp, #12
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80082a4:	bf00      	nop
 80082a6:	370c      	adds	r7, #12
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr

080082b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80082b8:	bf00      	nop
 80082ba:	370c      	adds	r7, #12
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr

080082c4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80082cc:	bf00      	nop
 80082ce:	370c      	adds	r7, #12
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80082e0:	bf00      	nop
 80082e2:	370c      	adds	r7, #12
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr

080082ec <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b083      	sub	sp, #12
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80082f4:	bf00      	nop
 80082f6:	370c      	adds	r7, #12
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr

08008300 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008300:	b480      	push	{r7}
 8008302:	b083      	sub	sp, #12
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008308:	bf00      	nop
 800830a:	370c      	adds	r7, #12
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr

08008314 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b082      	sub	sp, #8
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d101      	bne.n	8008326 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	e042      	b.n	80083ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800832c:	2b00      	cmp	r3, #0
 800832e:	d106      	bne.n	800833e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2200      	movs	r2, #0
 8008334:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f7fa fa63 	bl	8002804 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2224      	movs	r2, #36	; 0x24
 8008342:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f022 0201 	bic.w	r2, r2, #1
 8008354:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 fb0a 	bl	8008970 <UART_SetConfig>
 800835c:	4603      	mov	r3, r0
 800835e:	2b01      	cmp	r3, #1
 8008360:	d101      	bne.n	8008366 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008362:	2301      	movs	r3, #1
 8008364:	e022      	b.n	80083ac <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800836a:	2b00      	cmp	r3, #0
 800836c:	d002      	beq.n	8008374 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 fdc8 	bl	8008f04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	685a      	ldr	r2, [r3, #4]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008382:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	689a      	ldr	r2, [r3, #8]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008392:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f042 0201 	orr.w	r2, r2, #1
 80083a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 fe4f 	bl	8009048 <UART_CheckIdleState>
 80083aa:	4603      	mov	r3, r0
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3708      	adds	r7, #8
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b084      	sub	sp, #16
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	60b9      	str	r1, [r7, #8]
 80083be:	4613      	mov	r3, r2
 80083c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083c8:	2b20      	cmp	r3, #32
 80083ca:	d168      	bne.n	800849e <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d002      	beq.n	80083d8 <HAL_UART_Transmit_DMA+0x24>
 80083d2:	88fb      	ldrh	r3, [r7, #6]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d101      	bne.n	80083dc <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	e061      	b.n	80084a0 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	d101      	bne.n	80083ea <HAL_UART_Transmit_DMA+0x36>
 80083e6:	2302      	movs	r3, #2
 80083e8:	e05a      	b.n	80084a0 <HAL_UART_Transmit_DMA+0xec>
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2201      	movs	r2, #1
 80083ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	68ba      	ldr	r2, [r7, #8]
 80083f6:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	88fa      	ldrh	r2, [r7, #6]
 80083fc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	88fa      	ldrh	r2, [r7, #6]
 8008404:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2200      	movs	r2, #0
 800840c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2221      	movs	r2, #33	; 0x21
 8008414:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800841c:	2b00      	cmp	r3, #0
 800841e:	d02c      	beq.n	800847a <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008424:	4a20      	ldr	r2, [pc, #128]	; (80084a8 <HAL_UART_Transmit_DMA+0xf4>)
 8008426:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800842c:	4a1f      	ldr	r2, [pc, #124]	; (80084ac <HAL_UART_Transmit_DMA+0xf8>)
 800842e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008434:	4a1e      	ldr	r2, [pc, #120]	; (80084b0 <HAL_UART_Transmit_DMA+0xfc>)
 8008436:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800843c:	2200      	movs	r2, #0
 800843e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008448:	4619      	mov	r1, r3
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	3328      	adds	r3, #40	; 0x28
 8008450:	461a      	mov	r2, r3
 8008452:	88fb      	ldrh	r3, [r7, #6]
 8008454:	f7fc f906 	bl	8004664 <HAL_DMA_Start_IT>
 8008458:	4603      	mov	r3, r0
 800845a:	2b00      	cmp	r3, #0
 800845c:	d00d      	beq.n	800847a <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2210      	movs	r2, #16
 8008462:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2200      	movs	r2, #0
 800846a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2220      	movs	r2, #32
 8008472:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8008476:	2301      	movs	r3, #1
 8008478:	e012      	b.n	80084a0 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	2240      	movs	r2, #64	; 0x40
 8008480:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2200      	movs	r2, #0
 8008486:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	689a      	ldr	r2, [r3, #8]
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008498:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800849a:	2300      	movs	r3, #0
 800849c:	e000      	b.n	80084a0 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 800849e:	2302      	movs	r3, #2
  }
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3710      	adds	r7, #16
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}
 80084a8:	0800927f 	.word	0x0800927f
 80084ac:	080092d3 	.word	0x080092d3
 80084b0:	080092ef 	.word	0x080092ef

080084b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b088      	sub	sp, #32
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	69db      	ldr	r3, [r3, #28]
 80084c2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80084d4:	69fa      	ldr	r2, [r7, #28]
 80084d6:	f640 030f 	movw	r3, #2063	; 0x80f
 80084da:	4013      	ands	r3, r2
 80084dc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d118      	bne.n	8008516 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80084e4:	69fb      	ldr	r3, [r7, #28]
 80084e6:	f003 0320 	and.w	r3, r3, #32
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d013      	beq.n	8008516 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80084ee:	69bb      	ldr	r3, [r7, #24]
 80084f0:	f003 0320 	and.w	r3, r3, #32
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d104      	bne.n	8008502 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d009      	beq.n	8008516 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008506:	2b00      	cmp	r3, #0
 8008508:	f000 81fb 	beq.w	8008902 <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	4798      	blx	r3
      }
      return;
 8008514:	e1f5      	b.n	8008902 <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	2b00      	cmp	r3, #0
 800851a:	f000 80ef 	beq.w	80086fc <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800851e:	697a      	ldr	r2, [r7, #20]
 8008520:	4b73      	ldr	r3, [pc, #460]	; (80086f0 <HAL_UART_IRQHandler+0x23c>)
 8008522:	4013      	ands	r3, r2
 8008524:	2b00      	cmp	r3, #0
 8008526:	d105      	bne.n	8008534 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008528:	69ba      	ldr	r2, [r7, #24]
 800852a:	4b72      	ldr	r3, [pc, #456]	; (80086f4 <HAL_UART_IRQHandler+0x240>)
 800852c:	4013      	ands	r3, r2
 800852e:	2b00      	cmp	r3, #0
 8008530:	f000 80e4 	beq.w	80086fc <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008534:	69fb      	ldr	r3, [r7, #28]
 8008536:	f003 0301 	and.w	r3, r3, #1
 800853a:	2b00      	cmp	r3, #0
 800853c:	d010      	beq.n	8008560 <HAL_UART_IRQHandler+0xac>
 800853e:	69bb      	ldr	r3, [r7, #24]
 8008540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008544:	2b00      	cmp	r3, #0
 8008546:	d00b      	beq.n	8008560 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	2201      	movs	r2, #1
 800854e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008556:	f043 0201 	orr.w	r2, r3, #1
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008560:	69fb      	ldr	r3, [r7, #28]
 8008562:	f003 0302 	and.w	r3, r3, #2
 8008566:	2b00      	cmp	r3, #0
 8008568:	d010      	beq.n	800858c <HAL_UART_IRQHandler+0xd8>
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	f003 0301 	and.w	r3, r3, #1
 8008570:	2b00      	cmp	r3, #0
 8008572:	d00b      	beq.n	800858c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2202      	movs	r2, #2
 800857a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008582:	f043 0204 	orr.w	r2, r3, #4
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800858c:	69fb      	ldr	r3, [r7, #28]
 800858e:	f003 0304 	and.w	r3, r3, #4
 8008592:	2b00      	cmp	r3, #0
 8008594:	d010      	beq.n	80085b8 <HAL_UART_IRQHandler+0x104>
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	f003 0301 	and.w	r3, r3, #1
 800859c:	2b00      	cmp	r3, #0
 800859e:	d00b      	beq.n	80085b8 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	2204      	movs	r2, #4
 80085a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085ae:	f043 0202 	orr.w	r2, r3, #2
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80085b8:	69fb      	ldr	r3, [r7, #28]
 80085ba:	f003 0308 	and.w	r3, r3, #8
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d015      	beq.n	80085ee <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80085c2:	69bb      	ldr	r3, [r7, #24]
 80085c4:	f003 0320 	and.w	r3, r3, #32
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d104      	bne.n	80085d6 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80085cc:	697a      	ldr	r2, [r7, #20]
 80085ce:	4b48      	ldr	r3, [pc, #288]	; (80086f0 <HAL_UART_IRQHandler+0x23c>)
 80085d0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d00b      	beq.n	80085ee <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	2208      	movs	r2, #8
 80085dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085e4:	f043 0208 	orr.w	r2, r3, #8
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80085ee:	69fb      	ldr	r3, [r7, #28]
 80085f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d011      	beq.n	800861c <HAL_UART_IRQHandler+0x168>
 80085f8:	69bb      	ldr	r3, [r7, #24]
 80085fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d00c      	beq.n	800861c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800860a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008612:	f043 0220 	orr.w	r2, r3, #32
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008622:	2b00      	cmp	r3, #0
 8008624:	f000 816f 	beq.w	8008906 <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008628:	69fb      	ldr	r3, [r7, #28]
 800862a:	f003 0320 	and.w	r3, r3, #32
 800862e:	2b00      	cmp	r3, #0
 8008630:	d011      	beq.n	8008656 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008632:	69bb      	ldr	r3, [r7, #24]
 8008634:	f003 0320 	and.w	r3, r3, #32
 8008638:	2b00      	cmp	r3, #0
 800863a:	d104      	bne.n	8008646 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008642:	2b00      	cmp	r3, #0
 8008644:	d007      	beq.n	8008656 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800864a:	2b00      	cmp	r3, #0
 800864c:	d003      	beq.n	8008656 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800865c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008668:	2b40      	cmp	r3, #64	; 0x40
 800866a:	d004      	beq.n	8008676 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008672:	2b00      	cmp	r3, #0
 8008674:	d031      	beq.n	80086da <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 fdcf 	bl	800921a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	689b      	ldr	r3, [r3, #8]
 8008682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008686:	2b40      	cmp	r3, #64	; 0x40
 8008688:	d123      	bne.n	80086d2 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	689a      	ldr	r2, [r3, #8]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008698:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d013      	beq.n	80086ca <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086a6:	4a14      	ldr	r2, [pc, #80]	; (80086f8 <HAL_UART_IRQHandler+0x244>)
 80086a8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086ae:	4618      	mov	r0, r3
 80086b0:	f7fc f8ac 	bl	800480c <HAL_DMA_Abort_IT>
 80086b4:	4603      	mov	r3, r0
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d017      	beq.n	80086ea <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086c0:	687a      	ldr	r2, [r7, #4]
 80086c2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80086c4:	4610      	mov	r0, r2
 80086c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086c8:	e00f      	b.n	80086ea <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 f93a 	bl	8008944 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086d0:	e00b      	b.n	80086ea <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 f936 	bl	8008944 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086d8:	e007      	b.n	80086ea <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f000 f932 	bl	8008944 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2200      	movs	r2, #0
 80086e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80086e8:	e10d      	b.n	8008906 <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086ea:	bf00      	nop
    return;
 80086ec:	e10b      	b.n	8008906 <HAL_UART_IRQHandler+0x452>
 80086ee:	bf00      	nop
 80086f0:	10000001 	.word	0x10000001
 80086f4:	04000120 	.word	0x04000120
 80086f8:	0800936f 	.word	0x0800936f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008700:	2b01      	cmp	r3, #1
 8008702:	f040 80ab 	bne.w	800885c <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008706:	69fb      	ldr	r3, [r7, #28]
 8008708:	f003 0310 	and.w	r3, r3, #16
 800870c:	2b00      	cmp	r3, #0
 800870e:	f000 80a5 	beq.w	800885c <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008712:	69bb      	ldr	r3, [r7, #24]
 8008714:	f003 0310 	and.w	r3, r3, #16
 8008718:	2b00      	cmp	r3, #0
 800871a:	f000 809f 	beq.w	800885c <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	2210      	movs	r2, #16
 8008724:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008730:	2b40      	cmp	r3, #64	; 0x40
 8008732:	d155      	bne.n	80087e0 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	685b      	ldr	r3, [r3, #4]
 800873c:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800873e:	893b      	ldrh	r3, [r7, #8]
 8008740:	2b00      	cmp	r3, #0
 8008742:	f000 80e2 	beq.w	800890a <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800874c:	893a      	ldrh	r2, [r7, #8]
 800874e:	429a      	cmp	r2, r3
 8008750:	f080 80db 	bcs.w	800890a <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	893a      	ldrh	r2, [r7, #8]
 8008758:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f003 0320 	and.w	r3, r3, #32
 8008768:	2b00      	cmp	r3, #0
 800876a:	d12b      	bne.n	80087c4 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800877a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	689a      	ldr	r2, [r3, #8]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f022 0201 	bic.w	r2, r2, #1
 800878a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	689a      	ldr	r2, [r3, #8]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800879a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2220      	movs	r2, #32
 80087a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2200      	movs	r2, #0
 80087a8:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	681a      	ldr	r2, [r3, #0]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f022 0210 	bic.w	r2, r2, #16
 80087b8:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087be:	4618      	mov	r0, r3
 80087c0:	f7fb ffcb 	bl	800475a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	1ad3      	subs	r3, r2, r3
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	4619      	mov	r1, r3
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 f8bd 	bl	8008958 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80087de:	e094      	b.n	800890a <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	1ad3      	subs	r3, r2, r3
 80087f0:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	f000 8087 	beq.w	800890e <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 8008800:	897b      	ldrh	r3, [r7, #10]
 8008802:	2b00      	cmp	r3, #0
 8008804:	f000 8083 	beq.w	800890e <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	681a      	ldr	r2, [r3, #0]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008816:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	689b      	ldr	r3, [r3, #8]
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	6812      	ldr	r2, [r2, #0]
 8008822:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008826:	f023 0301 	bic.w	r3, r3, #1
 800882a:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2220      	movs	r2, #32
 8008830:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2200      	movs	r2, #0
 8008838:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2200      	movs	r2, #0
 800883e:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	681a      	ldr	r2, [r3, #0]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f022 0210 	bic.w	r2, r2, #16
 800884e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008850:	897b      	ldrh	r3, [r7, #10]
 8008852:	4619      	mov	r1, r3
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f000 f87f 	bl	8008958 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800885a:	e058      	b.n	800890e <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800885c:	69fb      	ldr	r3, [r7, #28]
 800885e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008862:	2b00      	cmp	r3, #0
 8008864:	d00d      	beq.n	8008882 <HAL_UART_IRQHandler+0x3ce>
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800886c:	2b00      	cmp	r3, #0
 800886e:	d008      	beq.n	8008882 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008878:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 fda7 	bl	80093ce <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008880:	e048      	b.n	8008914 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008882:	69fb      	ldr	r3, [r7, #28]
 8008884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008888:	2b00      	cmp	r3, #0
 800888a:	d012      	beq.n	80088b2 <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800888c:	69bb      	ldr	r3, [r7, #24]
 800888e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008892:	2b00      	cmp	r3, #0
 8008894:	d104      	bne.n	80088a0 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800889c:	2b00      	cmp	r3, #0
 800889e:	d008      	beq.n	80088b2 <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d034      	beq.n	8008912 <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	4798      	blx	r3
    }
    return;
 80088b0:	e02f      	b.n	8008912 <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80088b2:	69fb      	ldr	r3, [r7, #28]
 80088b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d008      	beq.n	80088ce <HAL_UART_IRQHandler+0x41a>
 80088bc:	69bb      	ldr	r3, [r7, #24]
 80088be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d003      	beq.n	80088ce <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 fd67 	bl	800939a <UART_EndTransmit_IT>
    return;
 80088cc:	e022      	b.n	8008914 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80088ce:	69fb      	ldr	r3, [r7, #28]
 80088d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d008      	beq.n	80088ea <HAL_UART_IRQHandler+0x436>
 80088d8:	69bb      	ldr	r3, [r7, #24]
 80088da:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d003      	beq.n	80088ea <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 fd87 	bl	80093f6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80088e8:	e014      	b.n	8008914 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80088ea:	69fb      	ldr	r3, [r7, #28]
 80088ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d00f      	beq.n	8008914 <HAL_UART_IRQHandler+0x460>
 80088f4:	69bb      	ldr	r3, [r7, #24]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	da0c      	bge.n	8008914 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 fd71 	bl	80093e2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008900:	e008      	b.n	8008914 <HAL_UART_IRQHandler+0x460>
      return;
 8008902:	bf00      	nop
 8008904:	e006      	b.n	8008914 <HAL_UART_IRQHandler+0x460>
    return;
 8008906:	bf00      	nop
 8008908:	e004      	b.n	8008914 <HAL_UART_IRQHandler+0x460>
      return;
 800890a:	bf00      	nop
 800890c:	e002      	b.n	8008914 <HAL_UART_IRQHandler+0x460>
      return;
 800890e:	bf00      	nop
 8008910:	e000      	b.n	8008914 <HAL_UART_IRQHandler+0x460>
    return;
 8008912:	bf00      	nop
  }
}
 8008914:	3720      	adds	r7, #32
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
 800891a:	bf00      	nop

0800891c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800891c:	b480      	push	{r7}
 800891e:	b083      	sub	sp, #12
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008924:	bf00      	nop
 8008926:	370c      	adds	r7, #12
 8008928:	46bd      	mov	sp, r7
 800892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892e:	4770      	bx	lr

08008930 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008930:	b480      	push	{r7}
 8008932:	b083      	sub	sp, #12
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008938:	bf00      	nop
 800893a:	370c      	adds	r7, #12
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr

08008944 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008944:	b480      	push	{r7}
 8008946:	b083      	sub	sp, #12
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800894c:	bf00      	nop
 800894e:	370c      	adds	r7, #12
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr

08008958 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008958:	b480      	push	{r7}
 800895a:	b083      	sub	sp, #12
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	460b      	mov	r3, r1
 8008962:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008964:	bf00      	nop
 8008966:	370c      	adds	r7, #12
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008970:	b5b0      	push	{r4, r5, r7, lr}
 8008972:	b088      	sub	sp, #32
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008978:	2300      	movs	r3, #0
 800897a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	689a      	ldr	r2, [r3, #8]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	691b      	ldr	r3, [r3, #16]
 8008984:	431a      	orrs	r2, r3
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	695b      	ldr	r3, [r3, #20]
 800898a:	431a      	orrs	r2, r3
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	69db      	ldr	r3, [r3, #28]
 8008990:	4313      	orrs	r3, r2
 8008992:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	681a      	ldr	r2, [r3, #0]
 800899a:	4bb1      	ldr	r3, [pc, #708]	; (8008c60 <UART_SetConfig+0x2f0>)
 800899c:	4013      	ands	r3, r2
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	6812      	ldr	r2, [r2, #0]
 80089a2:	69f9      	ldr	r1, [r7, #28]
 80089a4:	430b      	orrs	r3, r1
 80089a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	68da      	ldr	r2, [r3, #12]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	430a      	orrs	r2, r1
 80089bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	699b      	ldr	r3, [r3, #24]
 80089c2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4aa6      	ldr	r2, [pc, #664]	; (8008c64 <UART_SetConfig+0x2f4>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d004      	beq.n	80089d8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6a1b      	ldr	r3, [r3, #32]
 80089d2:	69fa      	ldr	r2, [r7, #28]
 80089d4:	4313      	orrs	r3, r2
 80089d6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	689b      	ldr	r3, [r3, #8]
 80089de:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80089e2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	6812      	ldr	r2, [r2, #0]
 80089ea:	69f9      	ldr	r1, [r7, #28]
 80089ec:	430b      	orrs	r3, r1
 80089ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f6:	f023 010f 	bic.w	r1, r3, #15
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	430a      	orrs	r2, r1
 8008a04:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4a97      	ldr	r2, [pc, #604]	; (8008c68 <UART_SetConfig+0x2f8>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d120      	bne.n	8008a52 <UART_SetConfig+0xe2>
 8008a10:	4b96      	ldr	r3, [pc, #600]	; (8008c6c <UART_SetConfig+0x2fc>)
 8008a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a16:	f003 0303 	and.w	r3, r3, #3
 8008a1a:	2b03      	cmp	r3, #3
 8008a1c:	d816      	bhi.n	8008a4c <UART_SetConfig+0xdc>
 8008a1e:	a201      	add	r2, pc, #4	; (adr r2, 8008a24 <UART_SetConfig+0xb4>)
 8008a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a24:	08008a35 	.word	0x08008a35
 8008a28:	08008a41 	.word	0x08008a41
 8008a2c:	08008a3b 	.word	0x08008a3b
 8008a30:	08008a47 	.word	0x08008a47
 8008a34:	2301      	movs	r3, #1
 8008a36:	76fb      	strb	r3, [r7, #27]
 8008a38:	e0e7      	b.n	8008c0a <UART_SetConfig+0x29a>
 8008a3a:	2302      	movs	r3, #2
 8008a3c:	76fb      	strb	r3, [r7, #27]
 8008a3e:	e0e4      	b.n	8008c0a <UART_SetConfig+0x29a>
 8008a40:	2304      	movs	r3, #4
 8008a42:	76fb      	strb	r3, [r7, #27]
 8008a44:	e0e1      	b.n	8008c0a <UART_SetConfig+0x29a>
 8008a46:	2308      	movs	r3, #8
 8008a48:	76fb      	strb	r3, [r7, #27]
 8008a4a:	e0de      	b.n	8008c0a <UART_SetConfig+0x29a>
 8008a4c:	2310      	movs	r3, #16
 8008a4e:	76fb      	strb	r3, [r7, #27]
 8008a50:	e0db      	b.n	8008c0a <UART_SetConfig+0x29a>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4a86      	ldr	r2, [pc, #536]	; (8008c70 <UART_SetConfig+0x300>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d132      	bne.n	8008ac2 <UART_SetConfig+0x152>
 8008a5c:	4b83      	ldr	r3, [pc, #524]	; (8008c6c <UART_SetConfig+0x2fc>)
 8008a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a62:	f003 030c 	and.w	r3, r3, #12
 8008a66:	2b0c      	cmp	r3, #12
 8008a68:	d828      	bhi.n	8008abc <UART_SetConfig+0x14c>
 8008a6a:	a201      	add	r2, pc, #4	; (adr r2, 8008a70 <UART_SetConfig+0x100>)
 8008a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a70:	08008aa5 	.word	0x08008aa5
 8008a74:	08008abd 	.word	0x08008abd
 8008a78:	08008abd 	.word	0x08008abd
 8008a7c:	08008abd 	.word	0x08008abd
 8008a80:	08008ab1 	.word	0x08008ab1
 8008a84:	08008abd 	.word	0x08008abd
 8008a88:	08008abd 	.word	0x08008abd
 8008a8c:	08008abd 	.word	0x08008abd
 8008a90:	08008aab 	.word	0x08008aab
 8008a94:	08008abd 	.word	0x08008abd
 8008a98:	08008abd 	.word	0x08008abd
 8008a9c:	08008abd 	.word	0x08008abd
 8008aa0:	08008ab7 	.word	0x08008ab7
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	76fb      	strb	r3, [r7, #27]
 8008aa8:	e0af      	b.n	8008c0a <UART_SetConfig+0x29a>
 8008aaa:	2302      	movs	r3, #2
 8008aac:	76fb      	strb	r3, [r7, #27]
 8008aae:	e0ac      	b.n	8008c0a <UART_SetConfig+0x29a>
 8008ab0:	2304      	movs	r3, #4
 8008ab2:	76fb      	strb	r3, [r7, #27]
 8008ab4:	e0a9      	b.n	8008c0a <UART_SetConfig+0x29a>
 8008ab6:	2308      	movs	r3, #8
 8008ab8:	76fb      	strb	r3, [r7, #27]
 8008aba:	e0a6      	b.n	8008c0a <UART_SetConfig+0x29a>
 8008abc:	2310      	movs	r3, #16
 8008abe:	76fb      	strb	r3, [r7, #27]
 8008ac0:	e0a3      	b.n	8008c0a <UART_SetConfig+0x29a>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a6b      	ldr	r2, [pc, #428]	; (8008c74 <UART_SetConfig+0x304>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d120      	bne.n	8008b0e <UART_SetConfig+0x19e>
 8008acc:	4b67      	ldr	r3, [pc, #412]	; (8008c6c <UART_SetConfig+0x2fc>)
 8008ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ad2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008ad6:	2b30      	cmp	r3, #48	; 0x30
 8008ad8:	d013      	beq.n	8008b02 <UART_SetConfig+0x192>
 8008ada:	2b30      	cmp	r3, #48	; 0x30
 8008adc:	d814      	bhi.n	8008b08 <UART_SetConfig+0x198>
 8008ade:	2b20      	cmp	r3, #32
 8008ae0:	d009      	beq.n	8008af6 <UART_SetConfig+0x186>
 8008ae2:	2b20      	cmp	r3, #32
 8008ae4:	d810      	bhi.n	8008b08 <UART_SetConfig+0x198>
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d002      	beq.n	8008af0 <UART_SetConfig+0x180>
 8008aea:	2b10      	cmp	r3, #16
 8008aec:	d006      	beq.n	8008afc <UART_SetConfig+0x18c>
 8008aee:	e00b      	b.n	8008b08 <UART_SetConfig+0x198>
 8008af0:	2300      	movs	r3, #0
 8008af2:	76fb      	strb	r3, [r7, #27]
 8008af4:	e089      	b.n	8008c0a <UART_SetConfig+0x29a>
 8008af6:	2302      	movs	r3, #2
 8008af8:	76fb      	strb	r3, [r7, #27]
 8008afa:	e086      	b.n	8008c0a <UART_SetConfig+0x29a>
 8008afc:	2304      	movs	r3, #4
 8008afe:	76fb      	strb	r3, [r7, #27]
 8008b00:	e083      	b.n	8008c0a <UART_SetConfig+0x29a>
 8008b02:	2308      	movs	r3, #8
 8008b04:	76fb      	strb	r3, [r7, #27]
 8008b06:	e080      	b.n	8008c0a <UART_SetConfig+0x29a>
 8008b08:	2310      	movs	r3, #16
 8008b0a:	76fb      	strb	r3, [r7, #27]
 8008b0c:	e07d      	b.n	8008c0a <UART_SetConfig+0x29a>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a59      	ldr	r2, [pc, #356]	; (8008c78 <UART_SetConfig+0x308>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d120      	bne.n	8008b5a <UART_SetConfig+0x1ea>
 8008b18:	4b54      	ldr	r3, [pc, #336]	; (8008c6c <UART_SetConfig+0x2fc>)
 8008b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b1e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008b22:	2bc0      	cmp	r3, #192	; 0xc0
 8008b24:	d013      	beq.n	8008b4e <UART_SetConfig+0x1de>
 8008b26:	2bc0      	cmp	r3, #192	; 0xc0
 8008b28:	d814      	bhi.n	8008b54 <UART_SetConfig+0x1e4>
 8008b2a:	2b80      	cmp	r3, #128	; 0x80
 8008b2c:	d009      	beq.n	8008b42 <UART_SetConfig+0x1d2>
 8008b2e:	2b80      	cmp	r3, #128	; 0x80
 8008b30:	d810      	bhi.n	8008b54 <UART_SetConfig+0x1e4>
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d002      	beq.n	8008b3c <UART_SetConfig+0x1cc>
 8008b36:	2b40      	cmp	r3, #64	; 0x40
 8008b38:	d006      	beq.n	8008b48 <UART_SetConfig+0x1d8>
 8008b3a:	e00b      	b.n	8008b54 <UART_SetConfig+0x1e4>
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	76fb      	strb	r3, [r7, #27]
 8008b40:	e063      	b.n	8008c0a <UART_SetConfig+0x29a>
 8008b42:	2302      	movs	r3, #2
 8008b44:	76fb      	strb	r3, [r7, #27]
 8008b46:	e060      	b.n	8008c0a <UART_SetConfig+0x29a>
 8008b48:	2304      	movs	r3, #4
 8008b4a:	76fb      	strb	r3, [r7, #27]
 8008b4c:	e05d      	b.n	8008c0a <UART_SetConfig+0x29a>
 8008b4e:	2308      	movs	r3, #8
 8008b50:	76fb      	strb	r3, [r7, #27]
 8008b52:	e05a      	b.n	8008c0a <UART_SetConfig+0x29a>
 8008b54:	2310      	movs	r3, #16
 8008b56:	76fb      	strb	r3, [r7, #27]
 8008b58:	e057      	b.n	8008c0a <UART_SetConfig+0x29a>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	4a47      	ldr	r2, [pc, #284]	; (8008c7c <UART_SetConfig+0x30c>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d125      	bne.n	8008bb0 <UART_SetConfig+0x240>
 8008b64:	4b41      	ldr	r3, [pc, #260]	; (8008c6c <UART_SetConfig+0x2fc>)
 8008b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b72:	d017      	beq.n	8008ba4 <UART_SetConfig+0x234>
 8008b74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b78:	d817      	bhi.n	8008baa <UART_SetConfig+0x23a>
 8008b7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b7e:	d00b      	beq.n	8008b98 <UART_SetConfig+0x228>
 8008b80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b84:	d811      	bhi.n	8008baa <UART_SetConfig+0x23a>
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d003      	beq.n	8008b92 <UART_SetConfig+0x222>
 8008b8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b8e:	d006      	beq.n	8008b9e <UART_SetConfig+0x22e>
 8008b90:	e00b      	b.n	8008baa <UART_SetConfig+0x23a>
 8008b92:	2300      	movs	r3, #0
 8008b94:	76fb      	strb	r3, [r7, #27]
 8008b96:	e038      	b.n	8008c0a <UART_SetConfig+0x29a>
 8008b98:	2302      	movs	r3, #2
 8008b9a:	76fb      	strb	r3, [r7, #27]
 8008b9c:	e035      	b.n	8008c0a <UART_SetConfig+0x29a>
 8008b9e:	2304      	movs	r3, #4
 8008ba0:	76fb      	strb	r3, [r7, #27]
 8008ba2:	e032      	b.n	8008c0a <UART_SetConfig+0x29a>
 8008ba4:	2308      	movs	r3, #8
 8008ba6:	76fb      	strb	r3, [r7, #27]
 8008ba8:	e02f      	b.n	8008c0a <UART_SetConfig+0x29a>
 8008baa:	2310      	movs	r3, #16
 8008bac:	76fb      	strb	r3, [r7, #27]
 8008bae:	e02c      	b.n	8008c0a <UART_SetConfig+0x29a>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a2b      	ldr	r2, [pc, #172]	; (8008c64 <UART_SetConfig+0x2f4>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d125      	bne.n	8008c06 <UART_SetConfig+0x296>
 8008bba:	4b2c      	ldr	r3, [pc, #176]	; (8008c6c <UART_SetConfig+0x2fc>)
 8008bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bc0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008bc4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008bc8:	d017      	beq.n	8008bfa <UART_SetConfig+0x28a>
 8008bca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008bce:	d817      	bhi.n	8008c00 <UART_SetConfig+0x290>
 8008bd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bd4:	d00b      	beq.n	8008bee <UART_SetConfig+0x27e>
 8008bd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bda:	d811      	bhi.n	8008c00 <UART_SetConfig+0x290>
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d003      	beq.n	8008be8 <UART_SetConfig+0x278>
 8008be0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008be4:	d006      	beq.n	8008bf4 <UART_SetConfig+0x284>
 8008be6:	e00b      	b.n	8008c00 <UART_SetConfig+0x290>
 8008be8:	2300      	movs	r3, #0
 8008bea:	76fb      	strb	r3, [r7, #27]
 8008bec:	e00d      	b.n	8008c0a <UART_SetConfig+0x29a>
 8008bee:	2302      	movs	r3, #2
 8008bf0:	76fb      	strb	r3, [r7, #27]
 8008bf2:	e00a      	b.n	8008c0a <UART_SetConfig+0x29a>
 8008bf4:	2304      	movs	r3, #4
 8008bf6:	76fb      	strb	r3, [r7, #27]
 8008bf8:	e007      	b.n	8008c0a <UART_SetConfig+0x29a>
 8008bfa:	2308      	movs	r3, #8
 8008bfc:	76fb      	strb	r3, [r7, #27]
 8008bfe:	e004      	b.n	8008c0a <UART_SetConfig+0x29a>
 8008c00:	2310      	movs	r3, #16
 8008c02:	76fb      	strb	r3, [r7, #27]
 8008c04:	e001      	b.n	8008c0a <UART_SetConfig+0x29a>
 8008c06:	2310      	movs	r3, #16
 8008c08:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4a15      	ldr	r2, [pc, #84]	; (8008c64 <UART_SetConfig+0x2f4>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	f040 809f 	bne.w	8008d54 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008c16:	7efb      	ldrb	r3, [r7, #27]
 8008c18:	2b08      	cmp	r3, #8
 8008c1a:	d837      	bhi.n	8008c8c <UART_SetConfig+0x31c>
 8008c1c:	a201      	add	r2, pc, #4	; (adr r2, 8008c24 <UART_SetConfig+0x2b4>)
 8008c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c22:	bf00      	nop
 8008c24:	08008c49 	.word	0x08008c49
 8008c28:	08008c8d 	.word	0x08008c8d
 8008c2c:	08008c51 	.word	0x08008c51
 8008c30:	08008c8d 	.word	0x08008c8d
 8008c34:	08008c57 	.word	0x08008c57
 8008c38:	08008c8d 	.word	0x08008c8d
 8008c3c:	08008c8d 	.word	0x08008c8d
 8008c40:	08008c8d 	.word	0x08008c8d
 8008c44:	08008c85 	.word	0x08008c85
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c48:	f7fe fafc 	bl	8007244 <HAL_RCC_GetPCLK1Freq>
 8008c4c:	6178      	str	r0, [r7, #20]
        break;
 8008c4e:	e022      	b.n	8008c96 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c50:	4b0b      	ldr	r3, [pc, #44]	; (8008c80 <UART_SetConfig+0x310>)
 8008c52:	617b      	str	r3, [r7, #20]
        break;
 8008c54:	e01f      	b.n	8008c96 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c56:	f7fe fa87 	bl	8007168 <HAL_RCC_GetSysClockFreq>
 8008c5a:	6178      	str	r0, [r7, #20]
        break;
 8008c5c:	e01b      	b.n	8008c96 <UART_SetConfig+0x326>
 8008c5e:	bf00      	nop
 8008c60:	cfff69f3 	.word	0xcfff69f3
 8008c64:	40008000 	.word	0x40008000
 8008c68:	40013800 	.word	0x40013800
 8008c6c:	40021000 	.word	0x40021000
 8008c70:	40004400 	.word	0x40004400
 8008c74:	40004800 	.word	0x40004800
 8008c78:	40004c00 	.word	0x40004c00
 8008c7c:	40005000 	.word	0x40005000
 8008c80:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c88:	617b      	str	r3, [r7, #20]
        break;
 8008c8a:	e004      	b.n	8008c96 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008c90:	2301      	movs	r3, #1
 8008c92:	76bb      	strb	r3, [r7, #26]
        break;
 8008c94:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	f000 811b 	beq.w	8008ed4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca2:	4a96      	ldr	r2, [pc, #600]	; (8008efc <UART_SetConfig+0x58c>)
 8008ca4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ca8:	461a      	mov	r2, r3
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	fbb3 f3f2 	udiv	r3, r3, r2
 8008cb0:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	685a      	ldr	r2, [r3, #4]
 8008cb6:	4613      	mov	r3, r2
 8008cb8:	005b      	lsls	r3, r3, #1
 8008cba:	4413      	add	r3, r2
 8008cbc:	68ba      	ldr	r2, [r7, #8]
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d305      	bcc.n	8008cce <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008cc8:	68ba      	ldr	r2, [r7, #8]
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d902      	bls.n	8008cd4 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 8008cce:	2301      	movs	r3, #1
 8008cd0:	76bb      	strb	r3, [r7, #26]
 8008cd2:	e0ff      	b.n	8008ed4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f04f 0100 	mov.w	r1, #0
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce0:	4a86      	ldr	r2, [pc, #536]	; (8008efc <UART_SetConfig+0x58c>)
 8008ce2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ce6:	b29a      	uxth	r2, r3
 8008ce8:	f04f 0300 	mov.w	r3, #0
 8008cec:	f7f7 ffd4 	bl	8000c98 <__aeabi_uldivmod>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	460b      	mov	r3, r1
 8008cf4:	4610      	mov	r0, r2
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	f04f 0200 	mov.w	r2, #0
 8008cfc:	f04f 0300 	mov.w	r3, #0
 8008d00:	020b      	lsls	r3, r1, #8
 8008d02:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008d06:	0202      	lsls	r2, r0, #8
 8008d08:	6879      	ldr	r1, [r7, #4]
 8008d0a:	6849      	ldr	r1, [r1, #4]
 8008d0c:	0849      	lsrs	r1, r1, #1
 8008d0e:	4608      	mov	r0, r1
 8008d10:	f04f 0100 	mov.w	r1, #0
 8008d14:	1814      	adds	r4, r2, r0
 8008d16:	eb43 0501 	adc.w	r5, r3, r1
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	461a      	mov	r2, r3
 8008d20:	f04f 0300 	mov.w	r3, #0
 8008d24:	4620      	mov	r0, r4
 8008d26:	4629      	mov	r1, r5
 8008d28:	f7f7 ffb6 	bl	8000c98 <__aeabi_uldivmod>
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	460b      	mov	r3, r1
 8008d30:	4613      	mov	r3, r2
 8008d32:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d3a:	d308      	bcc.n	8008d4e <UART_SetConfig+0x3de>
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d42:	d204      	bcs.n	8008d4e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	693a      	ldr	r2, [r7, #16]
 8008d4a:	60da      	str	r2, [r3, #12]
 8008d4c:	e0c2      	b.n	8008ed4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	76bb      	strb	r3, [r7, #26]
 8008d52:	e0bf      	b.n	8008ed4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	69db      	ldr	r3, [r3, #28]
 8008d58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d5c:	d165      	bne.n	8008e2a <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 8008d5e:	7efb      	ldrb	r3, [r7, #27]
 8008d60:	2b08      	cmp	r3, #8
 8008d62:	d828      	bhi.n	8008db6 <UART_SetConfig+0x446>
 8008d64:	a201      	add	r2, pc, #4	; (adr r2, 8008d6c <UART_SetConfig+0x3fc>)
 8008d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d6a:	bf00      	nop
 8008d6c:	08008d91 	.word	0x08008d91
 8008d70:	08008d99 	.word	0x08008d99
 8008d74:	08008da1 	.word	0x08008da1
 8008d78:	08008db7 	.word	0x08008db7
 8008d7c:	08008da7 	.word	0x08008da7
 8008d80:	08008db7 	.word	0x08008db7
 8008d84:	08008db7 	.word	0x08008db7
 8008d88:	08008db7 	.word	0x08008db7
 8008d8c:	08008daf 	.word	0x08008daf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d90:	f7fe fa58 	bl	8007244 <HAL_RCC_GetPCLK1Freq>
 8008d94:	6178      	str	r0, [r7, #20]
        break;
 8008d96:	e013      	b.n	8008dc0 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d98:	f7fe fa6a 	bl	8007270 <HAL_RCC_GetPCLK2Freq>
 8008d9c:	6178      	str	r0, [r7, #20]
        break;
 8008d9e:	e00f      	b.n	8008dc0 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008da0:	4b57      	ldr	r3, [pc, #348]	; (8008f00 <UART_SetConfig+0x590>)
 8008da2:	617b      	str	r3, [r7, #20]
        break;
 8008da4:	e00c      	b.n	8008dc0 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008da6:	f7fe f9df 	bl	8007168 <HAL_RCC_GetSysClockFreq>
 8008daa:	6178      	str	r0, [r7, #20]
        break;
 8008dac:	e008      	b.n	8008dc0 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008dae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008db2:	617b      	str	r3, [r7, #20]
        break;
 8008db4:	e004      	b.n	8008dc0 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8008db6:	2300      	movs	r3, #0
 8008db8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	76bb      	strb	r3, [r7, #26]
        break;
 8008dbe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	f000 8086 	beq.w	8008ed4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dcc:	4a4b      	ldr	r2, [pc, #300]	; (8008efc <UART_SetConfig+0x58c>)
 8008dce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	fbb3 f3f2 	udiv	r3, r3, r2
 8008dda:	005a      	lsls	r2, r3, #1
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	085b      	lsrs	r3, r3, #1
 8008de2:	441a      	add	r2, r3
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	685b      	ldr	r3, [r3, #4]
 8008de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dec:	b29b      	uxth	r3, r3
 8008dee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	2b0f      	cmp	r3, #15
 8008df4:	d916      	bls.n	8008e24 <UART_SetConfig+0x4b4>
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dfc:	d212      	bcs.n	8008e24 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	b29b      	uxth	r3, r3
 8008e02:	f023 030f 	bic.w	r3, r3, #15
 8008e06:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	085b      	lsrs	r3, r3, #1
 8008e0c:	b29b      	uxth	r3, r3
 8008e0e:	f003 0307 	and.w	r3, r3, #7
 8008e12:	b29a      	uxth	r2, r3
 8008e14:	89fb      	ldrh	r3, [r7, #14]
 8008e16:	4313      	orrs	r3, r2
 8008e18:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	89fa      	ldrh	r2, [r7, #14]
 8008e20:	60da      	str	r2, [r3, #12]
 8008e22:	e057      	b.n	8008ed4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8008e24:	2301      	movs	r3, #1
 8008e26:	76bb      	strb	r3, [r7, #26]
 8008e28:	e054      	b.n	8008ed4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008e2a:	7efb      	ldrb	r3, [r7, #27]
 8008e2c:	2b08      	cmp	r3, #8
 8008e2e:	d828      	bhi.n	8008e82 <UART_SetConfig+0x512>
 8008e30:	a201      	add	r2, pc, #4	; (adr r2, 8008e38 <UART_SetConfig+0x4c8>)
 8008e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e36:	bf00      	nop
 8008e38:	08008e5d 	.word	0x08008e5d
 8008e3c:	08008e65 	.word	0x08008e65
 8008e40:	08008e6d 	.word	0x08008e6d
 8008e44:	08008e83 	.word	0x08008e83
 8008e48:	08008e73 	.word	0x08008e73
 8008e4c:	08008e83 	.word	0x08008e83
 8008e50:	08008e83 	.word	0x08008e83
 8008e54:	08008e83 	.word	0x08008e83
 8008e58:	08008e7b 	.word	0x08008e7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e5c:	f7fe f9f2 	bl	8007244 <HAL_RCC_GetPCLK1Freq>
 8008e60:	6178      	str	r0, [r7, #20]
        break;
 8008e62:	e013      	b.n	8008e8c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e64:	f7fe fa04 	bl	8007270 <HAL_RCC_GetPCLK2Freq>
 8008e68:	6178      	str	r0, [r7, #20]
        break;
 8008e6a:	e00f      	b.n	8008e8c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e6c:	4b24      	ldr	r3, [pc, #144]	; (8008f00 <UART_SetConfig+0x590>)
 8008e6e:	617b      	str	r3, [r7, #20]
        break;
 8008e70:	e00c      	b.n	8008e8c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e72:	f7fe f979 	bl	8007168 <HAL_RCC_GetSysClockFreq>
 8008e76:	6178      	str	r0, [r7, #20]
        break;
 8008e78:	e008      	b.n	8008e8c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e7e:	617b      	str	r3, [r7, #20]
        break;
 8008e80:	e004      	b.n	8008e8c <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 8008e82:	2300      	movs	r3, #0
 8008e84:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008e86:	2301      	movs	r3, #1
 8008e88:	76bb      	strb	r3, [r7, #26]
        break;
 8008e8a:	bf00      	nop
    }

    if (pclk != 0U)
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d020      	beq.n	8008ed4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e96:	4a19      	ldr	r2, [pc, #100]	; (8008efc <UART_SetConfig+0x58c>)
 8008e98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	fbb3 f2f2 	udiv	r2, r3, r2
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	085b      	lsrs	r3, r3, #1
 8008eaa:	441a      	add	r2, r3
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	2b0f      	cmp	r3, #15
 8008ebc:	d908      	bls.n	8008ed0 <UART_SetConfig+0x560>
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ec4:	d204      	bcs.n	8008ed0 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	693a      	ldr	r2, [r7, #16]
 8008ecc:	60da      	str	r2, [r3, #12]
 8008ece:	e001      	b.n	8008ed4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2201      	movs	r2, #1
 8008ee0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2200      	movs	r2, #0
 8008eee:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008ef0:	7ebb      	ldrb	r3, [r7, #26]
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3720      	adds	r7, #32
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bdb0      	pop	{r4, r5, r7, pc}
 8008efa:	bf00      	nop
 8008efc:	0800c884 	.word	0x0800c884
 8008f00:	00f42400 	.word	0x00f42400

08008f04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b083      	sub	sp, #12
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f10:	f003 0301 	and.w	r3, r3, #1
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d00a      	beq.n	8008f2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	430a      	orrs	r2, r1
 8008f2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f32:	f003 0302 	and.w	r3, r3, #2
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d00a      	beq.n	8008f50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	430a      	orrs	r2, r1
 8008f4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f54:	f003 0304 	and.w	r3, r3, #4
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d00a      	beq.n	8008f72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	430a      	orrs	r2, r1
 8008f70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f76:	f003 0308 	and.w	r3, r3, #8
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d00a      	beq.n	8008f94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	430a      	orrs	r2, r1
 8008f92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f98:	f003 0310 	and.w	r3, r3, #16
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d00a      	beq.n	8008fb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	689b      	ldr	r3, [r3, #8]
 8008fa6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	430a      	orrs	r2, r1
 8008fb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fba:	f003 0320 	and.w	r3, r3, #32
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d00a      	beq.n	8008fd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	689b      	ldr	r3, [r3, #8]
 8008fc8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	430a      	orrs	r2, r1
 8008fd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d01a      	beq.n	800901a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	430a      	orrs	r2, r1
 8008ff8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ffe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009002:	d10a      	bne.n	800901a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	430a      	orrs	r2, r1
 8009018:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800901e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009022:	2b00      	cmp	r3, #0
 8009024:	d00a      	beq.n	800903c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	430a      	orrs	r2, r1
 800903a:	605a      	str	r2, [r3, #4]
  }
}
 800903c:	bf00      	nop
 800903e:	370c      	adds	r7, #12
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr

08009048 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b086      	sub	sp, #24
 800904c:	af02      	add	r7, sp, #8
 800904e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2200      	movs	r2, #0
 8009054:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009058:	f7f9 fcda 	bl	8002a10 <HAL_GetTick>
 800905c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f003 0308 	and.w	r3, r3, #8
 8009068:	2b08      	cmp	r3, #8
 800906a:	d10e      	bne.n	800908a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800906c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009070:	9300      	str	r3, [sp, #0]
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	2200      	movs	r2, #0
 8009076:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 f82f 	bl	80090de <UART_WaitOnFlagUntilTimeout>
 8009080:	4603      	mov	r3, r0
 8009082:	2b00      	cmp	r3, #0
 8009084:	d001      	beq.n	800908a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009086:	2303      	movs	r3, #3
 8009088:	e025      	b.n	80090d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f003 0304 	and.w	r3, r3, #4
 8009094:	2b04      	cmp	r3, #4
 8009096:	d10e      	bne.n	80090b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009098:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800909c:	9300      	str	r3, [sp, #0]
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2200      	movs	r2, #0
 80090a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 f819 	bl	80090de <UART_WaitOnFlagUntilTimeout>
 80090ac:	4603      	mov	r3, r0
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d001      	beq.n	80090b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090b2:	2303      	movs	r3, #3
 80090b4:	e00f      	b.n	80090d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2220      	movs	r2, #32
 80090ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2220      	movs	r2, #32
 80090c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2200      	movs	r2, #0
 80090ca:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2200      	movs	r2, #0
 80090d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80090d4:	2300      	movs	r3, #0
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3710      	adds	r7, #16
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}

080090de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80090de:	b580      	push	{r7, lr}
 80090e0:	b084      	sub	sp, #16
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	60f8      	str	r0, [r7, #12]
 80090e6:	60b9      	str	r1, [r7, #8]
 80090e8:	603b      	str	r3, [r7, #0]
 80090ea:	4613      	mov	r3, r2
 80090ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090ee:	e062      	b.n	80091b6 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090f0:	69bb      	ldr	r3, [r7, #24]
 80090f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090f6:	d05e      	beq.n	80091b6 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090f8:	f7f9 fc8a 	bl	8002a10 <HAL_GetTick>
 80090fc:	4602      	mov	r2, r0
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	1ad3      	subs	r3, r2, r3
 8009102:	69ba      	ldr	r2, [r7, #24]
 8009104:	429a      	cmp	r2, r3
 8009106:	d302      	bcc.n	800910e <UART_WaitOnFlagUntilTimeout+0x30>
 8009108:	69bb      	ldr	r3, [r7, #24]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d11d      	bne.n	800914a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	681a      	ldr	r2, [r3, #0]
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800911c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	689a      	ldr	r2, [r3, #8]
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f022 0201 	bic.w	r2, r2, #1
 800912c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2220      	movs	r2, #32
 8009132:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2220      	movs	r2, #32
 800913a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2200      	movs	r2, #0
 8009142:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009146:	2303      	movs	r3, #3
 8009148:	e045      	b.n	80091d6 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f003 0304 	and.w	r3, r3, #4
 8009154:	2b00      	cmp	r3, #0
 8009156:	d02e      	beq.n	80091b6 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	69db      	ldr	r3, [r3, #28]
 800915e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009162:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009166:	d126      	bne.n	80091b6 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009170:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	681a      	ldr	r2, [r3, #0]
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009180:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	689a      	ldr	r2, [r3, #8]
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f022 0201 	bic.w	r2, r2, #1
 8009190:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2220      	movs	r2, #32
 8009196:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2220      	movs	r2, #32
 800919e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2220      	movs	r2, #32
 80091a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2200      	movs	r2, #0
 80091ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80091b2:	2303      	movs	r3, #3
 80091b4:	e00f      	b.n	80091d6 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	69da      	ldr	r2, [r3, #28]
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	4013      	ands	r3, r2
 80091c0:	68ba      	ldr	r2, [r7, #8]
 80091c2:	429a      	cmp	r2, r3
 80091c4:	bf0c      	ite	eq
 80091c6:	2301      	moveq	r3, #1
 80091c8:	2300      	movne	r3, #0
 80091ca:	b2db      	uxtb	r3, r3
 80091cc:	461a      	mov	r2, r3
 80091ce:	79fb      	ldrb	r3, [r7, #7]
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d08d      	beq.n	80090f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80091d4:	2300      	movs	r3, #0
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3710      	adds	r7, #16
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}

080091de <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80091de:	b480      	push	{r7}
 80091e0:	b083      	sub	sp, #12
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	681a      	ldr	r2, [r3, #0]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80091f4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	689a      	ldr	r2, [r3, #8]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8009204:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2220      	movs	r2, #32
 800920a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800920e:	bf00      	nop
 8009210:	370c      	adds	r7, #12
 8009212:	46bd      	mov	sp, r7
 8009214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009218:	4770      	bx	lr

0800921a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800921a:	b480      	push	{r7}
 800921c:	b083      	sub	sp, #12
 800921e:	af00      	add	r7, sp, #0
 8009220:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	681a      	ldr	r2, [r3, #0]
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009230:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	689b      	ldr	r3, [r3, #8]
 8009238:	687a      	ldr	r2, [r7, #4]
 800923a:	6812      	ldr	r2, [r2, #0]
 800923c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009240:	f023 0301 	bic.w	r3, r3, #1
 8009244:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800924a:	2b01      	cmp	r3, #1
 800924c:	d107      	bne.n	800925e <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	681a      	ldr	r2, [r3, #0]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f022 0210 	bic.w	r2, r2, #16
 800925c:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2220      	movs	r2, #32
 8009262:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2200      	movs	r2, #0
 800926a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2200      	movs	r2, #0
 8009270:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009272:	bf00      	nop
 8009274:	370c      	adds	r7, #12
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr

0800927e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800927e:	b580      	push	{r7, lr}
 8009280:	b084      	sub	sp, #16
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800928a:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f003 0320 	and.w	r3, r3, #32
 8009296:	2b00      	cmp	r3, #0
 8009298:	d114      	bne.n	80092c4 <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2200      	movs	r2, #0
 800929e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	689a      	ldr	r2, [r3, #8]
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80092b0:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	681a      	ldr	r2, [r3, #0]
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80092c0:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80092c2:	e002      	b.n	80092ca <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 80092c4:	68f8      	ldr	r0, [r7, #12]
 80092c6:	f7ff fb29 	bl	800891c <HAL_UART_TxCpltCallback>
}
 80092ca:	bf00      	nop
 80092cc:	3710      	adds	r7, #16
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}

080092d2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80092d2:	b580      	push	{r7, lr}
 80092d4:	b084      	sub	sp, #16
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092de:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80092e0:	68f8      	ldr	r0, [r7, #12]
 80092e2:	f7ff fb25 	bl	8008930 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092e6:	bf00      	nop
 80092e8:	3710      	adds	r7, #16
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}

080092ee <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80092ee:	b580      	push	{r7, lr}
 80092f0:	b086      	sub	sp, #24
 80092f2:	af00      	add	r7, sp, #0
 80092f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092fa:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009302:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800930a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	689b      	ldr	r3, [r3, #8]
 8009312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009316:	2b80      	cmp	r3, #128	; 0x80
 8009318:	d109      	bne.n	800932e <UART_DMAError+0x40>
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	2b21      	cmp	r3, #33	; 0x21
 800931e:	d106      	bne.n	800932e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	2200      	movs	r2, #0
 8009324:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8009328:	6978      	ldr	r0, [r7, #20]
 800932a:	f7ff ff58 	bl	80091de <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	689b      	ldr	r3, [r3, #8]
 8009334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009338:	2b40      	cmp	r3, #64	; 0x40
 800933a:	d109      	bne.n	8009350 <UART_DMAError+0x62>
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	2b22      	cmp	r3, #34	; 0x22
 8009340:	d106      	bne.n	8009350 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	2200      	movs	r2, #0
 8009346:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800934a:	6978      	ldr	r0, [r7, #20]
 800934c:	f7ff ff65 	bl	800921a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009356:	f043 0210 	orr.w	r2, r3, #16
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009360:	6978      	ldr	r0, [r7, #20]
 8009362:	f7ff faef 	bl	8008944 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009366:	bf00      	nop
 8009368:	3718      	adds	r7, #24
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}

0800936e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800936e:	b580      	push	{r7, lr}
 8009370:	b084      	sub	sp, #16
 8009372:	af00      	add	r7, sp, #0
 8009374:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800937a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2200      	movs	r2, #0
 8009380:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	2200      	movs	r2, #0
 8009388:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800938c:	68f8      	ldr	r0, [r7, #12]
 800938e:	f7ff fad9 	bl	8008944 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009392:	bf00      	nop
 8009394:	3710      	adds	r7, #16
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}

0800939a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800939a:	b580      	push	{r7, lr}
 800939c:	b082      	sub	sp, #8
 800939e:	af00      	add	r7, sp, #0
 80093a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	681a      	ldr	r2, [r3, #0]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093b0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2220      	movs	r2, #32
 80093b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2200      	movs	r2, #0
 80093be:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f7ff faab 	bl	800891c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093c6:	bf00      	nop
 80093c8:	3708      	adds	r7, #8
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}

080093ce <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80093ce:	b480      	push	{r7}
 80093d0:	b083      	sub	sp, #12
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80093d6:	bf00      	nop
 80093d8:	370c      	adds	r7, #12
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr

080093e2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80093e2:	b480      	push	{r7}
 80093e4:	b083      	sub	sp, #12
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80093ea:	bf00      	nop
 80093ec:	370c      	adds	r7, #12
 80093ee:	46bd      	mov	sp, r7
 80093f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f4:	4770      	bx	lr

080093f6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80093f6:	b480      	push	{r7}
 80093f8:	b083      	sub	sp, #12
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80093fe:	bf00      	nop
 8009400:	370c      	adds	r7, #12
 8009402:	46bd      	mov	sp, r7
 8009404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009408:	4770      	bx	lr

0800940a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800940a:	b480      	push	{r7}
 800940c:	b085      	sub	sp, #20
 800940e:	af00      	add	r7, sp, #0
 8009410:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009418:	2b01      	cmp	r3, #1
 800941a:	d101      	bne.n	8009420 <HAL_UARTEx_DisableFifoMode+0x16>
 800941c:	2302      	movs	r3, #2
 800941e:	e027      	b.n	8009470 <HAL_UARTEx_DisableFifoMode+0x66>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2201      	movs	r2, #1
 8009424:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2224      	movs	r2, #36	; 0x24
 800942c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	681a      	ldr	r2, [r3, #0]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f022 0201 	bic.w	r2, r2, #1
 8009446:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800944e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2200      	movs	r2, #0
 8009454:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	68fa      	ldr	r2, [r7, #12]
 800945c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2220      	movs	r2, #32
 8009462:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2200      	movs	r2, #0
 800946a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800946e:	2300      	movs	r3, #0
}
 8009470:	4618      	mov	r0, r3
 8009472:	3714      	adds	r7, #20
 8009474:	46bd      	mov	sp, r7
 8009476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947a:	4770      	bx	lr

0800947c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b084      	sub	sp, #16
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800948c:	2b01      	cmp	r3, #1
 800948e:	d101      	bne.n	8009494 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009490:	2302      	movs	r3, #2
 8009492:	e02d      	b.n	80094f0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2201      	movs	r2, #1
 8009498:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2224      	movs	r2, #36	; 0x24
 80094a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	681a      	ldr	r2, [r3, #0]
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f022 0201 	bic.w	r2, r2, #1
 80094ba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	689b      	ldr	r3, [r3, #8]
 80094c2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	683a      	ldr	r2, [r7, #0]
 80094cc:	430a      	orrs	r2, r1
 80094ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f000 f84f 	bl	8009574 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	68fa      	ldr	r2, [r7, #12]
 80094dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2220      	movs	r2, #32
 80094e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2200      	movs	r2, #0
 80094ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80094ee:	2300      	movs	r3, #0
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3710      	adds	r7, #16
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009508:	2b01      	cmp	r3, #1
 800950a:	d101      	bne.n	8009510 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800950c:	2302      	movs	r3, #2
 800950e:	e02d      	b.n	800956c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2201      	movs	r2, #1
 8009514:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2224      	movs	r2, #36	; 0x24
 800951c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	681a      	ldr	r2, [r3, #0]
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f022 0201 	bic.w	r2, r2, #1
 8009536:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	689b      	ldr	r3, [r3, #8]
 800953e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	683a      	ldr	r2, [r7, #0]
 8009548:	430a      	orrs	r2, r1
 800954a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f000 f811 	bl	8009574 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	68fa      	ldr	r2, [r7, #12]
 8009558:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2220      	movs	r2, #32
 800955e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2200      	movs	r2, #0
 8009566:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800956a:	2300      	movs	r3, #0
}
 800956c:	4618      	mov	r0, r3
 800956e:	3710      	adds	r7, #16
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}

08009574 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009574:	b480      	push	{r7}
 8009576:	b085      	sub	sp, #20
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009580:	2b00      	cmp	r3, #0
 8009582:	d108      	bne.n	8009596 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2201      	movs	r2, #1
 8009588:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2201      	movs	r2, #1
 8009590:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009594:	e031      	b.n	80095fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009596:	2308      	movs	r3, #8
 8009598:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800959a:	2308      	movs	r3, #8
 800959c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	689b      	ldr	r3, [r3, #8]
 80095a4:	0e5b      	lsrs	r3, r3, #25
 80095a6:	b2db      	uxtb	r3, r3
 80095a8:	f003 0307 	and.w	r3, r3, #7
 80095ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	689b      	ldr	r3, [r3, #8]
 80095b4:	0f5b      	lsrs	r3, r3, #29
 80095b6:	b2db      	uxtb	r3, r3
 80095b8:	f003 0307 	and.w	r3, r3, #7
 80095bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80095be:	7bbb      	ldrb	r3, [r7, #14]
 80095c0:	7b3a      	ldrb	r2, [r7, #12]
 80095c2:	4911      	ldr	r1, [pc, #68]	; (8009608 <UARTEx_SetNbDataToProcess+0x94>)
 80095c4:	5c8a      	ldrb	r2, [r1, r2]
 80095c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80095ca:	7b3a      	ldrb	r2, [r7, #12]
 80095cc:	490f      	ldr	r1, [pc, #60]	; (800960c <UARTEx_SetNbDataToProcess+0x98>)
 80095ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80095d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80095d4:	b29a      	uxth	r2, r3
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80095dc:	7bfb      	ldrb	r3, [r7, #15]
 80095de:	7b7a      	ldrb	r2, [r7, #13]
 80095e0:	4909      	ldr	r1, [pc, #36]	; (8009608 <UARTEx_SetNbDataToProcess+0x94>)
 80095e2:	5c8a      	ldrb	r2, [r1, r2]
 80095e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80095e8:	7b7a      	ldrb	r2, [r7, #13]
 80095ea:	4908      	ldr	r1, [pc, #32]	; (800960c <UARTEx_SetNbDataToProcess+0x98>)
 80095ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80095ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80095f2:	b29a      	uxth	r2, r3
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80095fa:	bf00      	nop
 80095fc:	3714      	adds	r7, #20
 80095fe:	46bd      	mov	sp, r7
 8009600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009604:	4770      	bx	lr
 8009606:	bf00      	nop
 8009608:	0800c89c 	.word	0x0800c89c
 800960c:	0800c8a4 	.word	0x0800c8a4

08009610 <__errno>:
 8009610:	4b01      	ldr	r3, [pc, #4]	; (8009618 <__errno+0x8>)
 8009612:	6818      	ldr	r0, [r3, #0]
 8009614:	4770      	bx	lr
 8009616:	bf00      	nop
 8009618:	20000010 	.word	0x20000010

0800961c <__libc_init_array>:
 800961c:	b570      	push	{r4, r5, r6, lr}
 800961e:	4d0d      	ldr	r5, [pc, #52]	; (8009654 <__libc_init_array+0x38>)
 8009620:	4c0d      	ldr	r4, [pc, #52]	; (8009658 <__libc_init_array+0x3c>)
 8009622:	1b64      	subs	r4, r4, r5
 8009624:	10a4      	asrs	r4, r4, #2
 8009626:	2600      	movs	r6, #0
 8009628:	42a6      	cmp	r6, r4
 800962a:	d109      	bne.n	8009640 <__libc_init_array+0x24>
 800962c:	4d0b      	ldr	r5, [pc, #44]	; (800965c <__libc_init_array+0x40>)
 800962e:	4c0c      	ldr	r4, [pc, #48]	; (8009660 <__libc_init_array+0x44>)
 8009630:	f003 f8d2 	bl	800c7d8 <_init>
 8009634:	1b64      	subs	r4, r4, r5
 8009636:	10a4      	asrs	r4, r4, #2
 8009638:	2600      	movs	r6, #0
 800963a:	42a6      	cmp	r6, r4
 800963c:	d105      	bne.n	800964a <__libc_init_array+0x2e>
 800963e:	bd70      	pop	{r4, r5, r6, pc}
 8009640:	f855 3b04 	ldr.w	r3, [r5], #4
 8009644:	4798      	blx	r3
 8009646:	3601      	adds	r6, #1
 8009648:	e7ee      	b.n	8009628 <__libc_init_array+0xc>
 800964a:	f855 3b04 	ldr.w	r3, [r5], #4
 800964e:	4798      	blx	r3
 8009650:	3601      	adds	r6, #1
 8009652:	e7f2      	b.n	800963a <__libc_init_array+0x1e>
 8009654:	0800cc94 	.word	0x0800cc94
 8009658:	0800cc94 	.word	0x0800cc94
 800965c:	0800cc94 	.word	0x0800cc94
 8009660:	0800cc98 	.word	0x0800cc98

08009664 <memset>:
 8009664:	4402      	add	r2, r0
 8009666:	4603      	mov	r3, r0
 8009668:	4293      	cmp	r3, r2
 800966a:	d100      	bne.n	800966e <memset+0xa>
 800966c:	4770      	bx	lr
 800966e:	f803 1b01 	strb.w	r1, [r3], #1
 8009672:	e7f9      	b.n	8009668 <memset+0x4>

08009674 <__cvt>:
 8009674:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009678:	ec55 4b10 	vmov	r4, r5, d0
 800967c:	2d00      	cmp	r5, #0
 800967e:	460e      	mov	r6, r1
 8009680:	4619      	mov	r1, r3
 8009682:	462b      	mov	r3, r5
 8009684:	bfbb      	ittet	lt
 8009686:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800968a:	461d      	movlt	r5, r3
 800968c:	2300      	movge	r3, #0
 800968e:	232d      	movlt	r3, #45	; 0x2d
 8009690:	700b      	strb	r3, [r1, #0]
 8009692:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009694:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009698:	4691      	mov	r9, r2
 800969a:	f023 0820 	bic.w	r8, r3, #32
 800969e:	bfbc      	itt	lt
 80096a0:	4622      	movlt	r2, r4
 80096a2:	4614      	movlt	r4, r2
 80096a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80096a8:	d005      	beq.n	80096b6 <__cvt+0x42>
 80096aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80096ae:	d100      	bne.n	80096b2 <__cvt+0x3e>
 80096b0:	3601      	adds	r6, #1
 80096b2:	2102      	movs	r1, #2
 80096b4:	e000      	b.n	80096b8 <__cvt+0x44>
 80096b6:	2103      	movs	r1, #3
 80096b8:	ab03      	add	r3, sp, #12
 80096ba:	9301      	str	r3, [sp, #4]
 80096bc:	ab02      	add	r3, sp, #8
 80096be:	9300      	str	r3, [sp, #0]
 80096c0:	ec45 4b10 	vmov	d0, r4, r5
 80096c4:	4653      	mov	r3, sl
 80096c6:	4632      	mov	r2, r6
 80096c8:	f000 fcfa 	bl	800a0c0 <_dtoa_r>
 80096cc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80096d0:	4607      	mov	r7, r0
 80096d2:	d102      	bne.n	80096da <__cvt+0x66>
 80096d4:	f019 0f01 	tst.w	r9, #1
 80096d8:	d022      	beq.n	8009720 <__cvt+0xac>
 80096da:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80096de:	eb07 0906 	add.w	r9, r7, r6
 80096e2:	d110      	bne.n	8009706 <__cvt+0x92>
 80096e4:	783b      	ldrb	r3, [r7, #0]
 80096e6:	2b30      	cmp	r3, #48	; 0x30
 80096e8:	d10a      	bne.n	8009700 <__cvt+0x8c>
 80096ea:	2200      	movs	r2, #0
 80096ec:	2300      	movs	r3, #0
 80096ee:	4620      	mov	r0, r4
 80096f0:	4629      	mov	r1, r5
 80096f2:	f7f7 fa11 	bl	8000b18 <__aeabi_dcmpeq>
 80096f6:	b918      	cbnz	r0, 8009700 <__cvt+0x8c>
 80096f8:	f1c6 0601 	rsb	r6, r6, #1
 80096fc:	f8ca 6000 	str.w	r6, [sl]
 8009700:	f8da 3000 	ldr.w	r3, [sl]
 8009704:	4499      	add	r9, r3
 8009706:	2200      	movs	r2, #0
 8009708:	2300      	movs	r3, #0
 800970a:	4620      	mov	r0, r4
 800970c:	4629      	mov	r1, r5
 800970e:	f7f7 fa03 	bl	8000b18 <__aeabi_dcmpeq>
 8009712:	b108      	cbz	r0, 8009718 <__cvt+0xa4>
 8009714:	f8cd 900c 	str.w	r9, [sp, #12]
 8009718:	2230      	movs	r2, #48	; 0x30
 800971a:	9b03      	ldr	r3, [sp, #12]
 800971c:	454b      	cmp	r3, r9
 800971e:	d307      	bcc.n	8009730 <__cvt+0xbc>
 8009720:	9b03      	ldr	r3, [sp, #12]
 8009722:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009724:	1bdb      	subs	r3, r3, r7
 8009726:	4638      	mov	r0, r7
 8009728:	6013      	str	r3, [r2, #0]
 800972a:	b004      	add	sp, #16
 800972c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009730:	1c59      	adds	r1, r3, #1
 8009732:	9103      	str	r1, [sp, #12]
 8009734:	701a      	strb	r2, [r3, #0]
 8009736:	e7f0      	b.n	800971a <__cvt+0xa6>

08009738 <__exponent>:
 8009738:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800973a:	4603      	mov	r3, r0
 800973c:	2900      	cmp	r1, #0
 800973e:	bfb8      	it	lt
 8009740:	4249      	neglt	r1, r1
 8009742:	f803 2b02 	strb.w	r2, [r3], #2
 8009746:	bfb4      	ite	lt
 8009748:	222d      	movlt	r2, #45	; 0x2d
 800974a:	222b      	movge	r2, #43	; 0x2b
 800974c:	2909      	cmp	r1, #9
 800974e:	7042      	strb	r2, [r0, #1]
 8009750:	dd2a      	ble.n	80097a8 <__exponent+0x70>
 8009752:	f10d 0407 	add.w	r4, sp, #7
 8009756:	46a4      	mov	ip, r4
 8009758:	270a      	movs	r7, #10
 800975a:	46a6      	mov	lr, r4
 800975c:	460a      	mov	r2, r1
 800975e:	fb91 f6f7 	sdiv	r6, r1, r7
 8009762:	fb07 1516 	mls	r5, r7, r6, r1
 8009766:	3530      	adds	r5, #48	; 0x30
 8009768:	2a63      	cmp	r2, #99	; 0x63
 800976a:	f104 34ff 	add.w	r4, r4, #4294967295
 800976e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009772:	4631      	mov	r1, r6
 8009774:	dcf1      	bgt.n	800975a <__exponent+0x22>
 8009776:	3130      	adds	r1, #48	; 0x30
 8009778:	f1ae 0502 	sub.w	r5, lr, #2
 800977c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009780:	1c44      	adds	r4, r0, #1
 8009782:	4629      	mov	r1, r5
 8009784:	4561      	cmp	r1, ip
 8009786:	d30a      	bcc.n	800979e <__exponent+0x66>
 8009788:	f10d 0209 	add.w	r2, sp, #9
 800978c:	eba2 020e 	sub.w	r2, r2, lr
 8009790:	4565      	cmp	r5, ip
 8009792:	bf88      	it	hi
 8009794:	2200      	movhi	r2, #0
 8009796:	4413      	add	r3, r2
 8009798:	1a18      	subs	r0, r3, r0
 800979a:	b003      	add	sp, #12
 800979c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800979e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80097a2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80097a6:	e7ed      	b.n	8009784 <__exponent+0x4c>
 80097a8:	2330      	movs	r3, #48	; 0x30
 80097aa:	3130      	adds	r1, #48	; 0x30
 80097ac:	7083      	strb	r3, [r0, #2]
 80097ae:	70c1      	strb	r1, [r0, #3]
 80097b0:	1d03      	adds	r3, r0, #4
 80097b2:	e7f1      	b.n	8009798 <__exponent+0x60>

080097b4 <_printf_float>:
 80097b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097b8:	ed2d 8b02 	vpush	{d8}
 80097bc:	b08d      	sub	sp, #52	; 0x34
 80097be:	460c      	mov	r4, r1
 80097c0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80097c4:	4616      	mov	r6, r2
 80097c6:	461f      	mov	r7, r3
 80097c8:	4605      	mov	r5, r0
 80097ca:	f001 fa65 	bl	800ac98 <_localeconv_r>
 80097ce:	f8d0 a000 	ldr.w	sl, [r0]
 80097d2:	4650      	mov	r0, sl
 80097d4:	f7f6 fd24 	bl	8000220 <strlen>
 80097d8:	2300      	movs	r3, #0
 80097da:	930a      	str	r3, [sp, #40]	; 0x28
 80097dc:	6823      	ldr	r3, [r4, #0]
 80097de:	9305      	str	r3, [sp, #20]
 80097e0:	f8d8 3000 	ldr.w	r3, [r8]
 80097e4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80097e8:	3307      	adds	r3, #7
 80097ea:	f023 0307 	bic.w	r3, r3, #7
 80097ee:	f103 0208 	add.w	r2, r3, #8
 80097f2:	f8c8 2000 	str.w	r2, [r8]
 80097f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097fa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80097fe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009802:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009806:	9307      	str	r3, [sp, #28]
 8009808:	f8cd 8018 	str.w	r8, [sp, #24]
 800980c:	ee08 0a10 	vmov	s16, r0
 8009810:	4b9f      	ldr	r3, [pc, #636]	; (8009a90 <_printf_float+0x2dc>)
 8009812:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009816:	f04f 32ff 	mov.w	r2, #4294967295
 800981a:	f7f7 f9af 	bl	8000b7c <__aeabi_dcmpun>
 800981e:	bb88      	cbnz	r0, 8009884 <_printf_float+0xd0>
 8009820:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009824:	4b9a      	ldr	r3, [pc, #616]	; (8009a90 <_printf_float+0x2dc>)
 8009826:	f04f 32ff 	mov.w	r2, #4294967295
 800982a:	f7f7 f989 	bl	8000b40 <__aeabi_dcmple>
 800982e:	bb48      	cbnz	r0, 8009884 <_printf_float+0xd0>
 8009830:	2200      	movs	r2, #0
 8009832:	2300      	movs	r3, #0
 8009834:	4640      	mov	r0, r8
 8009836:	4649      	mov	r1, r9
 8009838:	f7f7 f978 	bl	8000b2c <__aeabi_dcmplt>
 800983c:	b110      	cbz	r0, 8009844 <_printf_float+0x90>
 800983e:	232d      	movs	r3, #45	; 0x2d
 8009840:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009844:	4b93      	ldr	r3, [pc, #588]	; (8009a94 <_printf_float+0x2e0>)
 8009846:	4894      	ldr	r0, [pc, #592]	; (8009a98 <_printf_float+0x2e4>)
 8009848:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800984c:	bf94      	ite	ls
 800984e:	4698      	movls	r8, r3
 8009850:	4680      	movhi	r8, r0
 8009852:	2303      	movs	r3, #3
 8009854:	6123      	str	r3, [r4, #16]
 8009856:	9b05      	ldr	r3, [sp, #20]
 8009858:	f023 0204 	bic.w	r2, r3, #4
 800985c:	6022      	str	r2, [r4, #0]
 800985e:	f04f 0900 	mov.w	r9, #0
 8009862:	9700      	str	r7, [sp, #0]
 8009864:	4633      	mov	r3, r6
 8009866:	aa0b      	add	r2, sp, #44	; 0x2c
 8009868:	4621      	mov	r1, r4
 800986a:	4628      	mov	r0, r5
 800986c:	f000 f9d8 	bl	8009c20 <_printf_common>
 8009870:	3001      	adds	r0, #1
 8009872:	f040 8090 	bne.w	8009996 <_printf_float+0x1e2>
 8009876:	f04f 30ff 	mov.w	r0, #4294967295
 800987a:	b00d      	add	sp, #52	; 0x34
 800987c:	ecbd 8b02 	vpop	{d8}
 8009880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009884:	4642      	mov	r2, r8
 8009886:	464b      	mov	r3, r9
 8009888:	4640      	mov	r0, r8
 800988a:	4649      	mov	r1, r9
 800988c:	f7f7 f976 	bl	8000b7c <__aeabi_dcmpun>
 8009890:	b140      	cbz	r0, 80098a4 <_printf_float+0xf0>
 8009892:	464b      	mov	r3, r9
 8009894:	2b00      	cmp	r3, #0
 8009896:	bfbc      	itt	lt
 8009898:	232d      	movlt	r3, #45	; 0x2d
 800989a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800989e:	487f      	ldr	r0, [pc, #508]	; (8009a9c <_printf_float+0x2e8>)
 80098a0:	4b7f      	ldr	r3, [pc, #508]	; (8009aa0 <_printf_float+0x2ec>)
 80098a2:	e7d1      	b.n	8009848 <_printf_float+0x94>
 80098a4:	6863      	ldr	r3, [r4, #4]
 80098a6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80098aa:	9206      	str	r2, [sp, #24]
 80098ac:	1c5a      	adds	r2, r3, #1
 80098ae:	d13f      	bne.n	8009930 <_printf_float+0x17c>
 80098b0:	2306      	movs	r3, #6
 80098b2:	6063      	str	r3, [r4, #4]
 80098b4:	9b05      	ldr	r3, [sp, #20]
 80098b6:	6861      	ldr	r1, [r4, #4]
 80098b8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80098bc:	2300      	movs	r3, #0
 80098be:	9303      	str	r3, [sp, #12]
 80098c0:	ab0a      	add	r3, sp, #40	; 0x28
 80098c2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80098c6:	ab09      	add	r3, sp, #36	; 0x24
 80098c8:	ec49 8b10 	vmov	d0, r8, r9
 80098cc:	9300      	str	r3, [sp, #0]
 80098ce:	6022      	str	r2, [r4, #0]
 80098d0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80098d4:	4628      	mov	r0, r5
 80098d6:	f7ff fecd 	bl	8009674 <__cvt>
 80098da:	9b06      	ldr	r3, [sp, #24]
 80098dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80098de:	2b47      	cmp	r3, #71	; 0x47
 80098e0:	4680      	mov	r8, r0
 80098e2:	d108      	bne.n	80098f6 <_printf_float+0x142>
 80098e4:	1cc8      	adds	r0, r1, #3
 80098e6:	db02      	blt.n	80098ee <_printf_float+0x13a>
 80098e8:	6863      	ldr	r3, [r4, #4]
 80098ea:	4299      	cmp	r1, r3
 80098ec:	dd41      	ble.n	8009972 <_printf_float+0x1be>
 80098ee:	f1ab 0b02 	sub.w	fp, fp, #2
 80098f2:	fa5f fb8b 	uxtb.w	fp, fp
 80098f6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80098fa:	d820      	bhi.n	800993e <_printf_float+0x18a>
 80098fc:	3901      	subs	r1, #1
 80098fe:	465a      	mov	r2, fp
 8009900:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009904:	9109      	str	r1, [sp, #36]	; 0x24
 8009906:	f7ff ff17 	bl	8009738 <__exponent>
 800990a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800990c:	1813      	adds	r3, r2, r0
 800990e:	2a01      	cmp	r2, #1
 8009910:	4681      	mov	r9, r0
 8009912:	6123      	str	r3, [r4, #16]
 8009914:	dc02      	bgt.n	800991c <_printf_float+0x168>
 8009916:	6822      	ldr	r2, [r4, #0]
 8009918:	07d2      	lsls	r2, r2, #31
 800991a:	d501      	bpl.n	8009920 <_printf_float+0x16c>
 800991c:	3301      	adds	r3, #1
 800991e:	6123      	str	r3, [r4, #16]
 8009920:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009924:	2b00      	cmp	r3, #0
 8009926:	d09c      	beq.n	8009862 <_printf_float+0xae>
 8009928:	232d      	movs	r3, #45	; 0x2d
 800992a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800992e:	e798      	b.n	8009862 <_printf_float+0xae>
 8009930:	9a06      	ldr	r2, [sp, #24]
 8009932:	2a47      	cmp	r2, #71	; 0x47
 8009934:	d1be      	bne.n	80098b4 <_printf_float+0x100>
 8009936:	2b00      	cmp	r3, #0
 8009938:	d1bc      	bne.n	80098b4 <_printf_float+0x100>
 800993a:	2301      	movs	r3, #1
 800993c:	e7b9      	b.n	80098b2 <_printf_float+0xfe>
 800993e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009942:	d118      	bne.n	8009976 <_printf_float+0x1c2>
 8009944:	2900      	cmp	r1, #0
 8009946:	6863      	ldr	r3, [r4, #4]
 8009948:	dd0b      	ble.n	8009962 <_printf_float+0x1ae>
 800994a:	6121      	str	r1, [r4, #16]
 800994c:	b913      	cbnz	r3, 8009954 <_printf_float+0x1a0>
 800994e:	6822      	ldr	r2, [r4, #0]
 8009950:	07d0      	lsls	r0, r2, #31
 8009952:	d502      	bpl.n	800995a <_printf_float+0x1a6>
 8009954:	3301      	adds	r3, #1
 8009956:	440b      	add	r3, r1
 8009958:	6123      	str	r3, [r4, #16]
 800995a:	65a1      	str	r1, [r4, #88]	; 0x58
 800995c:	f04f 0900 	mov.w	r9, #0
 8009960:	e7de      	b.n	8009920 <_printf_float+0x16c>
 8009962:	b913      	cbnz	r3, 800996a <_printf_float+0x1b6>
 8009964:	6822      	ldr	r2, [r4, #0]
 8009966:	07d2      	lsls	r2, r2, #31
 8009968:	d501      	bpl.n	800996e <_printf_float+0x1ba>
 800996a:	3302      	adds	r3, #2
 800996c:	e7f4      	b.n	8009958 <_printf_float+0x1a4>
 800996e:	2301      	movs	r3, #1
 8009970:	e7f2      	b.n	8009958 <_printf_float+0x1a4>
 8009972:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009978:	4299      	cmp	r1, r3
 800997a:	db05      	blt.n	8009988 <_printf_float+0x1d4>
 800997c:	6823      	ldr	r3, [r4, #0]
 800997e:	6121      	str	r1, [r4, #16]
 8009980:	07d8      	lsls	r0, r3, #31
 8009982:	d5ea      	bpl.n	800995a <_printf_float+0x1a6>
 8009984:	1c4b      	adds	r3, r1, #1
 8009986:	e7e7      	b.n	8009958 <_printf_float+0x1a4>
 8009988:	2900      	cmp	r1, #0
 800998a:	bfd4      	ite	le
 800998c:	f1c1 0202 	rsble	r2, r1, #2
 8009990:	2201      	movgt	r2, #1
 8009992:	4413      	add	r3, r2
 8009994:	e7e0      	b.n	8009958 <_printf_float+0x1a4>
 8009996:	6823      	ldr	r3, [r4, #0]
 8009998:	055a      	lsls	r2, r3, #21
 800999a:	d407      	bmi.n	80099ac <_printf_float+0x1f8>
 800999c:	6923      	ldr	r3, [r4, #16]
 800999e:	4642      	mov	r2, r8
 80099a0:	4631      	mov	r1, r6
 80099a2:	4628      	mov	r0, r5
 80099a4:	47b8      	blx	r7
 80099a6:	3001      	adds	r0, #1
 80099a8:	d12c      	bne.n	8009a04 <_printf_float+0x250>
 80099aa:	e764      	b.n	8009876 <_printf_float+0xc2>
 80099ac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80099b0:	f240 80e0 	bls.w	8009b74 <_printf_float+0x3c0>
 80099b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80099b8:	2200      	movs	r2, #0
 80099ba:	2300      	movs	r3, #0
 80099bc:	f7f7 f8ac 	bl	8000b18 <__aeabi_dcmpeq>
 80099c0:	2800      	cmp	r0, #0
 80099c2:	d034      	beq.n	8009a2e <_printf_float+0x27a>
 80099c4:	4a37      	ldr	r2, [pc, #220]	; (8009aa4 <_printf_float+0x2f0>)
 80099c6:	2301      	movs	r3, #1
 80099c8:	4631      	mov	r1, r6
 80099ca:	4628      	mov	r0, r5
 80099cc:	47b8      	blx	r7
 80099ce:	3001      	adds	r0, #1
 80099d0:	f43f af51 	beq.w	8009876 <_printf_float+0xc2>
 80099d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099d8:	429a      	cmp	r2, r3
 80099da:	db02      	blt.n	80099e2 <_printf_float+0x22e>
 80099dc:	6823      	ldr	r3, [r4, #0]
 80099de:	07d8      	lsls	r0, r3, #31
 80099e0:	d510      	bpl.n	8009a04 <_printf_float+0x250>
 80099e2:	ee18 3a10 	vmov	r3, s16
 80099e6:	4652      	mov	r2, sl
 80099e8:	4631      	mov	r1, r6
 80099ea:	4628      	mov	r0, r5
 80099ec:	47b8      	blx	r7
 80099ee:	3001      	adds	r0, #1
 80099f0:	f43f af41 	beq.w	8009876 <_printf_float+0xc2>
 80099f4:	f04f 0800 	mov.w	r8, #0
 80099f8:	f104 091a 	add.w	r9, r4, #26
 80099fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099fe:	3b01      	subs	r3, #1
 8009a00:	4543      	cmp	r3, r8
 8009a02:	dc09      	bgt.n	8009a18 <_printf_float+0x264>
 8009a04:	6823      	ldr	r3, [r4, #0]
 8009a06:	079b      	lsls	r3, r3, #30
 8009a08:	f100 8105 	bmi.w	8009c16 <_printf_float+0x462>
 8009a0c:	68e0      	ldr	r0, [r4, #12]
 8009a0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a10:	4298      	cmp	r0, r3
 8009a12:	bfb8      	it	lt
 8009a14:	4618      	movlt	r0, r3
 8009a16:	e730      	b.n	800987a <_printf_float+0xc6>
 8009a18:	2301      	movs	r3, #1
 8009a1a:	464a      	mov	r2, r9
 8009a1c:	4631      	mov	r1, r6
 8009a1e:	4628      	mov	r0, r5
 8009a20:	47b8      	blx	r7
 8009a22:	3001      	adds	r0, #1
 8009a24:	f43f af27 	beq.w	8009876 <_printf_float+0xc2>
 8009a28:	f108 0801 	add.w	r8, r8, #1
 8009a2c:	e7e6      	b.n	80099fc <_printf_float+0x248>
 8009a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	dc39      	bgt.n	8009aa8 <_printf_float+0x2f4>
 8009a34:	4a1b      	ldr	r2, [pc, #108]	; (8009aa4 <_printf_float+0x2f0>)
 8009a36:	2301      	movs	r3, #1
 8009a38:	4631      	mov	r1, r6
 8009a3a:	4628      	mov	r0, r5
 8009a3c:	47b8      	blx	r7
 8009a3e:	3001      	adds	r0, #1
 8009a40:	f43f af19 	beq.w	8009876 <_printf_float+0xc2>
 8009a44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a48:	4313      	orrs	r3, r2
 8009a4a:	d102      	bne.n	8009a52 <_printf_float+0x29e>
 8009a4c:	6823      	ldr	r3, [r4, #0]
 8009a4e:	07d9      	lsls	r1, r3, #31
 8009a50:	d5d8      	bpl.n	8009a04 <_printf_float+0x250>
 8009a52:	ee18 3a10 	vmov	r3, s16
 8009a56:	4652      	mov	r2, sl
 8009a58:	4631      	mov	r1, r6
 8009a5a:	4628      	mov	r0, r5
 8009a5c:	47b8      	blx	r7
 8009a5e:	3001      	adds	r0, #1
 8009a60:	f43f af09 	beq.w	8009876 <_printf_float+0xc2>
 8009a64:	f04f 0900 	mov.w	r9, #0
 8009a68:	f104 0a1a 	add.w	sl, r4, #26
 8009a6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a6e:	425b      	negs	r3, r3
 8009a70:	454b      	cmp	r3, r9
 8009a72:	dc01      	bgt.n	8009a78 <_printf_float+0x2c4>
 8009a74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a76:	e792      	b.n	800999e <_printf_float+0x1ea>
 8009a78:	2301      	movs	r3, #1
 8009a7a:	4652      	mov	r2, sl
 8009a7c:	4631      	mov	r1, r6
 8009a7e:	4628      	mov	r0, r5
 8009a80:	47b8      	blx	r7
 8009a82:	3001      	adds	r0, #1
 8009a84:	f43f aef7 	beq.w	8009876 <_printf_float+0xc2>
 8009a88:	f109 0901 	add.w	r9, r9, #1
 8009a8c:	e7ee      	b.n	8009a6c <_printf_float+0x2b8>
 8009a8e:	bf00      	nop
 8009a90:	7fefffff 	.word	0x7fefffff
 8009a94:	0800c8b0 	.word	0x0800c8b0
 8009a98:	0800c8b4 	.word	0x0800c8b4
 8009a9c:	0800c8bc 	.word	0x0800c8bc
 8009aa0:	0800c8b8 	.word	0x0800c8b8
 8009aa4:	0800c8c0 	.word	0x0800c8c0
 8009aa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009aaa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009aac:	429a      	cmp	r2, r3
 8009aae:	bfa8      	it	ge
 8009ab0:	461a      	movge	r2, r3
 8009ab2:	2a00      	cmp	r2, #0
 8009ab4:	4691      	mov	r9, r2
 8009ab6:	dc37      	bgt.n	8009b28 <_printf_float+0x374>
 8009ab8:	f04f 0b00 	mov.w	fp, #0
 8009abc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ac0:	f104 021a 	add.w	r2, r4, #26
 8009ac4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ac6:	9305      	str	r3, [sp, #20]
 8009ac8:	eba3 0309 	sub.w	r3, r3, r9
 8009acc:	455b      	cmp	r3, fp
 8009ace:	dc33      	bgt.n	8009b38 <_printf_float+0x384>
 8009ad0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	db3b      	blt.n	8009b50 <_printf_float+0x39c>
 8009ad8:	6823      	ldr	r3, [r4, #0]
 8009ada:	07da      	lsls	r2, r3, #31
 8009adc:	d438      	bmi.n	8009b50 <_printf_float+0x39c>
 8009ade:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ae0:	9b05      	ldr	r3, [sp, #20]
 8009ae2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ae4:	1ad3      	subs	r3, r2, r3
 8009ae6:	eba2 0901 	sub.w	r9, r2, r1
 8009aea:	4599      	cmp	r9, r3
 8009aec:	bfa8      	it	ge
 8009aee:	4699      	movge	r9, r3
 8009af0:	f1b9 0f00 	cmp.w	r9, #0
 8009af4:	dc35      	bgt.n	8009b62 <_printf_float+0x3ae>
 8009af6:	f04f 0800 	mov.w	r8, #0
 8009afa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009afe:	f104 0a1a 	add.w	sl, r4, #26
 8009b02:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b06:	1a9b      	subs	r3, r3, r2
 8009b08:	eba3 0309 	sub.w	r3, r3, r9
 8009b0c:	4543      	cmp	r3, r8
 8009b0e:	f77f af79 	ble.w	8009a04 <_printf_float+0x250>
 8009b12:	2301      	movs	r3, #1
 8009b14:	4652      	mov	r2, sl
 8009b16:	4631      	mov	r1, r6
 8009b18:	4628      	mov	r0, r5
 8009b1a:	47b8      	blx	r7
 8009b1c:	3001      	adds	r0, #1
 8009b1e:	f43f aeaa 	beq.w	8009876 <_printf_float+0xc2>
 8009b22:	f108 0801 	add.w	r8, r8, #1
 8009b26:	e7ec      	b.n	8009b02 <_printf_float+0x34e>
 8009b28:	4613      	mov	r3, r2
 8009b2a:	4631      	mov	r1, r6
 8009b2c:	4642      	mov	r2, r8
 8009b2e:	4628      	mov	r0, r5
 8009b30:	47b8      	blx	r7
 8009b32:	3001      	adds	r0, #1
 8009b34:	d1c0      	bne.n	8009ab8 <_printf_float+0x304>
 8009b36:	e69e      	b.n	8009876 <_printf_float+0xc2>
 8009b38:	2301      	movs	r3, #1
 8009b3a:	4631      	mov	r1, r6
 8009b3c:	4628      	mov	r0, r5
 8009b3e:	9205      	str	r2, [sp, #20]
 8009b40:	47b8      	blx	r7
 8009b42:	3001      	adds	r0, #1
 8009b44:	f43f ae97 	beq.w	8009876 <_printf_float+0xc2>
 8009b48:	9a05      	ldr	r2, [sp, #20]
 8009b4a:	f10b 0b01 	add.w	fp, fp, #1
 8009b4e:	e7b9      	b.n	8009ac4 <_printf_float+0x310>
 8009b50:	ee18 3a10 	vmov	r3, s16
 8009b54:	4652      	mov	r2, sl
 8009b56:	4631      	mov	r1, r6
 8009b58:	4628      	mov	r0, r5
 8009b5a:	47b8      	blx	r7
 8009b5c:	3001      	adds	r0, #1
 8009b5e:	d1be      	bne.n	8009ade <_printf_float+0x32a>
 8009b60:	e689      	b.n	8009876 <_printf_float+0xc2>
 8009b62:	9a05      	ldr	r2, [sp, #20]
 8009b64:	464b      	mov	r3, r9
 8009b66:	4442      	add	r2, r8
 8009b68:	4631      	mov	r1, r6
 8009b6a:	4628      	mov	r0, r5
 8009b6c:	47b8      	blx	r7
 8009b6e:	3001      	adds	r0, #1
 8009b70:	d1c1      	bne.n	8009af6 <_printf_float+0x342>
 8009b72:	e680      	b.n	8009876 <_printf_float+0xc2>
 8009b74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b76:	2a01      	cmp	r2, #1
 8009b78:	dc01      	bgt.n	8009b7e <_printf_float+0x3ca>
 8009b7a:	07db      	lsls	r3, r3, #31
 8009b7c:	d538      	bpl.n	8009bf0 <_printf_float+0x43c>
 8009b7e:	2301      	movs	r3, #1
 8009b80:	4642      	mov	r2, r8
 8009b82:	4631      	mov	r1, r6
 8009b84:	4628      	mov	r0, r5
 8009b86:	47b8      	blx	r7
 8009b88:	3001      	adds	r0, #1
 8009b8a:	f43f ae74 	beq.w	8009876 <_printf_float+0xc2>
 8009b8e:	ee18 3a10 	vmov	r3, s16
 8009b92:	4652      	mov	r2, sl
 8009b94:	4631      	mov	r1, r6
 8009b96:	4628      	mov	r0, r5
 8009b98:	47b8      	blx	r7
 8009b9a:	3001      	adds	r0, #1
 8009b9c:	f43f ae6b 	beq.w	8009876 <_printf_float+0xc2>
 8009ba0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	f7f6 ffb6 	bl	8000b18 <__aeabi_dcmpeq>
 8009bac:	b9d8      	cbnz	r0, 8009be6 <_printf_float+0x432>
 8009bae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bb0:	f108 0201 	add.w	r2, r8, #1
 8009bb4:	3b01      	subs	r3, #1
 8009bb6:	4631      	mov	r1, r6
 8009bb8:	4628      	mov	r0, r5
 8009bba:	47b8      	blx	r7
 8009bbc:	3001      	adds	r0, #1
 8009bbe:	d10e      	bne.n	8009bde <_printf_float+0x42a>
 8009bc0:	e659      	b.n	8009876 <_printf_float+0xc2>
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	4652      	mov	r2, sl
 8009bc6:	4631      	mov	r1, r6
 8009bc8:	4628      	mov	r0, r5
 8009bca:	47b8      	blx	r7
 8009bcc:	3001      	adds	r0, #1
 8009bce:	f43f ae52 	beq.w	8009876 <_printf_float+0xc2>
 8009bd2:	f108 0801 	add.w	r8, r8, #1
 8009bd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bd8:	3b01      	subs	r3, #1
 8009bda:	4543      	cmp	r3, r8
 8009bdc:	dcf1      	bgt.n	8009bc2 <_printf_float+0x40e>
 8009bde:	464b      	mov	r3, r9
 8009be0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009be4:	e6dc      	b.n	80099a0 <_printf_float+0x1ec>
 8009be6:	f04f 0800 	mov.w	r8, #0
 8009bea:	f104 0a1a 	add.w	sl, r4, #26
 8009bee:	e7f2      	b.n	8009bd6 <_printf_float+0x422>
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	4642      	mov	r2, r8
 8009bf4:	e7df      	b.n	8009bb6 <_printf_float+0x402>
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	464a      	mov	r2, r9
 8009bfa:	4631      	mov	r1, r6
 8009bfc:	4628      	mov	r0, r5
 8009bfe:	47b8      	blx	r7
 8009c00:	3001      	adds	r0, #1
 8009c02:	f43f ae38 	beq.w	8009876 <_printf_float+0xc2>
 8009c06:	f108 0801 	add.w	r8, r8, #1
 8009c0a:	68e3      	ldr	r3, [r4, #12]
 8009c0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009c0e:	1a5b      	subs	r3, r3, r1
 8009c10:	4543      	cmp	r3, r8
 8009c12:	dcf0      	bgt.n	8009bf6 <_printf_float+0x442>
 8009c14:	e6fa      	b.n	8009a0c <_printf_float+0x258>
 8009c16:	f04f 0800 	mov.w	r8, #0
 8009c1a:	f104 0919 	add.w	r9, r4, #25
 8009c1e:	e7f4      	b.n	8009c0a <_printf_float+0x456>

08009c20 <_printf_common>:
 8009c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c24:	4616      	mov	r6, r2
 8009c26:	4699      	mov	r9, r3
 8009c28:	688a      	ldr	r2, [r1, #8]
 8009c2a:	690b      	ldr	r3, [r1, #16]
 8009c2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009c30:	4293      	cmp	r3, r2
 8009c32:	bfb8      	it	lt
 8009c34:	4613      	movlt	r3, r2
 8009c36:	6033      	str	r3, [r6, #0]
 8009c38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009c3c:	4607      	mov	r7, r0
 8009c3e:	460c      	mov	r4, r1
 8009c40:	b10a      	cbz	r2, 8009c46 <_printf_common+0x26>
 8009c42:	3301      	adds	r3, #1
 8009c44:	6033      	str	r3, [r6, #0]
 8009c46:	6823      	ldr	r3, [r4, #0]
 8009c48:	0699      	lsls	r1, r3, #26
 8009c4a:	bf42      	ittt	mi
 8009c4c:	6833      	ldrmi	r3, [r6, #0]
 8009c4e:	3302      	addmi	r3, #2
 8009c50:	6033      	strmi	r3, [r6, #0]
 8009c52:	6825      	ldr	r5, [r4, #0]
 8009c54:	f015 0506 	ands.w	r5, r5, #6
 8009c58:	d106      	bne.n	8009c68 <_printf_common+0x48>
 8009c5a:	f104 0a19 	add.w	sl, r4, #25
 8009c5e:	68e3      	ldr	r3, [r4, #12]
 8009c60:	6832      	ldr	r2, [r6, #0]
 8009c62:	1a9b      	subs	r3, r3, r2
 8009c64:	42ab      	cmp	r3, r5
 8009c66:	dc26      	bgt.n	8009cb6 <_printf_common+0x96>
 8009c68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009c6c:	1e13      	subs	r3, r2, #0
 8009c6e:	6822      	ldr	r2, [r4, #0]
 8009c70:	bf18      	it	ne
 8009c72:	2301      	movne	r3, #1
 8009c74:	0692      	lsls	r2, r2, #26
 8009c76:	d42b      	bmi.n	8009cd0 <_printf_common+0xb0>
 8009c78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c7c:	4649      	mov	r1, r9
 8009c7e:	4638      	mov	r0, r7
 8009c80:	47c0      	blx	r8
 8009c82:	3001      	adds	r0, #1
 8009c84:	d01e      	beq.n	8009cc4 <_printf_common+0xa4>
 8009c86:	6823      	ldr	r3, [r4, #0]
 8009c88:	68e5      	ldr	r5, [r4, #12]
 8009c8a:	6832      	ldr	r2, [r6, #0]
 8009c8c:	f003 0306 	and.w	r3, r3, #6
 8009c90:	2b04      	cmp	r3, #4
 8009c92:	bf08      	it	eq
 8009c94:	1aad      	subeq	r5, r5, r2
 8009c96:	68a3      	ldr	r3, [r4, #8]
 8009c98:	6922      	ldr	r2, [r4, #16]
 8009c9a:	bf0c      	ite	eq
 8009c9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ca0:	2500      	movne	r5, #0
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	bfc4      	itt	gt
 8009ca6:	1a9b      	subgt	r3, r3, r2
 8009ca8:	18ed      	addgt	r5, r5, r3
 8009caa:	2600      	movs	r6, #0
 8009cac:	341a      	adds	r4, #26
 8009cae:	42b5      	cmp	r5, r6
 8009cb0:	d11a      	bne.n	8009ce8 <_printf_common+0xc8>
 8009cb2:	2000      	movs	r0, #0
 8009cb4:	e008      	b.n	8009cc8 <_printf_common+0xa8>
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	4652      	mov	r2, sl
 8009cba:	4649      	mov	r1, r9
 8009cbc:	4638      	mov	r0, r7
 8009cbe:	47c0      	blx	r8
 8009cc0:	3001      	adds	r0, #1
 8009cc2:	d103      	bne.n	8009ccc <_printf_common+0xac>
 8009cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8009cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ccc:	3501      	adds	r5, #1
 8009cce:	e7c6      	b.n	8009c5e <_printf_common+0x3e>
 8009cd0:	18e1      	adds	r1, r4, r3
 8009cd2:	1c5a      	adds	r2, r3, #1
 8009cd4:	2030      	movs	r0, #48	; 0x30
 8009cd6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009cda:	4422      	add	r2, r4
 8009cdc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009ce0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009ce4:	3302      	adds	r3, #2
 8009ce6:	e7c7      	b.n	8009c78 <_printf_common+0x58>
 8009ce8:	2301      	movs	r3, #1
 8009cea:	4622      	mov	r2, r4
 8009cec:	4649      	mov	r1, r9
 8009cee:	4638      	mov	r0, r7
 8009cf0:	47c0      	blx	r8
 8009cf2:	3001      	adds	r0, #1
 8009cf4:	d0e6      	beq.n	8009cc4 <_printf_common+0xa4>
 8009cf6:	3601      	adds	r6, #1
 8009cf8:	e7d9      	b.n	8009cae <_printf_common+0x8e>
	...

08009cfc <_printf_i>:
 8009cfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d00:	460c      	mov	r4, r1
 8009d02:	4691      	mov	r9, r2
 8009d04:	7e27      	ldrb	r7, [r4, #24]
 8009d06:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009d08:	2f78      	cmp	r7, #120	; 0x78
 8009d0a:	4680      	mov	r8, r0
 8009d0c:	469a      	mov	sl, r3
 8009d0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009d12:	d807      	bhi.n	8009d24 <_printf_i+0x28>
 8009d14:	2f62      	cmp	r7, #98	; 0x62
 8009d16:	d80a      	bhi.n	8009d2e <_printf_i+0x32>
 8009d18:	2f00      	cmp	r7, #0
 8009d1a:	f000 80d8 	beq.w	8009ece <_printf_i+0x1d2>
 8009d1e:	2f58      	cmp	r7, #88	; 0x58
 8009d20:	f000 80a3 	beq.w	8009e6a <_printf_i+0x16e>
 8009d24:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009d28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009d2c:	e03a      	b.n	8009da4 <_printf_i+0xa8>
 8009d2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009d32:	2b15      	cmp	r3, #21
 8009d34:	d8f6      	bhi.n	8009d24 <_printf_i+0x28>
 8009d36:	a001      	add	r0, pc, #4	; (adr r0, 8009d3c <_printf_i+0x40>)
 8009d38:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009d3c:	08009d95 	.word	0x08009d95
 8009d40:	08009da9 	.word	0x08009da9
 8009d44:	08009d25 	.word	0x08009d25
 8009d48:	08009d25 	.word	0x08009d25
 8009d4c:	08009d25 	.word	0x08009d25
 8009d50:	08009d25 	.word	0x08009d25
 8009d54:	08009da9 	.word	0x08009da9
 8009d58:	08009d25 	.word	0x08009d25
 8009d5c:	08009d25 	.word	0x08009d25
 8009d60:	08009d25 	.word	0x08009d25
 8009d64:	08009d25 	.word	0x08009d25
 8009d68:	08009eb5 	.word	0x08009eb5
 8009d6c:	08009dd9 	.word	0x08009dd9
 8009d70:	08009e97 	.word	0x08009e97
 8009d74:	08009d25 	.word	0x08009d25
 8009d78:	08009d25 	.word	0x08009d25
 8009d7c:	08009ed7 	.word	0x08009ed7
 8009d80:	08009d25 	.word	0x08009d25
 8009d84:	08009dd9 	.word	0x08009dd9
 8009d88:	08009d25 	.word	0x08009d25
 8009d8c:	08009d25 	.word	0x08009d25
 8009d90:	08009e9f 	.word	0x08009e9f
 8009d94:	680b      	ldr	r3, [r1, #0]
 8009d96:	1d1a      	adds	r2, r3, #4
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	600a      	str	r2, [r1, #0]
 8009d9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009da0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009da4:	2301      	movs	r3, #1
 8009da6:	e0a3      	b.n	8009ef0 <_printf_i+0x1f4>
 8009da8:	6825      	ldr	r5, [r4, #0]
 8009daa:	6808      	ldr	r0, [r1, #0]
 8009dac:	062e      	lsls	r6, r5, #24
 8009dae:	f100 0304 	add.w	r3, r0, #4
 8009db2:	d50a      	bpl.n	8009dca <_printf_i+0xce>
 8009db4:	6805      	ldr	r5, [r0, #0]
 8009db6:	600b      	str	r3, [r1, #0]
 8009db8:	2d00      	cmp	r5, #0
 8009dba:	da03      	bge.n	8009dc4 <_printf_i+0xc8>
 8009dbc:	232d      	movs	r3, #45	; 0x2d
 8009dbe:	426d      	negs	r5, r5
 8009dc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009dc4:	485e      	ldr	r0, [pc, #376]	; (8009f40 <_printf_i+0x244>)
 8009dc6:	230a      	movs	r3, #10
 8009dc8:	e019      	b.n	8009dfe <_printf_i+0x102>
 8009dca:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009dce:	6805      	ldr	r5, [r0, #0]
 8009dd0:	600b      	str	r3, [r1, #0]
 8009dd2:	bf18      	it	ne
 8009dd4:	b22d      	sxthne	r5, r5
 8009dd6:	e7ef      	b.n	8009db8 <_printf_i+0xbc>
 8009dd8:	680b      	ldr	r3, [r1, #0]
 8009dda:	6825      	ldr	r5, [r4, #0]
 8009ddc:	1d18      	adds	r0, r3, #4
 8009dde:	6008      	str	r0, [r1, #0]
 8009de0:	0628      	lsls	r0, r5, #24
 8009de2:	d501      	bpl.n	8009de8 <_printf_i+0xec>
 8009de4:	681d      	ldr	r5, [r3, #0]
 8009de6:	e002      	b.n	8009dee <_printf_i+0xf2>
 8009de8:	0669      	lsls	r1, r5, #25
 8009dea:	d5fb      	bpl.n	8009de4 <_printf_i+0xe8>
 8009dec:	881d      	ldrh	r5, [r3, #0]
 8009dee:	4854      	ldr	r0, [pc, #336]	; (8009f40 <_printf_i+0x244>)
 8009df0:	2f6f      	cmp	r7, #111	; 0x6f
 8009df2:	bf0c      	ite	eq
 8009df4:	2308      	moveq	r3, #8
 8009df6:	230a      	movne	r3, #10
 8009df8:	2100      	movs	r1, #0
 8009dfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009dfe:	6866      	ldr	r6, [r4, #4]
 8009e00:	60a6      	str	r6, [r4, #8]
 8009e02:	2e00      	cmp	r6, #0
 8009e04:	bfa2      	ittt	ge
 8009e06:	6821      	ldrge	r1, [r4, #0]
 8009e08:	f021 0104 	bicge.w	r1, r1, #4
 8009e0c:	6021      	strge	r1, [r4, #0]
 8009e0e:	b90d      	cbnz	r5, 8009e14 <_printf_i+0x118>
 8009e10:	2e00      	cmp	r6, #0
 8009e12:	d04d      	beq.n	8009eb0 <_printf_i+0x1b4>
 8009e14:	4616      	mov	r6, r2
 8009e16:	fbb5 f1f3 	udiv	r1, r5, r3
 8009e1a:	fb03 5711 	mls	r7, r3, r1, r5
 8009e1e:	5dc7      	ldrb	r7, [r0, r7]
 8009e20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009e24:	462f      	mov	r7, r5
 8009e26:	42bb      	cmp	r3, r7
 8009e28:	460d      	mov	r5, r1
 8009e2a:	d9f4      	bls.n	8009e16 <_printf_i+0x11a>
 8009e2c:	2b08      	cmp	r3, #8
 8009e2e:	d10b      	bne.n	8009e48 <_printf_i+0x14c>
 8009e30:	6823      	ldr	r3, [r4, #0]
 8009e32:	07df      	lsls	r7, r3, #31
 8009e34:	d508      	bpl.n	8009e48 <_printf_i+0x14c>
 8009e36:	6923      	ldr	r3, [r4, #16]
 8009e38:	6861      	ldr	r1, [r4, #4]
 8009e3a:	4299      	cmp	r1, r3
 8009e3c:	bfde      	ittt	le
 8009e3e:	2330      	movle	r3, #48	; 0x30
 8009e40:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009e44:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009e48:	1b92      	subs	r2, r2, r6
 8009e4a:	6122      	str	r2, [r4, #16]
 8009e4c:	f8cd a000 	str.w	sl, [sp]
 8009e50:	464b      	mov	r3, r9
 8009e52:	aa03      	add	r2, sp, #12
 8009e54:	4621      	mov	r1, r4
 8009e56:	4640      	mov	r0, r8
 8009e58:	f7ff fee2 	bl	8009c20 <_printf_common>
 8009e5c:	3001      	adds	r0, #1
 8009e5e:	d14c      	bne.n	8009efa <_printf_i+0x1fe>
 8009e60:	f04f 30ff 	mov.w	r0, #4294967295
 8009e64:	b004      	add	sp, #16
 8009e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e6a:	4835      	ldr	r0, [pc, #212]	; (8009f40 <_printf_i+0x244>)
 8009e6c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009e70:	6823      	ldr	r3, [r4, #0]
 8009e72:	680e      	ldr	r6, [r1, #0]
 8009e74:	061f      	lsls	r7, r3, #24
 8009e76:	f856 5b04 	ldr.w	r5, [r6], #4
 8009e7a:	600e      	str	r6, [r1, #0]
 8009e7c:	d514      	bpl.n	8009ea8 <_printf_i+0x1ac>
 8009e7e:	07d9      	lsls	r1, r3, #31
 8009e80:	bf44      	itt	mi
 8009e82:	f043 0320 	orrmi.w	r3, r3, #32
 8009e86:	6023      	strmi	r3, [r4, #0]
 8009e88:	b91d      	cbnz	r5, 8009e92 <_printf_i+0x196>
 8009e8a:	6823      	ldr	r3, [r4, #0]
 8009e8c:	f023 0320 	bic.w	r3, r3, #32
 8009e90:	6023      	str	r3, [r4, #0]
 8009e92:	2310      	movs	r3, #16
 8009e94:	e7b0      	b.n	8009df8 <_printf_i+0xfc>
 8009e96:	6823      	ldr	r3, [r4, #0]
 8009e98:	f043 0320 	orr.w	r3, r3, #32
 8009e9c:	6023      	str	r3, [r4, #0]
 8009e9e:	2378      	movs	r3, #120	; 0x78
 8009ea0:	4828      	ldr	r0, [pc, #160]	; (8009f44 <_printf_i+0x248>)
 8009ea2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009ea6:	e7e3      	b.n	8009e70 <_printf_i+0x174>
 8009ea8:	065e      	lsls	r6, r3, #25
 8009eaa:	bf48      	it	mi
 8009eac:	b2ad      	uxthmi	r5, r5
 8009eae:	e7e6      	b.n	8009e7e <_printf_i+0x182>
 8009eb0:	4616      	mov	r6, r2
 8009eb2:	e7bb      	b.n	8009e2c <_printf_i+0x130>
 8009eb4:	680b      	ldr	r3, [r1, #0]
 8009eb6:	6826      	ldr	r6, [r4, #0]
 8009eb8:	6960      	ldr	r0, [r4, #20]
 8009eba:	1d1d      	adds	r5, r3, #4
 8009ebc:	600d      	str	r5, [r1, #0]
 8009ebe:	0635      	lsls	r5, r6, #24
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	d501      	bpl.n	8009ec8 <_printf_i+0x1cc>
 8009ec4:	6018      	str	r0, [r3, #0]
 8009ec6:	e002      	b.n	8009ece <_printf_i+0x1d2>
 8009ec8:	0671      	lsls	r1, r6, #25
 8009eca:	d5fb      	bpl.n	8009ec4 <_printf_i+0x1c8>
 8009ecc:	8018      	strh	r0, [r3, #0]
 8009ece:	2300      	movs	r3, #0
 8009ed0:	6123      	str	r3, [r4, #16]
 8009ed2:	4616      	mov	r6, r2
 8009ed4:	e7ba      	b.n	8009e4c <_printf_i+0x150>
 8009ed6:	680b      	ldr	r3, [r1, #0]
 8009ed8:	1d1a      	adds	r2, r3, #4
 8009eda:	600a      	str	r2, [r1, #0]
 8009edc:	681e      	ldr	r6, [r3, #0]
 8009ede:	6862      	ldr	r2, [r4, #4]
 8009ee0:	2100      	movs	r1, #0
 8009ee2:	4630      	mov	r0, r6
 8009ee4:	f7f6 f9a4 	bl	8000230 <memchr>
 8009ee8:	b108      	cbz	r0, 8009eee <_printf_i+0x1f2>
 8009eea:	1b80      	subs	r0, r0, r6
 8009eec:	6060      	str	r0, [r4, #4]
 8009eee:	6863      	ldr	r3, [r4, #4]
 8009ef0:	6123      	str	r3, [r4, #16]
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ef8:	e7a8      	b.n	8009e4c <_printf_i+0x150>
 8009efa:	6923      	ldr	r3, [r4, #16]
 8009efc:	4632      	mov	r2, r6
 8009efe:	4649      	mov	r1, r9
 8009f00:	4640      	mov	r0, r8
 8009f02:	47d0      	blx	sl
 8009f04:	3001      	adds	r0, #1
 8009f06:	d0ab      	beq.n	8009e60 <_printf_i+0x164>
 8009f08:	6823      	ldr	r3, [r4, #0]
 8009f0a:	079b      	lsls	r3, r3, #30
 8009f0c:	d413      	bmi.n	8009f36 <_printf_i+0x23a>
 8009f0e:	68e0      	ldr	r0, [r4, #12]
 8009f10:	9b03      	ldr	r3, [sp, #12]
 8009f12:	4298      	cmp	r0, r3
 8009f14:	bfb8      	it	lt
 8009f16:	4618      	movlt	r0, r3
 8009f18:	e7a4      	b.n	8009e64 <_printf_i+0x168>
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	4632      	mov	r2, r6
 8009f1e:	4649      	mov	r1, r9
 8009f20:	4640      	mov	r0, r8
 8009f22:	47d0      	blx	sl
 8009f24:	3001      	adds	r0, #1
 8009f26:	d09b      	beq.n	8009e60 <_printf_i+0x164>
 8009f28:	3501      	adds	r5, #1
 8009f2a:	68e3      	ldr	r3, [r4, #12]
 8009f2c:	9903      	ldr	r1, [sp, #12]
 8009f2e:	1a5b      	subs	r3, r3, r1
 8009f30:	42ab      	cmp	r3, r5
 8009f32:	dcf2      	bgt.n	8009f1a <_printf_i+0x21e>
 8009f34:	e7eb      	b.n	8009f0e <_printf_i+0x212>
 8009f36:	2500      	movs	r5, #0
 8009f38:	f104 0619 	add.w	r6, r4, #25
 8009f3c:	e7f5      	b.n	8009f2a <_printf_i+0x22e>
 8009f3e:	bf00      	nop
 8009f40:	0800c8c2 	.word	0x0800c8c2
 8009f44:	0800c8d3 	.word	0x0800c8d3

08009f48 <siprintf>:
 8009f48:	b40e      	push	{r1, r2, r3}
 8009f4a:	b500      	push	{lr}
 8009f4c:	b09c      	sub	sp, #112	; 0x70
 8009f4e:	ab1d      	add	r3, sp, #116	; 0x74
 8009f50:	9002      	str	r0, [sp, #8]
 8009f52:	9006      	str	r0, [sp, #24]
 8009f54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009f58:	4809      	ldr	r0, [pc, #36]	; (8009f80 <siprintf+0x38>)
 8009f5a:	9107      	str	r1, [sp, #28]
 8009f5c:	9104      	str	r1, [sp, #16]
 8009f5e:	4909      	ldr	r1, [pc, #36]	; (8009f84 <siprintf+0x3c>)
 8009f60:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f64:	9105      	str	r1, [sp, #20]
 8009f66:	6800      	ldr	r0, [r0, #0]
 8009f68:	9301      	str	r3, [sp, #4]
 8009f6a:	a902      	add	r1, sp, #8
 8009f6c:	f001 fb42 	bl	800b5f4 <_svfiprintf_r>
 8009f70:	9b02      	ldr	r3, [sp, #8]
 8009f72:	2200      	movs	r2, #0
 8009f74:	701a      	strb	r2, [r3, #0]
 8009f76:	b01c      	add	sp, #112	; 0x70
 8009f78:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f7c:	b003      	add	sp, #12
 8009f7e:	4770      	bx	lr
 8009f80:	20000010 	.word	0x20000010
 8009f84:	ffff0208 	.word	0xffff0208

08009f88 <strcat>:
 8009f88:	b510      	push	{r4, lr}
 8009f8a:	4602      	mov	r2, r0
 8009f8c:	7814      	ldrb	r4, [r2, #0]
 8009f8e:	4613      	mov	r3, r2
 8009f90:	3201      	adds	r2, #1
 8009f92:	2c00      	cmp	r4, #0
 8009f94:	d1fa      	bne.n	8009f8c <strcat+0x4>
 8009f96:	3b01      	subs	r3, #1
 8009f98:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f9c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009fa0:	2a00      	cmp	r2, #0
 8009fa2:	d1f9      	bne.n	8009f98 <strcat+0x10>
 8009fa4:	bd10      	pop	{r4, pc}

08009fa6 <quorem>:
 8009fa6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009faa:	6903      	ldr	r3, [r0, #16]
 8009fac:	690c      	ldr	r4, [r1, #16]
 8009fae:	42a3      	cmp	r3, r4
 8009fb0:	4607      	mov	r7, r0
 8009fb2:	f2c0 8081 	blt.w	800a0b8 <quorem+0x112>
 8009fb6:	3c01      	subs	r4, #1
 8009fb8:	f101 0814 	add.w	r8, r1, #20
 8009fbc:	f100 0514 	add.w	r5, r0, #20
 8009fc0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009fc4:	9301      	str	r3, [sp, #4]
 8009fc6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009fca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009fce:	3301      	adds	r3, #1
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009fd6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009fda:	fbb2 f6f3 	udiv	r6, r2, r3
 8009fde:	d331      	bcc.n	800a044 <quorem+0x9e>
 8009fe0:	f04f 0e00 	mov.w	lr, #0
 8009fe4:	4640      	mov	r0, r8
 8009fe6:	46ac      	mov	ip, r5
 8009fe8:	46f2      	mov	sl, lr
 8009fea:	f850 2b04 	ldr.w	r2, [r0], #4
 8009fee:	b293      	uxth	r3, r2
 8009ff0:	fb06 e303 	mla	r3, r6, r3, lr
 8009ff4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009ff8:	b29b      	uxth	r3, r3
 8009ffa:	ebaa 0303 	sub.w	r3, sl, r3
 8009ffe:	0c12      	lsrs	r2, r2, #16
 800a000:	f8dc a000 	ldr.w	sl, [ip]
 800a004:	fb06 e202 	mla	r2, r6, r2, lr
 800a008:	fa13 f38a 	uxtah	r3, r3, sl
 800a00c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a010:	fa1f fa82 	uxth.w	sl, r2
 800a014:	f8dc 2000 	ldr.w	r2, [ip]
 800a018:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a01c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a020:	b29b      	uxth	r3, r3
 800a022:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a026:	4581      	cmp	r9, r0
 800a028:	f84c 3b04 	str.w	r3, [ip], #4
 800a02c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a030:	d2db      	bcs.n	8009fea <quorem+0x44>
 800a032:	f855 300b 	ldr.w	r3, [r5, fp]
 800a036:	b92b      	cbnz	r3, 800a044 <quorem+0x9e>
 800a038:	9b01      	ldr	r3, [sp, #4]
 800a03a:	3b04      	subs	r3, #4
 800a03c:	429d      	cmp	r5, r3
 800a03e:	461a      	mov	r2, r3
 800a040:	d32e      	bcc.n	800a0a0 <quorem+0xfa>
 800a042:	613c      	str	r4, [r7, #16]
 800a044:	4638      	mov	r0, r7
 800a046:	f001 f8bf 	bl	800b1c8 <__mcmp>
 800a04a:	2800      	cmp	r0, #0
 800a04c:	db24      	blt.n	800a098 <quorem+0xf2>
 800a04e:	3601      	adds	r6, #1
 800a050:	4628      	mov	r0, r5
 800a052:	f04f 0c00 	mov.w	ip, #0
 800a056:	f858 2b04 	ldr.w	r2, [r8], #4
 800a05a:	f8d0 e000 	ldr.w	lr, [r0]
 800a05e:	b293      	uxth	r3, r2
 800a060:	ebac 0303 	sub.w	r3, ip, r3
 800a064:	0c12      	lsrs	r2, r2, #16
 800a066:	fa13 f38e 	uxtah	r3, r3, lr
 800a06a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a06e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a072:	b29b      	uxth	r3, r3
 800a074:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a078:	45c1      	cmp	r9, r8
 800a07a:	f840 3b04 	str.w	r3, [r0], #4
 800a07e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a082:	d2e8      	bcs.n	800a056 <quorem+0xb0>
 800a084:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a088:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a08c:	b922      	cbnz	r2, 800a098 <quorem+0xf2>
 800a08e:	3b04      	subs	r3, #4
 800a090:	429d      	cmp	r5, r3
 800a092:	461a      	mov	r2, r3
 800a094:	d30a      	bcc.n	800a0ac <quorem+0x106>
 800a096:	613c      	str	r4, [r7, #16]
 800a098:	4630      	mov	r0, r6
 800a09a:	b003      	add	sp, #12
 800a09c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0a0:	6812      	ldr	r2, [r2, #0]
 800a0a2:	3b04      	subs	r3, #4
 800a0a4:	2a00      	cmp	r2, #0
 800a0a6:	d1cc      	bne.n	800a042 <quorem+0x9c>
 800a0a8:	3c01      	subs	r4, #1
 800a0aa:	e7c7      	b.n	800a03c <quorem+0x96>
 800a0ac:	6812      	ldr	r2, [r2, #0]
 800a0ae:	3b04      	subs	r3, #4
 800a0b0:	2a00      	cmp	r2, #0
 800a0b2:	d1f0      	bne.n	800a096 <quorem+0xf0>
 800a0b4:	3c01      	subs	r4, #1
 800a0b6:	e7eb      	b.n	800a090 <quorem+0xea>
 800a0b8:	2000      	movs	r0, #0
 800a0ba:	e7ee      	b.n	800a09a <quorem+0xf4>
 800a0bc:	0000      	movs	r0, r0
	...

0800a0c0 <_dtoa_r>:
 800a0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0c4:	ed2d 8b02 	vpush	{d8}
 800a0c8:	ec57 6b10 	vmov	r6, r7, d0
 800a0cc:	b095      	sub	sp, #84	; 0x54
 800a0ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a0d0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a0d4:	9105      	str	r1, [sp, #20]
 800a0d6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a0da:	4604      	mov	r4, r0
 800a0dc:	9209      	str	r2, [sp, #36]	; 0x24
 800a0de:	930f      	str	r3, [sp, #60]	; 0x3c
 800a0e0:	b975      	cbnz	r5, 800a100 <_dtoa_r+0x40>
 800a0e2:	2010      	movs	r0, #16
 800a0e4:	f000 fddc 	bl	800aca0 <malloc>
 800a0e8:	4602      	mov	r2, r0
 800a0ea:	6260      	str	r0, [r4, #36]	; 0x24
 800a0ec:	b920      	cbnz	r0, 800a0f8 <_dtoa_r+0x38>
 800a0ee:	4bb2      	ldr	r3, [pc, #712]	; (800a3b8 <_dtoa_r+0x2f8>)
 800a0f0:	21ea      	movs	r1, #234	; 0xea
 800a0f2:	48b2      	ldr	r0, [pc, #712]	; (800a3bc <_dtoa_r+0x2fc>)
 800a0f4:	f001 fb8e 	bl	800b814 <__assert_func>
 800a0f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a0fc:	6005      	str	r5, [r0, #0]
 800a0fe:	60c5      	str	r5, [r0, #12]
 800a100:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a102:	6819      	ldr	r1, [r3, #0]
 800a104:	b151      	cbz	r1, 800a11c <_dtoa_r+0x5c>
 800a106:	685a      	ldr	r2, [r3, #4]
 800a108:	604a      	str	r2, [r1, #4]
 800a10a:	2301      	movs	r3, #1
 800a10c:	4093      	lsls	r3, r2
 800a10e:	608b      	str	r3, [r1, #8]
 800a110:	4620      	mov	r0, r4
 800a112:	f000 fe1b 	bl	800ad4c <_Bfree>
 800a116:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a118:	2200      	movs	r2, #0
 800a11a:	601a      	str	r2, [r3, #0]
 800a11c:	1e3b      	subs	r3, r7, #0
 800a11e:	bfb9      	ittee	lt
 800a120:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a124:	9303      	strlt	r3, [sp, #12]
 800a126:	2300      	movge	r3, #0
 800a128:	f8c8 3000 	strge.w	r3, [r8]
 800a12c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a130:	4ba3      	ldr	r3, [pc, #652]	; (800a3c0 <_dtoa_r+0x300>)
 800a132:	bfbc      	itt	lt
 800a134:	2201      	movlt	r2, #1
 800a136:	f8c8 2000 	strlt.w	r2, [r8]
 800a13a:	ea33 0309 	bics.w	r3, r3, r9
 800a13e:	d11b      	bne.n	800a178 <_dtoa_r+0xb8>
 800a140:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a142:	f242 730f 	movw	r3, #9999	; 0x270f
 800a146:	6013      	str	r3, [r2, #0]
 800a148:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a14c:	4333      	orrs	r3, r6
 800a14e:	f000 857a 	beq.w	800ac46 <_dtoa_r+0xb86>
 800a152:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a154:	b963      	cbnz	r3, 800a170 <_dtoa_r+0xb0>
 800a156:	4b9b      	ldr	r3, [pc, #620]	; (800a3c4 <_dtoa_r+0x304>)
 800a158:	e024      	b.n	800a1a4 <_dtoa_r+0xe4>
 800a15a:	4b9b      	ldr	r3, [pc, #620]	; (800a3c8 <_dtoa_r+0x308>)
 800a15c:	9300      	str	r3, [sp, #0]
 800a15e:	3308      	adds	r3, #8
 800a160:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a162:	6013      	str	r3, [r2, #0]
 800a164:	9800      	ldr	r0, [sp, #0]
 800a166:	b015      	add	sp, #84	; 0x54
 800a168:	ecbd 8b02 	vpop	{d8}
 800a16c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a170:	4b94      	ldr	r3, [pc, #592]	; (800a3c4 <_dtoa_r+0x304>)
 800a172:	9300      	str	r3, [sp, #0]
 800a174:	3303      	adds	r3, #3
 800a176:	e7f3      	b.n	800a160 <_dtoa_r+0xa0>
 800a178:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a17c:	2200      	movs	r2, #0
 800a17e:	ec51 0b17 	vmov	r0, r1, d7
 800a182:	2300      	movs	r3, #0
 800a184:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a188:	f7f6 fcc6 	bl	8000b18 <__aeabi_dcmpeq>
 800a18c:	4680      	mov	r8, r0
 800a18e:	b158      	cbz	r0, 800a1a8 <_dtoa_r+0xe8>
 800a190:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a192:	2301      	movs	r3, #1
 800a194:	6013      	str	r3, [r2, #0]
 800a196:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a198:	2b00      	cmp	r3, #0
 800a19a:	f000 8551 	beq.w	800ac40 <_dtoa_r+0xb80>
 800a19e:	488b      	ldr	r0, [pc, #556]	; (800a3cc <_dtoa_r+0x30c>)
 800a1a0:	6018      	str	r0, [r3, #0]
 800a1a2:	1e43      	subs	r3, r0, #1
 800a1a4:	9300      	str	r3, [sp, #0]
 800a1a6:	e7dd      	b.n	800a164 <_dtoa_r+0xa4>
 800a1a8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a1ac:	aa12      	add	r2, sp, #72	; 0x48
 800a1ae:	a913      	add	r1, sp, #76	; 0x4c
 800a1b0:	4620      	mov	r0, r4
 800a1b2:	f001 f8ad 	bl	800b310 <__d2b>
 800a1b6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a1ba:	4683      	mov	fp, r0
 800a1bc:	2d00      	cmp	r5, #0
 800a1be:	d07c      	beq.n	800a2ba <_dtoa_r+0x1fa>
 800a1c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1c2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a1c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a1ca:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a1ce:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a1d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a1d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a1da:	4b7d      	ldr	r3, [pc, #500]	; (800a3d0 <_dtoa_r+0x310>)
 800a1dc:	2200      	movs	r2, #0
 800a1de:	4630      	mov	r0, r6
 800a1e0:	4639      	mov	r1, r7
 800a1e2:	f7f6 f879 	bl	80002d8 <__aeabi_dsub>
 800a1e6:	a36e      	add	r3, pc, #440	; (adr r3, 800a3a0 <_dtoa_r+0x2e0>)
 800a1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ec:	f7f6 fa2c 	bl	8000648 <__aeabi_dmul>
 800a1f0:	a36d      	add	r3, pc, #436	; (adr r3, 800a3a8 <_dtoa_r+0x2e8>)
 800a1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f6:	f7f6 f871 	bl	80002dc <__adddf3>
 800a1fa:	4606      	mov	r6, r0
 800a1fc:	4628      	mov	r0, r5
 800a1fe:	460f      	mov	r7, r1
 800a200:	f7f6 f9b8 	bl	8000574 <__aeabi_i2d>
 800a204:	a36a      	add	r3, pc, #424	; (adr r3, 800a3b0 <_dtoa_r+0x2f0>)
 800a206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a20a:	f7f6 fa1d 	bl	8000648 <__aeabi_dmul>
 800a20e:	4602      	mov	r2, r0
 800a210:	460b      	mov	r3, r1
 800a212:	4630      	mov	r0, r6
 800a214:	4639      	mov	r1, r7
 800a216:	f7f6 f861 	bl	80002dc <__adddf3>
 800a21a:	4606      	mov	r6, r0
 800a21c:	460f      	mov	r7, r1
 800a21e:	f7f6 fcc3 	bl	8000ba8 <__aeabi_d2iz>
 800a222:	2200      	movs	r2, #0
 800a224:	4682      	mov	sl, r0
 800a226:	2300      	movs	r3, #0
 800a228:	4630      	mov	r0, r6
 800a22a:	4639      	mov	r1, r7
 800a22c:	f7f6 fc7e 	bl	8000b2c <__aeabi_dcmplt>
 800a230:	b148      	cbz	r0, 800a246 <_dtoa_r+0x186>
 800a232:	4650      	mov	r0, sl
 800a234:	f7f6 f99e 	bl	8000574 <__aeabi_i2d>
 800a238:	4632      	mov	r2, r6
 800a23a:	463b      	mov	r3, r7
 800a23c:	f7f6 fc6c 	bl	8000b18 <__aeabi_dcmpeq>
 800a240:	b908      	cbnz	r0, 800a246 <_dtoa_r+0x186>
 800a242:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a246:	f1ba 0f16 	cmp.w	sl, #22
 800a24a:	d854      	bhi.n	800a2f6 <_dtoa_r+0x236>
 800a24c:	4b61      	ldr	r3, [pc, #388]	; (800a3d4 <_dtoa_r+0x314>)
 800a24e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a256:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a25a:	f7f6 fc67 	bl	8000b2c <__aeabi_dcmplt>
 800a25e:	2800      	cmp	r0, #0
 800a260:	d04b      	beq.n	800a2fa <_dtoa_r+0x23a>
 800a262:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a266:	2300      	movs	r3, #0
 800a268:	930e      	str	r3, [sp, #56]	; 0x38
 800a26a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a26c:	1b5d      	subs	r5, r3, r5
 800a26e:	1e6b      	subs	r3, r5, #1
 800a270:	9304      	str	r3, [sp, #16]
 800a272:	bf43      	ittte	mi
 800a274:	2300      	movmi	r3, #0
 800a276:	f1c5 0801 	rsbmi	r8, r5, #1
 800a27a:	9304      	strmi	r3, [sp, #16]
 800a27c:	f04f 0800 	movpl.w	r8, #0
 800a280:	f1ba 0f00 	cmp.w	sl, #0
 800a284:	db3b      	blt.n	800a2fe <_dtoa_r+0x23e>
 800a286:	9b04      	ldr	r3, [sp, #16]
 800a288:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a28c:	4453      	add	r3, sl
 800a28e:	9304      	str	r3, [sp, #16]
 800a290:	2300      	movs	r3, #0
 800a292:	9306      	str	r3, [sp, #24]
 800a294:	9b05      	ldr	r3, [sp, #20]
 800a296:	2b09      	cmp	r3, #9
 800a298:	d869      	bhi.n	800a36e <_dtoa_r+0x2ae>
 800a29a:	2b05      	cmp	r3, #5
 800a29c:	bfc4      	itt	gt
 800a29e:	3b04      	subgt	r3, #4
 800a2a0:	9305      	strgt	r3, [sp, #20]
 800a2a2:	9b05      	ldr	r3, [sp, #20]
 800a2a4:	f1a3 0302 	sub.w	r3, r3, #2
 800a2a8:	bfcc      	ite	gt
 800a2aa:	2500      	movgt	r5, #0
 800a2ac:	2501      	movle	r5, #1
 800a2ae:	2b03      	cmp	r3, #3
 800a2b0:	d869      	bhi.n	800a386 <_dtoa_r+0x2c6>
 800a2b2:	e8df f003 	tbb	[pc, r3]
 800a2b6:	4e2c      	.short	0x4e2c
 800a2b8:	5a4c      	.short	0x5a4c
 800a2ba:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a2be:	441d      	add	r5, r3
 800a2c0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a2c4:	2b20      	cmp	r3, #32
 800a2c6:	bfc1      	itttt	gt
 800a2c8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a2cc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a2d0:	fa09 f303 	lslgt.w	r3, r9, r3
 800a2d4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a2d8:	bfda      	itte	le
 800a2da:	f1c3 0320 	rsble	r3, r3, #32
 800a2de:	fa06 f003 	lslle.w	r0, r6, r3
 800a2e2:	4318      	orrgt	r0, r3
 800a2e4:	f7f6 f936 	bl	8000554 <__aeabi_ui2d>
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	4606      	mov	r6, r0
 800a2ec:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a2f0:	3d01      	subs	r5, #1
 800a2f2:	9310      	str	r3, [sp, #64]	; 0x40
 800a2f4:	e771      	b.n	800a1da <_dtoa_r+0x11a>
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	e7b6      	b.n	800a268 <_dtoa_r+0x1a8>
 800a2fa:	900e      	str	r0, [sp, #56]	; 0x38
 800a2fc:	e7b5      	b.n	800a26a <_dtoa_r+0x1aa>
 800a2fe:	f1ca 0300 	rsb	r3, sl, #0
 800a302:	9306      	str	r3, [sp, #24]
 800a304:	2300      	movs	r3, #0
 800a306:	eba8 080a 	sub.w	r8, r8, sl
 800a30a:	930d      	str	r3, [sp, #52]	; 0x34
 800a30c:	e7c2      	b.n	800a294 <_dtoa_r+0x1d4>
 800a30e:	2300      	movs	r3, #0
 800a310:	9308      	str	r3, [sp, #32]
 800a312:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a314:	2b00      	cmp	r3, #0
 800a316:	dc39      	bgt.n	800a38c <_dtoa_r+0x2cc>
 800a318:	f04f 0901 	mov.w	r9, #1
 800a31c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a320:	464b      	mov	r3, r9
 800a322:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a326:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a328:	2200      	movs	r2, #0
 800a32a:	6042      	str	r2, [r0, #4]
 800a32c:	2204      	movs	r2, #4
 800a32e:	f102 0614 	add.w	r6, r2, #20
 800a332:	429e      	cmp	r6, r3
 800a334:	6841      	ldr	r1, [r0, #4]
 800a336:	d92f      	bls.n	800a398 <_dtoa_r+0x2d8>
 800a338:	4620      	mov	r0, r4
 800a33a:	f000 fcc7 	bl	800accc <_Balloc>
 800a33e:	9000      	str	r0, [sp, #0]
 800a340:	2800      	cmp	r0, #0
 800a342:	d14b      	bne.n	800a3dc <_dtoa_r+0x31c>
 800a344:	4b24      	ldr	r3, [pc, #144]	; (800a3d8 <_dtoa_r+0x318>)
 800a346:	4602      	mov	r2, r0
 800a348:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a34c:	e6d1      	b.n	800a0f2 <_dtoa_r+0x32>
 800a34e:	2301      	movs	r3, #1
 800a350:	e7de      	b.n	800a310 <_dtoa_r+0x250>
 800a352:	2300      	movs	r3, #0
 800a354:	9308      	str	r3, [sp, #32]
 800a356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a358:	eb0a 0903 	add.w	r9, sl, r3
 800a35c:	f109 0301 	add.w	r3, r9, #1
 800a360:	2b01      	cmp	r3, #1
 800a362:	9301      	str	r3, [sp, #4]
 800a364:	bfb8      	it	lt
 800a366:	2301      	movlt	r3, #1
 800a368:	e7dd      	b.n	800a326 <_dtoa_r+0x266>
 800a36a:	2301      	movs	r3, #1
 800a36c:	e7f2      	b.n	800a354 <_dtoa_r+0x294>
 800a36e:	2501      	movs	r5, #1
 800a370:	2300      	movs	r3, #0
 800a372:	9305      	str	r3, [sp, #20]
 800a374:	9508      	str	r5, [sp, #32]
 800a376:	f04f 39ff 	mov.w	r9, #4294967295
 800a37a:	2200      	movs	r2, #0
 800a37c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a380:	2312      	movs	r3, #18
 800a382:	9209      	str	r2, [sp, #36]	; 0x24
 800a384:	e7cf      	b.n	800a326 <_dtoa_r+0x266>
 800a386:	2301      	movs	r3, #1
 800a388:	9308      	str	r3, [sp, #32]
 800a38a:	e7f4      	b.n	800a376 <_dtoa_r+0x2b6>
 800a38c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a390:	f8cd 9004 	str.w	r9, [sp, #4]
 800a394:	464b      	mov	r3, r9
 800a396:	e7c6      	b.n	800a326 <_dtoa_r+0x266>
 800a398:	3101      	adds	r1, #1
 800a39a:	6041      	str	r1, [r0, #4]
 800a39c:	0052      	lsls	r2, r2, #1
 800a39e:	e7c6      	b.n	800a32e <_dtoa_r+0x26e>
 800a3a0:	636f4361 	.word	0x636f4361
 800a3a4:	3fd287a7 	.word	0x3fd287a7
 800a3a8:	8b60c8b3 	.word	0x8b60c8b3
 800a3ac:	3fc68a28 	.word	0x3fc68a28
 800a3b0:	509f79fb 	.word	0x509f79fb
 800a3b4:	3fd34413 	.word	0x3fd34413
 800a3b8:	0800c8f1 	.word	0x0800c8f1
 800a3bc:	0800c908 	.word	0x0800c908
 800a3c0:	7ff00000 	.word	0x7ff00000
 800a3c4:	0800c8ed 	.word	0x0800c8ed
 800a3c8:	0800c8e4 	.word	0x0800c8e4
 800a3cc:	0800c8c1 	.word	0x0800c8c1
 800a3d0:	3ff80000 	.word	0x3ff80000
 800a3d4:	0800ca00 	.word	0x0800ca00
 800a3d8:	0800c967 	.word	0x0800c967
 800a3dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3de:	9a00      	ldr	r2, [sp, #0]
 800a3e0:	601a      	str	r2, [r3, #0]
 800a3e2:	9b01      	ldr	r3, [sp, #4]
 800a3e4:	2b0e      	cmp	r3, #14
 800a3e6:	f200 80ad 	bhi.w	800a544 <_dtoa_r+0x484>
 800a3ea:	2d00      	cmp	r5, #0
 800a3ec:	f000 80aa 	beq.w	800a544 <_dtoa_r+0x484>
 800a3f0:	f1ba 0f00 	cmp.w	sl, #0
 800a3f4:	dd36      	ble.n	800a464 <_dtoa_r+0x3a4>
 800a3f6:	4ac3      	ldr	r2, [pc, #780]	; (800a704 <_dtoa_r+0x644>)
 800a3f8:	f00a 030f 	and.w	r3, sl, #15
 800a3fc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a400:	ed93 7b00 	vldr	d7, [r3]
 800a404:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a408:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a40c:	eeb0 8a47 	vmov.f32	s16, s14
 800a410:	eef0 8a67 	vmov.f32	s17, s15
 800a414:	d016      	beq.n	800a444 <_dtoa_r+0x384>
 800a416:	4bbc      	ldr	r3, [pc, #752]	; (800a708 <_dtoa_r+0x648>)
 800a418:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a41c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a420:	f7f6 fa3c 	bl	800089c <__aeabi_ddiv>
 800a424:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a428:	f007 070f 	and.w	r7, r7, #15
 800a42c:	2503      	movs	r5, #3
 800a42e:	4eb6      	ldr	r6, [pc, #728]	; (800a708 <_dtoa_r+0x648>)
 800a430:	b957      	cbnz	r7, 800a448 <_dtoa_r+0x388>
 800a432:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a436:	ec53 2b18 	vmov	r2, r3, d8
 800a43a:	f7f6 fa2f 	bl	800089c <__aeabi_ddiv>
 800a43e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a442:	e029      	b.n	800a498 <_dtoa_r+0x3d8>
 800a444:	2502      	movs	r5, #2
 800a446:	e7f2      	b.n	800a42e <_dtoa_r+0x36e>
 800a448:	07f9      	lsls	r1, r7, #31
 800a44a:	d508      	bpl.n	800a45e <_dtoa_r+0x39e>
 800a44c:	ec51 0b18 	vmov	r0, r1, d8
 800a450:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a454:	f7f6 f8f8 	bl	8000648 <__aeabi_dmul>
 800a458:	ec41 0b18 	vmov	d8, r0, r1
 800a45c:	3501      	adds	r5, #1
 800a45e:	107f      	asrs	r7, r7, #1
 800a460:	3608      	adds	r6, #8
 800a462:	e7e5      	b.n	800a430 <_dtoa_r+0x370>
 800a464:	f000 80a6 	beq.w	800a5b4 <_dtoa_r+0x4f4>
 800a468:	f1ca 0600 	rsb	r6, sl, #0
 800a46c:	4ba5      	ldr	r3, [pc, #660]	; (800a704 <_dtoa_r+0x644>)
 800a46e:	4fa6      	ldr	r7, [pc, #664]	; (800a708 <_dtoa_r+0x648>)
 800a470:	f006 020f 	and.w	r2, r6, #15
 800a474:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a47c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a480:	f7f6 f8e2 	bl	8000648 <__aeabi_dmul>
 800a484:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a488:	1136      	asrs	r6, r6, #4
 800a48a:	2300      	movs	r3, #0
 800a48c:	2502      	movs	r5, #2
 800a48e:	2e00      	cmp	r6, #0
 800a490:	f040 8085 	bne.w	800a59e <_dtoa_r+0x4de>
 800a494:	2b00      	cmp	r3, #0
 800a496:	d1d2      	bne.n	800a43e <_dtoa_r+0x37e>
 800a498:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	f000 808c 	beq.w	800a5b8 <_dtoa_r+0x4f8>
 800a4a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a4a4:	4b99      	ldr	r3, [pc, #612]	; (800a70c <_dtoa_r+0x64c>)
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	4630      	mov	r0, r6
 800a4aa:	4639      	mov	r1, r7
 800a4ac:	f7f6 fb3e 	bl	8000b2c <__aeabi_dcmplt>
 800a4b0:	2800      	cmp	r0, #0
 800a4b2:	f000 8081 	beq.w	800a5b8 <_dtoa_r+0x4f8>
 800a4b6:	9b01      	ldr	r3, [sp, #4]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d07d      	beq.n	800a5b8 <_dtoa_r+0x4f8>
 800a4bc:	f1b9 0f00 	cmp.w	r9, #0
 800a4c0:	dd3c      	ble.n	800a53c <_dtoa_r+0x47c>
 800a4c2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a4c6:	9307      	str	r3, [sp, #28]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	4b91      	ldr	r3, [pc, #580]	; (800a710 <_dtoa_r+0x650>)
 800a4cc:	4630      	mov	r0, r6
 800a4ce:	4639      	mov	r1, r7
 800a4d0:	f7f6 f8ba 	bl	8000648 <__aeabi_dmul>
 800a4d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4d8:	3501      	adds	r5, #1
 800a4da:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a4de:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a4e2:	4628      	mov	r0, r5
 800a4e4:	f7f6 f846 	bl	8000574 <__aeabi_i2d>
 800a4e8:	4632      	mov	r2, r6
 800a4ea:	463b      	mov	r3, r7
 800a4ec:	f7f6 f8ac 	bl	8000648 <__aeabi_dmul>
 800a4f0:	4b88      	ldr	r3, [pc, #544]	; (800a714 <_dtoa_r+0x654>)
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	f7f5 fef2 	bl	80002dc <__adddf3>
 800a4f8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a4fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a500:	9303      	str	r3, [sp, #12]
 800a502:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a504:	2b00      	cmp	r3, #0
 800a506:	d15c      	bne.n	800a5c2 <_dtoa_r+0x502>
 800a508:	4b83      	ldr	r3, [pc, #524]	; (800a718 <_dtoa_r+0x658>)
 800a50a:	2200      	movs	r2, #0
 800a50c:	4630      	mov	r0, r6
 800a50e:	4639      	mov	r1, r7
 800a510:	f7f5 fee2 	bl	80002d8 <__aeabi_dsub>
 800a514:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a518:	4606      	mov	r6, r0
 800a51a:	460f      	mov	r7, r1
 800a51c:	f7f6 fb24 	bl	8000b68 <__aeabi_dcmpgt>
 800a520:	2800      	cmp	r0, #0
 800a522:	f040 8296 	bne.w	800aa52 <_dtoa_r+0x992>
 800a526:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a52a:	4630      	mov	r0, r6
 800a52c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a530:	4639      	mov	r1, r7
 800a532:	f7f6 fafb 	bl	8000b2c <__aeabi_dcmplt>
 800a536:	2800      	cmp	r0, #0
 800a538:	f040 8288 	bne.w	800aa4c <_dtoa_r+0x98c>
 800a53c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a540:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a544:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a546:	2b00      	cmp	r3, #0
 800a548:	f2c0 8158 	blt.w	800a7fc <_dtoa_r+0x73c>
 800a54c:	f1ba 0f0e 	cmp.w	sl, #14
 800a550:	f300 8154 	bgt.w	800a7fc <_dtoa_r+0x73c>
 800a554:	4b6b      	ldr	r3, [pc, #428]	; (800a704 <_dtoa_r+0x644>)
 800a556:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a55a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a55e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a560:	2b00      	cmp	r3, #0
 800a562:	f280 80e3 	bge.w	800a72c <_dtoa_r+0x66c>
 800a566:	9b01      	ldr	r3, [sp, #4]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	f300 80df 	bgt.w	800a72c <_dtoa_r+0x66c>
 800a56e:	f040 826d 	bne.w	800aa4c <_dtoa_r+0x98c>
 800a572:	4b69      	ldr	r3, [pc, #420]	; (800a718 <_dtoa_r+0x658>)
 800a574:	2200      	movs	r2, #0
 800a576:	4640      	mov	r0, r8
 800a578:	4649      	mov	r1, r9
 800a57a:	f7f6 f865 	bl	8000648 <__aeabi_dmul>
 800a57e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a582:	f7f6 fae7 	bl	8000b54 <__aeabi_dcmpge>
 800a586:	9e01      	ldr	r6, [sp, #4]
 800a588:	4637      	mov	r7, r6
 800a58a:	2800      	cmp	r0, #0
 800a58c:	f040 8243 	bne.w	800aa16 <_dtoa_r+0x956>
 800a590:	9d00      	ldr	r5, [sp, #0]
 800a592:	2331      	movs	r3, #49	; 0x31
 800a594:	f805 3b01 	strb.w	r3, [r5], #1
 800a598:	f10a 0a01 	add.w	sl, sl, #1
 800a59c:	e23f      	b.n	800aa1e <_dtoa_r+0x95e>
 800a59e:	07f2      	lsls	r2, r6, #31
 800a5a0:	d505      	bpl.n	800a5ae <_dtoa_r+0x4ee>
 800a5a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5a6:	f7f6 f84f 	bl	8000648 <__aeabi_dmul>
 800a5aa:	3501      	adds	r5, #1
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	1076      	asrs	r6, r6, #1
 800a5b0:	3708      	adds	r7, #8
 800a5b2:	e76c      	b.n	800a48e <_dtoa_r+0x3ce>
 800a5b4:	2502      	movs	r5, #2
 800a5b6:	e76f      	b.n	800a498 <_dtoa_r+0x3d8>
 800a5b8:	9b01      	ldr	r3, [sp, #4]
 800a5ba:	f8cd a01c 	str.w	sl, [sp, #28]
 800a5be:	930c      	str	r3, [sp, #48]	; 0x30
 800a5c0:	e78d      	b.n	800a4de <_dtoa_r+0x41e>
 800a5c2:	9900      	ldr	r1, [sp, #0]
 800a5c4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a5c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a5c8:	4b4e      	ldr	r3, [pc, #312]	; (800a704 <_dtoa_r+0x644>)
 800a5ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a5ce:	4401      	add	r1, r0
 800a5d0:	9102      	str	r1, [sp, #8]
 800a5d2:	9908      	ldr	r1, [sp, #32]
 800a5d4:	eeb0 8a47 	vmov.f32	s16, s14
 800a5d8:	eef0 8a67 	vmov.f32	s17, s15
 800a5dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a5e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a5e4:	2900      	cmp	r1, #0
 800a5e6:	d045      	beq.n	800a674 <_dtoa_r+0x5b4>
 800a5e8:	494c      	ldr	r1, [pc, #304]	; (800a71c <_dtoa_r+0x65c>)
 800a5ea:	2000      	movs	r0, #0
 800a5ec:	f7f6 f956 	bl	800089c <__aeabi_ddiv>
 800a5f0:	ec53 2b18 	vmov	r2, r3, d8
 800a5f4:	f7f5 fe70 	bl	80002d8 <__aeabi_dsub>
 800a5f8:	9d00      	ldr	r5, [sp, #0]
 800a5fa:	ec41 0b18 	vmov	d8, r0, r1
 800a5fe:	4639      	mov	r1, r7
 800a600:	4630      	mov	r0, r6
 800a602:	f7f6 fad1 	bl	8000ba8 <__aeabi_d2iz>
 800a606:	900c      	str	r0, [sp, #48]	; 0x30
 800a608:	f7f5 ffb4 	bl	8000574 <__aeabi_i2d>
 800a60c:	4602      	mov	r2, r0
 800a60e:	460b      	mov	r3, r1
 800a610:	4630      	mov	r0, r6
 800a612:	4639      	mov	r1, r7
 800a614:	f7f5 fe60 	bl	80002d8 <__aeabi_dsub>
 800a618:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a61a:	3330      	adds	r3, #48	; 0x30
 800a61c:	f805 3b01 	strb.w	r3, [r5], #1
 800a620:	ec53 2b18 	vmov	r2, r3, d8
 800a624:	4606      	mov	r6, r0
 800a626:	460f      	mov	r7, r1
 800a628:	f7f6 fa80 	bl	8000b2c <__aeabi_dcmplt>
 800a62c:	2800      	cmp	r0, #0
 800a62e:	d165      	bne.n	800a6fc <_dtoa_r+0x63c>
 800a630:	4632      	mov	r2, r6
 800a632:	463b      	mov	r3, r7
 800a634:	4935      	ldr	r1, [pc, #212]	; (800a70c <_dtoa_r+0x64c>)
 800a636:	2000      	movs	r0, #0
 800a638:	f7f5 fe4e 	bl	80002d8 <__aeabi_dsub>
 800a63c:	ec53 2b18 	vmov	r2, r3, d8
 800a640:	f7f6 fa74 	bl	8000b2c <__aeabi_dcmplt>
 800a644:	2800      	cmp	r0, #0
 800a646:	f040 80b9 	bne.w	800a7bc <_dtoa_r+0x6fc>
 800a64a:	9b02      	ldr	r3, [sp, #8]
 800a64c:	429d      	cmp	r5, r3
 800a64e:	f43f af75 	beq.w	800a53c <_dtoa_r+0x47c>
 800a652:	4b2f      	ldr	r3, [pc, #188]	; (800a710 <_dtoa_r+0x650>)
 800a654:	ec51 0b18 	vmov	r0, r1, d8
 800a658:	2200      	movs	r2, #0
 800a65a:	f7f5 fff5 	bl	8000648 <__aeabi_dmul>
 800a65e:	4b2c      	ldr	r3, [pc, #176]	; (800a710 <_dtoa_r+0x650>)
 800a660:	ec41 0b18 	vmov	d8, r0, r1
 800a664:	2200      	movs	r2, #0
 800a666:	4630      	mov	r0, r6
 800a668:	4639      	mov	r1, r7
 800a66a:	f7f5 ffed 	bl	8000648 <__aeabi_dmul>
 800a66e:	4606      	mov	r6, r0
 800a670:	460f      	mov	r7, r1
 800a672:	e7c4      	b.n	800a5fe <_dtoa_r+0x53e>
 800a674:	ec51 0b17 	vmov	r0, r1, d7
 800a678:	f7f5 ffe6 	bl	8000648 <__aeabi_dmul>
 800a67c:	9b02      	ldr	r3, [sp, #8]
 800a67e:	9d00      	ldr	r5, [sp, #0]
 800a680:	930c      	str	r3, [sp, #48]	; 0x30
 800a682:	ec41 0b18 	vmov	d8, r0, r1
 800a686:	4639      	mov	r1, r7
 800a688:	4630      	mov	r0, r6
 800a68a:	f7f6 fa8d 	bl	8000ba8 <__aeabi_d2iz>
 800a68e:	9011      	str	r0, [sp, #68]	; 0x44
 800a690:	f7f5 ff70 	bl	8000574 <__aeabi_i2d>
 800a694:	4602      	mov	r2, r0
 800a696:	460b      	mov	r3, r1
 800a698:	4630      	mov	r0, r6
 800a69a:	4639      	mov	r1, r7
 800a69c:	f7f5 fe1c 	bl	80002d8 <__aeabi_dsub>
 800a6a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a6a2:	3330      	adds	r3, #48	; 0x30
 800a6a4:	f805 3b01 	strb.w	r3, [r5], #1
 800a6a8:	9b02      	ldr	r3, [sp, #8]
 800a6aa:	429d      	cmp	r5, r3
 800a6ac:	4606      	mov	r6, r0
 800a6ae:	460f      	mov	r7, r1
 800a6b0:	f04f 0200 	mov.w	r2, #0
 800a6b4:	d134      	bne.n	800a720 <_dtoa_r+0x660>
 800a6b6:	4b19      	ldr	r3, [pc, #100]	; (800a71c <_dtoa_r+0x65c>)
 800a6b8:	ec51 0b18 	vmov	r0, r1, d8
 800a6bc:	f7f5 fe0e 	bl	80002dc <__adddf3>
 800a6c0:	4602      	mov	r2, r0
 800a6c2:	460b      	mov	r3, r1
 800a6c4:	4630      	mov	r0, r6
 800a6c6:	4639      	mov	r1, r7
 800a6c8:	f7f6 fa4e 	bl	8000b68 <__aeabi_dcmpgt>
 800a6cc:	2800      	cmp	r0, #0
 800a6ce:	d175      	bne.n	800a7bc <_dtoa_r+0x6fc>
 800a6d0:	ec53 2b18 	vmov	r2, r3, d8
 800a6d4:	4911      	ldr	r1, [pc, #68]	; (800a71c <_dtoa_r+0x65c>)
 800a6d6:	2000      	movs	r0, #0
 800a6d8:	f7f5 fdfe 	bl	80002d8 <__aeabi_dsub>
 800a6dc:	4602      	mov	r2, r0
 800a6de:	460b      	mov	r3, r1
 800a6e0:	4630      	mov	r0, r6
 800a6e2:	4639      	mov	r1, r7
 800a6e4:	f7f6 fa22 	bl	8000b2c <__aeabi_dcmplt>
 800a6e8:	2800      	cmp	r0, #0
 800a6ea:	f43f af27 	beq.w	800a53c <_dtoa_r+0x47c>
 800a6ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a6f0:	1e6b      	subs	r3, r5, #1
 800a6f2:	930c      	str	r3, [sp, #48]	; 0x30
 800a6f4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a6f8:	2b30      	cmp	r3, #48	; 0x30
 800a6fa:	d0f8      	beq.n	800a6ee <_dtoa_r+0x62e>
 800a6fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a700:	e04a      	b.n	800a798 <_dtoa_r+0x6d8>
 800a702:	bf00      	nop
 800a704:	0800ca00 	.word	0x0800ca00
 800a708:	0800c9d8 	.word	0x0800c9d8
 800a70c:	3ff00000 	.word	0x3ff00000
 800a710:	40240000 	.word	0x40240000
 800a714:	401c0000 	.word	0x401c0000
 800a718:	40140000 	.word	0x40140000
 800a71c:	3fe00000 	.word	0x3fe00000
 800a720:	4baf      	ldr	r3, [pc, #700]	; (800a9e0 <_dtoa_r+0x920>)
 800a722:	f7f5 ff91 	bl	8000648 <__aeabi_dmul>
 800a726:	4606      	mov	r6, r0
 800a728:	460f      	mov	r7, r1
 800a72a:	e7ac      	b.n	800a686 <_dtoa_r+0x5c6>
 800a72c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a730:	9d00      	ldr	r5, [sp, #0]
 800a732:	4642      	mov	r2, r8
 800a734:	464b      	mov	r3, r9
 800a736:	4630      	mov	r0, r6
 800a738:	4639      	mov	r1, r7
 800a73a:	f7f6 f8af 	bl	800089c <__aeabi_ddiv>
 800a73e:	f7f6 fa33 	bl	8000ba8 <__aeabi_d2iz>
 800a742:	9002      	str	r0, [sp, #8]
 800a744:	f7f5 ff16 	bl	8000574 <__aeabi_i2d>
 800a748:	4642      	mov	r2, r8
 800a74a:	464b      	mov	r3, r9
 800a74c:	f7f5 ff7c 	bl	8000648 <__aeabi_dmul>
 800a750:	4602      	mov	r2, r0
 800a752:	460b      	mov	r3, r1
 800a754:	4630      	mov	r0, r6
 800a756:	4639      	mov	r1, r7
 800a758:	f7f5 fdbe 	bl	80002d8 <__aeabi_dsub>
 800a75c:	9e02      	ldr	r6, [sp, #8]
 800a75e:	9f01      	ldr	r7, [sp, #4]
 800a760:	3630      	adds	r6, #48	; 0x30
 800a762:	f805 6b01 	strb.w	r6, [r5], #1
 800a766:	9e00      	ldr	r6, [sp, #0]
 800a768:	1bae      	subs	r6, r5, r6
 800a76a:	42b7      	cmp	r7, r6
 800a76c:	4602      	mov	r2, r0
 800a76e:	460b      	mov	r3, r1
 800a770:	d137      	bne.n	800a7e2 <_dtoa_r+0x722>
 800a772:	f7f5 fdb3 	bl	80002dc <__adddf3>
 800a776:	4642      	mov	r2, r8
 800a778:	464b      	mov	r3, r9
 800a77a:	4606      	mov	r6, r0
 800a77c:	460f      	mov	r7, r1
 800a77e:	f7f6 f9f3 	bl	8000b68 <__aeabi_dcmpgt>
 800a782:	b9c8      	cbnz	r0, 800a7b8 <_dtoa_r+0x6f8>
 800a784:	4642      	mov	r2, r8
 800a786:	464b      	mov	r3, r9
 800a788:	4630      	mov	r0, r6
 800a78a:	4639      	mov	r1, r7
 800a78c:	f7f6 f9c4 	bl	8000b18 <__aeabi_dcmpeq>
 800a790:	b110      	cbz	r0, 800a798 <_dtoa_r+0x6d8>
 800a792:	9b02      	ldr	r3, [sp, #8]
 800a794:	07d9      	lsls	r1, r3, #31
 800a796:	d40f      	bmi.n	800a7b8 <_dtoa_r+0x6f8>
 800a798:	4620      	mov	r0, r4
 800a79a:	4659      	mov	r1, fp
 800a79c:	f000 fad6 	bl	800ad4c <_Bfree>
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	702b      	strb	r3, [r5, #0]
 800a7a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a7a6:	f10a 0001 	add.w	r0, sl, #1
 800a7aa:	6018      	str	r0, [r3, #0]
 800a7ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	f43f acd8 	beq.w	800a164 <_dtoa_r+0xa4>
 800a7b4:	601d      	str	r5, [r3, #0]
 800a7b6:	e4d5      	b.n	800a164 <_dtoa_r+0xa4>
 800a7b8:	f8cd a01c 	str.w	sl, [sp, #28]
 800a7bc:	462b      	mov	r3, r5
 800a7be:	461d      	mov	r5, r3
 800a7c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a7c4:	2a39      	cmp	r2, #57	; 0x39
 800a7c6:	d108      	bne.n	800a7da <_dtoa_r+0x71a>
 800a7c8:	9a00      	ldr	r2, [sp, #0]
 800a7ca:	429a      	cmp	r2, r3
 800a7cc:	d1f7      	bne.n	800a7be <_dtoa_r+0x6fe>
 800a7ce:	9a07      	ldr	r2, [sp, #28]
 800a7d0:	9900      	ldr	r1, [sp, #0]
 800a7d2:	3201      	adds	r2, #1
 800a7d4:	9207      	str	r2, [sp, #28]
 800a7d6:	2230      	movs	r2, #48	; 0x30
 800a7d8:	700a      	strb	r2, [r1, #0]
 800a7da:	781a      	ldrb	r2, [r3, #0]
 800a7dc:	3201      	adds	r2, #1
 800a7de:	701a      	strb	r2, [r3, #0]
 800a7e0:	e78c      	b.n	800a6fc <_dtoa_r+0x63c>
 800a7e2:	4b7f      	ldr	r3, [pc, #508]	; (800a9e0 <_dtoa_r+0x920>)
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	f7f5 ff2f 	bl	8000648 <__aeabi_dmul>
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	4606      	mov	r6, r0
 800a7f0:	460f      	mov	r7, r1
 800a7f2:	f7f6 f991 	bl	8000b18 <__aeabi_dcmpeq>
 800a7f6:	2800      	cmp	r0, #0
 800a7f8:	d09b      	beq.n	800a732 <_dtoa_r+0x672>
 800a7fa:	e7cd      	b.n	800a798 <_dtoa_r+0x6d8>
 800a7fc:	9a08      	ldr	r2, [sp, #32]
 800a7fe:	2a00      	cmp	r2, #0
 800a800:	f000 80c4 	beq.w	800a98c <_dtoa_r+0x8cc>
 800a804:	9a05      	ldr	r2, [sp, #20]
 800a806:	2a01      	cmp	r2, #1
 800a808:	f300 80a8 	bgt.w	800a95c <_dtoa_r+0x89c>
 800a80c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a80e:	2a00      	cmp	r2, #0
 800a810:	f000 80a0 	beq.w	800a954 <_dtoa_r+0x894>
 800a814:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a818:	9e06      	ldr	r6, [sp, #24]
 800a81a:	4645      	mov	r5, r8
 800a81c:	9a04      	ldr	r2, [sp, #16]
 800a81e:	2101      	movs	r1, #1
 800a820:	441a      	add	r2, r3
 800a822:	4620      	mov	r0, r4
 800a824:	4498      	add	r8, r3
 800a826:	9204      	str	r2, [sp, #16]
 800a828:	f000 fb4c 	bl	800aec4 <__i2b>
 800a82c:	4607      	mov	r7, r0
 800a82e:	2d00      	cmp	r5, #0
 800a830:	dd0b      	ble.n	800a84a <_dtoa_r+0x78a>
 800a832:	9b04      	ldr	r3, [sp, #16]
 800a834:	2b00      	cmp	r3, #0
 800a836:	dd08      	ble.n	800a84a <_dtoa_r+0x78a>
 800a838:	42ab      	cmp	r3, r5
 800a83a:	9a04      	ldr	r2, [sp, #16]
 800a83c:	bfa8      	it	ge
 800a83e:	462b      	movge	r3, r5
 800a840:	eba8 0803 	sub.w	r8, r8, r3
 800a844:	1aed      	subs	r5, r5, r3
 800a846:	1ad3      	subs	r3, r2, r3
 800a848:	9304      	str	r3, [sp, #16]
 800a84a:	9b06      	ldr	r3, [sp, #24]
 800a84c:	b1fb      	cbz	r3, 800a88e <_dtoa_r+0x7ce>
 800a84e:	9b08      	ldr	r3, [sp, #32]
 800a850:	2b00      	cmp	r3, #0
 800a852:	f000 809f 	beq.w	800a994 <_dtoa_r+0x8d4>
 800a856:	2e00      	cmp	r6, #0
 800a858:	dd11      	ble.n	800a87e <_dtoa_r+0x7be>
 800a85a:	4639      	mov	r1, r7
 800a85c:	4632      	mov	r2, r6
 800a85e:	4620      	mov	r0, r4
 800a860:	f000 fbec 	bl	800b03c <__pow5mult>
 800a864:	465a      	mov	r2, fp
 800a866:	4601      	mov	r1, r0
 800a868:	4607      	mov	r7, r0
 800a86a:	4620      	mov	r0, r4
 800a86c:	f000 fb40 	bl	800aef0 <__multiply>
 800a870:	4659      	mov	r1, fp
 800a872:	9007      	str	r0, [sp, #28]
 800a874:	4620      	mov	r0, r4
 800a876:	f000 fa69 	bl	800ad4c <_Bfree>
 800a87a:	9b07      	ldr	r3, [sp, #28]
 800a87c:	469b      	mov	fp, r3
 800a87e:	9b06      	ldr	r3, [sp, #24]
 800a880:	1b9a      	subs	r2, r3, r6
 800a882:	d004      	beq.n	800a88e <_dtoa_r+0x7ce>
 800a884:	4659      	mov	r1, fp
 800a886:	4620      	mov	r0, r4
 800a888:	f000 fbd8 	bl	800b03c <__pow5mult>
 800a88c:	4683      	mov	fp, r0
 800a88e:	2101      	movs	r1, #1
 800a890:	4620      	mov	r0, r4
 800a892:	f000 fb17 	bl	800aec4 <__i2b>
 800a896:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a898:	2b00      	cmp	r3, #0
 800a89a:	4606      	mov	r6, r0
 800a89c:	dd7c      	ble.n	800a998 <_dtoa_r+0x8d8>
 800a89e:	461a      	mov	r2, r3
 800a8a0:	4601      	mov	r1, r0
 800a8a2:	4620      	mov	r0, r4
 800a8a4:	f000 fbca 	bl	800b03c <__pow5mult>
 800a8a8:	9b05      	ldr	r3, [sp, #20]
 800a8aa:	2b01      	cmp	r3, #1
 800a8ac:	4606      	mov	r6, r0
 800a8ae:	dd76      	ble.n	800a99e <_dtoa_r+0x8de>
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	9306      	str	r3, [sp, #24]
 800a8b4:	6933      	ldr	r3, [r6, #16]
 800a8b6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a8ba:	6918      	ldr	r0, [r3, #16]
 800a8bc:	f000 fab2 	bl	800ae24 <__hi0bits>
 800a8c0:	f1c0 0020 	rsb	r0, r0, #32
 800a8c4:	9b04      	ldr	r3, [sp, #16]
 800a8c6:	4418      	add	r0, r3
 800a8c8:	f010 001f 	ands.w	r0, r0, #31
 800a8cc:	f000 8086 	beq.w	800a9dc <_dtoa_r+0x91c>
 800a8d0:	f1c0 0320 	rsb	r3, r0, #32
 800a8d4:	2b04      	cmp	r3, #4
 800a8d6:	dd7f      	ble.n	800a9d8 <_dtoa_r+0x918>
 800a8d8:	f1c0 001c 	rsb	r0, r0, #28
 800a8dc:	9b04      	ldr	r3, [sp, #16]
 800a8de:	4403      	add	r3, r0
 800a8e0:	4480      	add	r8, r0
 800a8e2:	4405      	add	r5, r0
 800a8e4:	9304      	str	r3, [sp, #16]
 800a8e6:	f1b8 0f00 	cmp.w	r8, #0
 800a8ea:	dd05      	ble.n	800a8f8 <_dtoa_r+0x838>
 800a8ec:	4659      	mov	r1, fp
 800a8ee:	4642      	mov	r2, r8
 800a8f0:	4620      	mov	r0, r4
 800a8f2:	f000 fbfd 	bl	800b0f0 <__lshift>
 800a8f6:	4683      	mov	fp, r0
 800a8f8:	9b04      	ldr	r3, [sp, #16]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	dd05      	ble.n	800a90a <_dtoa_r+0x84a>
 800a8fe:	4631      	mov	r1, r6
 800a900:	461a      	mov	r2, r3
 800a902:	4620      	mov	r0, r4
 800a904:	f000 fbf4 	bl	800b0f0 <__lshift>
 800a908:	4606      	mov	r6, r0
 800a90a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d069      	beq.n	800a9e4 <_dtoa_r+0x924>
 800a910:	4631      	mov	r1, r6
 800a912:	4658      	mov	r0, fp
 800a914:	f000 fc58 	bl	800b1c8 <__mcmp>
 800a918:	2800      	cmp	r0, #0
 800a91a:	da63      	bge.n	800a9e4 <_dtoa_r+0x924>
 800a91c:	2300      	movs	r3, #0
 800a91e:	4659      	mov	r1, fp
 800a920:	220a      	movs	r2, #10
 800a922:	4620      	mov	r0, r4
 800a924:	f000 fa34 	bl	800ad90 <__multadd>
 800a928:	9b08      	ldr	r3, [sp, #32]
 800a92a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a92e:	4683      	mov	fp, r0
 800a930:	2b00      	cmp	r3, #0
 800a932:	f000 818f 	beq.w	800ac54 <_dtoa_r+0xb94>
 800a936:	4639      	mov	r1, r7
 800a938:	2300      	movs	r3, #0
 800a93a:	220a      	movs	r2, #10
 800a93c:	4620      	mov	r0, r4
 800a93e:	f000 fa27 	bl	800ad90 <__multadd>
 800a942:	f1b9 0f00 	cmp.w	r9, #0
 800a946:	4607      	mov	r7, r0
 800a948:	f300 808e 	bgt.w	800aa68 <_dtoa_r+0x9a8>
 800a94c:	9b05      	ldr	r3, [sp, #20]
 800a94e:	2b02      	cmp	r3, #2
 800a950:	dc50      	bgt.n	800a9f4 <_dtoa_r+0x934>
 800a952:	e089      	b.n	800aa68 <_dtoa_r+0x9a8>
 800a954:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a956:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a95a:	e75d      	b.n	800a818 <_dtoa_r+0x758>
 800a95c:	9b01      	ldr	r3, [sp, #4]
 800a95e:	1e5e      	subs	r6, r3, #1
 800a960:	9b06      	ldr	r3, [sp, #24]
 800a962:	42b3      	cmp	r3, r6
 800a964:	bfbf      	itttt	lt
 800a966:	9b06      	ldrlt	r3, [sp, #24]
 800a968:	9606      	strlt	r6, [sp, #24]
 800a96a:	1af2      	sublt	r2, r6, r3
 800a96c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a96e:	bfb6      	itet	lt
 800a970:	189b      	addlt	r3, r3, r2
 800a972:	1b9e      	subge	r6, r3, r6
 800a974:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a976:	9b01      	ldr	r3, [sp, #4]
 800a978:	bfb8      	it	lt
 800a97a:	2600      	movlt	r6, #0
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	bfb5      	itete	lt
 800a980:	eba8 0503 	sublt.w	r5, r8, r3
 800a984:	9b01      	ldrge	r3, [sp, #4]
 800a986:	2300      	movlt	r3, #0
 800a988:	4645      	movge	r5, r8
 800a98a:	e747      	b.n	800a81c <_dtoa_r+0x75c>
 800a98c:	9e06      	ldr	r6, [sp, #24]
 800a98e:	9f08      	ldr	r7, [sp, #32]
 800a990:	4645      	mov	r5, r8
 800a992:	e74c      	b.n	800a82e <_dtoa_r+0x76e>
 800a994:	9a06      	ldr	r2, [sp, #24]
 800a996:	e775      	b.n	800a884 <_dtoa_r+0x7c4>
 800a998:	9b05      	ldr	r3, [sp, #20]
 800a99a:	2b01      	cmp	r3, #1
 800a99c:	dc18      	bgt.n	800a9d0 <_dtoa_r+0x910>
 800a99e:	9b02      	ldr	r3, [sp, #8]
 800a9a0:	b9b3      	cbnz	r3, 800a9d0 <_dtoa_r+0x910>
 800a9a2:	9b03      	ldr	r3, [sp, #12]
 800a9a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a9a8:	b9a3      	cbnz	r3, 800a9d4 <_dtoa_r+0x914>
 800a9aa:	9b03      	ldr	r3, [sp, #12]
 800a9ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a9b0:	0d1b      	lsrs	r3, r3, #20
 800a9b2:	051b      	lsls	r3, r3, #20
 800a9b4:	b12b      	cbz	r3, 800a9c2 <_dtoa_r+0x902>
 800a9b6:	9b04      	ldr	r3, [sp, #16]
 800a9b8:	3301      	adds	r3, #1
 800a9ba:	9304      	str	r3, [sp, #16]
 800a9bc:	f108 0801 	add.w	r8, r8, #1
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	9306      	str	r3, [sp, #24]
 800a9c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	f47f af74 	bne.w	800a8b4 <_dtoa_r+0x7f4>
 800a9cc:	2001      	movs	r0, #1
 800a9ce:	e779      	b.n	800a8c4 <_dtoa_r+0x804>
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	e7f6      	b.n	800a9c2 <_dtoa_r+0x902>
 800a9d4:	9b02      	ldr	r3, [sp, #8]
 800a9d6:	e7f4      	b.n	800a9c2 <_dtoa_r+0x902>
 800a9d8:	d085      	beq.n	800a8e6 <_dtoa_r+0x826>
 800a9da:	4618      	mov	r0, r3
 800a9dc:	301c      	adds	r0, #28
 800a9de:	e77d      	b.n	800a8dc <_dtoa_r+0x81c>
 800a9e0:	40240000 	.word	0x40240000
 800a9e4:	9b01      	ldr	r3, [sp, #4]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	dc38      	bgt.n	800aa5c <_dtoa_r+0x99c>
 800a9ea:	9b05      	ldr	r3, [sp, #20]
 800a9ec:	2b02      	cmp	r3, #2
 800a9ee:	dd35      	ble.n	800aa5c <_dtoa_r+0x99c>
 800a9f0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a9f4:	f1b9 0f00 	cmp.w	r9, #0
 800a9f8:	d10d      	bne.n	800aa16 <_dtoa_r+0x956>
 800a9fa:	4631      	mov	r1, r6
 800a9fc:	464b      	mov	r3, r9
 800a9fe:	2205      	movs	r2, #5
 800aa00:	4620      	mov	r0, r4
 800aa02:	f000 f9c5 	bl	800ad90 <__multadd>
 800aa06:	4601      	mov	r1, r0
 800aa08:	4606      	mov	r6, r0
 800aa0a:	4658      	mov	r0, fp
 800aa0c:	f000 fbdc 	bl	800b1c8 <__mcmp>
 800aa10:	2800      	cmp	r0, #0
 800aa12:	f73f adbd 	bgt.w	800a590 <_dtoa_r+0x4d0>
 800aa16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa18:	9d00      	ldr	r5, [sp, #0]
 800aa1a:	ea6f 0a03 	mvn.w	sl, r3
 800aa1e:	f04f 0800 	mov.w	r8, #0
 800aa22:	4631      	mov	r1, r6
 800aa24:	4620      	mov	r0, r4
 800aa26:	f000 f991 	bl	800ad4c <_Bfree>
 800aa2a:	2f00      	cmp	r7, #0
 800aa2c:	f43f aeb4 	beq.w	800a798 <_dtoa_r+0x6d8>
 800aa30:	f1b8 0f00 	cmp.w	r8, #0
 800aa34:	d005      	beq.n	800aa42 <_dtoa_r+0x982>
 800aa36:	45b8      	cmp	r8, r7
 800aa38:	d003      	beq.n	800aa42 <_dtoa_r+0x982>
 800aa3a:	4641      	mov	r1, r8
 800aa3c:	4620      	mov	r0, r4
 800aa3e:	f000 f985 	bl	800ad4c <_Bfree>
 800aa42:	4639      	mov	r1, r7
 800aa44:	4620      	mov	r0, r4
 800aa46:	f000 f981 	bl	800ad4c <_Bfree>
 800aa4a:	e6a5      	b.n	800a798 <_dtoa_r+0x6d8>
 800aa4c:	2600      	movs	r6, #0
 800aa4e:	4637      	mov	r7, r6
 800aa50:	e7e1      	b.n	800aa16 <_dtoa_r+0x956>
 800aa52:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800aa54:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800aa58:	4637      	mov	r7, r6
 800aa5a:	e599      	b.n	800a590 <_dtoa_r+0x4d0>
 800aa5c:	9b08      	ldr	r3, [sp, #32]
 800aa5e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	f000 80fd 	beq.w	800ac62 <_dtoa_r+0xba2>
 800aa68:	2d00      	cmp	r5, #0
 800aa6a:	dd05      	ble.n	800aa78 <_dtoa_r+0x9b8>
 800aa6c:	4639      	mov	r1, r7
 800aa6e:	462a      	mov	r2, r5
 800aa70:	4620      	mov	r0, r4
 800aa72:	f000 fb3d 	bl	800b0f0 <__lshift>
 800aa76:	4607      	mov	r7, r0
 800aa78:	9b06      	ldr	r3, [sp, #24]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d05c      	beq.n	800ab38 <_dtoa_r+0xa78>
 800aa7e:	6879      	ldr	r1, [r7, #4]
 800aa80:	4620      	mov	r0, r4
 800aa82:	f000 f923 	bl	800accc <_Balloc>
 800aa86:	4605      	mov	r5, r0
 800aa88:	b928      	cbnz	r0, 800aa96 <_dtoa_r+0x9d6>
 800aa8a:	4b80      	ldr	r3, [pc, #512]	; (800ac8c <_dtoa_r+0xbcc>)
 800aa8c:	4602      	mov	r2, r0
 800aa8e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800aa92:	f7ff bb2e 	b.w	800a0f2 <_dtoa_r+0x32>
 800aa96:	693a      	ldr	r2, [r7, #16]
 800aa98:	3202      	adds	r2, #2
 800aa9a:	0092      	lsls	r2, r2, #2
 800aa9c:	f107 010c 	add.w	r1, r7, #12
 800aaa0:	300c      	adds	r0, #12
 800aaa2:	f000 f905 	bl	800acb0 <memcpy>
 800aaa6:	2201      	movs	r2, #1
 800aaa8:	4629      	mov	r1, r5
 800aaaa:	4620      	mov	r0, r4
 800aaac:	f000 fb20 	bl	800b0f0 <__lshift>
 800aab0:	9b00      	ldr	r3, [sp, #0]
 800aab2:	3301      	adds	r3, #1
 800aab4:	9301      	str	r3, [sp, #4]
 800aab6:	9b00      	ldr	r3, [sp, #0]
 800aab8:	444b      	add	r3, r9
 800aaba:	9307      	str	r3, [sp, #28]
 800aabc:	9b02      	ldr	r3, [sp, #8]
 800aabe:	f003 0301 	and.w	r3, r3, #1
 800aac2:	46b8      	mov	r8, r7
 800aac4:	9306      	str	r3, [sp, #24]
 800aac6:	4607      	mov	r7, r0
 800aac8:	9b01      	ldr	r3, [sp, #4]
 800aaca:	4631      	mov	r1, r6
 800aacc:	3b01      	subs	r3, #1
 800aace:	4658      	mov	r0, fp
 800aad0:	9302      	str	r3, [sp, #8]
 800aad2:	f7ff fa68 	bl	8009fa6 <quorem>
 800aad6:	4603      	mov	r3, r0
 800aad8:	3330      	adds	r3, #48	; 0x30
 800aada:	9004      	str	r0, [sp, #16]
 800aadc:	4641      	mov	r1, r8
 800aade:	4658      	mov	r0, fp
 800aae0:	9308      	str	r3, [sp, #32]
 800aae2:	f000 fb71 	bl	800b1c8 <__mcmp>
 800aae6:	463a      	mov	r2, r7
 800aae8:	4681      	mov	r9, r0
 800aaea:	4631      	mov	r1, r6
 800aaec:	4620      	mov	r0, r4
 800aaee:	f000 fb87 	bl	800b200 <__mdiff>
 800aaf2:	68c2      	ldr	r2, [r0, #12]
 800aaf4:	9b08      	ldr	r3, [sp, #32]
 800aaf6:	4605      	mov	r5, r0
 800aaf8:	bb02      	cbnz	r2, 800ab3c <_dtoa_r+0xa7c>
 800aafa:	4601      	mov	r1, r0
 800aafc:	4658      	mov	r0, fp
 800aafe:	f000 fb63 	bl	800b1c8 <__mcmp>
 800ab02:	9b08      	ldr	r3, [sp, #32]
 800ab04:	4602      	mov	r2, r0
 800ab06:	4629      	mov	r1, r5
 800ab08:	4620      	mov	r0, r4
 800ab0a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800ab0e:	f000 f91d 	bl	800ad4c <_Bfree>
 800ab12:	9b05      	ldr	r3, [sp, #20]
 800ab14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab16:	9d01      	ldr	r5, [sp, #4]
 800ab18:	ea43 0102 	orr.w	r1, r3, r2
 800ab1c:	9b06      	ldr	r3, [sp, #24]
 800ab1e:	430b      	orrs	r3, r1
 800ab20:	9b08      	ldr	r3, [sp, #32]
 800ab22:	d10d      	bne.n	800ab40 <_dtoa_r+0xa80>
 800ab24:	2b39      	cmp	r3, #57	; 0x39
 800ab26:	d029      	beq.n	800ab7c <_dtoa_r+0xabc>
 800ab28:	f1b9 0f00 	cmp.w	r9, #0
 800ab2c:	dd01      	ble.n	800ab32 <_dtoa_r+0xa72>
 800ab2e:	9b04      	ldr	r3, [sp, #16]
 800ab30:	3331      	adds	r3, #49	; 0x31
 800ab32:	9a02      	ldr	r2, [sp, #8]
 800ab34:	7013      	strb	r3, [r2, #0]
 800ab36:	e774      	b.n	800aa22 <_dtoa_r+0x962>
 800ab38:	4638      	mov	r0, r7
 800ab3a:	e7b9      	b.n	800aab0 <_dtoa_r+0x9f0>
 800ab3c:	2201      	movs	r2, #1
 800ab3e:	e7e2      	b.n	800ab06 <_dtoa_r+0xa46>
 800ab40:	f1b9 0f00 	cmp.w	r9, #0
 800ab44:	db06      	blt.n	800ab54 <_dtoa_r+0xa94>
 800ab46:	9905      	ldr	r1, [sp, #20]
 800ab48:	ea41 0909 	orr.w	r9, r1, r9
 800ab4c:	9906      	ldr	r1, [sp, #24]
 800ab4e:	ea59 0101 	orrs.w	r1, r9, r1
 800ab52:	d120      	bne.n	800ab96 <_dtoa_r+0xad6>
 800ab54:	2a00      	cmp	r2, #0
 800ab56:	ddec      	ble.n	800ab32 <_dtoa_r+0xa72>
 800ab58:	4659      	mov	r1, fp
 800ab5a:	2201      	movs	r2, #1
 800ab5c:	4620      	mov	r0, r4
 800ab5e:	9301      	str	r3, [sp, #4]
 800ab60:	f000 fac6 	bl	800b0f0 <__lshift>
 800ab64:	4631      	mov	r1, r6
 800ab66:	4683      	mov	fp, r0
 800ab68:	f000 fb2e 	bl	800b1c8 <__mcmp>
 800ab6c:	2800      	cmp	r0, #0
 800ab6e:	9b01      	ldr	r3, [sp, #4]
 800ab70:	dc02      	bgt.n	800ab78 <_dtoa_r+0xab8>
 800ab72:	d1de      	bne.n	800ab32 <_dtoa_r+0xa72>
 800ab74:	07da      	lsls	r2, r3, #31
 800ab76:	d5dc      	bpl.n	800ab32 <_dtoa_r+0xa72>
 800ab78:	2b39      	cmp	r3, #57	; 0x39
 800ab7a:	d1d8      	bne.n	800ab2e <_dtoa_r+0xa6e>
 800ab7c:	9a02      	ldr	r2, [sp, #8]
 800ab7e:	2339      	movs	r3, #57	; 0x39
 800ab80:	7013      	strb	r3, [r2, #0]
 800ab82:	462b      	mov	r3, r5
 800ab84:	461d      	mov	r5, r3
 800ab86:	3b01      	subs	r3, #1
 800ab88:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ab8c:	2a39      	cmp	r2, #57	; 0x39
 800ab8e:	d050      	beq.n	800ac32 <_dtoa_r+0xb72>
 800ab90:	3201      	adds	r2, #1
 800ab92:	701a      	strb	r2, [r3, #0]
 800ab94:	e745      	b.n	800aa22 <_dtoa_r+0x962>
 800ab96:	2a00      	cmp	r2, #0
 800ab98:	dd03      	ble.n	800aba2 <_dtoa_r+0xae2>
 800ab9a:	2b39      	cmp	r3, #57	; 0x39
 800ab9c:	d0ee      	beq.n	800ab7c <_dtoa_r+0xabc>
 800ab9e:	3301      	adds	r3, #1
 800aba0:	e7c7      	b.n	800ab32 <_dtoa_r+0xa72>
 800aba2:	9a01      	ldr	r2, [sp, #4]
 800aba4:	9907      	ldr	r1, [sp, #28]
 800aba6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800abaa:	428a      	cmp	r2, r1
 800abac:	d02a      	beq.n	800ac04 <_dtoa_r+0xb44>
 800abae:	4659      	mov	r1, fp
 800abb0:	2300      	movs	r3, #0
 800abb2:	220a      	movs	r2, #10
 800abb4:	4620      	mov	r0, r4
 800abb6:	f000 f8eb 	bl	800ad90 <__multadd>
 800abba:	45b8      	cmp	r8, r7
 800abbc:	4683      	mov	fp, r0
 800abbe:	f04f 0300 	mov.w	r3, #0
 800abc2:	f04f 020a 	mov.w	r2, #10
 800abc6:	4641      	mov	r1, r8
 800abc8:	4620      	mov	r0, r4
 800abca:	d107      	bne.n	800abdc <_dtoa_r+0xb1c>
 800abcc:	f000 f8e0 	bl	800ad90 <__multadd>
 800abd0:	4680      	mov	r8, r0
 800abd2:	4607      	mov	r7, r0
 800abd4:	9b01      	ldr	r3, [sp, #4]
 800abd6:	3301      	adds	r3, #1
 800abd8:	9301      	str	r3, [sp, #4]
 800abda:	e775      	b.n	800aac8 <_dtoa_r+0xa08>
 800abdc:	f000 f8d8 	bl	800ad90 <__multadd>
 800abe0:	4639      	mov	r1, r7
 800abe2:	4680      	mov	r8, r0
 800abe4:	2300      	movs	r3, #0
 800abe6:	220a      	movs	r2, #10
 800abe8:	4620      	mov	r0, r4
 800abea:	f000 f8d1 	bl	800ad90 <__multadd>
 800abee:	4607      	mov	r7, r0
 800abf0:	e7f0      	b.n	800abd4 <_dtoa_r+0xb14>
 800abf2:	f1b9 0f00 	cmp.w	r9, #0
 800abf6:	9a00      	ldr	r2, [sp, #0]
 800abf8:	bfcc      	ite	gt
 800abfa:	464d      	movgt	r5, r9
 800abfc:	2501      	movle	r5, #1
 800abfe:	4415      	add	r5, r2
 800ac00:	f04f 0800 	mov.w	r8, #0
 800ac04:	4659      	mov	r1, fp
 800ac06:	2201      	movs	r2, #1
 800ac08:	4620      	mov	r0, r4
 800ac0a:	9301      	str	r3, [sp, #4]
 800ac0c:	f000 fa70 	bl	800b0f0 <__lshift>
 800ac10:	4631      	mov	r1, r6
 800ac12:	4683      	mov	fp, r0
 800ac14:	f000 fad8 	bl	800b1c8 <__mcmp>
 800ac18:	2800      	cmp	r0, #0
 800ac1a:	dcb2      	bgt.n	800ab82 <_dtoa_r+0xac2>
 800ac1c:	d102      	bne.n	800ac24 <_dtoa_r+0xb64>
 800ac1e:	9b01      	ldr	r3, [sp, #4]
 800ac20:	07db      	lsls	r3, r3, #31
 800ac22:	d4ae      	bmi.n	800ab82 <_dtoa_r+0xac2>
 800ac24:	462b      	mov	r3, r5
 800ac26:	461d      	mov	r5, r3
 800ac28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac2c:	2a30      	cmp	r2, #48	; 0x30
 800ac2e:	d0fa      	beq.n	800ac26 <_dtoa_r+0xb66>
 800ac30:	e6f7      	b.n	800aa22 <_dtoa_r+0x962>
 800ac32:	9a00      	ldr	r2, [sp, #0]
 800ac34:	429a      	cmp	r2, r3
 800ac36:	d1a5      	bne.n	800ab84 <_dtoa_r+0xac4>
 800ac38:	f10a 0a01 	add.w	sl, sl, #1
 800ac3c:	2331      	movs	r3, #49	; 0x31
 800ac3e:	e779      	b.n	800ab34 <_dtoa_r+0xa74>
 800ac40:	4b13      	ldr	r3, [pc, #76]	; (800ac90 <_dtoa_r+0xbd0>)
 800ac42:	f7ff baaf 	b.w	800a1a4 <_dtoa_r+0xe4>
 800ac46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	f47f aa86 	bne.w	800a15a <_dtoa_r+0x9a>
 800ac4e:	4b11      	ldr	r3, [pc, #68]	; (800ac94 <_dtoa_r+0xbd4>)
 800ac50:	f7ff baa8 	b.w	800a1a4 <_dtoa_r+0xe4>
 800ac54:	f1b9 0f00 	cmp.w	r9, #0
 800ac58:	dc03      	bgt.n	800ac62 <_dtoa_r+0xba2>
 800ac5a:	9b05      	ldr	r3, [sp, #20]
 800ac5c:	2b02      	cmp	r3, #2
 800ac5e:	f73f aec9 	bgt.w	800a9f4 <_dtoa_r+0x934>
 800ac62:	9d00      	ldr	r5, [sp, #0]
 800ac64:	4631      	mov	r1, r6
 800ac66:	4658      	mov	r0, fp
 800ac68:	f7ff f99d 	bl	8009fa6 <quorem>
 800ac6c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ac70:	f805 3b01 	strb.w	r3, [r5], #1
 800ac74:	9a00      	ldr	r2, [sp, #0]
 800ac76:	1aaa      	subs	r2, r5, r2
 800ac78:	4591      	cmp	r9, r2
 800ac7a:	ddba      	ble.n	800abf2 <_dtoa_r+0xb32>
 800ac7c:	4659      	mov	r1, fp
 800ac7e:	2300      	movs	r3, #0
 800ac80:	220a      	movs	r2, #10
 800ac82:	4620      	mov	r0, r4
 800ac84:	f000 f884 	bl	800ad90 <__multadd>
 800ac88:	4683      	mov	fp, r0
 800ac8a:	e7eb      	b.n	800ac64 <_dtoa_r+0xba4>
 800ac8c:	0800c967 	.word	0x0800c967
 800ac90:	0800c8c0 	.word	0x0800c8c0
 800ac94:	0800c8e4 	.word	0x0800c8e4

0800ac98 <_localeconv_r>:
 800ac98:	4800      	ldr	r0, [pc, #0]	; (800ac9c <_localeconv_r+0x4>)
 800ac9a:	4770      	bx	lr
 800ac9c:	20000164 	.word	0x20000164

0800aca0 <malloc>:
 800aca0:	4b02      	ldr	r3, [pc, #8]	; (800acac <malloc+0xc>)
 800aca2:	4601      	mov	r1, r0
 800aca4:	6818      	ldr	r0, [r3, #0]
 800aca6:	f000 bbef 	b.w	800b488 <_malloc_r>
 800acaa:	bf00      	nop
 800acac:	20000010 	.word	0x20000010

0800acb0 <memcpy>:
 800acb0:	440a      	add	r2, r1
 800acb2:	4291      	cmp	r1, r2
 800acb4:	f100 33ff 	add.w	r3, r0, #4294967295
 800acb8:	d100      	bne.n	800acbc <memcpy+0xc>
 800acba:	4770      	bx	lr
 800acbc:	b510      	push	{r4, lr}
 800acbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800acc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800acc6:	4291      	cmp	r1, r2
 800acc8:	d1f9      	bne.n	800acbe <memcpy+0xe>
 800acca:	bd10      	pop	{r4, pc}

0800accc <_Balloc>:
 800accc:	b570      	push	{r4, r5, r6, lr}
 800acce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800acd0:	4604      	mov	r4, r0
 800acd2:	460d      	mov	r5, r1
 800acd4:	b976      	cbnz	r6, 800acf4 <_Balloc+0x28>
 800acd6:	2010      	movs	r0, #16
 800acd8:	f7ff ffe2 	bl	800aca0 <malloc>
 800acdc:	4602      	mov	r2, r0
 800acde:	6260      	str	r0, [r4, #36]	; 0x24
 800ace0:	b920      	cbnz	r0, 800acec <_Balloc+0x20>
 800ace2:	4b18      	ldr	r3, [pc, #96]	; (800ad44 <_Balloc+0x78>)
 800ace4:	4818      	ldr	r0, [pc, #96]	; (800ad48 <_Balloc+0x7c>)
 800ace6:	2166      	movs	r1, #102	; 0x66
 800ace8:	f000 fd94 	bl	800b814 <__assert_func>
 800acec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800acf0:	6006      	str	r6, [r0, #0]
 800acf2:	60c6      	str	r6, [r0, #12]
 800acf4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800acf6:	68f3      	ldr	r3, [r6, #12]
 800acf8:	b183      	cbz	r3, 800ad1c <_Balloc+0x50>
 800acfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800acfc:	68db      	ldr	r3, [r3, #12]
 800acfe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ad02:	b9b8      	cbnz	r0, 800ad34 <_Balloc+0x68>
 800ad04:	2101      	movs	r1, #1
 800ad06:	fa01 f605 	lsl.w	r6, r1, r5
 800ad0a:	1d72      	adds	r2, r6, #5
 800ad0c:	0092      	lsls	r2, r2, #2
 800ad0e:	4620      	mov	r0, r4
 800ad10:	f000 fb5a 	bl	800b3c8 <_calloc_r>
 800ad14:	b160      	cbz	r0, 800ad30 <_Balloc+0x64>
 800ad16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ad1a:	e00e      	b.n	800ad3a <_Balloc+0x6e>
 800ad1c:	2221      	movs	r2, #33	; 0x21
 800ad1e:	2104      	movs	r1, #4
 800ad20:	4620      	mov	r0, r4
 800ad22:	f000 fb51 	bl	800b3c8 <_calloc_r>
 800ad26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad28:	60f0      	str	r0, [r6, #12]
 800ad2a:	68db      	ldr	r3, [r3, #12]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d1e4      	bne.n	800acfa <_Balloc+0x2e>
 800ad30:	2000      	movs	r0, #0
 800ad32:	bd70      	pop	{r4, r5, r6, pc}
 800ad34:	6802      	ldr	r2, [r0, #0]
 800ad36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ad40:	e7f7      	b.n	800ad32 <_Balloc+0x66>
 800ad42:	bf00      	nop
 800ad44:	0800c8f1 	.word	0x0800c8f1
 800ad48:	0800c978 	.word	0x0800c978

0800ad4c <_Bfree>:
 800ad4c:	b570      	push	{r4, r5, r6, lr}
 800ad4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ad50:	4605      	mov	r5, r0
 800ad52:	460c      	mov	r4, r1
 800ad54:	b976      	cbnz	r6, 800ad74 <_Bfree+0x28>
 800ad56:	2010      	movs	r0, #16
 800ad58:	f7ff ffa2 	bl	800aca0 <malloc>
 800ad5c:	4602      	mov	r2, r0
 800ad5e:	6268      	str	r0, [r5, #36]	; 0x24
 800ad60:	b920      	cbnz	r0, 800ad6c <_Bfree+0x20>
 800ad62:	4b09      	ldr	r3, [pc, #36]	; (800ad88 <_Bfree+0x3c>)
 800ad64:	4809      	ldr	r0, [pc, #36]	; (800ad8c <_Bfree+0x40>)
 800ad66:	218a      	movs	r1, #138	; 0x8a
 800ad68:	f000 fd54 	bl	800b814 <__assert_func>
 800ad6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ad70:	6006      	str	r6, [r0, #0]
 800ad72:	60c6      	str	r6, [r0, #12]
 800ad74:	b13c      	cbz	r4, 800ad86 <_Bfree+0x3a>
 800ad76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ad78:	6862      	ldr	r2, [r4, #4]
 800ad7a:	68db      	ldr	r3, [r3, #12]
 800ad7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ad80:	6021      	str	r1, [r4, #0]
 800ad82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ad86:	bd70      	pop	{r4, r5, r6, pc}
 800ad88:	0800c8f1 	.word	0x0800c8f1
 800ad8c:	0800c978 	.word	0x0800c978

0800ad90 <__multadd>:
 800ad90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad94:	690e      	ldr	r6, [r1, #16]
 800ad96:	4607      	mov	r7, r0
 800ad98:	4698      	mov	r8, r3
 800ad9a:	460c      	mov	r4, r1
 800ad9c:	f101 0014 	add.w	r0, r1, #20
 800ada0:	2300      	movs	r3, #0
 800ada2:	6805      	ldr	r5, [r0, #0]
 800ada4:	b2a9      	uxth	r1, r5
 800ada6:	fb02 8101 	mla	r1, r2, r1, r8
 800adaa:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800adae:	0c2d      	lsrs	r5, r5, #16
 800adb0:	fb02 c505 	mla	r5, r2, r5, ip
 800adb4:	b289      	uxth	r1, r1
 800adb6:	3301      	adds	r3, #1
 800adb8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800adbc:	429e      	cmp	r6, r3
 800adbe:	f840 1b04 	str.w	r1, [r0], #4
 800adc2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800adc6:	dcec      	bgt.n	800ada2 <__multadd+0x12>
 800adc8:	f1b8 0f00 	cmp.w	r8, #0
 800adcc:	d022      	beq.n	800ae14 <__multadd+0x84>
 800adce:	68a3      	ldr	r3, [r4, #8]
 800add0:	42b3      	cmp	r3, r6
 800add2:	dc19      	bgt.n	800ae08 <__multadd+0x78>
 800add4:	6861      	ldr	r1, [r4, #4]
 800add6:	4638      	mov	r0, r7
 800add8:	3101      	adds	r1, #1
 800adda:	f7ff ff77 	bl	800accc <_Balloc>
 800adde:	4605      	mov	r5, r0
 800ade0:	b928      	cbnz	r0, 800adee <__multadd+0x5e>
 800ade2:	4602      	mov	r2, r0
 800ade4:	4b0d      	ldr	r3, [pc, #52]	; (800ae1c <__multadd+0x8c>)
 800ade6:	480e      	ldr	r0, [pc, #56]	; (800ae20 <__multadd+0x90>)
 800ade8:	21b5      	movs	r1, #181	; 0xb5
 800adea:	f000 fd13 	bl	800b814 <__assert_func>
 800adee:	6922      	ldr	r2, [r4, #16]
 800adf0:	3202      	adds	r2, #2
 800adf2:	f104 010c 	add.w	r1, r4, #12
 800adf6:	0092      	lsls	r2, r2, #2
 800adf8:	300c      	adds	r0, #12
 800adfa:	f7ff ff59 	bl	800acb0 <memcpy>
 800adfe:	4621      	mov	r1, r4
 800ae00:	4638      	mov	r0, r7
 800ae02:	f7ff ffa3 	bl	800ad4c <_Bfree>
 800ae06:	462c      	mov	r4, r5
 800ae08:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800ae0c:	3601      	adds	r6, #1
 800ae0e:	f8c3 8014 	str.w	r8, [r3, #20]
 800ae12:	6126      	str	r6, [r4, #16]
 800ae14:	4620      	mov	r0, r4
 800ae16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae1a:	bf00      	nop
 800ae1c:	0800c967 	.word	0x0800c967
 800ae20:	0800c978 	.word	0x0800c978

0800ae24 <__hi0bits>:
 800ae24:	0c03      	lsrs	r3, r0, #16
 800ae26:	041b      	lsls	r3, r3, #16
 800ae28:	b9d3      	cbnz	r3, 800ae60 <__hi0bits+0x3c>
 800ae2a:	0400      	lsls	r0, r0, #16
 800ae2c:	2310      	movs	r3, #16
 800ae2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ae32:	bf04      	itt	eq
 800ae34:	0200      	lsleq	r0, r0, #8
 800ae36:	3308      	addeq	r3, #8
 800ae38:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ae3c:	bf04      	itt	eq
 800ae3e:	0100      	lsleq	r0, r0, #4
 800ae40:	3304      	addeq	r3, #4
 800ae42:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ae46:	bf04      	itt	eq
 800ae48:	0080      	lsleq	r0, r0, #2
 800ae4a:	3302      	addeq	r3, #2
 800ae4c:	2800      	cmp	r0, #0
 800ae4e:	db05      	blt.n	800ae5c <__hi0bits+0x38>
 800ae50:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ae54:	f103 0301 	add.w	r3, r3, #1
 800ae58:	bf08      	it	eq
 800ae5a:	2320      	moveq	r3, #32
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	4770      	bx	lr
 800ae60:	2300      	movs	r3, #0
 800ae62:	e7e4      	b.n	800ae2e <__hi0bits+0xa>

0800ae64 <__lo0bits>:
 800ae64:	6803      	ldr	r3, [r0, #0]
 800ae66:	f013 0207 	ands.w	r2, r3, #7
 800ae6a:	4601      	mov	r1, r0
 800ae6c:	d00b      	beq.n	800ae86 <__lo0bits+0x22>
 800ae6e:	07da      	lsls	r2, r3, #31
 800ae70:	d424      	bmi.n	800aebc <__lo0bits+0x58>
 800ae72:	0798      	lsls	r0, r3, #30
 800ae74:	bf49      	itett	mi
 800ae76:	085b      	lsrmi	r3, r3, #1
 800ae78:	089b      	lsrpl	r3, r3, #2
 800ae7a:	2001      	movmi	r0, #1
 800ae7c:	600b      	strmi	r3, [r1, #0]
 800ae7e:	bf5c      	itt	pl
 800ae80:	600b      	strpl	r3, [r1, #0]
 800ae82:	2002      	movpl	r0, #2
 800ae84:	4770      	bx	lr
 800ae86:	b298      	uxth	r0, r3
 800ae88:	b9b0      	cbnz	r0, 800aeb8 <__lo0bits+0x54>
 800ae8a:	0c1b      	lsrs	r3, r3, #16
 800ae8c:	2010      	movs	r0, #16
 800ae8e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ae92:	bf04      	itt	eq
 800ae94:	0a1b      	lsreq	r3, r3, #8
 800ae96:	3008      	addeq	r0, #8
 800ae98:	071a      	lsls	r2, r3, #28
 800ae9a:	bf04      	itt	eq
 800ae9c:	091b      	lsreq	r3, r3, #4
 800ae9e:	3004      	addeq	r0, #4
 800aea0:	079a      	lsls	r2, r3, #30
 800aea2:	bf04      	itt	eq
 800aea4:	089b      	lsreq	r3, r3, #2
 800aea6:	3002      	addeq	r0, #2
 800aea8:	07da      	lsls	r2, r3, #31
 800aeaa:	d403      	bmi.n	800aeb4 <__lo0bits+0x50>
 800aeac:	085b      	lsrs	r3, r3, #1
 800aeae:	f100 0001 	add.w	r0, r0, #1
 800aeb2:	d005      	beq.n	800aec0 <__lo0bits+0x5c>
 800aeb4:	600b      	str	r3, [r1, #0]
 800aeb6:	4770      	bx	lr
 800aeb8:	4610      	mov	r0, r2
 800aeba:	e7e8      	b.n	800ae8e <__lo0bits+0x2a>
 800aebc:	2000      	movs	r0, #0
 800aebe:	4770      	bx	lr
 800aec0:	2020      	movs	r0, #32
 800aec2:	4770      	bx	lr

0800aec4 <__i2b>:
 800aec4:	b510      	push	{r4, lr}
 800aec6:	460c      	mov	r4, r1
 800aec8:	2101      	movs	r1, #1
 800aeca:	f7ff feff 	bl	800accc <_Balloc>
 800aece:	4602      	mov	r2, r0
 800aed0:	b928      	cbnz	r0, 800aede <__i2b+0x1a>
 800aed2:	4b05      	ldr	r3, [pc, #20]	; (800aee8 <__i2b+0x24>)
 800aed4:	4805      	ldr	r0, [pc, #20]	; (800aeec <__i2b+0x28>)
 800aed6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800aeda:	f000 fc9b 	bl	800b814 <__assert_func>
 800aede:	2301      	movs	r3, #1
 800aee0:	6144      	str	r4, [r0, #20]
 800aee2:	6103      	str	r3, [r0, #16]
 800aee4:	bd10      	pop	{r4, pc}
 800aee6:	bf00      	nop
 800aee8:	0800c967 	.word	0x0800c967
 800aeec:	0800c978 	.word	0x0800c978

0800aef0 <__multiply>:
 800aef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aef4:	4614      	mov	r4, r2
 800aef6:	690a      	ldr	r2, [r1, #16]
 800aef8:	6923      	ldr	r3, [r4, #16]
 800aefa:	429a      	cmp	r2, r3
 800aefc:	bfb8      	it	lt
 800aefe:	460b      	movlt	r3, r1
 800af00:	460d      	mov	r5, r1
 800af02:	bfbc      	itt	lt
 800af04:	4625      	movlt	r5, r4
 800af06:	461c      	movlt	r4, r3
 800af08:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800af0c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800af10:	68ab      	ldr	r3, [r5, #8]
 800af12:	6869      	ldr	r1, [r5, #4]
 800af14:	eb0a 0709 	add.w	r7, sl, r9
 800af18:	42bb      	cmp	r3, r7
 800af1a:	b085      	sub	sp, #20
 800af1c:	bfb8      	it	lt
 800af1e:	3101      	addlt	r1, #1
 800af20:	f7ff fed4 	bl	800accc <_Balloc>
 800af24:	b930      	cbnz	r0, 800af34 <__multiply+0x44>
 800af26:	4602      	mov	r2, r0
 800af28:	4b42      	ldr	r3, [pc, #264]	; (800b034 <__multiply+0x144>)
 800af2a:	4843      	ldr	r0, [pc, #268]	; (800b038 <__multiply+0x148>)
 800af2c:	f240 115d 	movw	r1, #349	; 0x15d
 800af30:	f000 fc70 	bl	800b814 <__assert_func>
 800af34:	f100 0614 	add.w	r6, r0, #20
 800af38:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800af3c:	4633      	mov	r3, r6
 800af3e:	2200      	movs	r2, #0
 800af40:	4543      	cmp	r3, r8
 800af42:	d31e      	bcc.n	800af82 <__multiply+0x92>
 800af44:	f105 0c14 	add.w	ip, r5, #20
 800af48:	f104 0314 	add.w	r3, r4, #20
 800af4c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800af50:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800af54:	9202      	str	r2, [sp, #8]
 800af56:	ebac 0205 	sub.w	r2, ip, r5
 800af5a:	3a15      	subs	r2, #21
 800af5c:	f022 0203 	bic.w	r2, r2, #3
 800af60:	3204      	adds	r2, #4
 800af62:	f105 0115 	add.w	r1, r5, #21
 800af66:	458c      	cmp	ip, r1
 800af68:	bf38      	it	cc
 800af6a:	2204      	movcc	r2, #4
 800af6c:	9201      	str	r2, [sp, #4]
 800af6e:	9a02      	ldr	r2, [sp, #8]
 800af70:	9303      	str	r3, [sp, #12]
 800af72:	429a      	cmp	r2, r3
 800af74:	d808      	bhi.n	800af88 <__multiply+0x98>
 800af76:	2f00      	cmp	r7, #0
 800af78:	dc55      	bgt.n	800b026 <__multiply+0x136>
 800af7a:	6107      	str	r7, [r0, #16]
 800af7c:	b005      	add	sp, #20
 800af7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af82:	f843 2b04 	str.w	r2, [r3], #4
 800af86:	e7db      	b.n	800af40 <__multiply+0x50>
 800af88:	f8b3 a000 	ldrh.w	sl, [r3]
 800af8c:	f1ba 0f00 	cmp.w	sl, #0
 800af90:	d020      	beq.n	800afd4 <__multiply+0xe4>
 800af92:	f105 0e14 	add.w	lr, r5, #20
 800af96:	46b1      	mov	r9, r6
 800af98:	2200      	movs	r2, #0
 800af9a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800af9e:	f8d9 b000 	ldr.w	fp, [r9]
 800afa2:	b2a1      	uxth	r1, r4
 800afa4:	fa1f fb8b 	uxth.w	fp, fp
 800afa8:	fb0a b101 	mla	r1, sl, r1, fp
 800afac:	4411      	add	r1, r2
 800afae:	f8d9 2000 	ldr.w	r2, [r9]
 800afb2:	0c24      	lsrs	r4, r4, #16
 800afb4:	0c12      	lsrs	r2, r2, #16
 800afb6:	fb0a 2404 	mla	r4, sl, r4, r2
 800afba:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800afbe:	b289      	uxth	r1, r1
 800afc0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800afc4:	45f4      	cmp	ip, lr
 800afc6:	f849 1b04 	str.w	r1, [r9], #4
 800afca:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800afce:	d8e4      	bhi.n	800af9a <__multiply+0xaa>
 800afd0:	9901      	ldr	r1, [sp, #4]
 800afd2:	5072      	str	r2, [r6, r1]
 800afd4:	9a03      	ldr	r2, [sp, #12]
 800afd6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800afda:	3304      	adds	r3, #4
 800afdc:	f1b9 0f00 	cmp.w	r9, #0
 800afe0:	d01f      	beq.n	800b022 <__multiply+0x132>
 800afe2:	6834      	ldr	r4, [r6, #0]
 800afe4:	f105 0114 	add.w	r1, r5, #20
 800afe8:	46b6      	mov	lr, r6
 800afea:	f04f 0a00 	mov.w	sl, #0
 800afee:	880a      	ldrh	r2, [r1, #0]
 800aff0:	f8be b002 	ldrh.w	fp, [lr, #2]
 800aff4:	fb09 b202 	mla	r2, r9, r2, fp
 800aff8:	4492      	add	sl, r2
 800affa:	b2a4      	uxth	r4, r4
 800affc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b000:	f84e 4b04 	str.w	r4, [lr], #4
 800b004:	f851 4b04 	ldr.w	r4, [r1], #4
 800b008:	f8be 2000 	ldrh.w	r2, [lr]
 800b00c:	0c24      	lsrs	r4, r4, #16
 800b00e:	fb09 2404 	mla	r4, r9, r4, r2
 800b012:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b016:	458c      	cmp	ip, r1
 800b018:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b01c:	d8e7      	bhi.n	800afee <__multiply+0xfe>
 800b01e:	9a01      	ldr	r2, [sp, #4]
 800b020:	50b4      	str	r4, [r6, r2]
 800b022:	3604      	adds	r6, #4
 800b024:	e7a3      	b.n	800af6e <__multiply+0x7e>
 800b026:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d1a5      	bne.n	800af7a <__multiply+0x8a>
 800b02e:	3f01      	subs	r7, #1
 800b030:	e7a1      	b.n	800af76 <__multiply+0x86>
 800b032:	bf00      	nop
 800b034:	0800c967 	.word	0x0800c967
 800b038:	0800c978 	.word	0x0800c978

0800b03c <__pow5mult>:
 800b03c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b040:	4615      	mov	r5, r2
 800b042:	f012 0203 	ands.w	r2, r2, #3
 800b046:	4606      	mov	r6, r0
 800b048:	460f      	mov	r7, r1
 800b04a:	d007      	beq.n	800b05c <__pow5mult+0x20>
 800b04c:	4c25      	ldr	r4, [pc, #148]	; (800b0e4 <__pow5mult+0xa8>)
 800b04e:	3a01      	subs	r2, #1
 800b050:	2300      	movs	r3, #0
 800b052:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b056:	f7ff fe9b 	bl	800ad90 <__multadd>
 800b05a:	4607      	mov	r7, r0
 800b05c:	10ad      	asrs	r5, r5, #2
 800b05e:	d03d      	beq.n	800b0dc <__pow5mult+0xa0>
 800b060:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b062:	b97c      	cbnz	r4, 800b084 <__pow5mult+0x48>
 800b064:	2010      	movs	r0, #16
 800b066:	f7ff fe1b 	bl	800aca0 <malloc>
 800b06a:	4602      	mov	r2, r0
 800b06c:	6270      	str	r0, [r6, #36]	; 0x24
 800b06e:	b928      	cbnz	r0, 800b07c <__pow5mult+0x40>
 800b070:	4b1d      	ldr	r3, [pc, #116]	; (800b0e8 <__pow5mult+0xac>)
 800b072:	481e      	ldr	r0, [pc, #120]	; (800b0ec <__pow5mult+0xb0>)
 800b074:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b078:	f000 fbcc 	bl	800b814 <__assert_func>
 800b07c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b080:	6004      	str	r4, [r0, #0]
 800b082:	60c4      	str	r4, [r0, #12]
 800b084:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b088:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b08c:	b94c      	cbnz	r4, 800b0a2 <__pow5mult+0x66>
 800b08e:	f240 2171 	movw	r1, #625	; 0x271
 800b092:	4630      	mov	r0, r6
 800b094:	f7ff ff16 	bl	800aec4 <__i2b>
 800b098:	2300      	movs	r3, #0
 800b09a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b09e:	4604      	mov	r4, r0
 800b0a0:	6003      	str	r3, [r0, #0]
 800b0a2:	f04f 0900 	mov.w	r9, #0
 800b0a6:	07eb      	lsls	r3, r5, #31
 800b0a8:	d50a      	bpl.n	800b0c0 <__pow5mult+0x84>
 800b0aa:	4639      	mov	r1, r7
 800b0ac:	4622      	mov	r2, r4
 800b0ae:	4630      	mov	r0, r6
 800b0b0:	f7ff ff1e 	bl	800aef0 <__multiply>
 800b0b4:	4639      	mov	r1, r7
 800b0b6:	4680      	mov	r8, r0
 800b0b8:	4630      	mov	r0, r6
 800b0ba:	f7ff fe47 	bl	800ad4c <_Bfree>
 800b0be:	4647      	mov	r7, r8
 800b0c0:	106d      	asrs	r5, r5, #1
 800b0c2:	d00b      	beq.n	800b0dc <__pow5mult+0xa0>
 800b0c4:	6820      	ldr	r0, [r4, #0]
 800b0c6:	b938      	cbnz	r0, 800b0d8 <__pow5mult+0x9c>
 800b0c8:	4622      	mov	r2, r4
 800b0ca:	4621      	mov	r1, r4
 800b0cc:	4630      	mov	r0, r6
 800b0ce:	f7ff ff0f 	bl	800aef0 <__multiply>
 800b0d2:	6020      	str	r0, [r4, #0]
 800b0d4:	f8c0 9000 	str.w	r9, [r0]
 800b0d8:	4604      	mov	r4, r0
 800b0da:	e7e4      	b.n	800b0a6 <__pow5mult+0x6a>
 800b0dc:	4638      	mov	r0, r7
 800b0de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0e2:	bf00      	nop
 800b0e4:	0800cac8 	.word	0x0800cac8
 800b0e8:	0800c8f1 	.word	0x0800c8f1
 800b0ec:	0800c978 	.word	0x0800c978

0800b0f0 <__lshift>:
 800b0f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0f4:	460c      	mov	r4, r1
 800b0f6:	6849      	ldr	r1, [r1, #4]
 800b0f8:	6923      	ldr	r3, [r4, #16]
 800b0fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b0fe:	68a3      	ldr	r3, [r4, #8]
 800b100:	4607      	mov	r7, r0
 800b102:	4691      	mov	r9, r2
 800b104:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b108:	f108 0601 	add.w	r6, r8, #1
 800b10c:	42b3      	cmp	r3, r6
 800b10e:	db0b      	blt.n	800b128 <__lshift+0x38>
 800b110:	4638      	mov	r0, r7
 800b112:	f7ff fddb 	bl	800accc <_Balloc>
 800b116:	4605      	mov	r5, r0
 800b118:	b948      	cbnz	r0, 800b12e <__lshift+0x3e>
 800b11a:	4602      	mov	r2, r0
 800b11c:	4b28      	ldr	r3, [pc, #160]	; (800b1c0 <__lshift+0xd0>)
 800b11e:	4829      	ldr	r0, [pc, #164]	; (800b1c4 <__lshift+0xd4>)
 800b120:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b124:	f000 fb76 	bl	800b814 <__assert_func>
 800b128:	3101      	adds	r1, #1
 800b12a:	005b      	lsls	r3, r3, #1
 800b12c:	e7ee      	b.n	800b10c <__lshift+0x1c>
 800b12e:	2300      	movs	r3, #0
 800b130:	f100 0114 	add.w	r1, r0, #20
 800b134:	f100 0210 	add.w	r2, r0, #16
 800b138:	4618      	mov	r0, r3
 800b13a:	4553      	cmp	r3, sl
 800b13c:	db33      	blt.n	800b1a6 <__lshift+0xb6>
 800b13e:	6920      	ldr	r0, [r4, #16]
 800b140:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b144:	f104 0314 	add.w	r3, r4, #20
 800b148:	f019 091f 	ands.w	r9, r9, #31
 800b14c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b150:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b154:	d02b      	beq.n	800b1ae <__lshift+0xbe>
 800b156:	f1c9 0e20 	rsb	lr, r9, #32
 800b15a:	468a      	mov	sl, r1
 800b15c:	2200      	movs	r2, #0
 800b15e:	6818      	ldr	r0, [r3, #0]
 800b160:	fa00 f009 	lsl.w	r0, r0, r9
 800b164:	4302      	orrs	r2, r0
 800b166:	f84a 2b04 	str.w	r2, [sl], #4
 800b16a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b16e:	459c      	cmp	ip, r3
 800b170:	fa22 f20e 	lsr.w	r2, r2, lr
 800b174:	d8f3      	bhi.n	800b15e <__lshift+0x6e>
 800b176:	ebac 0304 	sub.w	r3, ip, r4
 800b17a:	3b15      	subs	r3, #21
 800b17c:	f023 0303 	bic.w	r3, r3, #3
 800b180:	3304      	adds	r3, #4
 800b182:	f104 0015 	add.w	r0, r4, #21
 800b186:	4584      	cmp	ip, r0
 800b188:	bf38      	it	cc
 800b18a:	2304      	movcc	r3, #4
 800b18c:	50ca      	str	r2, [r1, r3]
 800b18e:	b10a      	cbz	r2, 800b194 <__lshift+0xa4>
 800b190:	f108 0602 	add.w	r6, r8, #2
 800b194:	3e01      	subs	r6, #1
 800b196:	4638      	mov	r0, r7
 800b198:	612e      	str	r6, [r5, #16]
 800b19a:	4621      	mov	r1, r4
 800b19c:	f7ff fdd6 	bl	800ad4c <_Bfree>
 800b1a0:	4628      	mov	r0, r5
 800b1a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1a6:	f842 0f04 	str.w	r0, [r2, #4]!
 800b1aa:	3301      	adds	r3, #1
 800b1ac:	e7c5      	b.n	800b13a <__lshift+0x4a>
 800b1ae:	3904      	subs	r1, #4
 800b1b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1b4:	f841 2f04 	str.w	r2, [r1, #4]!
 800b1b8:	459c      	cmp	ip, r3
 800b1ba:	d8f9      	bhi.n	800b1b0 <__lshift+0xc0>
 800b1bc:	e7ea      	b.n	800b194 <__lshift+0xa4>
 800b1be:	bf00      	nop
 800b1c0:	0800c967 	.word	0x0800c967
 800b1c4:	0800c978 	.word	0x0800c978

0800b1c8 <__mcmp>:
 800b1c8:	b530      	push	{r4, r5, lr}
 800b1ca:	6902      	ldr	r2, [r0, #16]
 800b1cc:	690c      	ldr	r4, [r1, #16]
 800b1ce:	1b12      	subs	r2, r2, r4
 800b1d0:	d10e      	bne.n	800b1f0 <__mcmp+0x28>
 800b1d2:	f100 0314 	add.w	r3, r0, #20
 800b1d6:	3114      	adds	r1, #20
 800b1d8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b1dc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b1e0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b1e4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b1e8:	42a5      	cmp	r5, r4
 800b1ea:	d003      	beq.n	800b1f4 <__mcmp+0x2c>
 800b1ec:	d305      	bcc.n	800b1fa <__mcmp+0x32>
 800b1ee:	2201      	movs	r2, #1
 800b1f0:	4610      	mov	r0, r2
 800b1f2:	bd30      	pop	{r4, r5, pc}
 800b1f4:	4283      	cmp	r3, r0
 800b1f6:	d3f3      	bcc.n	800b1e0 <__mcmp+0x18>
 800b1f8:	e7fa      	b.n	800b1f0 <__mcmp+0x28>
 800b1fa:	f04f 32ff 	mov.w	r2, #4294967295
 800b1fe:	e7f7      	b.n	800b1f0 <__mcmp+0x28>

0800b200 <__mdiff>:
 800b200:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b204:	460c      	mov	r4, r1
 800b206:	4606      	mov	r6, r0
 800b208:	4611      	mov	r1, r2
 800b20a:	4620      	mov	r0, r4
 800b20c:	4617      	mov	r7, r2
 800b20e:	f7ff ffdb 	bl	800b1c8 <__mcmp>
 800b212:	1e05      	subs	r5, r0, #0
 800b214:	d110      	bne.n	800b238 <__mdiff+0x38>
 800b216:	4629      	mov	r1, r5
 800b218:	4630      	mov	r0, r6
 800b21a:	f7ff fd57 	bl	800accc <_Balloc>
 800b21e:	b930      	cbnz	r0, 800b22e <__mdiff+0x2e>
 800b220:	4b39      	ldr	r3, [pc, #228]	; (800b308 <__mdiff+0x108>)
 800b222:	4602      	mov	r2, r0
 800b224:	f240 2132 	movw	r1, #562	; 0x232
 800b228:	4838      	ldr	r0, [pc, #224]	; (800b30c <__mdiff+0x10c>)
 800b22a:	f000 faf3 	bl	800b814 <__assert_func>
 800b22e:	2301      	movs	r3, #1
 800b230:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b234:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b238:	bfa4      	itt	ge
 800b23a:	463b      	movge	r3, r7
 800b23c:	4627      	movge	r7, r4
 800b23e:	4630      	mov	r0, r6
 800b240:	6879      	ldr	r1, [r7, #4]
 800b242:	bfa6      	itte	ge
 800b244:	461c      	movge	r4, r3
 800b246:	2500      	movge	r5, #0
 800b248:	2501      	movlt	r5, #1
 800b24a:	f7ff fd3f 	bl	800accc <_Balloc>
 800b24e:	b920      	cbnz	r0, 800b25a <__mdiff+0x5a>
 800b250:	4b2d      	ldr	r3, [pc, #180]	; (800b308 <__mdiff+0x108>)
 800b252:	4602      	mov	r2, r0
 800b254:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b258:	e7e6      	b.n	800b228 <__mdiff+0x28>
 800b25a:	693e      	ldr	r6, [r7, #16]
 800b25c:	60c5      	str	r5, [r0, #12]
 800b25e:	6925      	ldr	r5, [r4, #16]
 800b260:	f107 0114 	add.w	r1, r7, #20
 800b264:	f104 0914 	add.w	r9, r4, #20
 800b268:	f100 0e14 	add.w	lr, r0, #20
 800b26c:	f107 0210 	add.w	r2, r7, #16
 800b270:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b274:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b278:	46f2      	mov	sl, lr
 800b27a:	2700      	movs	r7, #0
 800b27c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b280:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b284:	fa1f f883 	uxth.w	r8, r3
 800b288:	fa17 f78b 	uxtah	r7, r7, fp
 800b28c:	0c1b      	lsrs	r3, r3, #16
 800b28e:	eba7 0808 	sub.w	r8, r7, r8
 800b292:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b296:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b29a:	fa1f f888 	uxth.w	r8, r8
 800b29e:	141f      	asrs	r7, r3, #16
 800b2a0:	454d      	cmp	r5, r9
 800b2a2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b2a6:	f84a 3b04 	str.w	r3, [sl], #4
 800b2aa:	d8e7      	bhi.n	800b27c <__mdiff+0x7c>
 800b2ac:	1b2b      	subs	r3, r5, r4
 800b2ae:	3b15      	subs	r3, #21
 800b2b0:	f023 0303 	bic.w	r3, r3, #3
 800b2b4:	3304      	adds	r3, #4
 800b2b6:	3415      	adds	r4, #21
 800b2b8:	42a5      	cmp	r5, r4
 800b2ba:	bf38      	it	cc
 800b2bc:	2304      	movcc	r3, #4
 800b2be:	4419      	add	r1, r3
 800b2c0:	4473      	add	r3, lr
 800b2c2:	469e      	mov	lr, r3
 800b2c4:	460d      	mov	r5, r1
 800b2c6:	4565      	cmp	r5, ip
 800b2c8:	d30e      	bcc.n	800b2e8 <__mdiff+0xe8>
 800b2ca:	f10c 0203 	add.w	r2, ip, #3
 800b2ce:	1a52      	subs	r2, r2, r1
 800b2d0:	f022 0203 	bic.w	r2, r2, #3
 800b2d4:	3903      	subs	r1, #3
 800b2d6:	458c      	cmp	ip, r1
 800b2d8:	bf38      	it	cc
 800b2da:	2200      	movcc	r2, #0
 800b2dc:	441a      	add	r2, r3
 800b2de:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b2e2:	b17b      	cbz	r3, 800b304 <__mdiff+0x104>
 800b2e4:	6106      	str	r6, [r0, #16]
 800b2e6:	e7a5      	b.n	800b234 <__mdiff+0x34>
 800b2e8:	f855 8b04 	ldr.w	r8, [r5], #4
 800b2ec:	fa17 f488 	uxtah	r4, r7, r8
 800b2f0:	1422      	asrs	r2, r4, #16
 800b2f2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b2f6:	b2a4      	uxth	r4, r4
 800b2f8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b2fc:	f84e 4b04 	str.w	r4, [lr], #4
 800b300:	1417      	asrs	r7, r2, #16
 800b302:	e7e0      	b.n	800b2c6 <__mdiff+0xc6>
 800b304:	3e01      	subs	r6, #1
 800b306:	e7ea      	b.n	800b2de <__mdiff+0xde>
 800b308:	0800c967 	.word	0x0800c967
 800b30c:	0800c978 	.word	0x0800c978

0800b310 <__d2b>:
 800b310:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b314:	4689      	mov	r9, r1
 800b316:	2101      	movs	r1, #1
 800b318:	ec57 6b10 	vmov	r6, r7, d0
 800b31c:	4690      	mov	r8, r2
 800b31e:	f7ff fcd5 	bl	800accc <_Balloc>
 800b322:	4604      	mov	r4, r0
 800b324:	b930      	cbnz	r0, 800b334 <__d2b+0x24>
 800b326:	4602      	mov	r2, r0
 800b328:	4b25      	ldr	r3, [pc, #148]	; (800b3c0 <__d2b+0xb0>)
 800b32a:	4826      	ldr	r0, [pc, #152]	; (800b3c4 <__d2b+0xb4>)
 800b32c:	f240 310a 	movw	r1, #778	; 0x30a
 800b330:	f000 fa70 	bl	800b814 <__assert_func>
 800b334:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b338:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b33c:	bb35      	cbnz	r5, 800b38c <__d2b+0x7c>
 800b33e:	2e00      	cmp	r6, #0
 800b340:	9301      	str	r3, [sp, #4]
 800b342:	d028      	beq.n	800b396 <__d2b+0x86>
 800b344:	4668      	mov	r0, sp
 800b346:	9600      	str	r6, [sp, #0]
 800b348:	f7ff fd8c 	bl	800ae64 <__lo0bits>
 800b34c:	9900      	ldr	r1, [sp, #0]
 800b34e:	b300      	cbz	r0, 800b392 <__d2b+0x82>
 800b350:	9a01      	ldr	r2, [sp, #4]
 800b352:	f1c0 0320 	rsb	r3, r0, #32
 800b356:	fa02 f303 	lsl.w	r3, r2, r3
 800b35a:	430b      	orrs	r3, r1
 800b35c:	40c2      	lsrs	r2, r0
 800b35e:	6163      	str	r3, [r4, #20]
 800b360:	9201      	str	r2, [sp, #4]
 800b362:	9b01      	ldr	r3, [sp, #4]
 800b364:	61a3      	str	r3, [r4, #24]
 800b366:	2b00      	cmp	r3, #0
 800b368:	bf14      	ite	ne
 800b36a:	2202      	movne	r2, #2
 800b36c:	2201      	moveq	r2, #1
 800b36e:	6122      	str	r2, [r4, #16]
 800b370:	b1d5      	cbz	r5, 800b3a8 <__d2b+0x98>
 800b372:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b376:	4405      	add	r5, r0
 800b378:	f8c9 5000 	str.w	r5, [r9]
 800b37c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b380:	f8c8 0000 	str.w	r0, [r8]
 800b384:	4620      	mov	r0, r4
 800b386:	b003      	add	sp, #12
 800b388:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b38c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b390:	e7d5      	b.n	800b33e <__d2b+0x2e>
 800b392:	6161      	str	r1, [r4, #20]
 800b394:	e7e5      	b.n	800b362 <__d2b+0x52>
 800b396:	a801      	add	r0, sp, #4
 800b398:	f7ff fd64 	bl	800ae64 <__lo0bits>
 800b39c:	9b01      	ldr	r3, [sp, #4]
 800b39e:	6163      	str	r3, [r4, #20]
 800b3a0:	2201      	movs	r2, #1
 800b3a2:	6122      	str	r2, [r4, #16]
 800b3a4:	3020      	adds	r0, #32
 800b3a6:	e7e3      	b.n	800b370 <__d2b+0x60>
 800b3a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b3ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b3b0:	f8c9 0000 	str.w	r0, [r9]
 800b3b4:	6918      	ldr	r0, [r3, #16]
 800b3b6:	f7ff fd35 	bl	800ae24 <__hi0bits>
 800b3ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b3be:	e7df      	b.n	800b380 <__d2b+0x70>
 800b3c0:	0800c967 	.word	0x0800c967
 800b3c4:	0800c978 	.word	0x0800c978

0800b3c8 <_calloc_r>:
 800b3c8:	b513      	push	{r0, r1, r4, lr}
 800b3ca:	434a      	muls	r2, r1
 800b3cc:	4611      	mov	r1, r2
 800b3ce:	9201      	str	r2, [sp, #4]
 800b3d0:	f000 f85a 	bl	800b488 <_malloc_r>
 800b3d4:	4604      	mov	r4, r0
 800b3d6:	b118      	cbz	r0, 800b3e0 <_calloc_r+0x18>
 800b3d8:	9a01      	ldr	r2, [sp, #4]
 800b3da:	2100      	movs	r1, #0
 800b3dc:	f7fe f942 	bl	8009664 <memset>
 800b3e0:	4620      	mov	r0, r4
 800b3e2:	b002      	add	sp, #8
 800b3e4:	bd10      	pop	{r4, pc}
	...

0800b3e8 <_free_r>:
 800b3e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b3ea:	2900      	cmp	r1, #0
 800b3ec:	d048      	beq.n	800b480 <_free_r+0x98>
 800b3ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3f2:	9001      	str	r0, [sp, #4]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	f1a1 0404 	sub.w	r4, r1, #4
 800b3fa:	bfb8      	it	lt
 800b3fc:	18e4      	addlt	r4, r4, r3
 800b3fe:	f000 fa65 	bl	800b8cc <__malloc_lock>
 800b402:	4a20      	ldr	r2, [pc, #128]	; (800b484 <_free_r+0x9c>)
 800b404:	9801      	ldr	r0, [sp, #4]
 800b406:	6813      	ldr	r3, [r2, #0]
 800b408:	4615      	mov	r5, r2
 800b40a:	b933      	cbnz	r3, 800b41a <_free_r+0x32>
 800b40c:	6063      	str	r3, [r4, #4]
 800b40e:	6014      	str	r4, [r2, #0]
 800b410:	b003      	add	sp, #12
 800b412:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b416:	f000 ba5f 	b.w	800b8d8 <__malloc_unlock>
 800b41a:	42a3      	cmp	r3, r4
 800b41c:	d90b      	bls.n	800b436 <_free_r+0x4e>
 800b41e:	6821      	ldr	r1, [r4, #0]
 800b420:	1862      	adds	r2, r4, r1
 800b422:	4293      	cmp	r3, r2
 800b424:	bf04      	itt	eq
 800b426:	681a      	ldreq	r2, [r3, #0]
 800b428:	685b      	ldreq	r3, [r3, #4]
 800b42a:	6063      	str	r3, [r4, #4]
 800b42c:	bf04      	itt	eq
 800b42e:	1852      	addeq	r2, r2, r1
 800b430:	6022      	streq	r2, [r4, #0]
 800b432:	602c      	str	r4, [r5, #0]
 800b434:	e7ec      	b.n	800b410 <_free_r+0x28>
 800b436:	461a      	mov	r2, r3
 800b438:	685b      	ldr	r3, [r3, #4]
 800b43a:	b10b      	cbz	r3, 800b440 <_free_r+0x58>
 800b43c:	42a3      	cmp	r3, r4
 800b43e:	d9fa      	bls.n	800b436 <_free_r+0x4e>
 800b440:	6811      	ldr	r1, [r2, #0]
 800b442:	1855      	adds	r5, r2, r1
 800b444:	42a5      	cmp	r5, r4
 800b446:	d10b      	bne.n	800b460 <_free_r+0x78>
 800b448:	6824      	ldr	r4, [r4, #0]
 800b44a:	4421      	add	r1, r4
 800b44c:	1854      	adds	r4, r2, r1
 800b44e:	42a3      	cmp	r3, r4
 800b450:	6011      	str	r1, [r2, #0]
 800b452:	d1dd      	bne.n	800b410 <_free_r+0x28>
 800b454:	681c      	ldr	r4, [r3, #0]
 800b456:	685b      	ldr	r3, [r3, #4]
 800b458:	6053      	str	r3, [r2, #4]
 800b45a:	4421      	add	r1, r4
 800b45c:	6011      	str	r1, [r2, #0]
 800b45e:	e7d7      	b.n	800b410 <_free_r+0x28>
 800b460:	d902      	bls.n	800b468 <_free_r+0x80>
 800b462:	230c      	movs	r3, #12
 800b464:	6003      	str	r3, [r0, #0]
 800b466:	e7d3      	b.n	800b410 <_free_r+0x28>
 800b468:	6825      	ldr	r5, [r4, #0]
 800b46a:	1961      	adds	r1, r4, r5
 800b46c:	428b      	cmp	r3, r1
 800b46e:	bf04      	itt	eq
 800b470:	6819      	ldreq	r1, [r3, #0]
 800b472:	685b      	ldreq	r3, [r3, #4]
 800b474:	6063      	str	r3, [r4, #4]
 800b476:	bf04      	itt	eq
 800b478:	1949      	addeq	r1, r1, r5
 800b47a:	6021      	streq	r1, [r4, #0]
 800b47c:	6054      	str	r4, [r2, #4]
 800b47e:	e7c7      	b.n	800b410 <_free_r+0x28>
 800b480:	b003      	add	sp, #12
 800b482:	bd30      	pop	{r4, r5, pc}
 800b484:	20000210 	.word	0x20000210

0800b488 <_malloc_r>:
 800b488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b48a:	1ccd      	adds	r5, r1, #3
 800b48c:	f025 0503 	bic.w	r5, r5, #3
 800b490:	3508      	adds	r5, #8
 800b492:	2d0c      	cmp	r5, #12
 800b494:	bf38      	it	cc
 800b496:	250c      	movcc	r5, #12
 800b498:	2d00      	cmp	r5, #0
 800b49a:	4606      	mov	r6, r0
 800b49c:	db01      	blt.n	800b4a2 <_malloc_r+0x1a>
 800b49e:	42a9      	cmp	r1, r5
 800b4a0:	d903      	bls.n	800b4aa <_malloc_r+0x22>
 800b4a2:	230c      	movs	r3, #12
 800b4a4:	6033      	str	r3, [r6, #0]
 800b4a6:	2000      	movs	r0, #0
 800b4a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4aa:	f000 fa0f 	bl	800b8cc <__malloc_lock>
 800b4ae:	4921      	ldr	r1, [pc, #132]	; (800b534 <_malloc_r+0xac>)
 800b4b0:	680a      	ldr	r2, [r1, #0]
 800b4b2:	4614      	mov	r4, r2
 800b4b4:	b99c      	cbnz	r4, 800b4de <_malloc_r+0x56>
 800b4b6:	4f20      	ldr	r7, [pc, #128]	; (800b538 <_malloc_r+0xb0>)
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	b923      	cbnz	r3, 800b4c6 <_malloc_r+0x3e>
 800b4bc:	4621      	mov	r1, r4
 800b4be:	4630      	mov	r0, r6
 800b4c0:	f000 f998 	bl	800b7f4 <_sbrk_r>
 800b4c4:	6038      	str	r0, [r7, #0]
 800b4c6:	4629      	mov	r1, r5
 800b4c8:	4630      	mov	r0, r6
 800b4ca:	f000 f993 	bl	800b7f4 <_sbrk_r>
 800b4ce:	1c43      	adds	r3, r0, #1
 800b4d0:	d123      	bne.n	800b51a <_malloc_r+0x92>
 800b4d2:	230c      	movs	r3, #12
 800b4d4:	6033      	str	r3, [r6, #0]
 800b4d6:	4630      	mov	r0, r6
 800b4d8:	f000 f9fe 	bl	800b8d8 <__malloc_unlock>
 800b4dc:	e7e3      	b.n	800b4a6 <_malloc_r+0x1e>
 800b4de:	6823      	ldr	r3, [r4, #0]
 800b4e0:	1b5b      	subs	r3, r3, r5
 800b4e2:	d417      	bmi.n	800b514 <_malloc_r+0x8c>
 800b4e4:	2b0b      	cmp	r3, #11
 800b4e6:	d903      	bls.n	800b4f0 <_malloc_r+0x68>
 800b4e8:	6023      	str	r3, [r4, #0]
 800b4ea:	441c      	add	r4, r3
 800b4ec:	6025      	str	r5, [r4, #0]
 800b4ee:	e004      	b.n	800b4fa <_malloc_r+0x72>
 800b4f0:	6863      	ldr	r3, [r4, #4]
 800b4f2:	42a2      	cmp	r2, r4
 800b4f4:	bf0c      	ite	eq
 800b4f6:	600b      	streq	r3, [r1, #0]
 800b4f8:	6053      	strne	r3, [r2, #4]
 800b4fa:	4630      	mov	r0, r6
 800b4fc:	f000 f9ec 	bl	800b8d8 <__malloc_unlock>
 800b500:	f104 000b 	add.w	r0, r4, #11
 800b504:	1d23      	adds	r3, r4, #4
 800b506:	f020 0007 	bic.w	r0, r0, #7
 800b50a:	1ac2      	subs	r2, r0, r3
 800b50c:	d0cc      	beq.n	800b4a8 <_malloc_r+0x20>
 800b50e:	1a1b      	subs	r3, r3, r0
 800b510:	50a3      	str	r3, [r4, r2]
 800b512:	e7c9      	b.n	800b4a8 <_malloc_r+0x20>
 800b514:	4622      	mov	r2, r4
 800b516:	6864      	ldr	r4, [r4, #4]
 800b518:	e7cc      	b.n	800b4b4 <_malloc_r+0x2c>
 800b51a:	1cc4      	adds	r4, r0, #3
 800b51c:	f024 0403 	bic.w	r4, r4, #3
 800b520:	42a0      	cmp	r0, r4
 800b522:	d0e3      	beq.n	800b4ec <_malloc_r+0x64>
 800b524:	1a21      	subs	r1, r4, r0
 800b526:	4630      	mov	r0, r6
 800b528:	f000 f964 	bl	800b7f4 <_sbrk_r>
 800b52c:	3001      	adds	r0, #1
 800b52e:	d1dd      	bne.n	800b4ec <_malloc_r+0x64>
 800b530:	e7cf      	b.n	800b4d2 <_malloc_r+0x4a>
 800b532:	bf00      	nop
 800b534:	20000210 	.word	0x20000210
 800b538:	20000214 	.word	0x20000214

0800b53c <__ssputs_r>:
 800b53c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b540:	688e      	ldr	r6, [r1, #8]
 800b542:	429e      	cmp	r6, r3
 800b544:	4682      	mov	sl, r0
 800b546:	460c      	mov	r4, r1
 800b548:	4690      	mov	r8, r2
 800b54a:	461f      	mov	r7, r3
 800b54c:	d838      	bhi.n	800b5c0 <__ssputs_r+0x84>
 800b54e:	898a      	ldrh	r2, [r1, #12]
 800b550:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b554:	d032      	beq.n	800b5bc <__ssputs_r+0x80>
 800b556:	6825      	ldr	r5, [r4, #0]
 800b558:	6909      	ldr	r1, [r1, #16]
 800b55a:	eba5 0901 	sub.w	r9, r5, r1
 800b55e:	6965      	ldr	r5, [r4, #20]
 800b560:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b564:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b568:	3301      	adds	r3, #1
 800b56a:	444b      	add	r3, r9
 800b56c:	106d      	asrs	r5, r5, #1
 800b56e:	429d      	cmp	r5, r3
 800b570:	bf38      	it	cc
 800b572:	461d      	movcc	r5, r3
 800b574:	0553      	lsls	r3, r2, #21
 800b576:	d531      	bpl.n	800b5dc <__ssputs_r+0xa0>
 800b578:	4629      	mov	r1, r5
 800b57a:	f7ff ff85 	bl	800b488 <_malloc_r>
 800b57e:	4606      	mov	r6, r0
 800b580:	b950      	cbnz	r0, 800b598 <__ssputs_r+0x5c>
 800b582:	230c      	movs	r3, #12
 800b584:	f8ca 3000 	str.w	r3, [sl]
 800b588:	89a3      	ldrh	r3, [r4, #12]
 800b58a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b58e:	81a3      	strh	r3, [r4, #12]
 800b590:	f04f 30ff 	mov.w	r0, #4294967295
 800b594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b598:	6921      	ldr	r1, [r4, #16]
 800b59a:	464a      	mov	r2, r9
 800b59c:	f7ff fb88 	bl	800acb0 <memcpy>
 800b5a0:	89a3      	ldrh	r3, [r4, #12]
 800b5a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b5a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5aa:	81a3      	strh	r3, [r4, #12]
 800b5ac:	6126      	str	r6, [r4, #16]
 800b5ae:	6165      	str	r5, [r4, #20]
 800b5b0:	444e      	add	r6, r9
 800b5b2:	eba5 0509 	sub.w	r5, r5, r9
 800b5b6:	6026      	str	r6, [r4, #0]
 800b5b8:	60a5      	str	r5, [r4, #8]
 800b5ba:	463e      	mov	r6, r7
 800b5bc:	42be      	cmp	r6, r7
 800b5be:	d900      	bls.n	800b5c2 <__ssputs_r+0x86>
 800b5c0:	463e      	mov	r6, r7
 800b5c2:	4632      	mov	r2, r6
 800b5c4:	6820      	ldr	r0, [r4, #0]
 800b5c6:	4641      	mov	r1, r8
 800b5c8:	f000 f966 	bl	800b898 <memmove>
 800b5cc:	68a3      	ldr	r3, [r4, #8]
 800b5ce:	6822      	ldr	r2, [r4, #0]
 800b5d0:	1b9b      	subs	r3, r3, r6
 800b5d2:	4432      	add	r2, r6
 800b5d4:	60a3      	str	r3, [r4, #8]
 800b5d6:	6022      	str	r2, [r4, #0]
 800b5d8:	2000      	movs	r0, #0
 800b5da:	e7db      	b.n	800b594 <__ssputs_r+0x58>
 800b5dc:	462a      	mov	r2, r5
 800b5de:	f000 f981 	bl	800b8e4 <_realloc_r>
 800b5e2:	4606      	mov	r6, r0
 800b5e4:	2800      	cmp	r0, #0
 800b5e6:	d1e1      	bne.n	800b5ac <__ssputs_r+0x70>
 800b5e8:	6921      	ldr	r1, [r4, #16]
 800b5ea:	4650      	mov	r0, sl
 800b5ec:	f7ff fefc 	bl	800b3e8 <_free_r>
 800b5f0:	e7c7      	b.n	800b582 <__ssputs_r+0x46>
	...

0800b5f4 <_svfiprintf_r>:
 800b5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5f8:	4698      	mov	r8, r3
 800b5fa:	898b      	ldrh	r3, [r1, #12]
 800b5fc:	061b      	lsls	r3, r3, #24
 800b5fe:	b09d      	sub	sp, #116	; 0x74
 800b600:	4607      	mov	r7, r0
 800b602:	460d      	mov	r5, r1
 800b604:	4614      	mov	r4, r2
 800b606:	d50e      	bpl.n	800b626 <_svfiprintf_r+0x32>
 800b608:	690b      	ldr	r3, [r1, #16]
 800b60a:	b963      	cbnz	r3, 800b626 <_svfiprintf_r+0x32>
 800b60c:	2140      	movs	r1, #64	; 0x40
 800b60e:	f7ff ff3b 	bl	800b488 <_malloc_r>
 800b612:	6028      	str	r0, [r5, #0]
 800b614:	6128      	str	r0, [r5, #16]
 800b616:	b920      	cbnz	r0, 800b622 <_svfiprintf_r+0x2e>
 800b618:	230c      	movs	r3, #12
 800b61a:	603b      	str	r3, [r7, #0]
 800b61c:	f04f 30ff 	mov.w	r0, #4294967295
 800b620:	e0d1      	b.n	800b7c6 <_svfiprintf_r+0x1d2>
 800b622:	2340      	movs	r3, #64	; 0x40
 800b624:	616b      	str	r3, [r5, #20]
 800b626:	2300      	movs	r3, #0
 800b628:	9309      	str	r3, [sp, #36]	; 0x24
 800b62a:	2320      	movs	r3, #32
 800b62c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b630:	f8cd 800c 	str.w	r8, [sp, #12]
 800b634:	2330      	movs	r3, #48	; 0x30
 800b636:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b7e0 <_svfiprintf_r+0x1ec>
 800b63a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b63e:	f04f 0901 	mov.w	r9, #1
 800b642:	4623      	mov	r3, r4
 800b644:	469a      	mov	sl, r3
 800b646:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b64a:	b10a      	cbz	r2, 800b650 <_svfiprintf_r+0x5c>
 800b64c:	2a25      	cmp	r2, #37	; 0x25
 800b64e:	d1f9      	bne.n	800b644 <_svfiprintf_r+0x50>
 800b650:	ebba 0b04 	subs.w	fp, sl, r4
 800b654:	d00b      	beq.n	800b66e <_svfiprintf_r+0x7a>
 800b656:	465b      	mov	r3, fp
 800b658:	4622      	mov	r2, r4
 800b65a:	4629      	mov	r1, r5
 800b65c:	4638      	mov	r0, r7
 800b65e:	f7ff ff6d 	bl	800b53c <__ssputs_r>
 800b662:	3001      	adds	r0, #1
 800b664:	f000 80aa 	beq.w	800b7bc <_svfiprintf_r+0x1c8>
 800b668:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b66a:	445a      	add	r2, fp
 800b66c:	9209      	str	r2, [sp, #36]	; 0x24
 800b66e:	f89a 3000 	ldrb.w	r3, [sl]
 800b672:	2b00      	cmp	r3, #0
 800b674:	f000 80a2 	beq.w	800b7bc <_svfiprintf_r+0x1c8>
 800b678:	2300      	movs	r3, #0
 800b67a:	f04f 32ff 	mov.w	r2, #4294967295
 800b67e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b682:	f10a 0a01 	add.w	sl, sl, #1
 800b686:	9304      	str	r3, [sp, #16]
 800b688:	9307      	str	r3, [sp, #28]
 800b68a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b68e:	931a      	str	r3, [sp, #104]	; 0x68
 800b690:	4654      	mov	r4, sl
 800b692:	2205      	movs	r2, #5
 800b694:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b698:	4851      	ldr	r0, [pc, #324]	; (800b7e0 <_svfiprintf_r+0x1ec>)
 800b69a:	f7f4 fdc9 	bl	8000230 <memchr>
 800b69e:	9a04      	ldr	r2, [sp, #16]
 800b6a0:	b9d8      	cbnz	r0, 800b6da <_svfiprintf_r+0xe6>
 800b6a2:	06d0      	lsls	r0, r2, #27
 800b6a4:	bf44      	itt	mi
 800b6a6:	2320      	movmi	r3, #32
 800b6a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6ac:	0711      	lsls	r1, r2, #28
 800b6ae:	bf44      	itt	mi
 800b6b0:	232b      	movmi	r3, #43	; 0x2b
 800b6b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6b6:	f89a 3000 	ldrb.w	r3, [sl]
 800b6ba:	2b2a      	cmp	r3, #42	; 0x2a
 800b6bc:	d015      	beq.n	800b6ea <_svfiprintf_r+0xf6>
 800b6be:	9a07      	ldr	r2, [sp, #28]
 800b6c0:	4654      	mov	r4, sl
 800b6c2:	2000      	movs	r0, #0
 800b6c4:	f04f 0c0a 	mov.w	ip, #10
 800b6c8:	4621      	mov	r1, r4
 800b6ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6ce:	3b30      	subs	r3, #48	; 0x30
 800b6d0:	2b09      	cmp	r3, #9
 800b6d2:	d94e      	bls.n	800b772 <_svfiprintf_r+0x17e>
 800b6d4:	b1b0      	cbz	r0, 800b704 <_svfiprintf_r+0x110>
 800b6d6:	9207      	str	r2, [sp, #28]
 800b6d8:	e014      	b.n	800b704 <_svfiprintf_r+0x110>
 800b6da:	eba0 0308 	sub.w	r3, r0, r8
 800b6de:	fa09 f303 	lsl.w	r3, r9, r3
 800b6e2:	4313      	orrs	r3, r2
 800b6e4:	9304      	str	r3, [sp, #16]
 800b6e6:	46a2      	mov	sl, r4
 800b6e8:	e7d2      	b.n	800b690 <_svfiprintf_r+0x9c>
 800b6ea:	9b03      	ldr	r3, [sp, #12]
 800b6ec:	1d19      	adds	r1, r3, #4
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	9103      	str	r1, [sp, #12]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	bfbb      	ittet	lt
 800b6f6:	425b      	neglt	r3, r3
 800b6f8:	f042 0202 	orrlt.w	r2, r2, #2
 800b6fc:	9307      	strge	r3, [sp, #28]
 800b6fe:	9307      	strlt	r3, [sp, #28]
 800b700:	bfb8      	it	lt
 800b702:	9204      	strlt	r2, [sp, #16]
 800b704:	7823      	ldrb	r3, [r4, #0]
 800b706:	2b2e      	cmp	r3, #46	; 0x2e
 800b708:	d10c      	bne.n	800b724 <_svfiprintf_r+0x130>
 800b70a:	7863      	ldrb	r3, [r4, #1]
 800b70c:	2b2a      	cmp	r3, #42	; 0x2a
 800b70e:	d135      	bne.n	800b77c <_svfiprintf_r+0x188>
 800b710:	9b03      	ldr	r3, [sp, #12]
 800b712:	1d1a      	adds	r2, r3, #4
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	9203      	str	r2, [sp, #12]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	bfb8      	it	lt
 800b71c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b720:	3402      	adds	r4, #2
 800b722:	9305      	str	r3, [sp, #20]
 800b724:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b7f0 <_svfiprintf_r+0x1fc>
 800b728:	7821      	ldrb	r1, [r4, #0]
 800b72a:	2203      	movs	r2, #3
 800b72c:	4650      	mov	r0, sl
 800b72e:	f7f4 fd7f 	bl	8000230 <memchr>
 800b732:	b140      	cbz	r0, 800b746 <_svfiprintf_r+0x152>
 800b734:	2340      	movs	r3, #64	; 0x40
 800b736:	eba0 000a 	sub.w	r0, r0, sl
 800b73a:	fa03 f000 	lsl.w	r0, r3, r0
 800b73e:	9b04      	ldr	r3, [sp, #16]
 800b740:	4303      	orrs	r3, r0
 800b742:	3401      	adds	r4, #1
 800b744:	9304      	str	r3, [sp, #16]
 800b746:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b74a:	4826      	ldr	r0, [pc, #152]	; (800b7e4 <_svfiprintf_r+0x1f0>)
 800b74c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b750:	2206      	movs	r2, #6
 800b752:	f7f4 fd6d 	bl	8000230 <memchr>
 800b756:	2800      	cmp	r0, #0
 800b758:	d038      	beq.n	800b7cc <_svfiprintf_r+0x1d8>
 800b75a:	4b23      	ldr	r3, [pc, #140]	; (800b7e8 <_svfiprintf_r+0x1f4>)
 800b75c:	bb1b      	cbnz	r3, 800b7a6 <_svfiprintf_r+0x1b2>
 800b75e:	9b03      	ldr	r3, [sp, #12]
 800b760:	3307      	adds	r3, #7
 800b762:	f023 0307 	bic.w	r3, r3, #7
 800b766:	3308      	adds	r3, #8
 800b768:	9303      	str	r3, [sp, #12]
 800b76a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b76c:	4433      	add	r3, r6
 800b76e:	9309      	str	r3, [sp, #36]	; 0x24
 800b770:	e767      	b.n	800b642 <_svfiprintf_r+0x4e>
 800b772:	fb0c 3202 	mla	r2, ip, r2, r3
 800b776:	460c      	mov	r4, r1
 800b778:	2001      	movs	r0, #1
 800b77a:	e7a5      	b.n	800b6c8 <_svfiprintf_r+0xd4>
 800b77c:	2300      	movs	r3, #0
 800b77e:	3401      	adds	r4, #1
 800b780:	9305      	str	r3, [sp, #20]
 800b782:	4619      	mov	r1, r3
 800b784:	f04f 0c0a 	mov.w	ip, #10
 800b788:	4620      	mov	r0, r4
 800b78a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b78e:	3a30      	subs	r2, #48	; 0x30
 800b790:	2a09      	cmp	r2, #9
 800b792:	d903      	bls.n	800b79c <_svfiprintf_r+0x1a8>
 800b794:	2b00      	cmp	r3, #0
 800b796:	d0c5      	beq.n	800b724 <_svfiprintf_r+0x130>
 800b798:	9105      	str	r1, [sp, #20]
 800b79a:	e7c3      	b.n	800b724 <_svfiprintf_r+0x130>
 800b79c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b7a0:	4604      	mov	r4, r0
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	e7f0      	b.n	800b788 <_svfiprintf_r+0x194>
 800b7a6:	ab03      	add	r3, sp, #12
 800b7a8:	9300      	str	r3, [sp, #0]
 800b7aa:	462a      	mov	r2, r5
 800b7ac:	4b0f      	ldr	r3, [pc, #60]	; (800b7ec <_svfiprintf_r+0x1f8>)
 800b7ae:	a904      	add	r1, sp, #16
 800b7b0:	4638      	mov	r0, r7
 800b7b2:	f7fd ffff 	bl	80097b4 <_printf_float>
 800b7b6:	1c42      	adds	r2, r0, #1
 800b7b8:	4606      	mov	r6, r0
 800b7ba:	d1d6      	bne.n	800b76a <_svfiprintf_r+0x176>
 800b7bc:	89ab      	ldrh	r3, [r5, #12]
 800b7be:	065b      	lsls	r3, r3, #25
 800b7c0:	f53f af2c 	bmi.w	800b61c <_svfiprintf_r+0x28>
 800b7c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b7c6:	b01d      	add	sp, #116	; 0x74
 800b7c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7cc:	ab03      	add	r3, sp, #12
 800b7ce:	9300      	str	r3, [sp, #0]
 800b7d0:	462a      	mov	r2, r5
 800b7d2:	4b06      	ldr	r3, [pc, #24]	; (800b7ec <_svfiprintf_r+0x1f8>)
 800b7d4:	a904      	add	r1, sp, #16
 800b7d6:	4638      	mov	r0, r7
 800b7d8:	f7fe fa90 	bl	8009cfc <_printf_i>
 800b7dc:	e7eb      	b.n	800b7b6 <_svfiprintf_r+0x1c2>
 800b7de:	bf00      	nop
 800b7e0:	0800cad4 	.word	0x0800cad4
 800b7e4:	0800cade 	.word	0x0800cade
 800b7e8:	080097b5 	.word	0x080097b5
 800b7ec:	0800b53d 	.word	0x0800b53d
 800b7f0:	0800cada 	.word	0x0800cada

0800b7f4 <_sbrk_r>:
 800b7f4:	b538      	push	{r3, r4, r5, lr}
 800b7f6:	4d06      	ldr	r5, [pc, #24]	; (800b810 <_sbrk_r+0x1c>)
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	4604      	mov	r4, r0
 800b7fc:	4608      	mov	r0, r1
 800b7fe:	602b      	str	r3, [r5, #0]
 800b800:	f7f6 fefa 	bl	80025f8 <_sbrk>
 800b804:	1c43      	adds	r3, r0, #1
 800b806:	d102      	bne.n	800b80e <_sbrk_r+0x1a>
 800b808:	682b      	ldr	r3, [r5, #0]
 800b80a:	b103      	cbz	r3, 800b80e <_sbrk_r+0x1a>
 800b80c:	6023      	str	r3, [r4, #0]
 800b80e:	bd38      	pop	{r3, r4, r5, pc}
 800b810:	200008d8 	.word	0x200008d8

0800b814 <__assert_func>:
 800b814:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b816:	4614      	mov	r4, r2
 800b818:	461a      	mov	r2, r3
 800b81a:	4b09      	ldr	r3, [pc, #36]	; (800b840 <__assert_func+0x2c>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	4605      	mov	r5, r0
 800b820:	68d8      	ldr	r0, [r3, #12]
 800b822:	b14c      	cbz	r4, 800b838 <__assert_func+0x24>
 800b824:	4b07      	ldr	r3, [pc, #28]	; (800b844 <__assert_func+0x30>)
 800b826:	9100      	str	r1, [sp, #0]
 800b828:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b82c:	4906      	ldr	r1, [pc, #24]	; (800b848 <__assert_func+0x34>)
 800b82e:	462b      	mov	r3, r5
 800b830:	f000 f80e 	bl	800b850 <fiprintf>
 800b834:	f000 faa4 	bl	800bd80 <abort>
 800b838:	4b04      	ldr	r3, [pc, #16]	; (800b84c <__assert_func+0x38>)
 800b83a:	461c      	mov	r4, r3
 800b83c:	e7f3      	b.n	800b826 <__assert_func+0x12>
 800b83e:	bf00      	nop
 800b840:	20000010 	.word	0x20000010
 800b844:	0800cae5 	.word	0x0800cae5
 800b848:	0800caf2 	.word	0x0800caf2
 800b84c:	0800cb20 	.word	0x0800cb20

0800b850 <fiprintf>:
 800b850:	b40e      	push	{r1, r2, r3}
 800b852:	b503      	push	{r0, r1, lr}
 800b854:	4601      	mov	r1, r0
 800b856:	ab03      	add	r3, sp, #12
 800b858:	4805      	ldr	r0, [pc, #20]	; (800b870 <fiprintf+0x20>)
 800b85a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b85e:	6800      	ldr	r0, [r0, #0]
 800b860:	9301      	str	r3, [sp, #4]
 800b862:	f000 f88f 	bl	800b984 <_vfiprintf_r>
 800b866:	b002      	add	sp, #8
 800b868:	f85d eb04 	ldr.w	lr, [sp], #4
 800b86c:	b003      	add	sp, #12
 800b86e:	4770      	bx	lr
 800b870:	20000010 	.word	0x20000010

0800b874 <__ascii_mbtowc>:
 800b874:	b082      	sub	sp, #8
 800b876:	b901      	cbnz	r1, 800b87a <__ascii_mbtowc+0x6>
 800b878:	a901      	add	r1, sp, #4
 800b87a:	b142      	cbz	r2, 800b88e <__ascii_mbtowc+0x1a>
 800b87c:	b14b      	cbz	r3, 800b892 <__ascii_mbtowc+0x1e>
 800b87e:	7813      	ldrb	r3, [r2, #0]
 800b880:	600b      	str	r3, [r1, #0]
 800b882:	7812      	ldrb	r2, [r2, #0]
 800b884:	1e10      	subs	r0, r2, #0
 800b886:	bf18      	it	ne
 800b888:	2001      	movne	r0, #1
 800b88a:	b002      	add	sp, #8
 800b88c:	4770      	bx	lr
 800b88e:	4610      	mov	r0, r2
 800b890:	e7fb      	b.n	800b88a <__ascii_mbtowc+0x16>
 800b892:	f06f 0001 	mvn.w	r0, #1
 800b896:	e7f8      	b.n	800b88a <__ascii_mbtowc+0x16>

0800b898 <memmove>:
 800b898:	4288      	cmp	r0, r1
 800b89a:	b510      	push	{r4, lr}
 800b89c:	eb01 0402 	add.w	r4, r1, r2
 800b8a0:	d902      	bls.n	800b8a8 <memmove+0x10>
 800b8a2:	4284      	cmp	r4, r0
 800b8a4:	4623      	mov	r3, r4
 800b8a6:	d807      	bhi.n	800b8b8 <memmove+0x20>
 800b8a8:	1e43      	subs	r3, r0, #1
 800b8aa:	42a1      	cmp	r1, r4
 800b8ac:	d008      	beq.n	800b8c0 <memmove+0x28>
 800b8ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b8b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b8b6:	e7f8      	b.n	800b8aa <memmove+0x12>
 800b8b8:	4402      	add	r2, r0
 800b8ba:	4601      	mov	r1, r0
 800b8bc:	428a      	cmp	r2, r1
 800b8be:	d100      	bne.n	800b8c2 <memmove+0x2a>
 800b8c0:	bd10      	pop	{r4, pc}
 800b8c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b8c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b8ca:	e7f7      	b.n	800b8bc <memmove+0x24>

0800b8cc <__malloc_lock>:
 800b8cc:	4801      	ldr	r0, [pc, #4]	; (800b8d4 <__malloc_lock+0x8>)
 800b8ce:	f000 bc17 	b.w	800c100 <__retarget_lock_acquire_recursive>
 800b8d2:	bf00      	nop
 800b8d4:	200008e0 	.word	0x200008e0

0800b8d8 <__malloc_unlock>:
 800b8d8:	4801      	ldr	r0, [pc, #4]	; (800b8e0 <__malloc_unlock+0x8>)
 800b8da:	f000 bc12 	b.w	800c102 <__retarget_lock_release_recursive>
 800b8de:	bf00      	nop
 800b8e0:	200008e0 	.word	0x200008e0

0800b8e4 <_realloc_r>:
 800b8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8e6:	4607      	mov	r7, r0
 800b8e8:	4614      	mov	r4, r2
 800b8ea:	460e      	mov	r6, r1
 800b8ec:	b921      	cbnz	r1, 800b8f8 <_realloc_r+0x14>
 800b8ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b8f2:	4611      	mov	r1, r2
 800b8f4:	f7ff bdc8 	b.w	800b488 <_malloc_r>
 800b8f8:	b922      	cbnz	r2, 800b904 <_realloc_r+0x20>
 800b8fa:	f7ff fd75 	bl	800b3e8 <_free_r>
 800b8fe:	4625      	mov	r5, r4
 800b900:	4628      	mov	r0, r5
 800b902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b904:	f000 fc62 	bl	800c1cc <_malloc_usable_size_r>
 800b908:	42a0      	cmp	r0, r4
 800b90a:	d20f      	bcs.n	800b92c <_realloc_r+0x48>
 800b90c:	4621      	mov	r1, r4
 800b90e:	4638      	mov	r0, r7
 800b910:	f7ff fdba 	bl	800b488 <_malloc_r>
 800b914:	4605      	mov	r5, r0
 800b916:	2800      	cmp	r0, #0
 800b918:	d0f2      	beq.n	800b900 <_realloc_r+0x1c>
 800b91a:	4631      	mov	r1, r6
 800b91c:	4622      	mov	r2, r4
 800b91e:	f7ff f9c7 	bl	800acb0 <memcpy>
 800b922:	4631      	mov	r1, r6
 800b924:	4638      	mov	r0, r7
 800b926:	f7ff fd5f 	bl	800b3e8 <_free_r>
 800b92a:	e7e9      	b.n	800b900 <_realloc_r+0x1c>
 800b92c:	4635      	mov	r5, r6
 800b92e:	e7e7      	b.n	800b900 <_realloc_r+0x1c>

0800b930 <__sfputc_r>:
 800b930:	6893      	ldr	r3, [r2, #8]
 800b932:	3b01      	subs	r3, #1
 800b934:	2b00      	cmp	r3, #0
 800b936:	b410      	push	{r4}
 800b938:	6093      	str	r3, [r2, #8]
 800b93a:	da08      	bge.n	800b94e <__sfputc_r+0x1e>
 800b93c:	6994      	ldr	r4, [r2, #24]
 800b93e:	42a3      	cmp	r3, r4
 800b940:	db01      	blt.n	800b946 <__sfputc_r+0x16>
 800b942:	290a      	cmp	r1, #10
 800b944:	d103      	bne.n	800b94e <__sfputc_r+0x1e>
 800b946:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b94a:	f000 b94b 	b.w	800bbe4 <__swbuf_r>
 800b94e:	6813      	ldr	r3, [r2, #0]
 800b950:	1c58      	adds	r0, r3, #1
 800b952:	6010      	str	r0, [r2, #0]
 800b954:	7019      	strb	r1, [r3, #0]
 800b956:	4608      	mov	r0, r1
 800b958:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b95c:	4770      	bx	lr

0800b95e <__sfputs_r>:
 800b95e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b960:	4606      	mov	r6, r0
 800b962:	460f      	mov	r7, r1
 800b964:	4614      	mov	r4, r2
 800b966:	18d5      	adds	r5, r2, r3
 800b968:	42ac      	cmp	r4, r5
 800b96a:	d101      	bne.n	800b970 <__sfputs_r+0x12>
 800b96c:	2000      	movs	r0, #0
 800b96e:	e007      	b.n	800b980 <__sfputs_r+0x22>
 800b970:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b974:	463a      	mov	r2, r7
 800b976:	4630      	mov	r0, r6
 800b978:	f7ff ffda 	bl	800b930 <__sfputc_r>
 800b97c:	1c43      	adds	r3, r0, #1
 800b97e:	d1f3      	bne.n	800b968 <__sfputs_r+0xa>
 800b980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b984 <_vfiprintf_r>:
 800b984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b988:	460d      	mov	r5, r1
 800b98a:	b09d      	sub	sp, #116	; 0x74
 800b98c:	4614      	mov	r4, r2
 800b98e:	4698      	mov	r8, r3
 800b990:	4606      	mov	r6, r0
 800b992:	b118      	cbz	r0, 800b99c <_vfiprintf_r+0x18>
 800b994:	6983      	ldr	r3, [r0, #24]
 800b996:	b90b      	cbnz	r3, 800b99c <_vfiprintf_r+0x18>
 800b998:	f000 fb14 	bl	800bfc4 <__sinit>
 800b99c:	4b89      	ldr	r3, [pc, #548]	; (800bbc4 <_vfiprintf_r+0x240>)
 800b99e:	429d      	cmp	r5, r3
 800b9a0:	d11b      	bne.n	800b9da <_vfiprintf_r+0x56>
 800b9a2:	6875      	ldr	r5, [r6, #4]
 800b9a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9a6:	07d9      	lsls	r1, r3, #31
 800b9a8:	d405      	bmi.n	800b9b6 <_vfiprintf_r+0x32>
 800b9aa:	89ab      	ldrh	r3, [r5, #12]
 800b9ac:	059a      	lsls	r2, r3, #22
 800b9ae:	d402      	bmi.n	800b9b6 <_vfiprintf_r+0x32>
 800b9b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b9b2:	f000 fba5 	bl	800c100 <__retarget_lock_acquire_recursive>
 800b9b6:	89ab      	ldrh	r3, [r5, #12]
 800b9b8:	071b      	lsls	r3, r3, #28
 800b9ba:	d501      	bpl.n	800b9c0 <_vfiprintf_r+0x3c>
 800b9bc:	692b      	ldr	r3, [r5, #16]
 800b9be:	b9eb      	cbnz	r3, 800b9fc <_vfiprintf_r+0x78>
 800b9c0:	4629      	mov	r1, r5
 800b9c2:	4630      	mov	r0, r6
 800b9c4:	f000 f96e 	bl	800bca4 <__swsetup_r>
 800b9c8:	b1c0      	cbz	r0, 800b9fc <_vfiprintf_r+0x78>
 800b9ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9cc:	07dc      	lsls	r4, r3, #31
 800b9ce:	d50e      	bpl.n	800b9ee <_vfiprintf_r+0x6a>
 800b9d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b9d4:	b01d      	add	sp, #116	; 0x74
 800b9d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9da:	4b7b      	ldr	r3, [pc, #492]	; (800bbc8 <_vfiprintf_r+0x244>)
 800b9dc:	429d      	cmp	r5, r3
 800b9de:	d101      	bne.n	800b9e4 <_vfiprintf_r+0x60>
 800b9e0:	68b5      	ldr	r5, [r6, #8]
 800b9e2:	e7df      	b.n	800b9a4 <_vfiprintf_r+0x20>
 800b9e4:	4b79      	ldr	r3, [pc, #484]	; (800bbcc <_vfiprintf_r+0x248>)
 800b9e6:	429d      	cmp	r5, r3
 800b9e8:	bf08      	it	eq
 800b9ea:	68f5      	ldreq	r5, [r6, #12]
 800b9ec:	e7da      	b.n	800b9a4 <_vfiprintf_r+0x20>
 800b9ee:	89ab      	ldrh	r3, [r5, #12]
 800b9f0:	0598      	lsls	r0, r3, #22
 800b9f2:	d4ed      	bmi.n	800b9d0 <_vfiprintf_r+0x4c>
 800b9f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b9f6:	f000 fb84 	bl	800c102 <__retarget_lock_release_recursive>
 800b9fa:	e7e9      	b.n	800b9d0 <_vfiprintf_r+0x4c>
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	9309      	str	r3, [sp, #36]	; 0x24
 800ba00:	2320      	movs	r3, #32
 800ba02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba06:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba0a:	2330      	movs	r3, #48	; 0x30
 800ba0c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bbd0 <_vfiprintf_r+0x24c>
 800ba10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba14:	f04f 0901 	mov.w	r9, #1
 800ba18:	4623      	mov	r3, r4
 800ba1a:	469a      	mov	sl, r3
 800ba1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba20:	b10a      	cbz	r2, 800ba26 <_vfiprintf_r+0xa2>
 800ba22:	2a25      	cmp	r2, #37	; 0x25
 800ba24:	d1f9      	bne.n	800ba1a <_vfiprintf_r+0x96>
 800ba26:	ebba 0b04 	subs.w	fp, sl, r4
 800ba2a:	d00b      	beq.n	800ba44 <_vfiprintf_r+0xc0>
 800ba2c:	465b      	mov	r3, fp
 800ba2e:	4622      	mov	r2, r4
 800ba30:	4629      	mov	r1, r5
 800ba32:	4630      	mov	r0, r6
 800ba34:	f7ff ff93 	bl	800b95e <__sfputs_r>
 800ba38:	3001      	adds	r0, #1
 800ba3a:	f000 80aa 	beq.w	800bb92 <_vfiprintf_r+0x20e>
 800ba3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba40:	445a      	add	r2, fp
 800ba42:	9209      	str	r2, [sp, #36]	; 0x24
 800ba44:	f89a 3000 	ldrb.w	r3, [sl]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	f000 80a2 	beq.w	800bb92 <_vfiprintf_r+0x20e>
 800ba4e:	2300      	movs	r3, #0
 800ba50:	f04f 32ff 	mov.w	r2, #4294967295
 800ba54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba58:	f10a 0a01 	add.w	sl, sl, #1
 800ba5c:	9304      	str	r3, [sp, #16]
 800ba5e:	9307      	str	r3, [sp, #28]
 800ba60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba64:	931a      	str	r3, [sp, #104]	; 0x68
 800ba66:	4654      	mov	r4, sl
 800ba68:	2205      	movs	r2, #5
 800ba6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba6e:	4858      	ldr	r0, [pc, #352]	; (800bbd0 <_vfiprintf_r+0x24c>)
 800ba70:	f7f4 fbde 	bl	8000230 <memchr>
 800ba74:	9a04      	ldr	r2, [sp, #16]
 800ba76:	b9d8      	cbnz	r0, 800bab0 <_vfiprintf_r+0x12c>
 800ba78:	06d1      	lsls	r1, r2, #27
 800ba7a:	bf44      	itt	mi
 800ba7c:	2320      	movmi	r3, #32
 800ba7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba82:	0713      	lsls	r3, r2, #28
 800ba84:	bf44      	itt	mi
 800ba86:	232b      	movmi	r3, #43	; 0x2b
 800ba88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba8c:	f89a 3000 	ldrb.w	r3, [sl]
 800ba90:	2b2a      	cmp	r3, #42	; 0x2a
 800ba92:	d015      	beq.n	800bac0 <_vfiprintf_r+0x13c>
 800ba94:	9a07      	ldr	r2, [sp, #28]
 800ba96:	4654      	mov	r4, sl
 800ba98:	2000      	movs	r0, #0
 800ba9a:	f04f 0c0a 	mov.w	ip, #10
 800ba9e:	4621      	mov	r1, r4
 800baa0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800baa4:	3b30      	subs	r3, #48	; 0x30
 800baa6:	2b09      	cmp	r3, #9
 800baa8:	d94e      	bls.n	800bb48 <_vfiprintf_r+0x1c4>
 800baaa:	b1b0      	cbz	r0, 800bada <_vfiprintf_r+0x156>
 800baac:	9207      	str	r2, [sp, #28]
 800baae:	e014      	b.n	800bada <_vfiprintf_r+0x156>
 800bab0:	eba0 0308 	sub.w	r3, r0, r8
 800bab4:	fa09 f303 	lsl.w	r3, r9, r3
 800bab8:	4313      	orrs	r3, r2
 800baba:	9304      	str	r3, [sp, #16]
 800babc:	46a2      	mov	sl, r4
 800babe:	e7d2      	b.n	800ba66 <_vfiprintf_r+0xe2>
 800bac0:	9b03      	ldr	r3, [sp, #12]
 800bac2:	1d19      	adds	r1, r3, #4
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	9103      	str	r1, [sp, #12]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	bfbb      	ittet	lt
 800bacc:	425b      	neglt	r3, r3
 800bace:	f042 0202 	orrlt.w	r2, r2, #2
 800bad2:	9307      	strge	r3, [sp, #28]
 800bad4:	9307      	strlt	r3, [sp, #28]
 800bad6:	bfb8      	it	lt
 800bad8:	9204      	strlt	r2, [sp, #16]
 800bada:	7823      	ldrb	r3, [r4, #0]
 800badc:	2b2e      	cmp	r3, #46	; 0x2e
 800bade:	d10c      	bne.n	800bafa <_vfiprintf_r+0x176>
 800bae0:	7863      	ldrb	r3, [r4, #1]
 800bae2:	2b2a      	cmp	r3, #42	; 0x2a
 800bae4:	d135      	bne.n	800bb52 <_vfiprintf_r+0x1ce>
 800bae6:	9b03      	ldr	r3, [sp, #12]
 800bae8:	1d1a      	adds	r2, r3, #4
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	9203      	str	r2, [sp, #12]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	bfb8      	it	lt
 800baf2:	f04f 33ff 	movlt.w	r3, #4294967295
 800baf6:	3402      	adds	r4, #2
 800baf8:	9305      	str	r3, [sp, #20]
 800bafa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bbe0 <_vfiprintf_r+0x25c>
 800bafe:	7821      	ldrb	r1, [r4, #0]
 800bb00:	2203      	movs	r2, #3
 800bb02:	4650      	mov	r0, sl
 800bb04:	f7f4 fb94 	bl	8000230 <memchr>
 800bb08:	b140      	cbz	r0, 800bb1c <_vfiprintf_r+0x198>
 800bb0a:	2340      	movs	r3, #64	; 0x40
 800bb0c:	eba0 000a 	sub.w	r0, r0, sl
 800bb10:	fa03 f000 	lsl.w	r0, r3, r0
 800bb14:	9b04      	ldr	r3, [sp, #16]
 800bb16:	4303      	orrs	r3, r0
 800bb18:	3401      	adds	r4, #1
 800bb1a:	9304      	str	r3, [sp, #16]
 800bb1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb20:	482c      	ldr	r0, [pc, #176]	; (800bbd4 <_vfiprintf_r+0x250>)
 800bb22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb26:	2206      	movs	r2, #6
 800bb28:	f7f4 fb82 	bl	8000230 <memchr>
 800bb2c:	2800      	cmp	r0, #0
 800bb2e:	d03f      	beq.n	800bbb0 <_vfiprintf_r+0x22c>
 800bb30:	4b29      	ldr	r3, [pc, #164]	; (800bbd8 <_vfiprintf_r+0x254>)
 800bb32:	bb1b      	cbnz	r3, 800bb7c <_vfiprintf_r+0x1f8>
 800bb34:	9b03      	ldr	r3, [sp, #12]
 800bb36:	3307      	adds	r3, #7
 800bb38:	f023 0307 	bic.w	r3, r3, #7
 800bb3c:	3308      	adds	r3, #8
 800bb3e:	9303      	str	r3, [sp, #12]
 800bb40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb42:	443b      	add	r3, r7
 800bb44:	9309      	str	r3, [sp, #36]	; 0x24
 800bb46:	e767      	b.n	800ba18 <_vfiprintf_r+0x94>
 800bb48:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb4c:	460c      	mov	r4, r1
 800bb4e:	2001      	movs	r0, #1
 800bb50:	e7a5      	b.n	800ba9e <_vfiprintf_r+0x11a>
 800bb52:	2300      	movs	r3, #0
 800bb54:	3401      	adds	r4, #1
 800bb56:	9305      	str	r3, [sp, #20]
 800bb58:	4619      	mov	r1, r3
 800bb5a:	f04f 0c0a 	mov.w	ip, #10
 800bb5e:	4620      	mov	r0, r4
 800bb60:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb64:	3a30      	subs	r2, #48	; 0x30
 800bb66:	2a09      	cmp	r2, #9
 800bb68:	d903      	bls.n	800bb72 <_vfiprintf_r+0x1ee>
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d0c5      	beq.n	800bafa <_vfiprintf_r+0x176>
 800bb6e:	9105      	str	r1, [sp, #20]
 800bb70:	e7c3      	b.n	800bafa <_vfiprintf_r+0x176>
 800bb72:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb76:	4604      	mov	r4, r0
 800bb78:	2301      	movs	r3, #1
 800bb7a:	e7f0      	b.n	800bb5e <_vfiprintf_r+0x1da>
 800bb7c:	ab03      	add	r3, sp, #12
 800bb7e:	9300      	str	r3, [sp, #0]
 800bb80:	462a      	mov	r2, r5
 800bb82:	4b16      	ldr	r3, [pc, #88]	; (800bbdc <_vfiprintf_r+0x258>)
 800bb84:	a904      	add	r1, sp, #16
 800bb86:	4630      	mov	r0, r6
 800bb88:	f7fd fe14 	bl	80097b4 <_printf_float>
 800bb8c:	4607      	mov	r7, r0
 800bb8e:	1c78      	adds	r0, r7, #1
 800bb90:	d1d6      	bne.n	800bb40 <_vfiprintf_r+0x1bc>
 800bb92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb94:	07d9      	lsls	r1, r3, #31
 800bb96:	d405      	bmi.n	800bba4 <_vfiprintf_r+0x220>
 800bb98:	89ab      	ldrh	r3, [r5, #12]
 800bb9a:	059a      	lsls	r2, r3, #22
 800bb9c:	d402      	bmi.n	800bba4 <_vfiprintf_r+0x220>
 800bb9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bba0:	f000 faaf 	bl	800c102 <__retarget_lock_release_recursive>
 800bba4:	89ab      	ldrh	r3, [r5, #12]
 800bba6:	065b      	lsls	r3, r3, #25
 800bba8:	f53f af12 	bmi.w	800b9d0 <_vfiprintf_r+0x4c>
 800bbac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bbae:	e711      	b.n	800b9d4 <_vfiprintf_r+0x50>
 800bbb0:	ab03      	add	r3, sp, #12
 800bbb2:	9300      	str	r3, [sp, #0]
 800bbb4:	462a      	mov	r2, r5
 800bbb6:	4b09      	ldr	r3, [pc, #36]	; (800bbdc <_vfiprintf_r+0x258>)
 800bbb8:	a904      	add	r1, sp, #16
 800bbba:	4630      	mov	r0, r6
 800bbbc:	f7fe f89e 	bl	8009cfc <_printf_i>
 800bbc0:	e7e4      	b.n	800bb8c <_vfiprintf_r+0x208>
 800bbc2:	bf00      	nop
 800bbc4:	0800cc4c 	.word	0x0800cc4c
 800bbc8:	0800cc6c 	.word	0x0800cc6c
 800bbcc:	0800cc2c 	.word	0x0800cc2c
 800bbd0:	0800cad4 	.word	0x0800cad4
 800bbd4:	0800cade 	.word	0x0800cade
 800bbd8:	080097b5 	.word	0x080097b5
 800bbdc:	0800b95f 	.word	0x0800b95f
 800bbe0:	0800cada 	.word	0x0800cada

0800bbe4 <__swbuf_r>:
 800bbe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbe6:	460e      	mov	r6, r1
 800bbe8:	4614      	mov	r4, r2
 800bbea:	4605      	mov	r5, r0
 800bbec:	b118      	cbz	r0, 800bbf6 <__swbuf_r+0x12>
 800bbee:	6983      	ldr	r3, [r0, #24]
 800bbf0:	b90b      	cbnz	r3, 800bbf6 <__swbuf_r+0x12>
 800bbf2:	f000 f9e7 	bl	800bfc4 <__sinit>
 800bbf6:	4b21      	ldr	r3, [pc, #132]	; (800bc7c <__swbuf_r+0x98>)
 800bbf8:	429c      	cmp	r4, r3
 800bbfa:	d12b      	bne.n	800bc54 <__swbuf_r+0x70>
 800bbfc:	686c      	ldr	r4, [r5, #4]
 800bbfe:	69a3      	ldr	r3, [r4, #24]
 800bc00:	60a3      	str	r3, [r4, #8]
 800bc02:	89a3      	ldrh	r3, [r4, #12]
 800bc04:	071a      	lsls	r2, r3, #28
 800bc06:	d52f      	bpl.n	800bc68 <__swbuf_r+0x84>
 800bc08:	6923      	ldr	r3, [r4, #16]
 800bc0a:	b36b      	cbz	r3, 800bc68 <__swbuf_r+0x84>
 800bc0c:	6923      	ldr	r3, [r4, #16]
 800bc0e:	6820      	ldr	r0, [r4, #0]
 800bc10:	1ac0      	subs	r0, r0, r3
 800bc12:	6963      	ldr	r3, [r4, #20]
 800bc14:	b2f6      	uxtb	r6, r6
 800bc16:	4283      	cmp	r3, r0
 800bc18:	4637      	mov	r7, r6
 800bc1a:	dc04      	bgt.n	800bc26 <__swbuf_r+0x42>
 800bc1c:	4621      	mov	r1, r4
 800bc1e:	4628      	mov	r0, r5
 800bc20:	f000 f93c 	bl	800be9c <_fflush_r>
 800bc24:	bb30      	cbnz	r0, 800bc74 <__swbuf_r+0x90>
 800bc26:	68a3      	ldr	r3, [r4, #8]
 800bc28:	3b01      	subs	r3, #1
 800bc2a:	60a3      	str	r3, [r4, #8]
 800bc2c:	6823      	ldr	r3, [r4, #0]
 800bc2e:	1c5a      	adds	r2, r3, #1
 800bc30:	6022      	str	r2, [r4, #0]
 800bc32:	701e      	strb	r6, [r3, #0]
 800bc34:	6963      	ldr	r3, [r4, #20]
 800bc36:	3001      	adds	r0, #1
 800bc38:	4283      	cmp	r3, r0
 800bc3a:	d004      	beq.n	800bc46 <__swbuf_r+0x62>
 800bc3c:	89a3      	ldrh	r3, [r4, #12]
 800bc3e:	07db      	lsls	r3, r3, #31
 800bc40:	d506      	bpl.n	800bc50 <__swbuf_r+0x6c>
 800bc42:	2e0a      	cmp	r6, #10
 800bc44:	d104      	bne.n	800bc50 <__swbuf_r+0x6c>
 800bc46:	4621      	mov	r1, r4
 800bc48:	4628      	mov	r0, r5
 800bc4a:	f000 f927 	bl	800be9c <_fflush_r>
 800bc4e:	b988      	cbnz	r0, 800bc74 <__swbuf_r+0x90>
 800bc50:	4638      	mov	r0, r7
 800bc52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc54:	4b0a      	ldr	r3, [pc, #40]	; (800bc80 <__swbuf_r+0x9c>)
 800bc56:	429c      	cmp	r4, r3
 800bc58:	d101      	bne.n	800bc5e <__swbuf_r+0x7a>
 800bc5a:	68ac      	ldr	r4, [r5, #8]
 800bc5c:	e7cf      	b.n	800bbfe <__swbuf_r+0x1a>
 800bc5e:	4b09      	ldr	r3, [pc, #36]	; (800bc84 <__swbuf_r+0xa0>)
 800bc60:	429c      	cmp	r4, r3
 800bc62:	bf08      	it	eq
 800bc64:	68ec      	ldreq	r4, [r5, #12]
 800bc66:	e7ca      	b.n	800bbfe <__swbuf_r+0x1a>
 800bc68:	4621      	mov	r1, r4
 800bc6a:	4628      	mov	r0, r5
 800bc6c:	f000 f81a 	bl	800bca4 <__swsetup_r>
 800bc70:	2800      	cmp	r0, #0
 800bc72:	d0cb      	beq.n	800bc0c <__swbuf_r+0x28>
 800bc74:	f04f 37ff 	mov.w	r7, #4294967295
 800bc78:	e7ea      	b.n	800bc50 <__swbuf_r+0x6c>
 800bc7a:	bf00      	nop
 800bc7c:	0800cc4c 	.word	0x0800cc4c
 800bc80:	0800cc6c 	.word	0x0800cc6c
 800bc84:	0800cc2c 	.word	0x0800cc2c

0800bc88 <__ascii_wctomb>:
 800bc88:	b149      	cbz	r1, 800bc9e <__ascii_wctomb+0x16>
 800bc8a:	2aff      	cmp	r2, #255	; 0xff
 800bc8c:	bf85      	ittet	hi
 800bc8e:	238a      	movhi	r3, #138	; 0x8a
 800bc90:	6003      	strhi	r3, [r0, #0]
 800bc92:	700a      	strbls	r2, [r1, #0]
 800bc94:	f04f 30ff 	movhi.w	r0, #4294967295
 800bc98:	bf98      	it	ls
 800bc9a:	2001      	movls	r0, #1
 800bc9c:	4770      	bx	lr
 800bc9e:	4608      	mov	r0, r1
 800bca0:	4770      	bx	lr
	...

0800bca4 <__swsetup_r>:
 800bca4:	4b32      	ldr	r3, [pc, #200]	; (800bd70 <__swsetup_r+0xcc>)
 800bca6:	b570      	push	{r4, r5, r6, lr}
 800bca8:	681d      	ldr	r5, [r3, #0]
 800bcaa:	4606      	mov	r6, r0
 800bcac:	460c      	mov	r4, r1
 800bcae:	b125      	cbz	r5, 800bcba <__swsetup_r+0x16>
 800bcb0:	69ab      	ldr	r3, [r5, #24]
 800bcb2:	b913      	cbnz	r3, 800bcba <__swsetup_r+0x16>
 800bcb4:	4628      	mov	r0, r5
 800bcb6:	f000 f985 	bl	800bfc4 <__sinit>
 800bcba:	4b2e      	ldr	r3, [pc, #184]	; (800bd74 <__swsetup_r+0xd0>)
 800bcbc:	429c      	cmp	r4, r3
 800bcbe:	d10f      	bne.n	800bce0 <__swsetup_r+0x3c>
 800bcc0:	686c      	ldr	r4, [r5, #4]
 800bcc2:	89a3      	ldrh	r3, [r4, #12]
 800bcc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bcc8:	0719      	lsls	r1, r3, #28
 800bcca:	d42c      	bmi.n	800bd26 <__swsetup_r+0x82>
 800bccc:	06dd      	lsls	r5, r3, #27
 800bcce:	d411      	bmi.n	800bcf4 <__swsetup_r+0x50>
 800bcd0:	2309      	movs	r3, #9
 800bcd2:	6033      	str	r3, [r6, #0]
 800bcd4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bcd8:	81a3      	strh	r3, [r4, #12]
 800bcda:	f04f 30ff 	mov.w	r0, #4294967295
 800bcde:	e03e      	b.n	800bd5e <__swsetup_r+0xba>
 800bce0:	4b25      	ldr	r3, [pc, #148]	; (800bd78 <__swsetup_r+0xd4>)
 800bce2:	429c      	cmp	r4, r3
 800bce4:	d101      	bne.n	800bcea <__swsetup_r+0x46>
 800bce6:	68ac      	ldr	r4, [r5, #8]
 800bce8:	e7eb      	b.n	800bcc2 <__swsetup_r+0x1e>
 800bcea:	4b24      	ldr	r3, [pc, #144]	; (800bd7c <__swsetup_r+0xd8>)
 800bcec:	429c      	cmp	r4, r3
 800bcee:	bf08      	it	eq
 800bcf0:	68ec      	ldreq	r4, [r5, #12]
 800bcf2:	e7e6      	b.n	800bcc2 <__swsetup_r+0x1e>
 800bcf4:	0758      	lsls	r0, r3, #29
 800bcf6:	d512      	bpl.n	800bd1e <__swsetup_r+0x7a>
 800bcf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bcfa:	b141      	cbz	r1, 800bd0e <__swsetup_r+0x6a>
 800bcfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd00:	4299      	cmp	r1, r3
 800bd02:	d002      	beq.n	800bd0a <__swsetup_r+0x66>
 800bd04:	4630      	mov	r0, r6
 800bd06:	f7ff fb6f 	bl	800b3e8 <_free_r>
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	6363      	str	r3, [r4, #52]	; 0x34
 800bd0e:	89a3      	ldrh	r3, [r4, #12]
 800bd10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bd14:	81a3      	strh	r3, [r4, #12]
 800bd16:	2300      	movs	r3, #0
 800bd18:	6063      	str	r3, [r4, #4]
 800bd1a:	6923      	ldr	r3, [r4, #16]
 800bd1c:	6023      	str	r3, [r4, #0]
 800bd1e:	89a3      	ldrh	r3, [r4, #12]
 800bd20:	f043 0308 	orr.w	r3, r3, #8
 800bd24:	81a3      	strh	r3, [r4, #12]
 800bd26:	6923      	ldr	r3, [r4, #16]
 800bd28:	b94b      	cbnz	r3, 800bd3e <__swsetup_r+0x9a>
 800bd2a:	89a3      	ldrh	r3, [r4, #12]
 800bd2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bd30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd34:	d003      	beq.n	800bd3e <__swsetup_r+0x9a>
 800bd36:	4621      	mov	r1, r4
 800bd38:	4630      	mov	r0, r6
 800bd3a:	f000 fa07 	bl	800c14c <__smakebuf_r>
 800bd3e:	89a0      	ldrh	r0, [r4, #12]
 800bd40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bd44:	f010 0301 	ands.w	r3, r0, #1
 800bd48:	d00a      	beq.n	800bd60 <__swsetup_r+0xbc>
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	60a3      	str	r3, [r4, #8]
 800bd4e:	6963      	ldr	r3, [r4, #20]
 800bd50:	425b      	negs	r3, r3
 800bd52:	61a3      	str	r3, [r4, #24]
 800bd54:	6923      	ldr	r3, [r4, #16]
 800bd56:	b943      	cbnz	r3, 800bd6a <__swsetup_r+0xc6>
 800bd58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bd5c:	d1ba      	bne.n	800bcd4 <__swsetup_r+0x30>
 800bd5e:	bd70      	pop	{r4, r5, r6, pc}
 800bd60:	0781      	lsls	r1, r0, #30
 800bd62:	bf58      	it	pl
 800bd64:	6963      	ldrpl	r3, [r4, #20]
 800bd66:	60a3      	str	r3, [r4, #8]
 800bd68:	e7f4      	b.n	800bd54 <__swsetup_r+0xb0>
 800bd6a:	2000      	movs	r0, #0
 800bd6c:	e7f7      	b.n	800bd5e <__swsetup_r+0xba>
 800bd6e:	bf00      	nop
 800bd70:	20000010 	.word	0x20000010
 800bd74:	0800cc4c 	.word	0x0800cc4c
 800bd78:	0800cc6c 	.word	0x0800cc6c
 800bd7c:	0800cc2c 	.word	0x0800cc2c

0800bd80 <abort>:
 800bd80:	b508      	push	{r3, lr}
 800bd82:	2006      	movs	r0, #6
 800bd84:	f000 fa52 	bl	800c22c <raise>
 800bd88:	2001      	movs	r0, #1
 800bd8a:	f7f6 fbbd 	bl	8002508 <_exit>
	...

0800bd90 <__sflush_r>:
 800bd90:	898a      	ldrh	r2, [r1, #12]
 800bd92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd96:	4605      	mov	r5, r0
 800bd98:	0710      	lsls	r0, r2, #28
 800bd9a:	460c      	mov	r4, r1
 800bd9c:	d458      	bmi.n	800be50 <__sflush_r+0xc0>
 800bd9e:	684b      	ldr	r3, [r1, #4]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	dc05      	bgt.n	800bdb0 <__sflush_r+0x20>
 800bda4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	dc02      	bgt.n	800bdb0 <__sflush_r+0x20>
 800bdaa:	2000      	movs	r0, #0
 800bdac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bdb2:	2e00      	cmp	r6, #0
 800bdb4:	d0f9      	beq.n	800bdaa <__sflush_r+0x1a>
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bdbc:	682f      	ldr	r7, [r5, #0]
 800bdbe:	602b      	str	r3, [r5, #0]
 800bdc0:	d032      	beq.n	800be28 <__sflush_r+0x98>
 800bdc2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bdc4:	89a3      	ldrh	r3, [r4, #12]
 800bdc6:	075a      	lsls	r2, r3, #29
 800bdc8:	d505      	bpl.n	800bdd6 <__sflush_r+0x46>
 800bdca:	6863      	ldr	r3, [r4, #4]
 800bdcc:	1ac0      	subs	r0, r0, r3
 800bdce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bdd0:	b10b      	cbz	r3, 800bdd6 <__sflush_r+0x46>
 800bdd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bdd4:	1ac0      	subs	r0, r0, r3
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	4602      	mov	r2, r0
 800bdda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bddc:	6a21      	ldr	r1, [r4, #32]
 800bdde:	4628      	mov	r0, r5
 800bde0:	47b0      	blx	r6
 800bde2:	1c43      	adds	r3, r0, #1
 800bde4:	89a3      	ldrh	r3, [r4, #12]
 800bde6:	d106      	bne.n	800bdf6 <__sflush_r+0x66>
 800bde8:	6829      	ldr	r1, [r5, #0]
 800bdea:	291d      	cmp	r1, #29
 800bdec:	d82c      	bhi.n	800be48 <__sflush_r+0xb8>
 800bdee:	4a2a      	ldr	r2, [pc, #168]	; (800be98 <__sflush_r+0x108>)
 800bdf0:	40ca      	lsrs	r2, r1
 800bdf2:	07d6      	lsls	r6, r2, #31
 800bdf4:	d528      	bpl.n	800be48 <__sflush_r+0xb8>
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	6062      	str	r2, [r4, #4]
 800bdfa:	04d9      	lsls	r1, r3, #19
 800bdfc:	6922      	ldr	r2, [r4, #16]
 800bdfe:	6022      	str	r2, [r4, #0]
 800be00:	d504      	bpl.n	800be0c <__sflush_r+0x7c>
 800be02:	1c42      	adds	r2, r0, #1
 800be04:	d101      	bne.n	800be0a <__sflush_r+0x7a>
 800be06:	682b      	ldr	r3, [r5, #0]
 800be08:	b903      	cbnz	r3, 800be0c <__sflush_r+0x7c>
 800be0a:	6560      	str	r0, [r4, #84]	; 0x54
 800be0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be0e:	602f      	str	r7, [r5, #0]
 800be10:	2900      	cmp	r1, #0
 800be12:	d0ca      	beq.n	800bdaa <__sflush_r+0x1a>
 800be14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be18:	4299      	cmp	r1, r3
 800be1a:	d002      	beq.n	800be22 <__sflush_r+0x92>
 800be1c:	4628      	mov	r0, r5
 800be1e:	f7ff fae3 	bl	800b3e8 <_free_r>
 800be22:	2000      	movs	r0, #0
 800be24:	6360      	str	r0, [r4, #52]	; 0x34
 800be26:	e7c1      	b.n	800bdac <__sflush_r+0x1c>
 800be28:	6a21      	ldr	r1, [r4, #32]
 800be2a:	2301      	movs	r3, #1
 800be2c:	4628      	mov	r0, r5
 800be2e:	47b0      	blx	r6
 800be30:	1c41      	adds	r1, r0, #1
 800be32:	d1c7      	bne.n	800bdc4 <__sflush_r+0x34>
 800be34:	682b      	ldr	r3, [r5, #0]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d0c4      	beq.n	800bdc4 <__sflush_r+0x34>
 800be3a:	2b1d      	cmp	r3, #29
 800be3c:	d001      	beq.n	800be42 <__sflush_r+0xb2>
 800be3e:	2b16      	cmp	r3, #22
 800be40:	d101      	bne.n	800be46 <__sflush_r+0xb6>
 800be42:	602f      	str	r7, [r5, #0]
 800be44:	e7b1      	b.n	800bdaa <__sflush_r+0x1a>
 800be46:	89a3      	ldrh	r3, [r4, #12]
 800be48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be4c:	81a3      	strh	r3, [r4, #12]
 800be4e:	e7ad      	b.n	800bdac <__sflush_r+0x1c>
 800be50:	690f      	ldr	r7, [r1, #16]
 800be52:	2f00      	cmp	r7, #0
 800be54:	d0a9      	beq.n	800bdaa <__sflush_r+0x1a>
 800be56:	0793      	lsls	r3, r2, #30
 800be58:	680e      	ldr	r6, [r1, #0]
 800be5a:	bf08      	it	eq
 800be5c:	694b      	ldreq	r3, [r1, #20]
 800be5e:	600f      	str	r7, [r1, #0]
 800be60:	bf18      	it	ne
 800be62:	2300      	movne	r3, #0
 800be64:	eba6 0807 	sub.w	r8, r6, r7
 800be68:	608b      	str	r3, [r1, #8]
 800be6a:	f1b8 0f00 	cmp.w	r8, #0
 800be6e:	dd9c      	ble.n	800bdaa <__sflush_r+0x1a>
 800be70:	6a21      	ldr	r1, [r4, #32]
 800be72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800be74:	4643      	mov	r3, r8
 800be76:	463a      	mov	r2, r7
 800be78:	4628      	mov	r0, r5
 800be7a:	47b0      	blx	r6
 800be7c:	2800      	cmp	r0, #0
 800be7e:	dc06      	bgt.n	800be8e <__sflush_r+0xfe>
 800be80:	89a3      	ldrh	r3, [r4, #12]
 800be82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be86:	81a3      	strh	r3, [r4, #12]
 800be88:	f04f 30ff 	mov.w	r0, #4294967295
 800be8c:	e78e      	b.n	800bdac <__sflush_r+0x1c>
 800be8e:	4407      	add	r7, r0
 800be90:	eba8 0800 	sub.w	r8, r8, r0
 800be94:	e7e9      	b.n	800be6a <__sflush_r+0xda>
 800be96:	bf00      	nop
 800be98:	20400001 	.word	0x20400001

0800be9c <_fflush_r>:
 800be9c:	b538      	push	{r3, r4, r5, lr}
 800be9e:	690b      	ldr	r3, [r1, #16]
 800bea0:	4605      	mov	r5, r0
 800bea2:	460c      	mov	r4, r1
 800bea4:	b913      	cbnz	r3, 800beac <_fflush_r+0x10>
 800bea6:	2500      	movs	r5, #0
 800bea8:	4628      	mov	r0, r5
 800beaa:	bd38      	pop	{r3, r4, r5, pc}
 800beac:	b118      	cbz	r0, 800beb6 <_fflush_r+0x1a>
 800beae:	6983      	ldr	r3, [r0, #24]
 800beb0:	b90b      	cbnz	r3, 800beb6 <_fflush_r+0x1a>
 800beb2:	f000 f887 	bl	800bfc4 <__sinit>
 800beb6:	4b14      	ldr	r3, [pc, #80]	; (800bf08 <_fflush_r+0x6c>)
 800beb8:	429c      	cmp	r4, r3
 800beba:	d11b      	bne.n	800bef4 <_fflush_r+0x58>
 800bebc:	686c      	ldr	r4, [r5, #4]
 800bebe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d0ef      	beq.n	800bea6 <_fflush_r+0xa>
 800bec6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bec8:	07d0      	lsls	r0, r2, #31
 800beca:	d404      	bmi.n	800bed6 <_fflush_r+0x3a>
 800becc:	0599      	lsls	r1, r3, #22
 800bece:	d402      	bmi.n	800bed6 <_fflush_r+0x3a>
 800bed0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bed2:	f000 f915 	bl	800c100 <__retarget_lock_acquire_recursive>
 800bed6:	4628      	mov	r0, r5
 800bed8:	4621      	mov	r1, r4
 800beda:	f7ff ff59 	bl	800bd90 <__sflush_r>
 800bede:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bee0:	07da      	lsls	r2, r3, #31
 800bee2:	4605      	mov	r5, r0
 800bee4:	d4e0      	bmi.n	800bea8 <_fflush_r+0xc>
 800bee6:	89a3      	ldrh	r3, [r4, #12]
 800bee8:	059b      	lsls	r3, r3, #22
 800beea:	d4dd      	bmi.n	800bea8 <_fflush_r+0xc>
 800beec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800beee:	f000 f908 	bl	800c102 <__retarget_lock_release_recursive>
 800bef2:	e7d9      	b.n	800bea8 <_fflush_r+0xc>
 800bef4:	4b05      	ldr	r3, [pc, #20]	; (800bf0c <_fflush_r+0x70>)
 800bef6:	429c      	cmp	r4, r3
 800bef8:	d101      	bne.n	800befe <_fflush_r+0x62>
 800befa:	68ac      	ldr	r4, [r5, #8]
 800befc:	e7df      	b.n	800bebe <_fflush_r+0x22>
 800befe:	4b04      	ldr	r3, [pc, #16]	; (800bf10 <_fflush_r+0x74>)
 800bf00:	429c      	cmp	r4, r3
 800bf02:	bf08      	it	eq
 800bf04:	68ec      	ldreq	r4, [r5, #12]
 800bf06:	e7da      	b.n	800bebe <_fflush_r+0x22>
 800bf08:	0800cc4c 	.word	0x0800cc4c
 800bf0c:	0800cc6c 	.word	0x0800cc6c
 800bf10:	0800cc2c 	.word	0x0800cc2c

0800bf14 <std>:
 800bf14:	2300      	movs	r3, #0
 800bf16:	b510      	push	{r4, lr}
 800bf18:	4604      	mov	r4, r0
 800bf1a:	e9c0 3300 	strd	r3, r3, [r0]
 800bf1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bf22:	6083      	str	r3, [r0, #8]
 800bf24:	8181      	strh	r1, [r0, #12]
 800bf26:	6643      	str	r3, [r0, #100]	; 0x64
 800bf28:	81c2      	strh	r2, [r0, #14]
 800bf2a:	6183      	str	r3, [r0, #24]
 800bf2c:	4619      	mov	r1, r3
 800bf2e:	2208      	movs	r2, #8
 800bf30:	305c      	adds	r0, #92	; 0x5c
 800bf32:	f7fd fb97 	bl	8009664 <memset>
 800bf36:	4b05      	ldr	r3, [pc, #20]	; (800bf4c <std+0x38>)
 800bf38:	6263      	str	r3, [r4, #36]	; 0x24
 800bf3a:	4b05      	ldr	r3, [pc, #20]	; (800bf50 <std+0x3c>)
 800bf3c:	62a3      	str	r3, [r4, #40]	; 0x28
 800bf3e:	4b05      	ldr	r3, [pc, #20]	; (800bf54 <std+0x40>)
 800bf40:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bf42:	4b05      	ldr	r3, [pc, #20]	; (800bf58 <std+0x44>)
 800bf44:	6224      	str	r4, [r4, #32]
 800bf46:	6323      	str	r3, [r4, #48]	; 0x30
 800bf48:	bd10      	pop	{r4, pc}
 800bf4a:	bf00      	nop
 800bf4c:	0800c265 	.word	0x0800c265
 800bf50:	0800c287 	.word	0x0800c287
 800bf54:	0800c2bf 	.word	0x0800c2bf
 800bf58:	0800c2e3 	.word	0x0800c2e3

0800bf5c <_cleanup_r>:
 800bf5c:	4901      	ldr	r1, [pc, #4]	; (800bf64 <_cleanup_r+0x8>)
 800bf5e:	f000 b8af 	b.w	800c0c0 <_fwalk_reent>
 800bf62:	bf00      	nop
 800bf64:	0800be9d 	.word	0x0800be9d

0800bf68 <__sfmoreglue>:
 800bf68:	b570      	push	{r4, r5, r6, lr}
 800bf6a:	1e4a      	subs	r2, r1, #1
 800bf6c:	2568      	movs	r5, #104	; 0x68
 800bf6e:	4355      	muls	r5, r2
 800bf70:	460e      	mov	r6, r1
 800bf72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bf76:	f7ff fa87 	bl	800b488 <_malloc_r>
 800bf7a:	4604      	mov	r4, r0
 800bf7c:	b140      	cbz	r0, 800bf90 <__sfmoreglue+0x28>
 800bf7e:	2100      	movs	r1, #0
 800bf80:	e9c0 1600 	strd	r1, r6, [r0]
 800bf84:	300c      	adds	r0, #12
 800bf86:	60a0      	str	r0, [r4, #8]
 800bf88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bf8c:	f7fd fb6a 	bl	8009664 <memset>
 800bf90:	4620      	mov	r0, r4
 800bf92:	bd70      	pop	{r4, r5, r6, pc}

0800bf94 <__sfp_lock_acquire>:
 800bf94:	4801      	ldr	r0, [pc, #4]	; (800bf9c <__sfp_lock_acquire+0x8>)
 800bf96:	f000 b8b3 	b.w	800c100 <__retarget_lock_acquire_recursive>
 800bf9a:	bf00      	nop
 800bf9c:	200008e4 	.word	0x200008e4

0800bfa0 <__sfp_lock_release>:
 800bfa0:	4801      	ldr	r0, [pc, #4]	; (800bfa8 <__sfp_lock_release+0x8>)
 800bfa2:	f000 b8ae 	b.w	800c102 <__retarget_lock_release_recursive>
 800bfa6:	bf00      	nop
 800bfa8:	200008e4 	.word	0x200008e4

0800bfac <__sinit_lock_acquire>:
 800bfac:	4801      	ldr	r0, [pc, #4]	; (800bfb4 <__sinit_lock_acquire+0x8>)
 800bfae:	f000 b8a7 	b.w	800c100 <__retarget_lock_acquire_recursive>
 800bfb2:	bf00      	nop
 800bfb4:	200008df 	.word	0x200008df

0800bfb8 <__sinit_lock_release>:
 800bfb8:	4801      	ldr	r0, [pc, #4]	; (800bfc0 <__sinit_lock_release+0x8>)
 800bfba:	f000 b8a2 	b.w	800c102 <__retarget_lock_release_recursive>
 800bfbe:	bf00      	nop
 800bfc0:	200008df 	.word	0x200008df

0800bfc4 <__sinit>:
 800bfc4:	b510      	push	{r4, lr}
 800bfc6:	4604      	mov	r4, r0
 800bfc8:	f7ff fff0 	bl	800bfac <__sinit_lock_acquire>
 800bfcc:	69a3      	ldr	r3, [r4, #24]
 800bfce:	b11b      	cbz	r3, 800bfd8 <__sinit+0x14>
 800bfd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfd4:	f7ff bff0 	b.w	800bfb8 <__sinit_lock_release>
 800bfd8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bfdc:	6523      	str	r3, [r4, #80]	; 0x50
 800bfde:	4b13      	ldr	r3, [pc, #76]	; (800c02c <__sinit+0x68>)
 800bfe0:	4a13      	ldr	r2, [pc, #76]	; (800c030 <__sinit+0x6c>)
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	62a2      	str	r2, [r4, #40]	; 0x28
 800bfe6:	42a3      	cmp	r3, r4
 800bfe8:	bf04      	itt	eq
 800bfea:	2301      	moveq	r3, #1
 800bfec:	61a3      	streq	r3, [r4, #24]
 800bfee:	4620      	mov	r0, r4
 800bff0:	f000 f820 	bl	800c034 <__sfp>
 800bff4:	6060      	str	r0, [r4, #4]
 800bff6:	4620      	mov	r0, r4
 800bff8:	f000 f81c 	bl	800c034 <__sfp>
 800bffc:	60a0      	str	r0, [r4, #8]
 800bffe:	4620      	mov	r0, r4
 800c000:	f000 f818 	bl	800c034 <__sfp>
 800c004:	2200      	movs	r2, #0
 800c006:	60e0      	str	r0, [r4, #12]
 800c008:	2104      	movs	r1, #4
 800c00a:	6860      	ldr	r0, [r4, #4]
 800c00c:	f7ff ff82 	bl	800bf14 <std>
 800c010:	68a0      	ldr	r0, [r4, #8]
 800c012:	2201      	movs	r2, #1
 800c014:	2109      	movs	r1, #9
 800c016:	f7ff ff7d 	bl	800bf14 <std>
 800c01a:	68e0      	ldr	r0, [r4, #12]
 800c01c:	2202      	movs	r2, #2
 800c01e:	2112      	movs	r1, #18
 800c020:	f7ff ff78 	bl	800bf14 <std>
 800c024:	2301      	movs	r3, #1
 800c026:	61a3      	str	r3, [r4, #24]
 800c028:	e7d2      	b.n	800bfd0 <__sinit+0xc>
 800c02a:	bf00      	nop
 800c02c:	0800c8ac 	.word	0x0800c8ac
 800c030:	0800bf5d 	.word	0x0800bf5d

0800c034 <__sfp>:
 800c034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c036:	4607      	mov	r7, r0
 800c038:	f7ff ffac 	bl	800bf94 <__sfp_lock_acquire>
 800c03c:	4b1e      	ldr	r3, [pc, #120]	; (800c0b8 <__sfp+0x84>)
 800c03e:	681e      	ldr	r6, [r3, #0]
 800c040:	69b3      	ldr	r3, [r6, #24]
 800c042:	b913      	cbnz	r3, 800c04a <__sfp+0x16>
 800c044:	4630      	mov	r0, r6
 800c046:	f7ff ffbd 	bl	800bfc4 <__sinit>
 800c04a:	3648      	adds	r6, #72	; 0x48
 800c04c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c050:	3b01      	subs	r3, #1
 800c052:	d503      	bpl.n	800c05c <__sfp+0x28>
 800c054:	6833      	ldr	r3, [r6, #0]
 800c056:	b30b      	cbz	r3, 800c09c <__sfp+0x68>
 800c058:	6836      	ldr	r6, [r6, #0]
 800c05a:	e7f7      	b.n	800c04c <__sfp+0x18>
 800c05c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c060:	b9d5      	cbnz	r5, 800c098 <__sfp+0x64>
 800c062:	4b16      	ldr	r3, [pc, #88]	; (800c0bc <__sfp+0x88>)
 800c064:	60e3      	str	r3, [r4, #12]
 800c066:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c06a:	6665      	str	r5, [r4, #100]	; 0x64
 800c06c:	f000 f847 	bl	800c0fe <__retarget_lock_init_recursive>
 800c070:	f7ff ff96 	bl	800bfa0 <__sfp_lock_release>
 800c074:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c078:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c07c:	6025      	str	r5, [r4, #0]
 800c07e:	61a5      	str	r5, [r4, #24]
 800c080:	2208      	movs	r2, #8
 800c082:	4629      	mov	r1, r5
 800c084:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c088:	f7fd faec 	bl	8009664 <memset>
 800c08c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c090:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c094:	4620      	mov	r0, r4
 800c096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c098:	3468      	adds	r4, #104	; 0x68
 800c09a:	e7d9      	b.n	800c050 <__sfp+0x1c>
 800c09c:	2104      	movs	r1, #4
 800c09e:	4638      	mov	r0, r7
 800c0a0:	f7ff ff62 	bl	800bf68 <__sfmoreglue>
 800c0a4:	4604      	mov	r4, r0
 800c0a6:	6030      	str	r0, [r6, #0]
 800c0a8:	2800      	cmp	r0, #0
 800c0aa:	d1d5      	bne.n	800c058 <__sfp+0x24>
 800c0ac:	f7ff ff78 	bl	800bfa0 <__sfp_lock_release>
 800c0b0:	230c      	movs	r3, #12
 800c0b2:	603b      	str	r3, [r7, #0]
 800c0b4:	e7ee      	b.n	800c094 <__sfp+0x60>
 800c0b6:	bf00      	nop
 800c0b8:	0800c8ac 	.word	0x0800c8ac
 800c0bc:	ffff0001 	.word	0xffff0001

0800c0c0 <_fwalk_reent>:
 800c0c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0c4:	4606      	mov	r6, r0
 800c0c6:	4688      	mov	r8, r1
 800c0c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c0cc:	2700      	movs	r7, #0
 800c0ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c0d2:	f1b9 0901 	subs.w	r9, r9, #1
 800c0d6:	d505      	bpl.n	800c0e4 <_fwalk_reent+0x24>
 800c0d8:	6824      	ldr	r4, [r4, #0]
 800c0da:	2c00      	cmp	r4, #0
 800c0dc:	d1f7      	bne.n	800c0ce <_fwalk_reent+0xe>
 800c0de:	4638      	mov	r0, r7
 800c0e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0e4:	89ab      	ldrh	r3, [r5, #12]
 800c0e6:	2b01      	cmp	r3, #1
 800c0e8:	d907      	bls.n	800c0fa <_fwalk_reent+0x3a>
 800c0ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c0ee:	3301      	adds	r3, #1
 800c0f0:	d003      	beq.n	800c0fa <_fwalk_reent+0x3a>
 800c0f2:	4629      	mov	r1, r5
 800c0f4:	4630      	mov	r0, r6
 800c0f6:	47c0      	blx	r8
 800c0f8:	4307      	orrs	r7, r0
 800c0fa:	3568      	adds	r5, #104	; 0x68
 800c0fc:	e7e9      	b.n	800c0d2 <_fwalk_reent+0x12>

0800c0fe <__retarget_lock_init_recursive>:
 800c0fe:	4770      	bx	lr

0800c100 <__retarget_lock_acquire_recursive>:
 800c100:	4770      	bx	lr

0800c102 <__retarget_lock_release_recursive>:
 800c102:	4770      	bx	lr

0800c104 <__swhatbuf_r>:
 800c104:	b570      	push	{r4, r5, r6, lr}
 800c106:	460e      	mov	r6, r1
 800c108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c10c:	2900      	cmp	r1, #0
 800c10e:	b096      	sub	sp, #88	; 0x58
 800c110:	4614      	mov	r4, r2
 800c112:	461d      	mov	r5, r3
 800c114:	da07      	bge.n	800c126 <__swhatbuf_r+0x22>
 800c116:	2300      	movs	r3, #0
 800c118:	602b      	str	r3, [r5, #0]
 800c11a:	89b3      	ldrh	r3, [r6, #12]
 800c11c:	061a      	lsls	r2, r3, #24
 800c11e:	d410      	bmi.n	800c142 <__swhatbuf_r+0x3e>
 800c120:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c124:	e00e      	b.n	800c144 <__swhatbuf_r+0x40>
 800c126:	466a      	mov	r2, sp
 800c128:	f000 f902 	bl	800c330 <_fstat_r>
 800c12c:	2800      	cmp	r0, #0
 800c12e:	dbf2      	blt.n	800c116 <__swhatbuf_r+0x12>
 800c130:	9a01      	ldr	r2, [sp, #4]
 800c132:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c136:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c13a:	425a      	negs	r2, r3
 800c13c:	415a      	adcs	r2, r3
 800c13e:	602a      	str	r2, [r5, #0]
 800c140:	e7ee      	b.n	800c120 <__swhatbuf_r+0x1c>
 800c142:	2340      	movs	r3, #64	; 0x40
 800c144:	2000      	movs	r0, #0
 800c146:	6023      	str	r3, [r4, #0]
 800c148:	b016      	add	sp, #88	; 0x58
 800c14a:	bd70      	pop	{r4, r5, r6, pc}

0800c14c <__smakebuf_r>:
 800c14c:	898b      	ldrh	r3, [r1, #12]
 800c14e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c150:	079d      	lsls	r5, r3, #30
 800c152:	4606      	mov	r6, r0
 800c154:	460c      	mov	r4, r1
 800c156:	d507      	bpl.n	800c168 <__smakebuf_r+0x1c>
 800c158:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c15c:	6023      	str	r3, [r4, #0]
 800c15e:	6123      	str	r3, [r4, #16]
 800c160:	2301      	movs	r3, #1
 800c162:	6163      	str	r3, [r4, #20]
 800c164:	b002      	add	sp, #8
 800c166:	bd70      	pop	{r4, r5, r6, pc}
 800c168:	ab01      	add	r3, sp, #4
 800c16a:	466a      	mov	r2, sp
 800c16c:	f7ff ffca 	bl	800c104 <__swhatbuf_r>
 800c170:	9900      	ldr	r1, [sp, #0]
 800c172:	4605      	mov	r5, r0
 800c174:	4630      	mov	r0, r6
 800c176:	f7ff f987 	bl	800b488 <_malloc_r>
 800c17a:	b948      	cbnz	r0, 800c190 <__smakebuf_r+0x44>
 800c17c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c180:	059a      	lsls	r2, r3, #22
 800c182:	d4ef      	bmi.n	800c164 <__smakebuf_r+0x18>
 800c184:	f023 0303 	bic.w	r3, r3, #3
 800c188:	f043 0302 	orr.w	r3, r3, #2
 800c18c:	81a3      	strh	r3, [r4, #12]
 800c18e:	e7e3      	b.n	800c158 <__smakebuf_r+0xc>
 800c190:	4b0d      	ldr	r3, [pc, #52]	; (800c1c8 <__smakebuf_r+0x7c>)
 800c192:	62b3      	str	r3, [r6, #40]	; 0x28
 800c194:	89a3      	ldrh	r3, [r4, #12]
 800c196:	6020      	str	r0, [r4, #0]
 800c198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c19c:	81a3      	strh	r3, [r4, #12]
 800c19e:	9b00      	ldr	r3, [sp, #0]
 800c1a0:	6163      	str	r3, [r4, #20]
 800c1a2:	9b01      	ldr	r3, [sp, #4]
 800c1a4:	6120      	str	r0, [r4, #16]
 800c1a6:	b15b      	cbz	r3, 800c1c0 <__smakebuf_r+0x74>
 800c1a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1ac:	4630      	mov	r0, r6
 800c1ae:	f000 f8d1 	bl	800c354 <_isatty_r>
 800c1b2:	b128      	cbz	r0, 800c1c0 <__smakebuf_r+0x74>
 800c1b4:	89a3      	ldrh	r3, [r4, #12]
 800c1b6:	f023 0303 	bic.w	r3, r3, #3
 800c1ba:	f043 0301 	orr.w	r3, r3, #1
 800c1be:	81a3      	strh	r3, [r4, #12]
 800c1c0:	89a0      	ldrh	r0, [r4, #12]
 800c1c2:	4305      	orrs	r5, r0
 800c1c4:	81a5      	strh	r5, [r4, #12]
 800c1c6:	e7cd      	b.n	800c164 <__smakebuf_r+0x18>
 800c1c8:	0800bf5d 	.word	0x0800bf5d

0800c1cc <_malloc_usable_size_r>:
 800c1cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1d0:	1f18      	subs	r0, r3, #4
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	bfbc      	itt	lt
 800c1d6:	580b      	ldrlt	r3, [r1, r0]
 800c1d8:	18c0      	addlt	r0, r0, r3
 800c1da:	4770      	bx	lr

0800c1dc <_raise_r>:
 800c1dc:	291f      	cmp	r1, #31
 800c1de:	b538      	push	{r3, r4, r5, lr}
 800c1e0:	4604      	mov	r4, r0
 800c1e2:	460d      	mov	r5, r1
 800c1e4:	d904      	bls.n	800c1f0 <_raise_r+0x14>
 800c1e6:	2316      	movs	r3, #22
 800c1e8:	6003      	str	r3, [r0, #0]
 800c1ea:	f04f 30ff 	mov.w	r0, #4294967295
 800c1ee:	bd38      	pop	{r3, r4, r5, pc}
 800c1f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c1f2:	b112      	cbz	r2, 800c1fa <_raise_r+0x1e>
 800c1f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c1f8:	b94b      	cbnz	r3, 800c20e <_raise_r+0x32>
 800c1fa:	4620      	mov	r0, r4
 800c1fc:	f000 f830 	bl	800c260 <_getpid_r>
 800c200:	462a      	mov	r2, r5
 800c202:	4601      	mov	r1, r0
 800c204:	4620      	mov	r0, r4
 800c206:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c20a:	f000 b817 	b.w	800c23c <_kill_r>
 800c20e:	2b01      	cmp	r3, #1
 800c210:	d00a      	beq.n	800c228 <_raise_r+0x4c>
 800c212:	1c59      	adds	r1, r3, #1
 800c214:	d103      	bne.n	800c21e <_raise_r+0x42>
 800c216:	2316      	movs	r3, #22
 800c218:	6003      	str	r3, [r0, #0]
 800c21a:	2001      	movs	r0, #1
 800c21c:	e7e7      	b.n	800c1ee <_raise_r+0x12>
 800c21e:	2400      	movs	r4, #0
 800c220:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c224:	4628      	mov	r0, r5
 800c226:	4798      	blx	r3
 800c228:	2000      	movs	r0, #0
 800c22a:	e7e0      	b.n	800c1ee <_raise_r+0x12>

0800c22c <raise>:
 800c22c:	4b02      	ldr	r3, [pc, #8]	; (800c238 <raise+0xc>)
 800c22e:	4601      	mov	r1, r0
 800c230:	6818      	ldr	r0, [r3, #0]
 800c232:	f7ff bfd3 	b.w	800c1dc <_raise_r>
 800c236:	bf00      	nop
 800c238:	20000010 	.word	0x20000010

0800c23c <_kill_r>:
 800c23c:	b538      	push	{r3, r4, r5, lr}
 800c23e:	4d07      	ldr	r5, [pc, #28]	; (800c25c <_kill_r+0x20>)
 800c240:	2300      	movs	r3, #0
 800c242:	4604      	mov	r4, r0
 800c244:	4608      	mov	r0, r1
 800c246:	4611      	mov	r1, r2
 800c248:	602b      	str	r3, [r5, #0]
 800c24a:	f7f6 f94d 	bl	80024e8 <_kill>
 800c24e:	1c43      	adds	r3, r0, #1
 800c250:	d102      	bne.n	800c258 <_kill_r+0x1c>
 800c252:	682b      	ldr	r3, [r5, #0]
 800c254:	b103      	cbz	r3, 800c258 <_kill_r+0x1c>
 800c256:	6023      	str	r3, [r4, #0]
 800c258:	bd38      	pop	{r3, r4, r5, pc}
 800c25a:	bf00      	nop
 800c25c:	200008d8 	.word	0x200008d8

0800c260 <_getpid_r>:
 800c260:	f7f6 b93a 	b.w	80024d8 <_getpid>

0800c264 <__sread>:
 800c264:	b510      	push	{r4, lr}
 800c266:	460c      	mov	r4, r1
 800c268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c26c:	f000 f894 	bl	800c398 <_read_r>
 800c270:	2800      	cmp	r0, #0
 800c272:	bfab      	itete	ge
 800c274:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c276:	89a3      	ldrhlt	r3, [r4, #12]
 800c278:	181b      	addge	r3, r3, r0
 800c27a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c27e:	bfac      	ite	ge
 800c280:	6563      	strge	r3, [r4, #84]	; 0x54
 800c282:	81a3      	strhlt	r3, [r4, #12]
 800c284:	bd10      	pop	{r4, pc}

0800c286 <__swrite>:
 800c286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c28a:	461f      	mov	r7, r3
 800c28c:	898b      	ldrh	r3, [r1, #12]
 800c28e:	05db      	lsls	r3, r3, #23
 800c290:	4605      	mov	r5, r0
 800c292:	460c      	mov	r4, r1
 800c294:	4616      	mov	r6, r2
 800c296:	d505      	bpl.n	800c2a4 <__swrite+0x1e>
 800c298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c29c:	2302      	movs	r3, #2
 800c29e:	2200      	movs	r2, #0
 800c2a0:	f000 f868 	bl	800c374 <_lseek_r>
 800c2a4:	89a3      	ldrh	r3, [r4, #12]
 800c2a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c2ae:	81a3      	strh	r3, [r4, #12]
 800c2b0:	4632      	mov	r2, r6
 800c2b2:	463b      	mov	r3, r7
 800c2b4:	4628      	mov	r0, r5
 800c2b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c2ba:	f000 b817 	b.w	800c2ec <_write_r>

0800c2be <__sseek>:
 800c2be:	b510      	push	{r4, lr}
 800c2c0:	460c      	mov	r4, r1
 800c2c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2c6:	f000 f855 	bl	800c374 <_lseek_r>
 800c2ca:	1c43      	adds	r3, r0, #1
 800c2cc:	89a3      	ldrh	r3, [r4, #12]
 800c2ce:	bf15      	itete	ne
 800c2d0:	6560      	strne	r0, [r4, #84]	; 0x54
 800c2d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c2d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c2da:	81a3      	strheq	r3, [r4, #12]
 800c2dc:	bf18      	it	ne
 800c2de:	81a3      	strhne	r3, [r4, #12]
 800c2e0:	bd10      	pop	{r4, pc}

0800c2e2 <__sclose>:
 800c2e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2e6:	f000 b813 	b.w	800c310 <_close_r>
	...

0800c2ec <_write_r>:
 800c2ec:	b538      	push	{r3, r4, r5, lr}
 800c2ee:	4d07      	ldr	r5, [pc, #28]	; (800c30c <_write_r+0x20>)
 800c2f0:	4604      	mov	r4, r0
 800c2f2:	4608      	mov	r0, r1
 800c2f4:	4611      	mov	r1, r2
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	602a      	str	r2, [r5, #0]
 800c2fa:	461a      	mov	r2, r3
 800c2fc:	f7f6 f92b 	bl	8002556 <_write>
 800c300:	1c43      	adds	r3, r0, #1
 800c302:	d102      	bne.n	800c30a <_write_r+0x1e>
 800c304:	682b      	ldr	r3, [r5, #0]
 800c306:	b103      	cbz	r3, 800c30a <_write_r+0x1e>
 800c308:	6023      	str	r3, [r4, #0]
 800c30a:	bd38      	pop	{r3, r4, r5, pc}
 800c30c:	200008d8 	.word	0x200008d8

0800c310 <_close_r>:
 800c310:	b538      	push	{r3, r4, r5, lr}
 800c312:	4d06      	ldr	r5, [pc, #24]	; (800c32c <_close_r+0x1c>)
 800c314:	2300      	movs	r3, #0
 800c316:	4604      	mov	r4, r0
 800c318:	4608      	mov	r0, r1
 800c31a:	602b      	str	r3, [r5, #0]
 800c31c:	f7f6 f937 	bl	800258e <_close>
 800c320:	1c43      	adds	r3, r0, #1
 800c322:	d102      	bne.n	800c32a <_close_r+0x1a>
 800c324:	682b      	ldr	r3, [r5, #0]
 800c326:	b103      	cbz	r3, 800c32a <_close_r+0x1a>
 800c328:	6023      	str	r3, [r4, #0]
 800c32a:	bd38      	pop	{r3, r4, r5, pc}
 800c32c:	200008d8 	.word	0x200008d8

0800c330 <_fstat_r>:
 800c330:	b538      	push	{r3, r4, r5, lr}
 800c332:	4d07      	ldr	r5, [pc, #28]	; (800c350 <_fstat_r+0x20>)
 800c334:	2300      	movs	r3, #0
 800c336:	4604      	mov	r4, r0
 800c338:	4608      	mov	r0, r1
 800c33a:	4611      	mov	r1, r2
 800c33c:	602b      	str	r3, [r5, #0]
 800c33e:	f7f6 f932 	bl	80025a6 <_fstat>
 800c342:	1c43      	adds	r3, r0, #1
 800c344:	d102      	bne.n	800c34c <_fstat_r+0x1c>
 800c346:	682b      	ldr	r3, [r5, #0]
 800c348:	b103      	cbz	r3, 800c34c <_fstat_r+0x1c>
 800c34a:	6023      	str	r3, [r4, #0]
 800c34c:	bd38      	pop	{r3, r4, r5, pc}
 800c34e:	bf00      	nop
 800c350:	200008d8 	.word	0x200008d8

0800c354 <_isatty_r>:
 800c354:	b538      	push	{r3, r4, r5, lr}
 800c356:	4d06      	ldr	r5, [pc, #24]	; (800c370 <_isatty_r+0x1c>)
 800c358:	2300      	movs	r3, #0
 800c35a:	4604      	mov	r4, r0
 800c35c:	4608      	mov	r0, r1
 800c35e:	602b      	str	r3, [r5, #0]
 800c360:	f7f6 f931 	bl	80025c6 <_isatty>
 800c364:	1c43      	adds	r3, r0, #1
 800c366:	d102      	bne.n	800c36e <_isatty_r+0x1a>
 800c368:	682b      	ldr	r3, [r5, #0]
 800c36a:	b103      	cbz	r3, 800c36e <_isatty_r+0x1a>
 800c36c:	6023      	str	r3, [r4, #0]
 800c36e:	bd38      	pop	{r3, r4, r5, pc}
 800c370:	200008d8 	.word	0x200008d8

0800c374 <_lseek_r>:
 800c374:	b538      	push	{r3, r4, r5, lr}
 800c376:	4d07      	ldr	r5, [pc, #28]	; (800c394 <_lseek_r+0x20>)
 800c378:	4604      	mov	r4, r0
 800c37a:	4608      	mov	r0, r1
 800c37c:	4611      	mov	r1, r2
 800c37e:	2200      	movs	r2, #0
 800c380:	602a      	str	r2, [r5, #0]
 800c382:	461a      	mov	r2, r3
 800c384:	f7f6 f92a 	bl	80025dc <_lseek>
 800c388:	1c43      	adds	r3, r0, #1
 800c38a:	d102      	bne.n	800c392 <_lseek_r+0x1e>
 800c38c:	682b      	ldr	r3, [r5, #0]
 800c38e:	b103      	cbz	r3, 800c392 <_lseek_r+0x1e>
 800c390:	6023      	str	r3, [r4, #0]
 800c392:	bd38      	pop	{r3, r4, r5, pc}
 800c394:	200008d8 	.word	0x200008d8

0800c398 <_read_r>:
 800c398:	b538      	push	{r3, r4, r5, lr}
 800c39a:	4d07      	ldr	r5, [pc, #28]	; (800c3b8 <_read_r+0x20>)
 800c39c:	4604      	mov	r4, r0
 800c39e:	4608      	mov	r0, r1
 800c3a0:	4611      	mov	r1, r2
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	602a      	str	r2, [r5, #0]
 800c3a6:	461a      	mov	r2, r3
 800c3a8:	f7f6 f8b8 	bl	800251c <_read>
 800c3ac:	1c43      	adds	r3, r0, #1
 800c3ae:	d102      	bne.n	800c3b6 <_read_r+0x1e>
 800c3b0:	682b      	ldr	r3, [r5, #0]
 800c3b2:	b103      	cbz	r3, 800c3b6 <_read_r+0x1e>
 800c3b4:	6023      	str	r3, [r4, #0]
 800c3b6:	bd38      	pop	{r3, r4, r5, pc}
 800c3b8:	200008d8 	.word	0x200008d8
 800c3bc:	00000000 	.word	0x00000000

0800c3c0 <log>:
 800c3c0:	b538      	push	{r3, r4, r5, lr}
 800c3c2:	ed2d 8b02 	vpush	{d8}
 800c3c6:	ec55 4b10 	vmov	r4, r5, d0
 800c3ca:	f000 f841 	bl	800c450 <__ieee754_log>
 800c3ce:	4b1e      	ldr	r3, [pc, #120]	; (800c448 <log+0x88>)
 800c3d0:	eeb0 8a40 	vmov.f32	s16, s0
 800c3d4:	eef0 8a60 	vmov.f32	s17, s1
 800c3d8:	f993 3000 	ldrsb.w	r3, [r3]
 800c3dc:	3301      	adds	r3, #1
 800c3de:	d01a      	beq.n	800c416 <log+0x56>
 800c3e0:	4622      	mov	r2, r4
 800c3e2:	462b      	mov	r3, r5
 800c3e4:	4620      	mov	r0, r4
 800c3e6:	4629      	mov	r1, r5
 800c3e8:	f7f4 fbc8 	bl	8000b7c <__aeabi_dcmpun>
 800c3ec:	b998      	cbnz	r0, 800c416 <log+0x56>
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	4620      	mov	r0, r4
 800c3f4:	4629      	mov	r1, r5
 800c3f6:	f7f4 fbb7 	bl	8000b68 <__aeabi_dcmpgt>
 800c3fa:	b960      	cbnz	r0, 800c416 <log+0x56>
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	2300      	movs	r3, #0
 800c400:	4620      	mov	r0, r4
 800c402:	4629      	mov	r1, r5
 800c404:	f7f4 fb88 	bl	8000b18 <__aeabi_dcmpeq>
 800c408:	b160      	cbz	r0, 800c424 <log+0x64>
 800c40a:	f7fd f901 	bl	8009610 <__errno>
 800c40e:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 800c440 <log+0x80>
 800c412:	2322      	movs	r3, #34	; 0x22
 800c414:	6003      	str	r3, [r0, #0]
 800c416:	eeb0 0a48 	vmov.f32	s0, s16
 800c41a:	eef0 0a68 	vmov.f32	s1, s17
 800c41e:	ecbd 8b02 	vpop	{d8}
 800c422:	bd38      	pop	{r3, r4, r5, pc}
 800c424:	f7fd f8f4 	bl	8009610 <__errno>
 800c428:	ecbd 8b02 	vpop	{d8}
 800c42c:	2321      	movs	r3, #33	; 0x21
 800c42e:	6003      	str	r3, [r0, #0]
 800c430:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c434:	4805      	ldr	r0, [pc, #20]	; (800c44c <log+0x8c>)
 800c436:	f000 b9c7 	b.w	800c7c8 <nan>
 800c43a:	bf00      	nop
 800c43c:	f3af 8000 	nop.w
 800c440:	00000000 	.word	0x00000000
 800c444:	fff00000 	.word	0xfff00000
 800c448:	200001e0 	.word	0x200001e0
 800c44c:	0800cb20 	.word	0x0800cb20

0800c450 <__ieee754_log>:
 800c450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c454:	ec51 0b10 	vmov	r0, r1, d0
 800c458:	ed2d 8b04 	vpush	{d8-d9}
 800c45c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800c460:	b083      	sub	sp, #12
 800c462:	460d      	mov	r5, r1
 800c464:	da29      	bge.n	800c4ba <__ieee754_log+0x6a>
 800c466:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c46a:	4303      	orrs	r3, r0
 800c46c:	ee10 2a10 	vmov	r2, s0
 800c470:	d10c      	bne.n	800c48c <__ieee754_log+0x3c>
 800c472:	49cf      	ldr	r1, [pc, #828]	; (800c7b0 <__ieee754_log+0x360>)
 800c474:	2200      	movs	r2, #0
 800c476:	2300      	movs	r3, #0
 800c478:	2000      	movs	r0, #0
 800c47a:	f7f4 fa0f 	bl	800089c <__aeabi_ddiv>
 800c47e:	ec41 0b10 	vmov	d0, r0, r1
 800c482:	b003      	add	sp, #12
 800c484:	ecbd 8b04 	vpop	{d8-d9}
 800c488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c48c:	2900      	cmp	r1, #0
 800c48e:	da05      	bge.n	800c49c <__ieee754_log+0x4c>
 800c490:	460b      	mov	r3, r1
 800c492:	f7f3 ff21 	bl	80002d8 <__aeabi_dsub>
 800c496:	2200      	movs	r2, #0
 800c498:	2300      	movs	r3, #0
 800c49a:	e7ee      	b.n	800c47a <__ieee754_log+0x2a>
 800c49c:	4bc5      	ldr	r3, [pc, #788]	; (800c7b4 <__ieee754_log+0x364>)
 800c49e:	2200      	movs	r2, #0
 800c4a0:	f7f4 f8d2 	bl	8000648 <__aeabi_dmul>
 800c4a4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800c4a8:	460d      	mov	r5, r1
 800c4aa:	4ac3      	ldr	r2, [pc, #780]	; (800c7b8 <__ieee754_log+0x368>)
 800c4ac:	4295      	cmp	r5, r2
 800c4ae:	dd06      	ble.n	800c4be <__ieee754_log+0x6e>
 800c4b0:	4602      	mov	r2, r0
 800c4b2:	460b      	mov	r3, r1
 800c4b4:	f7f3 ff12 	bl	80002dc <__adddf3>
 800c4b8:	e7e1      	b.n	800c47e <__ieee754_log+0x2e>
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	e7f5      	b.n	800c4aa <__ieee754_log+0x5a>
 800c4be:	152c      	asrs	r4, r5, #20
 800c4c0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800c4c4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800c4c8:	441c      	add	r4, r3
 800c4ca:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800c4ce:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800c4d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c4d6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800c4da:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800c4de:	ea42 0105 	orr.w	r1, r2, r5
 800c4e2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	4bb4      	ldr	r3, [pc, #720]	; (800c7bc <__ieee754_log+0x36c>)
 800c4ea:	f7f3 fef5 	bl	80002d8 <__aeabi_dsub>
 800c4ee:	1cab      	adds	r3, r5, #2
 800c4f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c4f4:	2b02      	cmp	r3, #2
 800c4f6:	4682      	mov	sl, r0
 800c4f8:	468b      	mov	fp, r1
 800c4fa:	f04f 0200 	mov.w	r2, #0
 800c4fe:	dc53      	bgt.n	800c5a8 <__ieee754_log+0x158>
 800c500:	2300      	movs	r3, #0
 800c502:	f7f4 fb09 	bl	8000b18 <__aeabi_dcmpeq>
 800c506:	b1d0      	cbz	r0, 800c53e <__ieee754_log+0xee>
 800c508:	2c00      	cmp	r4, #0
 800c50a:	f000 8122 	beq.w	800c752 <__ieee754_log+0x302>
 800c50e:	4620      	mov	r0, r4
 800c510:	f7f4 f830 	bl	8000574 <__aeabi_i2d>
 800c514:	a390      	add	r3, pc, #576	; (adr r3, 800c758 <__ieee754_log+0x308>)
 800c516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c51a:	4606      	mov	r6, r0
 800c51c:	460f      	mov	r7, r1
 800c51e:	f7f4 f893 	bl	8000648 <__aeabi_dmul>
 800c522:	a38f      	add	r3, pc, #572	; (adr r3, 800c760 <__ieee754_log+0x310>)
 800c524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c528:	4604      	mov	r4, r0
 800c52a:	460d      	mov	r5, r1
 800c52c:	4630      	mov	r0, r6
 800c52e:	4639      	mov	r1, r7
 800c530:	f7f4 f88a 	bl	8000648 <__aeabi_dmul>
 800c534:	4602      	mov	r2, r0
 800c536:	460b      	mov	r3, r1
 800c538:	4620      	mov	r0, r4
 800c53a:	4629      	mov	r1, r5
 800c53c:	e7ba      	b.n	800c4b4 <__ieee754_log+0x64>
 800c53e:	a38a      	add	r3, pc, #552	; (adr r3, 800c768 <__ieee754_log+0x318>)
 800c540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c544:	4650      	mov	r0, sl
 800c546:	4659      	mov	r1, fp
 800c548:	f7f4 f87e 	bl	8000648 <__aeabi_dmul>
 800c54c:	4602      	mov	r2, r0
 800c54e:	460b      	mov	r3, r1
 800c550:	2000      	movs	r0, #0
 800c552:	499b      	ldr	r1, [pc, #620]	; (800c7c0 <__ieee754_log+0x370>)
 800c554:	f7f3 fec0 	bl	80002d8 <__aeabi_dsub>
 800c558:	4652      	mov	r2, sl
 800c55a:	4606      	mov	r6, r0
 800c55c:	460f      	mov	r7, r1
 800c55e:	465b      	mov	r3, fp
 800c560:	4650      	mov	r0, sl
 800c562:	4659      	mov	r1, fp
 800c564:	f7f4 f870 	bl	8000648 <__aeabi_dmul>
 800c568:	4602      	mov	r2, r0
 800c56a:	460b      	mov	r3, r1
 800c56c:	4630      	mov	r0, r6
 800c56e:	4639      	mov	r1, r7
 800c570:	f7f4 f86a 	bl	8000648 <__aeabi_dmul>
 800c574:	4606      	mov	r6, r0
 800c576:	460f      	mov	r7, r1
 800c578:	b914      	cbnz	r4, 800c580 <__ieee754_log+0x130>
 800c57a:	4632      	mov	r2, r6
 800c57c:	463b      	mov	r3, r7
 800c57e:	e0a2      	b.n	800c6c6 <__ieee754_log+0x276>
 800c580:	4620      	mov	r0, r4
 800c582:	f7f3 fff7 	bl	8000574 <__aeabi_i2d>
 800c586:	a374      	add	r3, pc, #464	; (adr r3, 800c758 <__ieee754_log+0x308>)
 800c588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c58c:	4680      	mov	r8, r0
 800c58e:	4689      	mov	r9, r1
 800c590:	f7f4 f85a 	bl	8000648 <__aeabi_dmul>
 800c594:	a372      	add	r3, pc, #456	; (adr r3, 800c760 <__ieee754_log+0x310>)
 800c596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c59a:	4604      	mov	r4, r0
 800c59c:	460d      	mov	r5, r1
 800c59e:	4640      	mov	r0, r8
 800c5a0:	4649      	mov	r1, r9
 800c5a2:	f7f4 f851 	bl	8000648 <__aeabi_dmul>
 800c5a6:	e0a7      	b.n	800c6f8 <__ieee754_log+0x2a8>
 800c5a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c5ac:	f7f3 fe96 	bl	80002dc <__adddf3>
 800c5b0:	4602      	mov	r2, r0
 800c5b2:	460b      	mov	r3, r1
 800c5b4:	4650      	mov	r0, sl
 800c5b6:	4659      	mov	r1, fp
 800c5b8:	f7f4 f970 	bl	800089c <__aeabi_ddiv>
 800c5bc:	ec41 0b18 	vmov	d8, r0, r1
 800c5c0:	4620      	mov	r0, r4
 800c5c2:	f7f3 ffd7 	bl	8000574 <__aeabi_i2d>
 800c5c6:	ec53 2b18 	vmov	r2, r3, d8
 800c5ca:	ec41 0b19 	vmov	d9, r0, r1
 800c5ce:	ec51 0b18 	vmov	r0, r1, d8
 800c5d2:	f7f4 f839 	bl	8000648 <__aeabi_dmul>
 800c5d6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800c5da:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800c5de:	9301      	str	r3, [sp, #4]
 800c5e0:	4602      	mov	r2, r0
 800c5e2:	460b      	mov	r3, r1
 800c5e4:	4680      	mov	r8, r0
 800c5e6:	4689      	mov	r9, r1
 800c5e8:	f7f4 f82e 	bl	8000648 <__aeabi_dmul>
 800c5ec:	a360      	add	r3, pc, #384	; (adr r3, 800c770 <__ieee754_log+0x320>)
 800c5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f2:	4606      	mov	r6, r0
 800c5f4:	460f      	mov	r7, r1
 800c5f6:	f7f4 f827 	bl	8000648 <__aeabi_dmul>
 800c5fa:	a35f      	add	r3, pc, #380	; (adr r3, 800c778 <__ieee754_log+0x328>)
 800c5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c600:	f7f3 fe6c 	bl	80002dc <__adddf3>
 800c604:	4632      	mov	r2, r6
 800c606:	463b      	mov	r3, r7
 800c608:	f7f4 f81e 	bl	8000648 <__aeabi_dmul>
 800c60c:	a35c      	add	r3, pc, #368	; (adr r3, 800c780 <__ieee754_log+0x330>)
 800c60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c612:	f7f3 fe63 	bl	80002dc <__adddf3>
 800c616:	4632      	mov	r2, r6
 800c618:	463b      	mov	r3, r7
 800c61a:	f7f4 f815 	bl	8000648 <__aeabi_dmul>
 800c61e:	a35a      	add	r3, pc, #360	; (adr r3, 800c788 <__ieee754_log+0x338>)
 800c620:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c624:	f7f3 fe5a 	bl	80002dc <__adddf3>
 800c628:	4642      	mov	r2, r8
 800c62a:	464b      	mov	r3, r9
 800c62c:	f7f4 f80c 	bl	8000648 <__aeabi_dmul>
 800c630:	a357      	add	r3, pc, #348	; (adr r3, 800c790 <__ieee754_log+0x340>)
 800c632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c636:	4680      	mov	r8, r0
 800c638:	4689      	mov	r9, r1
 800c63a:	4630      	mov	r0, r6
 800c63c:	4639      	mov	r1, r7
 800c63e:	f7f4 f803 	bl	8000648 <__aeabi_dmul>
 800c642:	a355      	add	r3, pc, #340	; (adr r3, 800c798 <__ieee754_log+0x348>)
 800c644:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c648:	f7f3 fe48 	bl	80002dc <__adddf3>
 800c64c:	4632      	mov	r2, r6
 800c64e:	463b      	mov	r3, r7
 800c650:	f7f3 fffa 	bl	8000648 <__aeabi_dmul>
 800c654:	a352      	add	r3, pc, #328	; (adr r3, 800c7a0 <__ieee754_log+0x350>)
 800c656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c65a:	f7f3 fe3f 	bl	80002dc <__adddf3>
 800c65e:	4632      	mov	r2, r6
 800c660:	463b      	mov	r3, r7
 800c662:	f7f3 fff1 	bl	8000648 <__aeabi_dmul>
 800c666:	460b      	mov	r3, r1
 800c668:	4602      	mov	r2, r0
 800c66a:	4649      	mov	r1, r9
 800c66c:	4640      	mov	r0, r8
 800c66e:	f7f3 fe35 	bl	80002dc <__adddf3>
 800c672:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800c676:	9b01      	ldr	r3, [sp, #4]
 800c678:	3551      	adds	r5, #81	; 0x51
 800c67a:	431d      	orrs	r5, r3
 800c67c:	2d00      	cmp	r5, #0
 800c67e:	4680      	mov	r8, r0
 800c680:	4689      	mov	r9, r1
 800c682:	dd48      	ble.n	800c716 <__ieee754_log+0x2c6>
 800c684:	4b4e      	ldr	r3, [pc, #312]	; (800c7c0 <__ieee754_log+0x370>)
 800c686:	2200      	movs	r2, #0
 800c688:	4650      	mov	r0, sl
 800c68a:	4659      	mov	r1, fp
 800c68c:	f7f3 ffdc 	bl	8000648 <__aeabi_dmul>
 800c690:	4652      	mov	r2, sl
 800c692:	465b      	mov	r3, fp
 800c694:	f7f3 ffd8 	bl	8000648 <__aeabi_dmul>
 800c698:	4602      	mov	r2, r0
 800c69a:	460b      	mov	r3, r1
 800c69c:	4606      	mov	r6, r0
 800c69e:	460f      	mov	r7, r1
 800c6a0:	4640      	mov	r0, r8
 800c6a2:	4649      	mov	r1, r9
 800c6a4:	f7f3 fe1a 	bl	80002dc <__adddf3>
 800c6a8:	ec53 2b18 	vmov	r2, r3, d8
 800c6ac:	f7f3 ffcc 	bl	8000648 <__aeabi_dmul>
 800c6b0:	4680      	mov	r8, r0
 800c6b2:	4689      	mov	r9, r1
 800c6b4:	b964      	cbnz	r4, 800c6d0 <__ieee754_log+0x280>
 800c6b6:	4602      	mov	r2, r0
 800c6b8:	460b      	mov	r3, r1
 800c6ba:	4630      	mov	r0, r6
 800c6bc:	4639      	mov	r1, r7
 800c6be:	f7f3 fe0b 	bl	80002d8 <__aeabi_dsub>
 800c6c2:	4602      	mov	r2, r0
 800c6c4:	460b      	mov	r3, r1
 800c6c6:	4650      	mov	r0, sl
 800c6c8:	4659      	mov	r1, fp
 800c6ca:	f7f3 fe05 	bl	80002d8 <__aeabi_dsub>
 800c6ce:	e6d6      	b.n	800c47e <__ieee754_log+0x2e>
 800c6d0:	a321      	add	r3, pc, #132	; (adr r3, 800c758 <__ieee754_log+0x308>)
 800c6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d6:	ec51 0b19 	vmov	r0, r1, d9
 800c6da:	f7f3 ffb5 	bl	8000648 <__aeabi_dmul>
 800c6de:	a320      	add	r3, pc, #128	; (adr r3, 800c760 <__ieee754_log+0x310>)
 800c6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e4:	4604      	mov	r4, r0
 800c6e6:	460d      	mov	r5, r1
 800c6e8:	ec51 0b19 	vmov	r0, r1, d9
 800c6ec:	f7f3 ffac 	bl	8000648 <__aeabi_dmul>
 800c6f0:	4642      	mov	r2, r8
 800c6f2:	464b      	mov	r3, r9
 800c6f4:	f7f3 fdf2 	bl	80002dc <__adddf3>
 800c6f8:	4602      	mov	r2, r0
 800c6fa:	460b      	mov	r3, r1
 800c6fc:	4630      	mov	r0, r6
 800c6fe:	4639      	mov	r1, r7
 800c700:	f7f3 fdea 	bl	80002d8 <__aeabi_dsub>
 800c704:	4652      	mov	r2, sl
 800c706:	465b      	mov	r3, fp
 800c708:	f7f3 fde6 	bl	80002d8 <__aeabi_dsub>
 800c70c:	4602      	mov	r2, r0
 800c70e:	460b      	mov	r3, r1
 800c710:	4620      	mov	r0, r4
 800c712:	4629      	mov	r1, r5
 800c714:	e7d9      	b.n	800c6ca <__ieee754_log+0x27a>
 800c716:	4602      	mov	r2, r0
 800c718:	460b      	mov	r3, r1
 800c71a:	4650      	mov	r0, sl
 800c71c:	4659      	mov	r1, fp
 800c71e:	f7f3 fddb 	bl	80002d8 <__aeabi_dsub>
 800c722:	ec53 2b18 	vmov	r2, r3, d8
 800c726:	f7f3 ff8f 	bl	8000648 <__aeabi_dmul>
 800c72a:	4606      	mov	r6, r0
 800c72c:	460f      	mov	r7, r1
 800c72e:	2c00      	cmp	r4, #0
 800c730:	f43f af23 	beq.w	800c57a <__ieee754_log+0x12a>
 800c734:	a308      	add	r3, pc, #32	; (adr r3, 800c758 <__ieee754_log+0x308>)
 800c736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c73a:	ec51 0b19 	vmov	r0, r1, d9
 800c73e:	f7f3 ff83 	bl	8000648 <__aeabi_dmul>
 800c742:	a307      	add	r3, pc, #28	; (adr r3, 800c760 <__ieee754_log+0x310>)
 800c744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c748:	4604      	mov	r4, r0
 800c74a:	460d      	mov	r5, r1
 800c74c:	ec51 0b19 	vmov	r0, r1, d9
 800c750:	e727      	b.n	800c5a2 <__ieee754_log+0x152>
 800c752:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800c7a8 <__ieee754_log+0x358>
 800c756:	e694      	b.n	800c482 <__ieee754_log+0x32>
 800c758:	fee00000 	.word	0xfee00000
 800c75c:	3fe62e42 	.word	0x3fe62e42
 800c760:	35793c76 	.word	0x35793c76
 800c764:	3dea39ef 	.word	0x3dea39ef
 800c768:	55555555 	.word	0x55555555
 800c76c:	3fd55555 	.word	0x3fd55555
 800c770:	df3e5244 	.word	0xdf3e5244
 800c774:	3fc2f112 	.word	0x3fc2f112
 800c778:	96cb03de 	.word	0x96cb03de
 800c77c:	3fc74664 	.word	0x3fc74664
 800c780:	94229359 	.word	0x94229359
 800c784:	3fd24924 	.word	0x3fd24924
 800c788:	55555593 	.word	0x55555593
 800c78c:	3fe55555 	.word	0x3fe55555
 800c790:	d078c69f 	.word	0xd078c69f
 800c794:	3fc39a09 	.word	0x3fc39a09
 800c798:	1d8e78af 	.word	0x1d8e78af
 800c79c:	3fcc71c5 	.word	0x3fcc71c5
 800c7a0:	9997fa04 	.word	0x9997fa04
 800c7a4:	3fd99999 	.word	0x3fd99999
	...
 800c7b0:	c3500000 	.word	0xc3500000
 800c7b4:	43500000 	.word	0x43500000
 800c7b8:	7fefffff 	.word	0x7fefffff
 800c7bc:	3ff00000 	.word	0x3ff00000
 800c7c0:	3fe00000 	.word	0x3fe00000
 800c7c4:	00000000 	.word	0x00000000

0800c7c8 <nan>:
 800c7c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c7d0 <nan+0x8>
 800c7cc:	4770      	bx	lr
 800c7ce:	bf00      	nop
 800c7d0:	00000000 	.word	0x00000000
 800c7d4:	7ff80000 	.word	0x7ff80000

0800c7d8 <_init>:
 800c7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7da:	bf00      	nop
 800c7dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7de:	bc08      	pop	{r3}
 800c7e0:	469e      	mov	lr, r3
 800c7e2:	4770      	bx	lr

0800c7e4 <_fini>:
 800c7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7e6:	bf00      	nop
 800c7e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7ea:	bc08      	pop	{r3}
 800c7ec:	469e      	mov	lr, r3
 800c7ee:	4770      	bx	lr
