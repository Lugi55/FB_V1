
HB_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5c8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  0800c7a8  0800c7a8  0001c7a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cbe4  0800cbe4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800cbe4  0800cbe4  0001cbe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cbec  0800cbec  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cbec  0800cbec  0001cbec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cbf0  0800cbf0  0001cbf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800cbf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003bc  200001e0  0800cdd4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000059c  0800cdd4  0002059c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022775  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038d0  00000000  00000000  00042985  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ab0  00000000  00000000  00046258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001928  00000000  00000000  00047d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c4aa  00000000  00000000  00049630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dc3a  00000000  00000000  00075ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001318e6  00000000  00000000  00093714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001c4ffa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000085d4  00000000  00000000  001c5050  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c790 	.word	0x0800c790

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	0800c790 	.word	0x0800c790

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96e 	b.w	8000f8c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468c      	mov	ip, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8083 	bne.w	8000dde <__udivmoddi4+0x116>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4617      	mov	r7, r2
 8000cdc:	d947      	bls.n	8000d6e <__udivmoddi4+0xa6>
 8000cde:	fab2 f282 	clz	r2, r2
 8000ce2:	b142      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	f1c2 0020 	rsb	r0, r2, #32
 8000ce8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cec:	4091      	lsls	r1, r2
 8000cee:	4097      	lsls	r7, r2
 8000cf0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbbc f6f8 	udiv	r6, ip, r8
 8000d00:	fa1f fe87 	uxth.w	lr, r7
 8000d04:	fb08 c116 	mls	r1, r8, r6, ip
 8000d08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18fb      	adds	r3, r7, r3
 8000d16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1a:	f080 8119 	bcs.w	8000f50 <__udivmoddi4+0x288>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8116 	bls.w	8000f50 <__udivmoddi4+0x288>
 8000d24:	3e02      	subs	r6, #2
 8000d26:	443b      	add	r3, r7
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d30:	fb08 3310 	mls	r3, r8, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d3c:	45a6      	cmp	lr, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	193c      	adds	r4, r7, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8105 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d4a:	45a6      	cmp	lr, r4
 8000d4c:	f240 8102 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d50:	3802      	subs	r0, #2
 8000d52:	443c      	add	r4, r7
 8000d54:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d58:	eba4 040e 	sub.w	r4, r4, lr
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	b11d      	cbz	r5, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c5 4300 	strd	r4, r3, [r5]
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	b902      	cbnz	r2, 8000d72 <__udivmoddi4+0xaa>
 8000d70:	deff      	udf	#255	; 0xff
 8000d72:	fab2 f282 	clz	r2, r2
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	d150      	bne.n	8000e1c <__udivmoddi4+0x154>
 8000d7a:	1bcb      	subs	r3, r1, r7
 8000d7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d80:	fa1f f887 	uxth.w	r8, r7
 8000d84:	2601      	movs	r6, #1
 8000d86:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d8a:	0c21      	lsrs	r1, r4, #16
 8000d8c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb08 f30c 	mul.w	r3, r8, ip
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0xe2>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	f200 80e9 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1ac9      	subs	r1, r1, r3
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000db8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x10c>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x10a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80d9 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e7bf      	b.n	8000d5e <__udivmoddi4+0x96>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0x12e>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80b1 	beq.w	8000f4a <__udivmoddi4+0x282>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x1cc>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0x140>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80b8 	bhi.w	8000f78 <__udivmoddi4+0x2b0>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	468c      	mov	ip, r1
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0a8      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000e16:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e1a:	e7a5      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f603 	lsr.w	r6, r0, r3
 8000e24:	4097      	lsls	r7, r2
 8000e26:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e2e:	40d9      	lsrs	r1, r3
 8000e30:	4330      	orrs	r0, r6
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e38:	fa1f f887 	uxth.w	r8, r7
 8000e3c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e44:	fb06 f108 	mul.w	r1, r6, r8
 8000e48:	4299      	cmp	r1, r3
 8000e4a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4e:	d909      	bls.n	8000e64 <__udivmoddi4+0x19c>
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e56:	f080 808d 	bcs.w	8000f74 <__udivmoddi4+0x2ac>
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	f240 808a 	bls.w	8000f74 <__udivmoddi4+0x2ac>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	443b      	add	r3, r7
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b281      	uxth	r1, r0
 8000e68:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e74:	fb00 f308 	mul.w	r3, r0, r8
 8000e78:	428b      	cmp	r3, r1
 8000e7a:	d907      	bls.n	8000e8c <__udivmoddi4+0x1c4>
 8000e7c:	1879      	adds	r1, r7, r1
 8000e7e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e82:	d273      	bcs.n	8000f6c <__udivmoddi4+0x2a4>
 8000e84:	428b      	cmp	r3, r1
 8000e86:	d971      	bls.n	8000f6c <__udivmoddi4+0x2a4>
 8000e88:	3802      	subs	r0, #2
 8000e8a:	4439      	add	r1, r7
 8000e8c:	1acb      	subs	r3, r1, r3
 8000e8e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e92:	e778      	b.n	8000d86 <__udivmoddi4+0xbe>
 8000e94:	f1c6 0c20 	rsb	ip, r6, #32
 8000e98:	fa03 f406 	lsl.w	r4, r3, r6
 8000e9c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ea0:	431c      	orrs	r4, r3
 8000ea2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000eae:	fa21 f10c 	lsr.w	r1, r1, ip
 8000eb2:	431f      	orrs	r7, r3
 8000eb4:	0c3b      	lsrs	r3, r7, #16
 8000eb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eba:	fa1f f884 	uxth.w	r8, r4
 8000ebe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ec2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ec6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eca:	458a      	cmp	sl, r1
 8000ecc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x220>
 8000ed6:	1861      	adds	r1, r4, r1
 8000ed8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000edc:	d248      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000ede:	458a      	cmp	sl, r1
 8000ee0:	d946      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000ee2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ee6:	4421      	add	r1, r4
 8000ee8:	eba1 010a 	sub.w	r1, r1, sl
 8000eec:	b2bf      	uxth	r7, r7
 8000eee:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ef2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ef6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000efa:	fb00 f808 	mul.w	r8, r0, r8
 8000efe:	45b8      	cmp	r8, r7
 8000f00:	d907      	bls.n	8000f12 <__udivmoddi4+0x24a>
 8000f02:	19e7      	adds	r7, r4, r7
 8000f04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f08:	d22e      	bcs.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0a:	45b8      	cmp	r8, r7
 8000f0c:	d92c      	bls.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0e:	3802      	subs	r0, #2
 8000f10:	4427      	add	r7, r4
 8000f12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f16:	eba7 0708 	sub.w	r7, r7, r8
 8000f1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f1e:	454f      	cmp	r7, r9
 8000f20:	46c6      	mov	lr, r8
 8000f22:	4649      	mov	r1, r9
 8000f24:	d31a      	bcc.n	8000f5c <__udivmoddi4+0x294>
 8000f26:	d017      	beq.n	8000f58 <__udivmoddi4+0x290>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x27a>
 8000f2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f36:	40f2      	lsrs	r2, r6
 8000f38:	ea4c 0202 	orr.w	r2, ip, r2
 8000f3c:	40f7      	lsrs	r7, r6
 8000f3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f42:	2600      	movs	r6, #0
 8000f44:	4631      	mov	r1, r6
 8000f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e70b      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6fd      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f58:	4543      	cmp	r3, r8
 8000f5a:	d2e5      	bcs.n	8000f28 <__udivmoddi4+0x260>
 8000f5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f60:	eb69 0104 	sbc.w	r1, r9, r4
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7df      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e7d2      	b.n	8000f12 <__udivmoddi4+0x24a>
 8000f6c:	4660      	mov	r0, ip
 8000f6e:	e78d      	b.n	8000e8c <__udivmoddi4+0x1c4>
 8000f70:	4681      	mov	r9, r0
 8000f72:	e7b9      	b.n	8000ee8 <__udivmoddi4+0x220>
 8000f74:	4666      	mov	r6, ip
 8000f76:	e775      	b.n	8000e64 <__udivmoddi4+0x19c>
 8000f78:	4630      	mov	r0, r6
 8000f7a:	e74a      	b.n	8000e12 <__udivmoddi4+0x14a>
 8000f7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f80:	4439      	add	r1, r7
 8000f82:	e713      	b.n	8000dac <__udivmoddi4+0xe4>
 8000f84:	3802      	subs	r0, #2
 8000f86:	443c      	add	r4, r7
 8000f88:	e724      	b.n	8000dd4 <__udivmoddi4+0x10c>
 8000f8a:	bf00      	nop

08000f8c <__aeabi_idiv0>:
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08c      	sub	sp, #48	; 0x30
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	2220      	movs	r2, #32
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f008 fb45 	bl	8009638 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fae:	4b33      	ldr	r3, [pc, #204]	; (800107c <MX_ADC1_Init+0xec>)
 8000fb0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fb4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fb6:	4b31      	ldr	r3, [pc, #196]	; (800107c <MX_ADC1_Init+0xec>)
 8000fb8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000fbc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fbe:	4b2f      	ldr	r3, [pc, #188]	; (800107c <MX_ADC1_Init+0xec>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fc4:	4b2d      	ldr	r3, [pc, #180]	; (800107c <MX_ADC1_Init+0xec>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000fca:	4b2c      	ldr	r3, [pc, #176]	; (800107c <MX_ADC1_Init+0xec>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fd0:	4b2a      	ldr	r3, [pc, #168]	; (800107c <MX_ADC1_Init+0xec>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fd6:	4b29      	ldr	r3, [pc, #164]	; (800107c <MX_ADC1_Init+0xec>)
 8000fd8:	2204      	movs	r2, #4
 8000fda:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fdc:	4b27      	ldr	r3, [pc, #156]	; (800107c <MX_ADC1_Init+0xec>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fe2:	4b26      	ldr	r3, [pc, #152]	; (800107c <MX_ADC1_Init+0xec>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000fe8:	4b24      	ldr	r3, [pc, #144]	; (800107c <MX_ADC1_Init+0xec>)
 8000fea:	2201      	movs	r2, #1
 8000fec:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fee:	4b23      	ldr	r3, [pc, #140]	; (800107c <MX_ADC1_Init+0xec>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_HRTIM_TRG1;
 8000ff6:	4b21      	ldr	r3, [pc, #132]	; (800107c <MX_ADC1_Init+0xec>)
 8000ff8:	f44f 62d4 	mov.w	r2, #1696	; 0x6a0
 8000ffc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000ffe:	4b1f      	ldr	r3, [pc, #124]	; (800107c <MX_ADC1_Init+0xec>)
 8001000:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001004:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001006:	4b1d      	ldr	r3, [pc, #116]	; (800107c <MX_ADC1_Init+0xec>)
 8001008:	2200      	movs	r2, #0
 800100a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800100e:	4b1b      	ldr	r3, [pc, #108]	; (800107c <MX_ADC1_Init+0xec>)
 8001010:	2200      	movs	r2, #0
 8001012:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001014:	4b19      	ldr	r3, [pc, #100]	; (800107c <MX_ADC1_Init+0xec>)
 8001016:	2200      	movs	r2, #0
 8001018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800101c:	4817      	ldr	r0, [pc, #92]	; (800107c <MX_ADC1_Init+0xec>)
 800101e:	f001 fbd3 	bl	80027c8 <HAL_ADC_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8001028:	f000 fe0c 	bl	8001c44 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800102c:	2300      	movs	r3, #0
 800102e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001030:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001034:	4619      	mov	r1, r3
 8001036:	4811      	ldr	r0, [pc, #68]	; (800107c <MX_ADC1_Init+0xec>)
 8001038:	f003 f83e 	bl	80040b8 <HAL_ADCEx_MultiModeConfigChannel>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8001042:	f000 fdff 	bl	8001c44 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001046:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <MX_ADC1_Init+0xf0>)
 8001048:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800104a:	2306      	movs	r3, #6
 800104c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001052:	237f      	movs	r3, #127	; 0x7f
 8001054:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001056:	2304      	movs	r3, #4
 8001058:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800105e:	1d3b      	adds	r3, r7, #4
 8001060:	4619      	mov	r1, r3
 8001062:	4806      	ldr	r0, [pc, #24]	; (800107c <MX_ADC1_Init+0xec>)
 8001064:	f002 f984 	bl	8003370 <HAL_ADC_ConfigChannel>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800106e:	f000 fde9 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001072:	bf00      	nop
 8001074:	3730      	adds	r7, #48	; 0x30
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000280 	.word	0x20000280
 8001080:	19200040 	.word	0x19200040

08001084 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b088      	sub	sp, #32
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800108a:	463b      	mov	r3, r7
 800108c:	2220      	movs	r2, #32
 800108e:	2100      	movs	r1, #0
 8001090:	4618      	mov	r0, r3
 8001092:	f008 fad1 	bl	8009638 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8001096:	4b2c      	ldr	r3, [pc, #176]	; (8001148 <MX_ADC2_Init+0xc4>)
 8001098:	4a2c      	ldr	r2, [pc, #176]	; (800114c <MX_ADC2_Init+0xc8>)
 800109a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800109c:	4b2a      	ldr	r3, [pc, #168]	; (8001148 <MX_ADC2_Init+0xc4>)
 800109e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80010a2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80010a4:	4b28      	ldr	r3, [pc, #160]	; (8001148 <MX_ADC2_Init+0xc4>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010aa:	4b27      	ldr	r3, [pc, #156]	; (8001148 <MX_ADC2_Init+0xc4>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80010b0:	4b25      	ldr	r3, [pc, #148]	; (8001148 <MX_ADC2_Init+0xc4>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010b6:	4b24      	ldr	r3, [pc, #144]	; (8001148 <MX_ADC2_Init+0xc4>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010bc:	4b22      	ldr	r3, [pc, #136]	; (8001148 <MX_ADC2_Init+0xc4>)
 80010be:	2204      	movs	r2, #4
 80010c0:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80010c2:	4b21      	ldr	r3, [pc, #132]	; (8001148 <MX_ADC2_Init+0xc4>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80010c8:	4b1f      	ldr	r3, [pc, #124]	; (8001148 <MX_ADC2_Init+0xc4>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80010ce:	4b1e      	ldr	r3, [pc, #120]	; (8001148 <MX_ADC2_Init+0xc4>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80010d4:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <MX_ADC2_Init+0xc4>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_HRTIM_TRG1;
 80010dc:	4b1a      	ldr	r3, [pc, #104]	; (8001148 <MX_ADC2_Init+0xc4>)
 80010de:	f44f 62d4 	mov.w	r2, #1696	; 0x6a0
 80010e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80010e4:	4b18      	ldr	r3, [pc, #96]	; (8001148 <MX_ADC2_Init+0xc4>)
 80010e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010ea:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80010ec:	4b16      	ldr	r3, [pc, #88]	; (8001148 <MX_ADC2_Init+0xc4>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010f4:	4b14      	ldr	r3, [pc, #80]	; (8001148 <MX_ADC2_Init+0xc4>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80010fa:	4b13      	ldr	r3, [pc, #76]	; (8001148 <MX_ADC2_Init+0xc4>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001102:	4811      	ldr	r0, [pc, #68]	; (8001148 <MX_ADC2_Init+0xc4>)
 8001104:	f001 fb60 	bl	80027c8 <HAL_ADC_Init>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800110e:	f000 fd99 	bl	8001c44 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001112:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <MX_ADC2_Init+0xcc>)
 8001114:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001116:	2306      	movs	r3, #6
 8001118:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800111a:	2300      	movs	r3, #0
 800111c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800111e:	237f      	movs	r3, #127	; 0x7f
 8001120:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001122:	2304      	movs	r3, #4
 8001124:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800112a:	463b      	mov	r3, r7
 800112c:	4619      	mov	r1, r3
 800112e:	4806      	ldr	r0, [pc, #24]	; (8001148 <MX_ADC2_Init+0xc4>)
 8001130:	f002 f91e 	bl	8003370 <HAL_ADC_ConfigChannel>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 800113a:	f000 fd83 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800113e:	bf00      	nop
 8001140:	3720      	adds	r7, #32
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000214 	.word	0x20000214
 800114c:	50000100 	.word	0x50000100
 8001150:	1d500080 	.word	0x1d500080

08001154 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08c      	sub	sp, #48	; 0x30
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	f107 031c 	add.w	r3, r7, #28
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001174:	d12d      	bne.n	80011d2 <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001176:	4b32      	ldr	r3, [pc, #200]	; (8001240 <HAL_ADC_MspInit+0xec>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	3301      	adds	r3, #1
 800117c:	4a30      	ldr	r2, [pc, #192]	; (8001240 <HAL_ADC_MspInit+0xec>)
 800117e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001180:	4b2f      	ldr	r3, [pc, #188]	; (8001240 <HAL_ADC_MspInit+0xec>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d10b      	bne.n	80011a0 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001188:	4b2e      	ldr	r3, [pc, #184]	; (8001244 <HAL_ADC_MspInit+0xf0>)
 800118a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118c:	4a2d      	ldr	r2, [pc, #180]	; (8001244 <HAL_ADC_MspInit+0xf0>)
 800118e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001192:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001194:	4b2b      	ldr	r3, [pc, #172]	; (8001244 <HAL_ADC_MspInit+0xf0>)
 8001196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001198:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800119c:	61bb      	str	r3, [r7, #24]
 800119e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a0:	4b28      	ldr	r3, [pc, #160]	; (8001244 <HAL_ADC_MspInit+0xf0>)
 80011a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a4:	4a27      	ldr	r2, [pc, #156]	; (8001244 <HAL_ADC_MspInit+0xf0>)
 80011a6:	f043 0304 	orr.w	r3, r3, #4
 80011aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ac:	4b25      	ldr	r3, [pc, #148]	; (8001244 <HAL_ADC_MspInit+0xf0>)
 80011ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b0:	f003 0304 	and.w	r3, r3, #4
 80011b4:	617b      	str	r3, [r7, #20]
 80011b6:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011b8:	2301      	movs	r3, #1
 80011ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011bc:	2303      	movs	r3, #3
 80011be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011c4:	f107 031c 	add.w	r3, r7, #28
 80011c8:	4619      	mov	r1, r3
 80011ca:	481f      	ldr	r0, [pc, #124]	; (8001248 <HAL_ADC_MspInit+0xf4>)
 80011cc:	f003 fcbe 	bl	8004b4c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80011d0:	e031      	b.n	8001236 <HAL_ADC_MspInit+0xe2>
  else if(adcHandle->Instance==ADC2)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a1d      	ldr	r2, [pc, #116]	; (800124c <HAL_ADC_MspInit+0xf8>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d12c      	bne.n	8001236 <HAL_ADC_MspInit+0xe2>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80011dc:	4b18      	ldr	r3, [pc, #96]	; (8001240 <HAL_ADC_MspInit+0xec>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	3301      	adds	r3, #1
 80011e2:	4a17      	ldr	r2, [pc, #92]	; (8001240 <HAL_ADC_MspInit+0xec>)
 80011e4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80011e6:	4b16      	ldr	r3, [pc, #88]	; (8001240 <HAL_ADC_MspInit+0xec>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d10b      	bne.n	8001206 <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80011ee:	4b15      	ldr	r3, [pc, #84]	; (8001244 <HAL_ADC_MspInit+0xf0>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f2:	4a14      	ldr	r2, [pc, #80]	; (8001244 <HAL_ADC_MspInit+0xf0>)
 80011f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011fa:	4b12      	ldr	r3, [pc, #72]	; (8001244 <HAL_ADC_MspInit+0xf0>)
 80011fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001202:	613b      	str	r3, [r7, #16]
 8001204:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001206:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <HAL_ADC_MspInit+0xf0>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120a:	4a0e      	ldr	r2, [pc, #56]	; (8001244 <HAL_ADC_MspInit+0xf0>)
 800120c:	f043 0304 	orr.w	r3, r3, #4
 8001210:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001212:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <HAL_ADC_MspInit+0xf0>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001216:	f003 0304 	and.w	r3, r3, #4
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800121e:	2302      	movs	r3, #2
 8001220:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001222:	2303      	movs	r3, #3
 8001224:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800122a:	f107 031c 	add.w	r3, r7, #28
 800122e:	4619      	mov	r1, r3
 8001230:	4805      	ldr	r0, [pc, #20]	; (8001248 <HAL_ADC_MspInit+0xf4>)
 8001232:	f003 fc8b 	bl	8004b4c <HAL_GPIO_Init>
}
 8001236:	bf00      	nop
 8001238:	3730      	adds	r7, #48	; 0x30
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	200001fc 	.word	0x200001fc
 8001244:	40021000 	.word	0x40021000
 8001248:	48000800 	.word	0x48000800
 800124c:	50000100 	.word	0x50000100

08001250 <controller_setVoltagePWM>:





void controller_setVoltagePWM(float voltage){
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	ed87 0a01 	vstr	s0, [r7, #4]
	uint32_t compare = (54400/12*voltage);
 800125a:	edd7 7a01 	vldr	s15, [r7, #4]
 800125e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001288 <controller_setVoltagePWM+0x38>
 8001262:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001266:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800126a:	ee17 3a90 	vmov	r3, s15
 800126e:	60fb      	str	r3, [r7, #12]
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1,compare);
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <controller_setVoltagePWM+0x3c>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	68fa      	ldr	r2, [r7, #12]
 8001276:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
}
 800127a:	bf00      	nop
 800127c:	3714      	adds	r7, #20
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	458da800 	.word	0x458da800
 800128c:	20000350 	.word	0x20000350

08001290 <controller_setTempMeasurementCold>:



void controller_setTempMeasurementCold(uint32_t adcVal){
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
	float R;
	R = (float) adcVal/MAX_ADC_VALUE * 3.3;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	ee07 3a90 	vmov	s15, r3
 800129e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012a2:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80013e0 <controller_setTempMeasurementCold+0x150>
 80012a6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80012aa:	ee16 0a90 	vmov	r0, s13
 80012ae:	f7ff f973 	bl	8000598 <__aeabi_f2d>
 80012b2:	a341      	add	r3, pc, #260	; (adr r3, 80013b8 <controller_setTempMeasurementCold+0x128>)
 80012b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b8:	f7ff f9c6 	bl	8000648 <__aeabi_dmul>
 80012bc:	4602      	mov	r2, r0
 80012be:	460b      	mov	r3, r1
 80012c0:	4610      	mov	r0, r2
 80012c2:	4619      	mov	r1, r3
 80012c4:	f7ff fc98 	bl	8000bf8 <__aeabi_d2f>
 80012c8:	4603      	mov	r3, r0
 80012ca:	60fb      	str	r3, [r7, #12]
	R = (float) R0*3.3/R - R0;
 80012cc:	68f8      	ldr	r0, [r7, #12]
 80012ce:	f7ff f963 	bl	8000598 <__aeabi_f2d>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	a13a      	add	r1, pc, #232	; (adr r1, 80013c0 <controller_setTempMeasurementCold+0x130>)
 80012d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012dc:	f7ff fade 	bl	800089c <__aeabi_ddiv>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	4610      	mov	r0, r2
 80012e6:	4619      	mov	r1, r3
 80012e8:	a337      	add	r3, pc, #220	; (adr r3, 80013c8 <controller_setTempMeasurementCold+0x138>)
 80012ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ee:	f7fe fff3 	bl	80002d8 <__aeabi_dsub>
 80012f2:	4602      	mov	r2, r0
 80012f4:	460b      	mov	r3, r1
 80012f6:	4610      	mov	r0, r2
 80012f8:	4619      	mov	r1, r3
 80012fa:	f7ff fc7d 	bl	8000bf8 <__aeabi_d2f>
 80012fe:	4603      	mov	r3, r0
 8001300:	60fb      	str	r3, [r7, #12]
	tempCold = R/R0;
 8001302:	ed97 7a03 	vldr	s14, [r7, #12]
 8001306:	eddf 6a37 	vldr	s13, [pc, #220]	; 80013e4 <controller_setTempMeasurementCold+0x154>
 800130a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800130e:	4b36      	ldr	r3, [pc, #216]	; (80013e8 <controller_setTempMeasurementCold+0x158>)
 8001310:	edc3 7a00 	vstr	s15, [r3]
	tempCold = log(tempCold);
 8001314:	4b34      	ldr	r3, [pc, #208]	; (80013e8 <controller_setTempMeasurementCold+0x158>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff f93d 	bl	8000598 <__aeabi_f2d>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	ec43 2b10 	vmov	d0, r2, r3
 8001326:	f00b f827 	bl	800c378 <log>
 800132a:	ec53 2b10 	vmov	r2, r3, d0
 800132e:	4610      	mov	r0, r2
 8001330:	4619      	mov	r1, r3
 8001332:	f7ff fc61 	bl	8000bf8 <__aeabi_d2f>
 8001336:	4603      	mov	r3, r0
 8001338:	4a2b      	ldr	r2, [pc, #172]	; (80013e8 <controller_setTempMeasurementCold+0x158>)
 800133a:	6013      	str	r3, [r2, #0]
	tempCold /= B;
 800133c:	4b2a      	ldr	r3, [pc, #168]	; (80013e8 <controller_setTempMeasurementCold+0x158>)
 800133e:	ed93 7a00 	vldr	s14, [r3]
 8001342:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80013ec <controller_setTempMeasurementCold+0x15c>
 8001346:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800134a:	4b27      	ldr	r3, [pc, #156]	; (80013e8 <controller_setTempMeasurementCold+0x158>)
 800134c:	edc3 7a00 	vstr	s15, [r3]
	tempCold += 1.0 / (T0 + 273.15);
 8001350:	4b25      	ldr	r3, [pc, #148]	; (80013e8 <controller_setTempMeasurementCold+0x158>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff f91f 	bl	8000598 <__aeabi_f2d>
 800135a:	a31d      	add	r3, pc, #116	; (adr r3, 80013d0 <controller_setTempMeasurementCold+0x140>)
 800135c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001360:	f7fe ffbc 	bl	80002dc <__adddf3>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	4610      	mov	r0, r2
 800136a:	4619      	mov	r1, r3
 800136c:	f7ff fc44 	bl	8000bf8 <__aeabi_d2f>
 8001370:	4603      	mov	r3, r0
 8001372:	4a1d      	ldr	r2, [pc, #116]	; (80013e8 <controller_setTempMeasurementCold+0x158>)
 8001374:	6013      	str	r3, [r2, #0]
	tempCold = 1.0 / tempCold;
 8001376:	4b1c      	ldr	r3, [pc, #112]	; (80013e8 <controller_setTempMeasurementCold+0x158>)
 8001378:	ed93 7a00 	vldr	s14, [r3]
 800137c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001380:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001384:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <controller_setTempMeasurementCold+0x158>)
 8001386:	edc3 7a00 	vstr	s15, [r3]
	tempCold -= 273.15;
 800138a:	4b17      	ldr	r3, [pc, #92]	; (80013e8 <controller_setTempMeasurementCold+0x158>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff f902 	bl	8000598 <__aeabi_f2d>
 8001394:	a310      	add	r3, pc, #64	; (adr r3, 80013d8 <controller_setTempMeasurementCold+0x148>)
 8001396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139a:	f7fe ff9d 	bl	80002d8 <__aeabi_dsub>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	4610      	mov	r0, r2
 80013a4:	4619      	mov	r1, r3
 80013a6:	f7ff fc27 	bl	8000bf8 <__aeabi_d2f>
 80013aa:	4603      	mov	r3, r0
 80013ac:	4a0e      	ldr	r2, [pc, #56]	; (80013e8 <controller_setTempMeasurementCold+0x158>)
 80013ae:	6013      	str	r3, [r2, #0]
}
 80013b0:	bf00      	nop
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	66666666 	.word	0x66666666
 80013bc:	400a6666 	.word	0x400a6666
 80013c0:	00000000 	.word	0x00000000
 80013c4:	40e01d00 	.word	0x40e01d00
 80013c8:	00000000 	.word	0x00000000
 80013cc:	40c38800 	.word	0x40c38800
 80013d0:	dcb5db83 	.word	0xdcb5db83
 80013d4:	3f6b79e1 	.word	0x3f6b79e1
 80013d8:	66666666 	.word	0x66666666
 80013dc:	40711266 	.word	0x40711266
 80013e0:	45800000 	.word	0x45800000
 80013e4:	461c4000 	.word	0x461c4000
 80013e8:	20000204 	.word	0x20000204
 80013ec:	4573c000 	.word	0x4573c000

080013f0 <controller_setTempMeasurementHot>:

void controller_setTempMeasurementHot(uint32_t adcVal){
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
	float R;
	R = (float) adcVal/MAX_ADC_VALUE * 3.3;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	ee07 3a90 	vmov	s15, r3
 80013fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001402:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001540 <controller_setTempMeasurementHot+0x150>
 8001406:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800140a:	ee16 0a90 	vmov	r0, s13
 800140e:	f7ff f8c3 	bl	8000598 <__aeabi_f2d>
 8001412:	a341      	add	r3, pc, #260	; (adr r3, 8001518 <controller_setTempMeasurementHot+0x128>)
 8001414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001418:	f7ff f916 	bl	8000648 <__aeabi_dmul>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	4610      	mov	r0, r2
 8001422:	4619      	mov	r1, r3
 8001424:	f7ff fbe8 	bl	8000bf8 <__aeabi_d2f>
 8001428:	4603      	mov	r3, r0
 800142a:	60fb      	str	r3, [r7, #12]
	R = (float) R0*3.3/R - R0;
 800142c:	68f8      	ldr	r0, [r7, #12]
 800142e:	f7ff f8b3 	bl	8000598 <__aeabi_f2d>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	a13a      	add	r1, pc, #232	; (adr r1, 8001520 <controller_setTempMeasurementHot+0x130>)
 8001438:	e9d1 0100 	ldrd	r0, r1, [r1]
 800143c:	f7ff fa2e 	bl	800089c <__aeabi_ddiv>
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	4610      	mov	r0, r2
 8001446:	4619      	mov	r1, r3
 8001448:	a337      	add	r3, pc, #220	; (adr r3, 8001528 <controller_setTempMeasurementHot+0x138>)
 800144a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144e:	f7fe ff43 	bl	80002d8 <__aeabi_dsub>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	4610      	mov	r0, r2
 8001458:	4619      	mov	r1, r3
 800145a:	f7ff fbcd 	bl	8000bf8 <__aeabi_d2f>
 800145e:	4603      	mov	r3, r0
 8001460:	60fb      	str	r3, [r7, #12]
	tempHot = R/R0;
 8001462:	ed97 7a03 	vldr	s14, [r7, #12]
 8001466:	eddf 6a37 	vldr	s13, [pc, #220]	; 8001544 <controller_setTempMeasurementHot+0x154>
 800146a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800146e:	4b36      	ldr	r3, [pc, #216]	; (8001548 <controller_setTempMeasurementHot+0x158>)
 8001470:	edc3 7a00 	vstr	s15, [r3]
	tempHot = log(tempHot);
 8001474:	4b34      	ldr	r3, [pc, #208]	; (8001548 <controller_setTempMeasurementHot+0x158>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff f88d 	bl	8000598 <__aeabi_f2d>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	ec43 2b10 	vmov	d0, r2, r3
 8001486:	f00a ff77 	bl	800c378 <log>
 800148a:	ec53 2b10 	vmov	r2, r3, d0
 800148e:	4610      	mov	r0, r2
 8001490:	4619      	mov	r1, r3
 8001492:	f7ff fbb1 	bl	8000bf8 <__aeabi_d2f>
 8001496:	4603      	mov	r3, r0
 8001498:	4a2b      	ldr	r2, [pc, #172]	; (8001548 <controller_setTempMeasurementHot+0x158>)
 800149a:	6013      	str	r3, [r2, #0]
	tempHot /= B;
 800149c:	4b2a      	ldr	r3, [pc, #168]	; (8001548 <controller_setTempMeasurementHot+0x158>)
 800149e:	ed93 7a00 	vldr	s14, [r3]
 80014a2:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800154c <controller_setTempMeasurementHot+0x15c>
 80014a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014aa:	4b27      	ldr	r3, [pc, #156]	; (8001548 <controller_setTempMeasurementHot+0x158>)
 80014ac:	edc3 7a00 	vstr	s15, [r3]
	tempHot += 1.0 / (T0 + 273.15);
 80014b0:	4b25      	ldr	r3, [pc, #148]	; (8001548 <controller_setTempMeasurementHot+0x158>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff f86f 	bl	8000598 <__aeabi_f2d>
 80014ba:	a31d      	add	r3, pc, #116	; (adr r3, 8001530 <controller_setTempMeasurementHot+0x140>)
 80014bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c0:	f7fe ff0c 	bl	80002dc <__adddf3>
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	4610      	mov	r0, r2
 80014ca:	4619      	mov	r1, r3
 80014cc:	f7ff fb94 	bl	8000bf8 <__aeabi_d2f>
 80014d0:	4603      	mov	r3, r0
 80014d2:	4a1d      	ldr	r2, [pc, #116]	; (8001548 <controller_setTempMeasurementHot+0x158>)
 80014d4:	6013      	str	r3, [r2, #0]
	tempHot = 1.0 / tempHot;
 80014d6:	4b1c      	ldr	r3, [pc, #112]	; (8001548 <controller_setTempMeasurementHot+0x158>)
 80014d8:	ed93 7a00 	vldr	s14, [r3]
 80014dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80014e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014e4:	4b18      	ldr	r3, [pc, #96]	; (8001548 <controller_setTempMeasurementHot+0x158>)
 80014e6:	edc3 7a00 	vstr	s15, [r3]
	tempHot -= 273.15;
 80014ea:	4b17      	ldr	r3, [pc, #92]	; (8001548 <controller_setTempMeasurementHot+0x158>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff f852 	bl	8000598 <__aeabi_f2d>
 80014f4:	a310      	add	r3, pc, #64	; (adr r3, 8001538 <controller_setTempMeasurementHot+0x148>)
 80014f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fa:	f7fe feed 	bl	80002d8 <__aeabi_dsub>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	4610      	mov	r0, r2
 8001504:	4619      	mov	r1, r3
 8001506:	f7ff fb77 	bl	8000bf8 <__aeabi_d2f>
 800150a:	4603      	mov	r3, r0
 800150c:	4a0e      	ldr	r2, [pc, #56]	; (8001548 <controller_setTempMeasurementHot+0x158>)
 800150e:	6013      	str	r3, [r2, #0]
}
 8001510:	bf00      	nop
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	66666666 	.word	0x66666666
 800151c:	400a6666 	.word	0x400a6666
 8001520:	00000000 	.word	0x00000000
 8001524:	40e01d00 	.word	0x40e01d00
 8001528:	00000000 	.word	0x00000000
 800152c:	40c38800 	.word	0x40c38800
 8001530:	dcb5db83 	.word	0xdcb5db83
 8001534:	3f6b79e1 	.word	0x3f6b79e1
 8001538:	66666666 	.word	0x66666666
 800153c:	40711266 	.word	0x40711266
 8001540:	45800000 	.word	0x45800000
 8001544:	461c4000 	.word	0x461c4000
 8001548:	20000200 	.word	0x20000200
 800154c:	4573c000 	.word	0x4573c000

08001550 <controller_printTemp>:

void controller_printTemp(){
 8001550:	b5b0      	push	{r4, r5, r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af02      	add	r7, sp, #8
	sprintf(stringBuffer, "Hot:\t%.3f\t\tCold:\t %.3f\n\r", tempHot, tempCold);
 8001556:	4b11      	ldr	r3, [pc, #68]	; (800159c <controller_printTemp+0x4c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff f81c 	bl	8000598 <__aeabi_f2d>
 8001560:	4604      	mov	r4, r0
 8001562:	460d      	mov	r5, r1
 8001564:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <controller_printTemp+0x50>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff f815 	bl	8000598 <__aeabi_f2d>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	e9cd 2300 	strd	r2, r3, [sp]
 8001576:	4622      	mov	r2, r4
 8001578:	462b      	mov	r3, r5
 800157a:	490a      	ldr	r1, [pc, #40]	; (80015a4 <controller_printTemp+0x54>)
 800157c:	480a      	ldr	r0, [pc, #40]	; (80015a8 <controller_printTemp+0x58>)
 800157e:	f008 fccd 	bl	8009f1c <siprintf>
	HAL_UART_Transmit_DMA(&huart1, (uint8_t *)stringBuffer, strlen(stringBuffer));
 8001582:	4809      	ldr	r0, [pc, #36]	; (80015a8 <controller_printTemp+0x58>)
 8001584:	f7fe fe4c 	bl	8000220 <strlen>
 8001588:	4603      	mov	r3, r0
 800158a:	b29b      	uxth	r3, r3
 800158c:	461a      	mov	r2, r3
 800158e:	4906      	ldr	r1, [pc, #24]	; (80015a8 <controller_printTemp+0x58>)
 8001590:	4806      	ldr	r0, [pc, #24]	; (80015ac <controller_printTemp+0x5c>)
 8001592:	f006 fef9 	bl	8008388 <HAL_UART_Transmit_DMA>
}
 8001596:	bf00      	nop
 8001598:	46bd      	mov	sp, r7
 800159a:	bdb0      	pop	{r4, r5, r7, pc}
 800159c:	20000200 	.word	0x20000200
 80015a0:	20000204 	.word	0x20000204
 80015a4:	0800c7a8 	.word	0x0800c7a8
 80015a8:	200002ec 	.word	0x200002ec
 80015ac:	200004f8 	.word	0x200004f8

080015b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80015b6:	4b12      	ldr	r3, [pc, #72]	; (8001600 <MX_DMA_Init+0x50>)
 80015b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ba:	4a11      	ldr	r2, [pc, #68]	; (8001600 <MX_DMA_Init+0x50>)
 80015bc:	f043 0304 	orr.w	r3, r3, #4
 80015c0:	6493      	str	r3, [r2, #72]	; 0x48
 80015c2:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <MX_DMA_Init+0x50>)
 80015c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015c6:	f003 0304 	and.w	r3, r3, #4
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015ce:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <MX_DMA_Init+0x50>)
 80015d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015d2:	4a0b      	ldr	r2, [pc, #44]	; (8001600 <MX_DMA_Init+0x50>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6493      	str	r3, [r2, #72]	; 0x48
 80015da:	4b09      	ldr	r3, [pc, #36]	; (8001600 <MX_DMA_Init+0x50>)
 80015dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	603b      	str	r3, [r7, #0]
 80015e4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2100      	movs	r1, #0
 80015ea:	200b      	movs	r0, #11
 80015ec:	f002 ff47 	bl	800447e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80015f0:	200b      	movs	r0, #11
 80015f2:	f002 ff5e 	bl	80044b2 <HAL_NVIC_EnableIRQ>

}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40021000 	.word	0x40021000

08001604 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b088      	sub	sp, #32
 8001608:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160a:	f107 030c 	add.w	r3, r7, #12
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	60da      	str	r2, [r3, #12]
 8001618:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800161a:	4b29      	ldr	r3, [pc, #164]	; (80016c0 <MX_GPIO_Init+0xbc>)
 800161c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161e:	4a28      	ldr	r2, [pc, #160]	; (80016c0 <MX_GPIO_Init+0xbc>)
 8001620:	f043 0304 	orr.w	r3, r3, #4
 8001624:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001626:	4b26      	ldr	r3, [pc, #152]	; (80016c0 <MX_GPIO_Init+0xbc>)
 8001628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162a:	f003 0304 	and.w	r3, r3, #4
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001632:	4b23      	ldr	r3, [pc, #140]	; (80016c0 <MX_GPIO_Init+0xbc>)
 8001634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001636:	4a22      	ldr	r2, [pc, #136]	; (80016c0 <MX_GPIO_Init+0xbc>)
 8001638:	f043 0302 	orr.w	r3, r3, #2
 800163c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800163e:	4b20      	ldr	r3, [pc, #128]	; (80016c0 <MX_GPIO_Init+0xbc>)
 8001640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED3_Pin|tg1_Pin, GPIO_PIN_RESET);
 800164a:	2200      	movs	r2, #0
 800164c:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8001650:	481c      	ldr	r0, [pc, #112]	; (80016c4 <MX_GPIO_Init+0xc0>)
 8001652:	f003 fbfd 	bl	8004e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8001656:	2200      	movs	r2, #0
 8001658:	2110      	movs	r1, #16
 800165a:	481b      	ldr	r0, [pc, #108]	; (80016c8 <MX_GPIO_Init+0xc4>)
 800165c:	f003 fbf8 	bl	8004e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED3_Pin;
 8001660:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001664:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001666:	2301      	movs	r3, #1
 8001668:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166e:	2300      	movs	r3, #0
 8001670:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8001672:	f107 030c 	add.w	r3, r7, #12
 8001676:	4619      	mov	r1, r3
 8001678:	4812      	ldr	r0, [pc, #72]	; (80016c4 <MX_GPIO_Init+0xc0>)
 800167a:	f003 fa67 	bl	8004b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = tg1_Pin;
 800167e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001682:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001684:	2301      	movs	r3, #1
 8001686:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800168c:	2302      	movs	r3, #2
 800168e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(tg1_GPIO_Port, &GPIO_InitStruct);
 8001690:	f107 030c 	add.w	r3, r7, #12
 8001694:	4619      	mov	r1, r3
 8001696:	480b      	ldr	r0, [pc, #44]	; (80016c4 <MX_GPIO_Init+0xc0>)
 8001698:	f003 fa58 	bl	8004b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED4_Pin;
 800169c:	2310      	movs	r3, #16
 800169e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a0:	2301      	movs	r3, #1
 80016a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a8:	2300      	movs	r3, #0
 80016aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 80016ac:	f107 030c 	add.w	r3, r7, #12
 80016b0:	4619      	mov	r1, r3
 80016b2:	4805      	ldr	r0, [pc, #20]	; (80016c8 <MX_GPIO_Init+0xc4>)
 80016b4:	f003 fa4a 	bl	8004b4c <HAL_GPIO_Init>

}
 80016b8:	bf00      	nop
 80016ba:	3720      	adds	r7, #32
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40021000 	.word	0x40021000
 80016c4:	48000800 	.word	0x48000800
 80016c8:	48000400 	.word	0x48000400

080016cc <MX_HRTIM1_Init>:

HRTIM_HandleTypeDef hhrtim1;

/* HRTIM1 init function */
void MX_HRTIM1_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b0ba      	sub	sp, #232	; 0xe8
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_ADCTriggerCfgTypeDef pADCTriggerCfg = {0};
 80016d2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 80016dc:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCtlTypeDef pTimerCtl = {0};
 80016ea:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	605a      	str	r2, [r3, #4]
 80016f4:	609a      	str	r2, [r3, #8]
 80016f6:	60da      	str	r2, [r3, #12]
 80016f8:	611a      	str	r2, [r3, #16]
 80016fa:	615a      	str	r2, [r3, #20]
 80016fc:	619a      	str	r2, [r3, #24]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 80016fe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001702:	2260      	movs	r2, #96	; 0x60
 8001704:	2100      	movs	r1, #0
 8001706:	4618      	mov	r0, r3
 8001708:	f007 ff96 	bl	8009638 <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 800170c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
  HRTIM_DeadTimeCfgTypeDef pDeadTimeCfg = {0};
 8001718:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800171c:	2224      	movs	r2, #36	; 0x24
 800171e:	2100      	movs	r1, #0
 8001720:	4618      	mov	r0, r3
 8001722:	f007 ff89 	bl	8009638 <memset>
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 8001726:	1d3b      	adds	r3, r7, #4
 8001728:	2220      	movs	r2, #32
 800172a:	2100      	movs	r1, #0
 800172c:	4618      	mov	r0, r3
 800172e:	f007 ff83 	bl	8009638 <memset>

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 8001732:	4b9e      	ldr	r3, [pc, #632]	; (80019ac <MX_HRTIM1_Init+0x2e0>)
 8001734:	4a9e      	ldr	r2, [pc, #632]	; (80019b0 <MX_HRTIM1_Init+0x2e4>)
 8001736:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8001738:	4b9c      	ldr	r3, [pc, #624]	; (80019ac <MX_HRTIM1_Init+0x2e0>)
 800173a:	2200      	movs	r2, #0
 800173c:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 800173e:	4b9b      	ldr	r3, [pc, #620]	; (80019ac <MX_HRTIM1_Init+0x2e0>)
 8001740:	2200      	movs	r2, #0
 8001742:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 8001744:	4899      	ldr	r0, [pc, #612]	; (80019ac <MX_HRTIM1_Init+0x2e0>)
 8001746:	f003 fb9b 	bl	8004e80 <HAL_HRTIM_Init>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_HRTIM1_Init+0x88>
  {
    Error_Handler();
 8001750:	f000 fa78 	bl	8001c44 <Error_Handler>
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) != HAL_OK)
 8001754:	210c      	movs	r1, #12
 8001756:	4895      	ldr	r0, [pc, #596]	; (80019ac <MX_HRTIM1_Init+0x2e0>)
 8001758:	f003 fc62 	bl	8005020 <HAL_HRTIM_DLLCalibrationStart>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_HRTIM1_Init+0x9a>
  {
    Error_Handler();
 8001762:	f000 fa6f 	bl	8001c44 <Error_Handler>
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 8001766:	210a      	movs	r1, #10
 8001768:	4890      	ldr	r0, [pc, #576]	; (80019ac <MX_HRTIM1_Init+0x2e0>)
 800176a:	f003 fcb1 	bl	80050d0 <HAL_HRTIM_PollForDLLCalibration>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_HRTIM1_Init+0xac>
  {
    Error_Handler();
 8001774:	f000 fa66 	bl	8001c44 <Error_Handler>
  }
  pADCTriggerCfg.UpdateSource = HRTIM_ADCTRIGGERUPDATE_TIMER_E;
 8001778:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800177c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  pADCTriggerCfg.Trigger = HRTIM_ADCTRIGGEREVENT13_TIMERE_CMP3;
 8001780:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001784:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  if (HAL_HRTIM_ADCTriggerConfig(&hhrtim1, HRTIM_ADCTRIGGER_1, &pADCTriggerCfg) != HAL_OK)
 8001788:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800178c:	461a      	mov	r2, r3
 800178e:	2101      	movs	r1, #1
 8001790:	4886      	ldr	r0, [pc, #536]	; (80019ac <MX_HRTIM1_Init+0x2e0>)
 8001792:	f003 fcf9 	bl	8005188 <HAL_HRTIM_ADCTriggerConfig>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_HRTIM1_Init+0xd4>
  {
    Error_Handler();
 800179c:	f000 fa52 	bl	8001c44 <Error_Handler>
  }
  if (HAL_HRTIM_ADCPostScalerConfig(&hhrtim1, HRTIM_ADCTRIGGER_1, 24) != HAL_OK)
 80017a0:	2218      	movs	r2, #24
 80017a2:	2101      	movs	r1, #1
 80017a4:	4881      	ldr	r0, [pc, #516]	; (80019ac <MX_HRTIM1_Init+0x2e0>)
 80017a6:	f003 fedb 	bl	8005560 <HAL_HRTIM_ADCPostScalerConfig>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_HRTIM1_Init+0xe8>
  {
    Error_Handler();
 80017b0:	f000 fa48 	bl	8001c44 <Error_Handler>
  }
  pTimeBaseCfg.Period = PERIOD_100;
 80017b4:	f24d 4380 	movw	r3, #54400	; 0xd480
 80017b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  pTimeBaseCfg.RepetitionCounter = 0x00;
 80017bc:	2300      	movs	r3, #0
 80017be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL32;
 80017c2:	2300      	movs	r3, #0
 80017c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 80017c8:	2308      	movs	r3, #8
 80017ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 80017ce:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80017d2:	461a      	mov	r2, r3
 80017d4:	2104      	movs	r1, #4
 80017d6:	4875      	ldr	r0, [pc, #468]	; (80019ac <MX_HRTIM1_Init+0x2e0>)
 80017d8:	f003 fcae 	bl	8005138 <HAL_HRTIM_TimeBaseConfig>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_HRTIM1_Init+0x11a>
  {
    Error_Handler();
 80017e2:	f000 fa2f 	bl	8001c44 <Error_Handler>
  }
  pTimerCtl.UpDownMode = HRTIM_TIMERUPDOWNMODE_UP;
 80017e6:	2300      	movs	r3, #0
 80017e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  pTimerCtl.TrigHalf = HRTIM_TIMERTRIGHALF_DISABLED;
 80017ec:	2300      	movs	r3, #0
 80017ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  pTimerCtl.GreaterCMP3 = HRTIM_TIMERGTCMP3_EQUAL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  pTimerCtl.GreaterCMP1 = HRTIM_TIMERGTCMP1_EQUAL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  pTimerCtl.DualChannelDacEnable = HRTIM_TIMER_DCDE_DISABLED;
 80017fe:	2300      	movs	r3, #0
 8001800:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimerCtl) != HAL_OK)
 8001804:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001808:	461a      	mov	r2, r3
 800180a:	2104      	movs	r1, #4
 800180c:	4867      	ldr	r0, [pc, #412]	; (80019ac <MX_HRTIM1_Init+0x2e0>)
 800180e:	f004 f863 	bl	80058d8 <HAL_HRTIM_WaveformTimerControl>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_HRTIM1_Init+0x150>
  {
    Error_Handler();
 8001818:	f000 fa14 	bl	8001c44 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_MASTER_IT_NONE;
 800181c:	2300      	movs	r3, #0
 800181e:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8001820:	2300      	movs	r3, #0
 8001822:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.DMASrcAddress = 0x0000;
 8001824:	2300      	movs	r3, #0
 8001826:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.DMADstAddress = 0x0000;
 8001828:	2300      	movs	r3, #0
 800182a:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.DMASize = 0x1;
 800182c:	2301      	movs	r3, #1
 800182e:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8001830:	2300      	movs	r3, #0
 8001832:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 8001834:	2300      	movs	r3, #0
 8001836:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8001838:	2300      	movs	r3, #0
 800183a:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 800183c:	2300      	movs	r3, #0
 800183e:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8001840:	2300      	movs	r3, #0
 8001842:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 8001844:	2300      	movs	r3, #0
 8001846:	67fb      	str	r3, [r7, #124]	; 0x7c
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8001848:	2300      	movs	r3, #0
 800184a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 800184e:	2300      	movs	r3, #0
 8001850:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8001854:	2300      	movs	r3, #0
 8001856:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 800185a:	2300      	movs	r3, #0
 800185c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8001860:	2300      	movs	r3, #0
 8001862:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8001866:	2300      	movs	r3, #0
 8001868:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_ENABLED;
 800186c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001870:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 8001874:	2300      	movs	r3, #0
 8001876:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 800187a:	2300      	movs	r3, #0
 800187c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 8001880:	2300      	movs	r3, #0
 8001882:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 8001886:	2300      	movs	r3, #0
 8001888:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 800188c:	2300      	movs	r3, #0
 800188e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 8001892:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001896:	461a      	mov	r2, r3
 8001898:	2104      	movs	r1, #4
 800189a:	4844      	ldr	r0, [pc, #272]	; (80019ac <MX_HRTIM1_Init+0x2e0>)
 800189c:	f003 ffaa 	bl	80057f4 <HAL_HRTIM_WaveformTimerConfig>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_HRTIM1_Init+0x1de>
  {
    Error_Handler();
 80018a6:	f000 f9cd 	bl	8001c44 <Error_Handler>
  }
  pCompareCfg.CompareValue = 0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 80018ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018b2:	2201      	movs	r2, #1
 80018b4:	2104      	movs	r1, #4
 80018b6:	483d      	ldr	r0, [pc, #244]	; (80019ac <MX_HRTIM1_Init+0x2e0>)
 80018b8:	f004 f8c2 	bl	8005a40 <HAL_HRTIM_WaveformCompareConfig>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_HRTIM1_Init+0x1fa>
  {
    Error_Handler();
 80018c2:	f000 f9bf 	bl	8001c44 <Error_Handler>
  }
  pCompareCfg.CompareValue = MAX_PERIOD;
 80018c6:	f649 7360 	movw	r3, #40800	; 0x9f60
 80018ca:	64bb      	str	r3, [r7, #72]	; 0x48
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 80018cc:	2300      	movs	r3, #0
 80018ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 80018d0:	2300      	movs	r3, #0
 80018d2:	653b      	str	r3, [r7, #80]	; 0x50

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 80018d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018d8:	2202      	movs	r2, #2
 80018da:	2104      	movs	r1, #4
 80018dc:	4833      	ldr	r0, [pc, #204]	; (80019ac <MX_HRTIM1_Init+0x2e0>)
 80018de:	f004 f8af 	bl	8005a40 <HAL_HRTIM_WaveformCompareConfig>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_HRTIM1_Init+0x220>
  {
    Error_Handler();
 80018e8:	f000 f9ac 	bl	8001c44 <Error_Handler>
  }
  pCompareCfg.CompareValue = BLANKING;
 80018ec:	2364      	movs	r3, #100	; 0x64
 80018ee:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 80018f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018f4:	2204      	movs	r2, #4
 80018f6:	2104      	movs	r1, #4
 80018f8:	482c      	ldr	r0, [pc, #176]	; (80019ac <MX_HRTIM1_Init+0x2e0>)
 80018fa:	f004 f8a1 	bl	8005a40 <HAL_HRTIM_WaveformCompareConfig>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_HRTIM1_Init+0x23c>
  {
    Error_Handler();
 8001904:	f000 f99e 	bl	8001c44 <Error_Handler>
  }
  pDeadTimeCfg.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_MUL8;
 8001908:	2300      	movs	r3, #0
 800190a:	627b      	str	r3, [r7, #36]	; 0x24
  pDeadTimeCfg.RisingValue = DEADTIME;
 800190c:	2332      	movs	r3, #50	; 0x32
 800190e:	62bb      	str	r3, [r7, #40]	; 0x28
  pDeadTimeCfg.RisingSign = HRTIM_TIMDEADTIME_RISINGSIGN_POSITIVE;
 8001910:	2300      	movs	r3, #0
 8001912:	62fb      	str	r3, [r7, #44]	; 0x2c
  pDeadTimeCfg.RisingLock = HRTIM_TIMDEADTIME_RISINGLOCK_WRITE;
 8001914:	2300      	movs	r3, #0
 8001916:	633b      	str	r3, [r7, #48]	; 0x30
  pDeadTimeCfg.RisingSignLock = HRTIM_TIMDEADTIME_RISINGSIGNLOCK_WRITE;
 8001918:	2300      	movs	r3, #0
 800191a:	637b      	str	r3, [r7, #52]	; 0x34
  pDeadTimeCfg.FallingValue = DEADTIME;
 800191c:	2332      	movs	r3, #50	; 0x32
 800191e:	63bb      	str	r3, [r7, #56]	; 0x38
  pDeadTimeCfg.FallingSign = HRTIM_TIMDEADTIME_FALLINGSIGN_POSITIVE;
 8001920:	2300      	movs	r3, #0
 8001922:	63fb      	str	r3, [r7, #60]	; 0x3c
  pDeadTimeCfg.FallingLock = HRTIM_TIMDEADTIME_FALLINGLOCK_WRITE;
 8001924:	2300      	movs	r3, #0
 8001926:	643b      	str	r3, [r7, #64]	; 0x40
  pDeadTimeCfg.FallingSignLock = HRTIM_TIMDEADTIME_FALLINGSIGNLOCK_WRITE;
 8001928:	2300      	movs	r3, #0
 800192a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pDeadTimeCfg) != HAL_OK)
 800192c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001930:	461a      	mov	r2, r3
 8001932:	2104      	movs	r1, #4
 8001934:	481d      	ldr	r0, [pc, #116]	; (80019ac <MX_HRTIM1_Init+0x2e0>)
 8001936:	f004 f803 	bl	8005940 <HAL_HRTIM_DeadTimeConfig>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_HRTIM1_Init+0x278>
  {
    Error_Handler();
 8001940:	f000 f980 	bl	8001c44 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8001944:	2300      	movs	r3, #0
 8001946:	607b      	str	r3, [r7, #4]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMPER;
 8001948:	2304      	movs	r3, #4
 800194a:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMCMP1;
 800194c:	2318      	movs	r3, #24
 800194e:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8001950:	2300      	movs	r3, #0
 8001952:	613b      	str	r3, [r7, #16]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8001958:	2300      	movs	r3, #0
 800195a:	61bb      	str	r3, [r7, #24]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 800195c:	2300      	movs	r3, #0
 800195e:	61fb      	str	r3, [r7, #28]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8001960:	2300      	movs	r3, #0
 8001962:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE1, &pOutputCfg) != HAL_OK)
 8001964:	1d3b      	adds	r3, r7, #4
 8001966:	f44f 7280 	mov.w	r2, #256	; 0x100
 800196a:	2104      	movs	r1, #4
 800196c:	480f      	ldr	r0, [pc, #60]	; (80019ac <MX_HRTIM1_Init+0x2e0>)
 800196e:	f004 f9d5 	bl	8005d1c <HAL_HRTIM_WaveformOutputConfig>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_HRTIM1_Init+0x2b0>
  {
    Error_Handler();
 8001978:	f000 f964 	bl	8001c44 <Error_Handler>
  }
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 800197c:	2300      	movs	r3, #0
 800197e:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 8001980:	2300      	movs	r3, #0
 8001982:	60fb      	str	r3, [r7, #12]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE2, &pOutputCfg) != HAL_OK)
 8001984:	1d3b      	adds	r3, r7, #4
 8001986:	f44f 7200 	mov.w	r2, #512	; 0x200
 800198a:	2104      	movs	r1, #4
 800198c:	4807      	ldr	r0, [pc, #28]	; (80019ac <MX_HRTIM1_Init+0x2e0>)
 800198e:	f004 f9c5 	bl	8005d1c <HAL_HRTIM_WaveformOutputConfig>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_HRTIM1_Init+0x2d0>
  {
    Error_Handler();
 8001998:	f000 f954 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim1);
 800199c:	4803      	ldr	r0, [pc, #12]	; (80019ac <MX_HRTIM1_Init+0x2e0>)
 800199e:	f000 f829 	bl	80019f4 <HAL_HRTIM_MspPostInit>

}
 80019a2:	bf00      	nop
 80019a4:	37e8      	adds	r7, #232	; 0xe8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000350 	.word	0x20000350
 80019b0:	40016800 	.word	0x40016800

080019b4 <HAL_HRTIM_MspInit>:

void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]

  if(hrtimHandle->Instance==HRTIM1)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a0a      	ldr	r2, [pc, #40]	; (80019ec <HAL_HRTIM_MspInit+0x38>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d10b      	bne.n	80019de <HAL_HRTIM_MspInit+0x2a>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* HRTIM1 clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 80019c6:	4b0a      	ldr	r3, [pc, #40]	; (80019f0 <HAL_HRTIM_MspInit+0x3c>)
 80019c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ca:	4a09      	ldr	r2, [pc, #36]	; (80019f0 <HAL_HRTIM_MspInit+0x3c>)
 80019cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80019d0:	6613      	str	r3, [r2, #96]	; 0x60
 80019d2:	4b07      	ldr	r3, [pc, #28]	; (80019f0 <HAL_HRTIM_MspInit+0x3c>)
 80019d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }
}
 80019de:	bf00      	nop
 80019e0:	3714      	adds	r7, #20
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	40016800 	.word	0x40016800
 80019f0:	40021000 	.word	0x40021000

080019f4 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b088      	sub	sp, #32
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fc:	f107 030c 	add.w	r3, r7, #12
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]
  if(hrtimHandle->Instance==HRTIM1)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a11      	ldr	r2, [pc, #68]	; (8001a58 <HAL_HRTIM_MspPostInit+0x64>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d11c      	bne.n	8001a50 <HAL_HRTIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a16:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <HAL_HRTIM_MspPostInit+0x68>)
 8001a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1a:	4a10      	ldr	r2, [pc, #64]	; (8001a5c <HAL_HRTIM_MspPostInit+0x68>)
 8001a1c:	f043 0304 	orr.w	r3, r3, #4
 8001a20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a22:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <HAL_HRTIM_MspPostInit+0x68>)
 8001a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a26:	f003 0304 	and.w	r3, r3, #4
 8001a2a:	60bb      	str	r3, [r7, #8]
 8001a2c:	68bb      	ldr	r3, [r7, #8]
    /**HRTIM1 GPIO Configuration
    PC8     ------> HRTIM1_CHE1
    PC9     ------> HRTIM1_CHE2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a32:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a34:	2302      	movs	r3, #2
 8001a36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_HRTIM1;
 8001a40:	2303      	movs	r3, #3
 8001a42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a44:	f107 030c 	add.w	r3, r7, #12
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4805      	ldr	r0, [pc, #20]	; (8001a60 <HAL_HRTIM_MspPostInit+0x6c>)
 8001a4c:	f003 f87e 	bl	8004b4c <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8001a50:	bf00      	nop
 8001a52:	3720      	adds	r7, #32
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40016800 	.word	0x40016800
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	48000800 	.word	0x48000800

08001a64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a68:	f000 fbaf 	bl	80021ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a6c:	f000 f832 	bl	8001ad4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a70:	f7ff fdc8 	bl	8001604 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a74:	f7ff fd9c 	bl	80015b0 <MX_DMA_Init>
  MX_HRTIM1_Init();
 8001a78:	f7ff fe28 	bl	80016cc <MX_HRTIM1_Init>
  MX_USART1_UART_Init();
 8001a7c:	f000 fab8 	bl	8001ff0 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001a80:	f7ff fa86 	bl	8000f90 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001a84:	f000 fa40 	bl	8001f08 <MX_TIM2_Init>
  MX_ADC2_Init();
 8001a88:	f7ff fafc 	bl	8001084 <MX_ADC2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001a8c:	f000 f88e 	bl	8001bac <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  //Calibration of adc2
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001a90:	217f      	movs	r1, #127	; 0x7f
 8001a92:	480c      	ldr	r0, [pc, #48]	; (8001ac4 <main+0x60>)
 8001a94:	f002 fa7c 	bl	8003f90 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8001a98:	217f      	movs	r1, #127	; 0x7f
 8001a9a:	480b      	ldr	r0, [pc, #44]	; (8001ac8 <main+0x64>)
 8001a9c:	f002 fa78 	bl	8003f90 <HAL_ADCEx_Calibration_Start>



  //Start HRTIM
  HAL_HRTIM_WaveformOutputStart(&hhrtim1, HRTIM_OUTPUT_TE1|HRTIM_OUTPUT_TE2);
 8001aa0:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001aa4:	4809      	ldr	r0, [pc, #36]	; (8001acc <main+0x68>)
 8001aa6:	f004 f96a 	bl	8005d7e <HAL_HRTIM_WaveformOutputStart>
  HAL_HRTIM_WaveformCounterStart(&hhrtim1, HRTIM_TIMERID_TIMER_E);
 8001aaa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001aae:	4807      	ldr	r0, [pc, #28]	; (8001acc <main+0x68>)
 8001ab0:	f004 f992 	bl	8005dd8 <HAL_HRTIM_WaveformCountStart>

  HAL_TIM_Base_Start_IT(&htim2);
 8001ab4:	4806      	ldr	r0, [pc, #24]	; (8001ad0 <main+0x6c>)
 8001ab6:	f005 fec5 	bl	8007844 <HAL_TIM_Base_Start_IT>

  controller_setVoltagePWM(1.5);
 8001aba:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 8001abe:	f7ff fbc7 	bl	8001250 <controller_setVoltagePWM>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ac2:	e7fe      	b.n	8001ac2 <main+0x5e>
 8001ac4:	20000280 	.word	0x20000280
 8001ac8:	20000214 	.word	0x20000214
 8001acc:	20000350 	.word	0x20000350
 8001ad0:	2000044c 	.word	0x2000044c

08001ad4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b0a8      	sub	sp, #160	; 0xa0
 8001ad8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ada:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001ade:	2238      	movs	r2, #56	; 0x38
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f007 fda8 	bl	8009638 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ae8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001af8:	463b      	mov	r3, r7
 8001afa:	2254      	movs	r2, #84	; 0x54
 8001afc:	2100      	movs	r1, #0
 8001afe:	4618      	mov	r0, r3
 8001b00:	f007 fd9a 	bl	8009638 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001b04:	2000      	movs	r0, #0
 8001b06:	f004 fe11 	bl	800672c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b12:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b14:	2340      	movs	r3, #64	; 0x40
 8001b16:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001b24:	2304      	movs	r3, #4
 8001b26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001b2a:	2355      	movs	r3, #85	; 0x55
 8001b2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b30:	2302      	movs	r3, #2
 8001b32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b36:	2302      	movs	r3, #2
 8001b38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b42:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001b46:	4618      	mov	r0, r3
 8001b48:	f004 fea4 	bl	8006894 <HAL_RCC_OscConfig>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001b52:	f000 f877 	bl	8001c44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b56:	230f      	movs	r3, #15
 8001b58:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b62:	2300      	movs	r3, #0
 8001b64:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b6a:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001b6c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b70:	2104      	movs	r1, #4
 8001b72:	4618      	mov	r0, r3
 8001b74:	f005 f9a6 	bl	8006ec4 <HAL_RCC_ClockConfig>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001b7e:	f000 f861 	bl	8001c44 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC12;
 8001b82:	f248 0301 	movw	r3, #32769	; 0x8001
 8001b86:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001b8c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001b90:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b92:	463b      	mov	r3, r7
 8001b94:	4618      	mov	r0, r3
 8001b96:	f005 fbb1 	bl	80072fc <HAL_RCCEx_PeriphCLKConfig>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001ba0:	f000 f850 	bl	8001c44 <Error_Handler>
  }
}
 8001ba4:	bf00      	nop
 8001ba6:	37a0      	adds	r7, #160	; 0xa0
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* ADC1_2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	2012      	movs	r0, #18
 8001bb6:	f002 fc62 	bl	800447e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001bba:	2012      	movs	r0, #18
 8001bbc:	f002 fc79 	bl	80044b2 <HAL_NVIC_EnableIRQ>
}
 8001bc0:	bf00      	nop
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bd4:	d10b      	bne.n	8001bee <HAL_ADC_ConvCpltCallback+0x2a>
	controller_setTempMeasurementCold(HAL_ADC_GetValue(&hadc1));
 8001bd6:	480f      	ldr	r0, [pc, #60]	; (8001c14 <HAL_ADC_ConvCpltCallback+0x50>)
 8001bd8:	f001 f94f 	bl	8002e7a <HAL_ADC_GetValue>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff fb56 	bl	8001290 <controller_setTempMeasurementCold>
	controller_printTemp();
 8001be4:	f7ff fcb4 	bl	8001550 <controller_printTemp>
	HAL_ADC_Stop_IT(&hadc1);
 8001be8:	480a      	ldr	r0, [pc, #40]	; (8001c14 <HAL_ADC_ConvCpltCallback+0x50>)
 8001bea:	f001 f90b 	bl	8002e04 <HAL_ADC_Stop_IT>
	}
	if(hadc->Instance == ADC2){
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a09      	ldr	r2, [pc, #36]	; (8001c18 <HAL_ADC_ConvCpltCallback+0x54>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d109      	bne.n	8001c0c <HAL_ADC_ConvCpltCallback+0x48>
	controller_setTempMeasurementHot(HAL_ADC_GetValue(&hadc2));
 8001bf8:	4808      	ldr	r0, [pc, #32]	; (8001c1c <HAL_ADC_ConvCpltCallback+0x58>)
 8001bfa:	f001 f93e 	bl	8002e7a <HAL_ADC_GetValue>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff fbf5 	bl	80013f0 <controller_setTempMeasurementHot>
	HAL_ADC_Stop_IT(&hadc2);
 8001c06:	4805      	ldr	r0, [pc, #20]	; (8001c1c <HAL_ADC_ConvCpltCallback+0x58>)
 8001c08:	f001 f8fc 	bl	8002e04 <HAL_ADC_Stop_IT>
	}
}
 8001c0c:	bf00      	nop
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20000280 	.word	0x20000280
 8001c18:	50000100 	.word	0x50000100
 8001c1c:	20000214 	.word	0x20000214

08001c20 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_IT(&hadc1);
 8001c28:	4804      	ldr	r0, [pc, #16]	; (8001c3c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001c2a:	f000 ff8f 	bl	8002b4c <HAL_ADC_Start_IT>
	HAL_ADC_Start_IT(&hadc2);
 8001c2e:	4804      	ldr	r0, [pc, #16]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c30:	f000 ff8c 	bl	8002b4c <HAL_ADC_Start_IT>
}
 8001c34:	bf00      	nop
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20000280 	.word	0x20000280
 8001c40:	20000214 	.word	0x20000214

08001c44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c48:	b672      	cpsid	i
}
 8001c4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c4c:	e7fe      	b.n	8001c4c <Error_Handler+0x8>
	...

08001c50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c56:	4b0f      	ldr	r3, [pc, #60]	; (8001c94 <HAL_MspInit+0x44>)
 8001c58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c5a:	4a0e      	ldr	r2, [pc, #56]	; (8001c94 <HAL_MspInit+0x44>)
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	6613      	str	r3, [r2, #96]	; 0x60
 8001c62:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <HAL_MspInit+0x44>)
 8001c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	607b      	str	r3, [r7, #4]
 8001c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c6e:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <HAL_MspInit+0x44>)
 8001c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c72:	4a08      	ldr	r2, [pc, #32]	; (8001c94 <HAL_MspInit+0x44>)
 8001c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c78:	6593      	str	r3, [r2, #88]	; 0x58
 8001c7a:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <HAL_MspInit+0x44>)
 8001c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c82:	603b      	str	r3, [r7, #0]
 8001c84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001c86:	f004 fdf5 	bl	8006874 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40021000 	.word	0x40021000

08001c98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c9c:	e7fe      	b.n	8001c9c <NMI_Handler+0x4>
	...

08001ca0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001caa:	4802      	ldr	r0, [pc, #8]	; (8001cb4 <HardFault_Handler+0x14>)
 8001cac:	f003 f8d0 	bl	8004e50 <HAL_GPIO_WritePin>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cb0:	e7fe      	b.n	8001cb0 <HardFault_Handler+0x10>
 8001cb2:	bf00      	nop
 8001cb4:	48000800 	.word	0x48000800

08001cb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cbc:	e7fe      	b.n	8001cbc <MemManage_Handler+0x4>

08001cbe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cc2:	e7fe      	b.n	8001cc2 <BusFault_Handler+0x4>

08001cc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cc8:	e7fe      	b.n	8001cc8 <UsageFault_Handler+0x4>

08001cca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cf8:	f000 faba 	bl	8002270 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cfc:	bf00      	nop
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001d04:	4802      	ldr	r0, [pc, #8]	; (8001d10 <DMA1_Channel1_IRQHandler+0x10>)
 8001d06:	f002 fdd2 	bl	80048ae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20000498 	.word	0x20000498

08001d14 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001d18:	4803      	ldr	r0, [pc, #12]	; (8001d28 <ADC1_2_IRQHandler+0x14>)
 8001d1a:	f001 f8bb 	bl	8002e94 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001d1e:	4803      	ldr	r0, [pc, #12]	; (8001d2c <ADC1_2_IRQHandler+0x18>)
 8001d20:	f001 f8b8 	bl	8002e94 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */


  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001d24:	bf00      	nop
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20000280 	.word	0x20000280
 8001d2c:	20000214 	.word	0x20000214

08001d30 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d34:	4802      	ldr	r0, [pc, #8]	; (8001d40 <TIM2_IRQHandler+0x10>)
 8001d36:	f005 fdfd 	bl	8007934 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	2000044c 	.word	0x2000044c

08001d44 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d48:	4802      	ldr	r0, [pc, #8]	; (8001d54 <USART1_IRQHandler+0x10>)
 8001d4a:	f006 fb9d 	bl	8008488 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	200004f8 	.word	0x200004f8

08001d58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
	return 1;
 8001d5c:	2301      	movs	r3, #1
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <_kill>:

int _kill(int pid, int sig)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d72:	f007 fc37 	bl	80095e4 <__errno>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2216      	movs	r2, #22
 8001d7a:	601a      	str	r2, [r3, #0]
	return -1;
 8001d7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <_exit>:

void _exit (int status)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d90:	f04f 31ff 	mov.w	r1, #4294967295
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7ff ffe7 	bl	8001d68 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d9a:	e7fe      	b.n	8001d9a <_exit+0x12>

08001d9c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]
 8001dac:	e00a      	b.n	8001dc4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001dae:	f3af 8000 	nop.w
 8001db2:	4601      	mov	r1, r0
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	1c5a      	adds	r2, r3, #1
 8001db8:	60ba      	str	r2, [r7, #8]
 8001dba:	b2ca      	uxtb	r2, r1
 8001dbc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	617b      	str	r3, [r7, #20]
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	dbf0      	blt.n	8001dae <_read+0x12>
	}

return len;
 8001dcc:	687b      	ldr	r3, [r7, #4]
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b086      	sub	sp, #24
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	60f8      	str	r0, [r7, #12]
 8001dde:	60b9      	str	r1, [r7, #8]
 8001de0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de2:	2300      	movs	r3, #0
 8001de4:	617b      	str	r3, [r7, #20]
 8001de6:	e009      	b.n	8001dfc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	1c5a      	adds	r2, r3, #1
 8001dec:	60ba      	str	r2, [r7, #8]
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	617b      	str	r3, [r7, #20]
 8001dfc:	697a      	ldr	r2, [r7, #20]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	dbf1      	blt.n	8001de8 <_write+0x12>
	}
	return len;
 8001e04:	687b      	ldr	r3, [r7, #4]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3718      	adds	r7, #24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <_close>:

int _close(int file)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b083      	sub	sp, #12
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
	return -1;
 8001e16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b083      	sub	sp, #12
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
 8001e2e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e36:	605a      	str	r2, [r3, #4]
	return 0;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <_isatty>:

int _isatty(int file)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
	return 1;
 8001e4e:	2301      	movs	r3, #1
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
	return 0;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3714      	adds	r7, #20
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
	...

08001e78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e80:	4a14      	ldr	r2, [pc, #80]	; (8001ed4 <_sbrk+0x5c>)
 8001e82:	4b15      	ldr	r3, [pc, #84]	; (8001ed8 <_sbrk+0x60>)
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e8c:	4b13      	ldr	r3, [pc, #76]	; (8001edc <_sbrk+0x64>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d102      	bne.n	8001e9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e94:	4b11      	ldr	r3, [pc, #68]	; (8001edc <_sbrk+0x64>)
 8001e96:	4a12      	ldr	r2, [pc, #72]	; (8001ee0 <_sbrk+0x68>)
 8001e98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e9a:	4b10      	ldr	r3, [pc, #64]	; (8001edc <_sbrk+0x64>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d207      	bcs.n	8001eb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ea8:	f007 fb9c 	bl	80095e4 <__errno>
 8001eac:	4603      	mov	r3, r0
 8001eae:	220c      	movs	r2, #12
 8001eb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb6:	e009      	b.n	8001ecc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001eb8:	4b08      	ldr	r3, [pc, #32]	; (8001edc <_sbrk+0x64>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ebe:	4b07      	ldr	r3, [pc, #28]	; (8001edc <_sbrk+0x64>)
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	4a05      	ldr	r2, [pc, #20]	; (8001edc <_sbrk+0x64>)
 8001ec8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eca:	68fb      	ldr	r3, [r7, #12]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3718      	adds	r7, #24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	20020000 	.word	0x20020000
 8001ed8:	00000400 	.word	0x00000400
 8001edc:	20000208 	.word	0x20000208
 8001ee0:	200005a0 	.word	0x200005a0

08001ee4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ee8:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <SystemInit+0x20>)
 8001eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eee:	4a05      	ldr	r2, [pc, #20]	; (8001f04 <SystemInit+0x20>)
 8001ef0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ef4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ef8:	bf00      	nop
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	e000ed00 	.word	0xe000ed00

08001f08 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b088      	sub	sp, #32
 8001f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f0e:	f107 0310 	add.w	r3, r7, #16
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	605a      	str	r2, [r3, #4]
 8001f18:	609a      	str	r2, [r3, #8]
 8001f1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f1c:	1d3b      	adds	r3, r7, #4
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	605a      	str	r2, [r3, #4]
 8001f24:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f26:	4b1e      	ldr	r3, [pc, #120]	; (8001fa0 <MX_TIM2_Init+0x98>)
 8001f28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f2c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001f2e:	4b1c      	ldr	r3, [pc, #112]	; (8001fa0 <MX_TIM2_Init+0x98>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f34:	4b1a      	ldr	r3, [pc, #104]	; (8001fa0 <MX_TIM2_Init+0x98>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4250000;
 8001f3a:	4b19      	ldr	r3, [pc, #100]	; (8001fa0 <MX_TIM2_Init+0x98>)
 8001f3c:	4a19      	ldr	r2, [pc, #100]	; (8001fa4 <MX_TIM2_Init+0x9c>)
 8001f3e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001f40:	4b17      	ldr	r3, [pc, #92]	; (8001fa0 <MX_TIM2_Init+0x98>)
 8001f42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f46:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f48:	4b15      	ldr	r3, [pc, #84]	; (8001fa0 <MX_TIM2_Init+0x98>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f4e:	4814      	ldr	r0, [pc, #80]	; (8001fa0 <MX_TIM2_Init+0x98>)
 8001f50:	f005 fc20 	bl	8007794 <HAL_TIM_Base_Init>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001f5a:	f7ff fe73 	bl	8001c44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f62:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f64:	f107 0310 	add.w	r3, r7, #16
 8001f68:	4619      	mov	r1, r3
 8001f6a:	480d      	ldr	r0, [pc, #52]	; (8001fa0 <MX_TIM2_Init+0x98>)
 8001f6c:	f005 fe62 	bl	8007c34 <HAL_TIM_ConfigClockSource>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001f76:	f7ff fe65 	bl	8001c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8001f7a:	2310      	movs	r3, #16
 8001f7c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f82:	1d3b      	adds	r3, r7, #4
 8001f84:	4619      	mov	r1, r3
 8001f86:	4806      	ldr	r0, [pc, #24]	; (8001fa0 <MX_TIM2_Init+0x98>)
 8001f88:	f006 f8d2 	bl	8008130 <HAL_TIMEx_MasterConfigSynchronization>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001f92:	f7ff fe57 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f96:	bf00      	nop
 8001f98:	3720      	adds	r7, #32
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	2000044c 	.word	0x2000044c
 8001fa4:	0040d990 	.word	0x0040d990

08001fa8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fb8:	d113      	bne.n	8001fe2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fba:	4b0c      	ldr	r3, [pc, #48]	; (8001fec <HAL_TIM_Base_MspInit+0x44>)
 8001fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fbe:	4a0b      	ldr	r2, [pc, #44]	; (8001fec <HAL_TIM_Base_MspInit+0x44>)
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	6593      	str	r3, [r2, #88]	; 0x58
 8001fc6:	4b09      	ldr	r3, [pc, #36]	; (8001fec <HAL_TIM_Base_MspInit+0x44>)
 8001fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	201c      	movs	r0, #28
 8001fd8:	f002 fa51 	bl	800447e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001fdc:	201c      	movs	r0, #28
 8001fde:	f002 fa68 	bl	80044b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001fe2:	bf00      	nop
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40021000 	.word	0x40021000

08001ff0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ff4:	4b22      	ldr	r3, [pc, #136]	; (8002080 <MX_USART1_UART_Init+0x90>)
 8001ff6:	4a23      	ldr	r2, [pc, #140]	; (8002084 <MX_USART1_UART_Init+0x94>)
 8001ff8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8001ffa:	4b21      	ldr	r3, [pc, #132]	; (8002080 <MX_USART1_UART_Init+0x90>)
 8001ffc:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8002000:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002002:	4b1f      	ldr	r3, [pc, #124]	; (8002080 <MX_USART1_UART_Init+0x90>)
 8002004:	2200      	movs	r2, #0
 8002006:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002008:	4b1d      	ldr	r3, [pc, #116]	; (8002080 <MX_USART1_UART_Init+0x90>)
 800200a:	2200      	movs	r2, #0
 800200c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800200e:	4b1c      	ldr	r3, [pc, #112]	; (8002080 <MX_USART1_UART_Init+0x90>)
 8002010:	2200      	movs	r2, #0
 8002012:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002014:	4b1a      	ldr	r3, [pc, #104]	; (8002080 <MX_USART1_UART_Init+0x90>)
 8002016:	220c      	movs	r2, #12
 8002018:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800201a:	4b19      	ldr	r3, [pc, #100]	; (8002080 <MX_USART1_UART_Init+0x90>)
 800201c:	2200      	movs	r2, #0
 800201e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002020:	4b17      	ldr	r3, [pc, #92]	; (8002080 <MX_USART1_UART_Init+0x90>)
 8002022:	2200      	movs	r2, #0
 8002024:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002026:	4b16      	ldr	r3, [pc, #88]	; (8002080 <MX_USART1_UART_Init+0x90>)
 8002028:	2200      	movs	r2, #0
 800202a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800202c:	4b14      	ldr	r3, [pc, #80]	; (8002080 <MX_USART1_UART_Init+0x90>)
 800202e:	2200      	movs	r2, #0
 8002030:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002032:	4b13      	ldr	r3, [pc, #76]	; (8002080 <MX_USART1_UART_Init+0x90>)
 8002034:	2200      	movs	r2, #0
 8002036:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002038:	4811      	ldr	r0, [pc, #68]	; (8002080 <MX_USART1_UART_Init+0x90>)
 800203a:	f006 f955 	bl	80082e8 <HAL_UART_Init>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002044:	f7ff fdfe 	bl	8001c44 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002048:	2100      	movs	r1, #0
 800204a:	480d      	ldr	r0, [pc, #52]	; (8002080 <MX_USART1_UART_Init+0x90>)
 800204c:	f007 fa00 	bl	8009450 <HAL_UARTEx_SetTxFifoThreshold>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002056:	f7ff fdf5 	bl	8001c44 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800205a:	2100      	movs	r1, #0
 800205c:	4808      	ldr	r0, [pc, #32]	; (8002080 <MX_USART1_UART_Init+0x90>)
 800205e:	f007 fa35 	bl	80094cc <HAL_UARTEx_SetRxFifoThreshold>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002068:	f7ff fdec 	bl	8001c44 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800206c:	4804      	ldr	r0, [pc, #16]	; (8002080 <MX_USART1_UART_Init+0x90>)
 800206e:	f007 f9b6 	bl	80093de <HAL_UARTEx_DisableFifoMode>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002078:	f7ff fde4 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800207c:	bf00      	nop
 800207e:	bd80      	pop	{r7, pc}
 8002080:	200004f8 	.word	0x200004f8
 8002084:	40013800 	.word	0x40013800

08002088 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b08a      	sub	sp, #40	; 0x28
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002090:	f107 0314 	add.w	r3, r7, #20
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	60da      	str	r2, [r3, #12]
 800209e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a2f      	ldr	r2, [pc, #188]	; (8002164 <HAL_UART_MspInit+0xdc>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d158      	bne.n	800215c <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020aa:	4b2f      	ldr	r3, [pc, #188]	; (8002168 <HAL_UART_MspInit+0xe0>)
 80020ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ae:	4a2e      	ldr	r2, [pc, #184]	; (8002168 <HAL_UART_MspInit+0xe0>)
 80020b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020b4:	6613      	str	r3, [r2, #96]	; 0x60
 80020b6:	4b2c      	ldr	r3, [pc, #176]	; (8002168 <HAL_UART_MspInit+0xe0>)
 80020b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020be:	613b      	str	r3, [r7, #16]
 80020c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020c2:	4b29      	ldr	r3, [pc, #164]	; (8002168 <HAL_UART_MspInit+0xe0>)
 80020c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c6:	4a28      	ldr	r2, [pc, #160]	; (8002168 <HAL_UART_MspInit+0xe0>)
 80020c8:	f043 0304 	orr.w	r3, r3, #4
 80020cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020ce:	4b26      	ldr	r3, [pc, #152]	; (8002168 <HAL_UART_MspInit+0xe0>)
 80020d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d2:	f003 0304 	and.w	r3, r3, #4
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80020da:	2330      	movs	r3, #48	; 0x30
 80020dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020de:	2302      	movs	r3, #2
 80020e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e6:	2300      	movs	r3, #0
 80020e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020ea:	2307      	movs	r3, #7
 80020ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ee:	f107 0314 	add.w	r3, r7, #20
 80020f2:	4619      	mov	r1, r3
 80020f4:	481d      	ldr	r0, [pc, #116]	; (800216c <HAL_UART_MspInit+0xe4>)
 80020f6:	f002 fd29 	bl	8004b4c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 80020fa:	4b1d      	ldr	r3, [pc, #116]	; (8002170 <HAL_UART_MspInit+0xe8>)
 80020fc:	4a1d      	ldr	r2, [pc, #116]	; (8002174 <HAL_UART_MspInit+0xec>)
 80020fe:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002100:	4b1b      	ldr	r3, [pc, #108]	; (8002170 <HAL_UART_MspInit+0xe8>)
 8002102:	2219      	movs	r2, #25
 8002104:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002106:	4b1a      	ldr	r3, [pc, #104]	; (8002170 <HAL_UART_MspInit+0xe8>)
 8002108:	2210      	movs	r2, #16
 800210a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800210c:	4b18      	ldr	r3, [pc, #96]	; (8002170 <HAL_UART_MspInit+0xe8>)
 800210e:	2200      	movs	r2, #0
 8002110:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002112:	4b17      	ldr	r3, [pc, #92]	; (8002170 <HAL_UART_MspInit+0xe8>)
 8002114:	2280      	movs	r2, #128	; 0x80
 8002116:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002118:	4b15      	ldr	r3, [pc, #84]	; (8002170 <HAL_UART_MspInit+0xe8>)
 800211a:	2200      	movs	r2, #0
 800211c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800211e:	4b14      	ldr	r3, [pc, #80]	; (8002170 <HAL_UART_MspInit+0xe8>)
 8002120:	2200      	movs	r2, #0
 8002122:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002124:	4b12      	ldr	r3, [pc, #72]	; (8002170 <HAL_UART_MspInit+0xe8>)
 8002126:	2200      	movs	r2, #0
 8002128:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800212a:	4b11      	ldr	r3, [pc, #68]	; (8002170 <HAL_UART_MspInit+0xe8>)
 800212c:	2200      	movs	r2, #0
 800212e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002130:	480f      	ldr	r0, [pc, #60]	; (8002170 <HAL_UART_MspInit+0xe8>)
 8002132:	f002 f9d9 	bl	80044e8 <HAL_DMA_Init>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <HAL_UART_MspInit+0xb8>
    {
      Error_Handler();
 800213c:	f7ff fd82 	bl	8001c44 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a0b      	ldr	r2, [pc, #44]	; (8002170 <HAL_UART_MspInit+0xe8>)
 8002144:	679a      	str	r2, [r3, #120]	; 0x78
 8002146:	4a0a      	ldr	r2, [pc, #40]	; (8002170 <HAL_UART_MspInit+0xe8>)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800214c:	2200      	movs	r2, #0
 800214e:	2100      	movs	r1, #0
 8002150:	2025      	movs	r0, #37	; 0x25
 8002152:	f002 f994 	bl	800447e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002156:	2025      	movs	r0, #37	; 0x25
 8002158:	f002 f9ab 	bl	80044b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800215c:	bf00      	nop
 800215e:	3728      	adds	r7, #40	; 0x28
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40013800 	.word	0x40013800
 8002168:	40021000 	.word	0x40021000
 800216c:	48000800 	.word	0x48000800
 8002170:	20000498 	.word	0x20000498
 8002174:	40020008 	.word	0x40020008

08002178 <Reset_Handler>:
 8002178:	480d      	ldr	r0, [pc, #52]	; (80021b0 <LoopForever+0x2>)
 800217a:	4685      	mov	sp, r0
 800217c:	480d      	ldr	r0, [pc, #52]	; (80021b4 <LoopForever+0x6>)
 800217e:	490e      	ldr	r1, [pc, #56]	; (80021b8 <LoopForever+0xa>)
 8002180:	4a0e      	ldr	r2, [pc, #56]	; (80021bc <LoopForever+0xe>)
 8002182:	2300      	movs	r3, #0
 8002184:	e002      	b.n	800218c <LoopCopyDataInit>

08002186 <CopyDataInit>:
 8002186:	58d4      	ldr	r4, [r2, r3]
 8002188:	50c4      	str	r4, [r0, r3]
 800218a:	3304      	adds	r3, #4

0800218c <LoopCopyDataInit>:
 800218c:	18c4      	adds	r4, r0, r3
 800218e:	428c      	cmp	r4, r1
 8002190:	d3f9      	bcc.n	8002186 <CopyDataInit>
 8002192:	4a0b      	ldr	r2, [pc, #44]	; (80021c0 <LoopForever+0x12>)
 8002194:	4c0b      	ldr	r4, [pc, #44]	; (80021c4 <LoopForever+0x16>)
 8002196:	2300      	movs	r3, #0
 8002198:	e001      	b.n	800219e <LoopFillZerobss>

0800219a <FillZerobss>:
 800219a:	6013      	str	r3, [r2, #0]
 800219c:	3204      	adds	r2, #4

0800219e <LoopFillZerobss>:
 800219e:	42a2      	cmp	r2, r4
 80021a0:	d3fb      	bcc.n	800219a <FillZerobss>
 80021a2:	f7ff fe9f 	bl	8001ee4 <SystemInit>
 80021a6:	f007 fa23 	bl	80095f0 <__libc_init_array>
 80021aa:	f7ff fc5b 	bl	8001a64 <main>

080021ae <LoopForever>:
 80021ae:	e7fe      	b.n	80021ae <LoopForever>
 80021b0:	20020000 	.word	0x20020000
 80021b4:	20000000 	.word	0x20000000
 80021b8:	200001e0 	.word	0x200001e0
 80021bc:	0800cbf4 	.word	0x0800cbf4
 80021c0:	200001e0 	.word	0x200001e0
 80021c4:	2000059c 	.word	0x2000059c

080021c8 <ADC3_IRQHandler>:
 80021c8:	e7fe      	b.n	80021c8 <ADC3_IRQHandler>

080021ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b082      	sub	sp, #8
 80021ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021d0:	2300      	movs	r3, #0
 80021d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021d4:	2003      	movs	r0, #3
 80021d6:	f002 f947 	bl	8004468 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021da:	2000      	movs	r0, #0
 80021dc:	f000 f80e 	bl	80021fc <HAL_InitTick>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d002      	beq.n	80021ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	71fb      	strb	r3, [r7, #7]
 80021ea:	e001      	b.n	80021f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80021ec:	f7ff fd30 	bl	8001c50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021f0:	79fb      	ldrb	r3, [r7, #7]

}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
	...

080021fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002204:	2300      	movs	r3, #0
 8002206:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002208:	4b16      	ldr	r3, [pc, #88]	; (8002264 <HAL_InitTick+0x68>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d022      	beq.n	8002256 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002210:	4b15      	ldr	r3, [pc, #84]	; (8002268 <HAL_InitTick+0x6c>)
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	4b13      	ldr	r3, [pc, #76]	; (8002264 <HAL_InitTick+0x68>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800221c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002220:	fbb2 f3f3 	udiv	r3, r2, r3
 8002224:	4618      	mov	r0, r3
 8002226:	f002 f952 	bl	80044ce <HAL_SYSTICK_Config>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d10f      	bne.n	8002250 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b0f      	cmp	r3, #15
 8002234:	d809      	bhi.n	800224a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002236:	2200      	movs	r2, #0
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	f04f 30ff 	mov.w	r0, #4294967295
 800223e:	f002 f91e 	bl	800447e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002242:	4a0a      	ldr	r2, [pc, #40]	; (800226c <HAL_InitTick+0x70>)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6013      	str	r3, [r2, #0]
 8002248:	e007      	b.n	800225a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	73fb      	strb	r3, [r7, #15]
 800224e:	e004      	b.n	800225a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	73fb      	strb	r3, [r7, #15]
 8002254:	e001      	b.n	800225a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800225a:	7bfb      	ldrb	r3, [r7, #15]
}
 800225c:	4618      	mov	r0, r3
 800225e:	3710      	adds	r7, #16
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	20000008 	.word	0x20000008
 8002268:	20000000 	.word	0x20000000
 800226c:	20000004 	.word	0x20000004

08002270 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002274:	4b05      	ldr	r3, [pc, #20]	; (800228c <HAL_IncTick+0x1c>)
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	4b05      	ldr	r3, [pc, #20]	; (8002290 <HAL_IncTick+0x20>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4413      	add	r3, r2
 800227e:	4a03      	ldr	r2, [pc, #12]	; (800228c <HAL_IncTick+0x1c>)
 8002280:	6013      	str	r3, [r2, #0]
}
 8002282:	bf00      	nop
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	20000588 	.word	0x20000588
 8002290:	20000008 	.word	0x20000008

08002294 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  return uwTick;
 8002298:	4b03      	ldr	r3, [pc, #12]	; (80022a8 <HAL_GetTick+0x14>)
 800229a:	681b      	ldr	r3, [r3, #0]
}
 800229c:	4618      	mov	r0, r3
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	20000588 	.word	0x20000588

080022ac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	431a      	orrs	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	609a      	str	r2, [r3, #8]
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b083      	sub	sp, #12
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
 80022da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	431a      	orrs	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	609a      	str	r2, [r3, #8]
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002308:	4618      	mov	r0, r3
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002314:	b480      	push	{r7}
 8002316:	b087      	sub	sp, #28
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
 8002320:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	3360      	adds	r3, #96	; 0x60
 8002326:	461a      	mov	r2, r3
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4413      	add	r3, r2
 800232e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	4b08      	ldr	r3, [pc, #32]	; (8002358 <LL_ADC_SetOffset+0x44>)
 8002336:	4013      	ands	r3, r2
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	430a      	orrs	r2, r1
 8002342:	4313      	orrs	r3, r2
 8002344:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800234c:	bf00      	nop
 800234e:	371c      	adds	r7, #28
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	03fff000 	.word	0x03fff000

0800235c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3360      	adds	r3, #96	; 0x60
 800236a:	461a      	mov	r2, r3
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	4413      	add	r3, r2
 8002372:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800237c:	4618      	mov	r0, r3
 800237e:	3714      	adds	r7, #20
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002388:	b480      	push	{r7}
 800238a:	b087      	sub	sp, #28
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	3360      	adds	r3, #96	; 0x60
 8002398:	461a      	mov	r2, r3
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	4413      	add	r3, r2
 80023a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	431a      	orrs	r2, r3
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80023b2:	bf00      	nop
 80023b4:	371c      	adds	r7, #28
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80023be:	b480      	push	{r7}
 80023c0:	b087      	sub	sp, #28
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	60f8      	str	r0, [r7, #12]
 80023c6:	60b9      	str	r1, [r7, #8]
 80023c8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	3360      	adds	r3, #96	; 0x60
 80023ce:	461a      	mov	r2, r3
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4413      	add	r3, r2
 80023d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	431a      	orrs	r2, r3
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80023e8:	bf00      	nop
 80023ea:	371c      	adds	r7, #28
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b087      	sub	sp, #28
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	3360      	adds	r3, #96	; 0x60
 8002404:	461a      	mov	r2, r3
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	431a      	orrs	r2, r3
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800241e:	bf00      	nop
 8002420:	371c      	adds	r7, #28
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800242a:	b480      	push	{r7}
 800242c:	b083      	sub	sp, #12
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
 8002432:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	431a      	orrs	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	615a      	str	r2, [r3, #20]
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002460:	2b00      	cmp	r3, #0
 8002462:	d101      	bne.n	8002468 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002464:	2301      	movs	r3, #1
 8002466:	e000      	b.n	800246a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002476:	b480      	push	{r7}
 8002478:	b087      	sub	sp, #28
 800247a:	af00      	add	r7, sp, #0
 800247c:	60f8      	str	r0, [r7, #12]
 800247e:	60b9      	str	r1, [r7, #8]
 8002480:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	3330      	adds	r3, #48	; 0x30
 8002486:	461a      	mov	r2, r3
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	0a1b      	lsrs	r3, r3, #8
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	f003 030c 	and.w	r3, r3, #12
 8002492:	4413      	add	r3, r2
 8002494:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	f003 031f 	and.w	r3, r3, #31
 80024a0:	211f      	movs	r1, #31
 80024a2:	fa01 f303 	lsl.w	r3, r1, r3
 80024a6:	43db      	mvns	r3, r3
 80024a8:	401a      	ands	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	0e9b      	lsrs	r3, r3, #26
 80024ae:	f003 011f 	and.w	r1, r3, #31
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	f003 031f 	and.w	r3, r3, #31
 80024b8:	fa01 f303 	lsl.w	r3, r1, r3
 80024bc:	431a      	orrs	r2, r3
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80024c2:	bf00      	nop
 80024c4:	371c      	adds	r7, #28
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024da:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80024e2:	2301      	movs	r3, #1
 80024e4:	e000      	b.n	80024e8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b087      	sub	sp, #28
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	3314      	adds	r3, #20
 8002504:	461a      	mov	r2, r3
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	0e5b      	lsrs	r3, r3, #25
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	4413      	add	r3, r2
 8002512:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	0d1b      	lsrs	r3, r3, #20
 800251c:	f003 031f 	and.w	r3, r3, #31
 8002520:	2107      	movs	r1, #7
 8002522:	fa01 f303 	lsl.w	r3, r1, r3
 8002526:	43db      	mvns	r3, r3
 8002528:	401a      	ands	r2, r3
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	0d1b      	lsrs	r3, r3, #20
 800252e:	f003 031f 	and.w	r3, r3, #31
 8002532:	6879      	ldr	r1, [r7, #4]
 8002534:	fa01 f303 	lsl.w	r3, r1, r3
 8002538:	431a      	orrs	r2, r3
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800253e:	bf00      	nop
 8002540:	371c      	adds	r7, #28
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
	...

0800254c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002564:	43db      	mvns	r3, r3
 8002566:	401a      	ands	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f003 0318 	and.w	r3, r3, #24
 800256e:	4908      	ldr	r1, [pc, #32]	; (8002590 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002570:	40d9      	lsrs	r1, r3
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	400b      	ands	r3, r1
 8002576:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800257a:	431a      	orrs	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002582:	bf00      	nop
 8002584:	3714      	adds	r7, #20
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	0007ffff 	.word	0x0007ffff

08002594 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f003 031f 	and.w	r3, r3, #31
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80025dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	6093      	str	r3, [r2, #8]
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002600:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002604:	d101      	bne.n	800260a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002606:	2301      	movs	r3, #1
 8002608:	e000      	b.n	800260c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002628:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800262c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002650:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002654:	d101      	bne.n	800265a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002656:	2301      	movs	r3, #1
 8002658:	e000      	b.n	800265c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002678:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800267c:	f043 0201 	orr.w	r2, r3, #1
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026a4:	f043 0202 	orr.w	r2, r3, #2
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f003 0301 	and.w	r3, r3, #1
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d101      	bne.n	80026d0 <LL_ADC_IsEnabled+0x18>
 80026cc:	2301      	movs	r3, #1
 80026ce:	e000      	b.n	80026d2 <LL_ADC_IsEnabled+0x1a>
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80026de:	b480      	push	{r7}
 80026e0:	b083      	sub	sp, #12
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d101      	bne.n	80026f6 <LL_ADC_IsDisableOngoing+0x18>
 80026f2:	2301      	movs	r3, #1
 80026f4:	e000      	b.n	80026f8 <LL_ADC_IsDisableOngoing+0x1a>
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002714:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002718:	f043 0204 	orr.w	r2, r3, #4
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800273c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002740:	f043 0210 	orr.w	r2, r3, #16
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f003 0304 	and.w	r3, r3, #4
 8002764:	2b04      	cmp	r3, #4
 8002766:	d101      	bne.n	800276c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002768:	2301      	movs	r3, #1
 800276a:	e000      	b.n	800276e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr

0800277a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800277a:	b480      	push	{r7}
 800277c:	b083      	sub	sp, #12
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800278a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800278e:	f043 0220 	orr.w	r2, r3, #32
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr

080027a2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f003 0308 	and.w	r3, r3, #8
 80027b2:	2b08      	cmp	r3, #8
 80027b4:	d101      	bne.n	80027ba <LL_ADC_INJ_IsConversionOngoing+0x18>
 80027b6:	2301      	movs	r3, #1
 80027b8:	e000      	b.n	80027bc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80027c8:	b590      	push	{r4, r7, lr}
 80027ca:	b089      	sub	sp, #36	; 0x24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027d0:	2300      	movs	r3, #0
 80027d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e1af      	b.n	8002b42 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d109      	bne.n	8002804 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f7fe fcaf 	bl	8001154 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4618      	mov	r0, r3
 800280a:	f7ff fef1 	bl	80025f0 <LL_ADC_IsDeepPowerDownEnabled>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d004      	beq.n	800281e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff fed7 	bl	80025cc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4618      	mov	r0, r3
 8002824:	f7ff ff0c 	bl	8002640 <LL_ADC_IsInternalRegulatorEnabled>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d115      	bne.n	800285a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4618      	mov	r0, r3
 8002834:	f7ff fef0 	bl	8002618 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002838:	4b9f      	ldr	r3, [pc, #636]	; (8002ab8 <HAL_ADC_Init+0x2f0>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	099b      	lsrs	r3, r3, #6
 800283e:	4a9f      	ldr	r2, [pc, #636]	; (8002abc <HAL_ADC_Init+0x2f4>)
 8002840:	fba2 2303 	umull	r2, r3, r2, r3
 8002844:	099b      	lsrs	r3, r3, #6
 8002846:	3301      	adds	r3, #1
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800284c:	e002      	b.n	8002854 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	3b01      	subs	r3, #1
 8002852:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1f9      	bne.n	800284e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff feee 	bl	8002640 <LL_ADC_IsInternalRegulatorEnabled>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10d      	bne.n	8002886 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286e:	f043 0210 	orr.w	r2, r3, #16
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800287a:	f043 0201 	orr.w	r2, r3, #1
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f7ff ff62 	bl	8002754 <LL_ADC_REG_IsConversionOngoing>
 8002890:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002896:	f003 0310 	and.w	r3, r3, #16
 800289a:	2b00      	cmp	r3, #0
 800289c:	f040 8148 	bne.w	8002b30 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f040 8144 	bne.w	8002b30 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ac:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80028b0:	f043 0202 	orr.w	r2, r3, #2
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff fefb 	bl	80026b8 <LL_ADC_IsEnabled>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d141      	bne.n	800294c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028d0:	d004      	beq.n	80028dc <HAL_ADC_Init+0x114>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a7a      	ldr	r2, [pc, #488]	; (8002ac0 <HAL_ADC_Init+0x2f8>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d10f      	bne.n	80028fc <HAL_ADC_Init+0x134>
 80028dc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80028e0:	f7ff feea 	bl	80026b8 <LL_ADC_IsEnabled>
 80028e4:	4604      	mov	r4, r0
 80028e6:	4876      	ldr	r0, [pc, #472]	; (8002ac0 <HAL_ADC_Init+0x2f8>)
 80028e8:	f7ff fee6 	bl	80026b8 <LL_ADC_IsEnabled>
 80028ec:	4603      	mov	r3, r0
 80028ee:	4323      	orrs	r3, r4
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	bf0c      	ite	eq
 80028f4:	2301      	moveq	r3, #1
 80028f6:	2300      	movne	r3, #0
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	e012      	b.n	8002922 <HAL_ADC_Init+0x15a>
 80028fc:	4871      	ldr	r0, [pc, #452]	; (8002ac4 <HAL_ADC_Init+0x2fc>)
 80028fe:	f7ff fedb 	bl	80026b8 <LL_ADC_IsEnabled>
 8002902:	4604      	mov	r4, r0
 8002904:	4870      	ldr	r0, [pc, #448]	; (8002ac8 <HAL_ADC_Init+0x300>)
 8002906:	f7ff fed7 	bl	80026b8 <LL_ADC_IsEnabled>
 800290a:	4603      	mov	r3, r0
 800290c:	431c      	orrs	r4, r3
 800290e:	486f      	ldr	r0, [pc, #444]	; (8002acc <HAL_ADC_Init+0x304>)
 8002910:	f7ff fed2 	bl	80026b8 <LL_ADC_IsEnabled>
 8002914:	4603      	mov	r3, r0
 8002916:	4323      	orrs	r3, r4
 8002918:	2b00      	cmp	r3, #0
 800291a:	bf0c      	ite	eq
 800291c:	2301      	moveq	r3, #1
 800291e:	2300      	movne	r3, #0
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d012      	beq.n	800294c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800292e:	d004      	beq.n	800293a <HAL_ADC_Init+0x172>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a62      	ldr	r2, [pc, #392]	; (8002ac0 <HAL_ADC_Init+0x2f8>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d101      	bne.n	800293e <HAL_ADC_Init+0x176>
 800293a:	4a65      	ldr	r2, [pc, #404]	; (8002ad0 <HAL_ADC_Init+0x308>)
 800293c:	e000      	b.n	8002940 <HAL_ADC_Init+0x178>
 800293e:	4a65      	ldr	r2, [pc, #404]	; (8002ad4 <HAL_ADC_Init+0x30c>)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	4619      	mov	r1, r3
 8002946:	4610      	mov	r0, r2
 8002948:	f7ff fcb0 	bl	80022ac <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	7f5b      	ldrb	r3, [r3, #29]
 8002950:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002956:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800295c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002962:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800296a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800296c:	4313      	orrs	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002976:	2b01      	cmp	r3, #1
 8002978:	d106      	bne.n	8002988 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297e:	3b01      	subs	r3, #1
 8002980:	045b      	lsls	r3, r3, #17
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	4313      	orrs	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298c:	2b00      	cmp	r3, #0
 800298e:	d009      	beq.n	80029a4 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002994:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68da      	ldr	r2, [r3, #12]
 80029aa:	4b4b      	ldr	r3, [pc, #300]	; (8002ad8 <HAL_ADC_Init+0x310>)
 80029ac:	4013      	ands	r3, r2
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	6812      	ldr	r2, [r2, #0]
 80029b2:	69b9      	ldr	r1, [r7, #24]
 80029b4:	430b      	orrs	r3, r1
 80029b6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	430a      	orrs	r2, r1
 80029cc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff febe 	bl	8002754 <LL_ADC_REG_IsConversionOngoing>
 80029d8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4618      	mov	r0, r3
 80029e0:	f7ff fedf 	bl	80027a2 <LL_ADC_INJ_IsConversionOngoing>
 80029e4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d17f      	bne.n	8002aec <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d17c      	bne.n	8002aec <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80029f6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029fe:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a00:	4313      	orrs	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a0e:	f023 0302 	bic.w	r3, r3, #2
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	6812      	ldr	r2, [r2, #0]
 8002a16:	69b9      	ldr	r1, [r7, #24]
 8002a18:	430b      	orrs	r3, r1
 8002a1a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d017      	beq.n	8002a54 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	691a      	ldr	r2, [r3, #16]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002a32:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002a3c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002a40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	6911      	ldr	r1, [r2, #16]
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	6812      	ldr	r2, [r2, #0]
 8002a4c:	430b      	orrs	r3, r1
 8002a4e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002a52:	e013      	b.n	8002a7c <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	691a      	ldr	r2, [r3, #16]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002a62:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	6812      	ldr	r2, [r2, #0]
 8002a70:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002a74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a78:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d12a      	bne.n	8002adc <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002a90:	f023 0304 	bic.w	r3, r3, #4
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002a9c:	4311      	orrs	r1, r2
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002aa2:	4311      	orrs	r1, r2
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f042 0201 	orr.w	r2, r2, #1
 8002ab4:	611a      	str	r2, [r3, #16]
 8002ab6:	e019      	b.n	8002aec <HAL_ADC_Init+0x324>
 8002ab8:	20000000 	.word	0x20000000
 8002abc:	053e2d63 	.word	0x053e2d63
 8002ac0:	50000100 	.word	0x50000100
 8002ac4:	50000400 	.word	0x50000400
 8002ac8:	50000500 	.word	0x50000500
 8002acc:	50000600 	.word	0x50000600
 8002ad0:	50000300 	.word	0x50000300
 8002ad4:	50000700 	.word	0x50000700
 8002ad8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	691a      	ldr	r2, [r3, #16]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f022 0201 	bic.w	r2, r2, #1
 8002aea:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d10c      	bne.n	8002b0e <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	f023 010f 	bic.w	r1, r3, #15
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	1e5a      	subs	r2, r3, #1
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	631a      	str	r2, [r3, #48]	; 0x30
 8002b0c:	e007      	b.n	8002b1e <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 020f 	bic.w	r2, r2, #15
 8002b1c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b22:	f023 0303 	bic.w	r3, r3, #3
 8002b26:	f043 0201 	orr.w	r2, r3, #1
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b2e:	e007      	b.n	8002b40 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b34:	f043 0210 	orr.w	r2, r3, #16
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b40:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3724      	adds	r7, #36	; 0x24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd90      	pop	{r4, r7, pc}
 8002b4a:	bf00      	nop

08002b4c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b5c:	d004      	beq.n	8002b68 <HAL_ADC_Start_IT+0x1c>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a93      	ldr	r2, [pc, #588]	; (8002db0 <HAL_ADC_Start_IT+0x264>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d101      	bne.n	8002b6c <HAL_ADC_Start_IT+0x20>
 8002b68:	4b92      	ldr	r3, [pc, #584]	; (8002db4 <HAL_ADC_Start_IT+0x268>)
 8002b6a:	e000      	b.n	8002b6e <HAL_ADC_Start_IT+0x22>
 8002b6c:	4b92      	ldr	r3, [pc, #584]	; (8002db8 <HAL_ADC_Start_IT+0x26c>)
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff fd10 	bl	8002594 <LL_ADC_GetMultimode>
 8002b74:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7ff fdea 	bl	8002754 <LL_ADC_REG_IsConversionOngoing>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f040 8134 	bne.w	8002df0 <HAL_ADC_Start_IT+0x2a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d101      	bne.n	8002b96 <HAL_ADC_Start_IT+0x4a>
 8002b92:	2302      	movs	r3, #2
 8002b94:	e131      	b.n	8002dfa <HAL_ADC_Start_IT+0x2ae>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f001 f8e2 	bl	8003d68 <ADC_Enable>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002ba8:	7dfb      	ldrb	r3, [r7, #23]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f040 811b 	bne.w	8002de6 <HAL_ADC_Start_IT+0x29a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002bb8:	f023 0301 	bic.w	r3, r3, #1
 8002bbc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a79      	ldr	r2, [pc, #484]	; (8002db0 <HAL_ADC_Start_IT+0x264>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d009      	beq.n	8002be2 <HAL_ADC_Start_IT+0x96>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a7a      	ldr	r2, [pc, #488]	; (8002dbc <HAL_ADC_Start_IT+0x270>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d002      	beq.n	8002bde <HAL_ADC_Start_IT+0x92>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	e003      	b.n	8002be6 <HAL_ADC_Start_IT+0x9a>
 8002bde:	4b78      	ldr	r3, [pc, #480]	; (8002dc0 <HAL_ADC_Start_IT+0x274>)
 8002be0:	e001      	b.n	8002be6 <HAL_ADC_Start_IT+0x9a>
 8002be2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	6812      	ldr	r2, [r2, #0]
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d002      	beq.n	8002bf4 <HAL_ADC_Start_IT+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d105      	bne.n	8002c00 <HAL_ADC_Start_IT+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d006      	beq.n	8002c1a <HAL_ADC_Start_IT+0xce>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c10:	f023 0206 	bic.w	r2, r3, #6
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	661a      	str	r2, [r3, #96]	; 0x60
 8002c18:	e002      	b.n	8002c20 <HAL_ADC_Start_IT+0xd4>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	221c      	movs	r2, #28
 8002c26:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f022 021c 	bic.w	r2, r2, #28
 8002c3e:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	2b08      	cmp	r3, #8
 8002c46:	d108      	bne.n	8002c5a <HAL_ADC_Start_IT+0x10e>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	685a      	ldr	r2, [r3, #4]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f042 0208 	orr.w	r2, r2, #8
 8002c56:	605a      	str	r2, [r3, #4]
          break;
 8002c58:	e008      	b.n	8002c6c <HAL_ADC_Start_IT+0x120>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	685a      	ldr	r2, [r3, #4]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f042 0204 	orr.w	r2, r2, #4
 8002c68:	605a      	str	r2, [r3, #4]
          break;
 8002c6a:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d107      	bne.n	8002c84 <HAL_ADC_Start_IT+0x138>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	685a      	ldr	r2, [r3, #4]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f042 0210 	orr.w	r2, r2, #16
 8002c82:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a49      	ldr	r2, [pc, #292]	; (8002db0 <HAL_ADC_Start_IT+0x264>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d009      	beq.n	8002ca2 <HAL_ADC_Start_IT+0x156>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a4a      	ldr	r2, [pc, #296]	; (8002dbc <HAL_ADC_Start_IT+0x270>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d002      	beq.n	8002c9e <HAL_ADC_Start_IT+0x152>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	e003      	b.n	8002ca6 <HAL_ADC_Start_IT+0x15a>
 8002c9e:	4b48      	ldr	r3, [pc, #288]	; (8002dc0 <HAL_ADC_Start_IT+0x274>)
 8002ca0:	e001      	b.n	8002ca6 <HAL_ADC_Start_IT+0x15a>
 8002ca2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	6812      	ldr	r2, [r2, #0]
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d008      	beq.n	8002cc0 <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d005      	beq.n	8002cc0 <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	2b05      	cmp	r3, #5
 8002cb8:	d002      	beq.n	8002cc0 <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	2b09      	cmp	r3, #9
 8002cbe:	d13b      	bne.n	8002d38 <HAL_ADC_Start_IT+0x1ec>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d02d      	beq.n	8002d2a <HAL_ADC_Start_IT+0x1de>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002cd6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	2b08      	cmp	r3, #8
 8002ce4:	d110      	bne.n	8002d08 <HAL_ADC_Start_IT+0x1bc>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	685a      	ldr	r2, [r3, #4]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f022 0220 	bic.w	r2, r2, #32
 8002cf4:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d04:	605a      	str	r2, [r3, #4]
              break;
 8002d06:	e011      	b.n	8002d2c <HAL_ADC_Start_IT+0x1e0>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d16:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	685a      	ldr	r2, [r3, #4]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f042 0220 	orr.w	r2, r2, #32
 8002d26:	605a      	str	r2, [r3, #4]
              break;
 8002d28:	e000      	b.n	8002d2c <HAL_ADC_Start_IT+0x1e0>
          }
        }
 8002d2a:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff fce7 	bl	8002704 <LL_ADC_REG_StartConversion>
 8002d36:	e05f      	b.n	8002df8 <HAL_ADC_Start_IT+0x2ac>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d3c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a19      	ldr	r2, [pc, #100]	; (8002db0 <HAL_ADC_Start_IT+0x264>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d009      	beq.n	8002d62 <HAL_ADC_Start_IT+0x216>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a1a      	ldr	r2, [pc, #104]	; (8002dbc <HAL_ADC_Start_IT+0x270>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d002      	beq.n	8002d5e <HAL_ADC_Start_IT+0x212>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	e003      	b.n	8002d66 <HAL_ADC_Start_IT+0x21a>
 8002d5e:	4b18      	ldr	r3, [pc, #96]	; (8002dc0 <HAL_ADC_Start_IT+0x274>)
 8002d60:	e001      	b.n	8002d66 <HAL_ADC_Start_IT+0x21a>
 8002d62:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d66:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d040      	beq.n	8002df6 <HAL_ADC_Start_IT+0x2aa>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d78:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d7c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	65da      	str	r2, [r3, #92]	; 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	2b08      	cmp	r3, #8
 8002d8a:	d11b      	bne.n	8002dc4 <HAL_ADC_Start_IT+0x278>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	685a      	ldr	r2, [r3, #4]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f022 0220 	bic.w	r2, r2, #32
 8002d9a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002daa:	605a      	str	r2, [r3, #4]
              break;
 8002dac:	e024      	b.n	8002df8 <HAL_ADC_Start_IT+0x2ac>
 8002dae:	bf00      	nop
 8002db0:	50000100 	.word	0x50000100
 8002db4:	50000300 	.word	0x50000300
 8002db8:	50000700 	.word	0x50000700
 8002dbc:	50000500 	.word	0x50000500
 8002dc0:	50000400 	.word	0x50000400
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	685a      	ldr	r2, [r3, #4]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dd2:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	685a      	ldr	r2, [r3, #4]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f042 0220 	orr.w	r2, r2, #32
 8002de2:	605a      	str	r2, [r3, #4]
              break;
 8002de4:	e008      	b.n	8002df8 <HAL_ADC_Start_IT+0x2ac>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002dee:	e003      	b.n	8002df8 <HAL_ADC_Start_IT+0x2ac>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002df0:	2302      	movs	r3, #2
 8002df2:	75fb      	strb	r3, [r7, #23]
 8002df4:	e000      	b.n	8002df8 <HAL_ADC_Start_IT+0x2ac>
        }
 8002df6:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8002df8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3718      	adds	r7, #24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop

08002e04 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d101      	bne.n	8002e1a <HAL_ADC_Stop_IT+0x16>
 8002e16:	2302      	movs	r3, #2
 8002e18:	e02b      	b.n	8002e72 <HAL_ADC_Stop_IT+0x6e>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002e22:	2103      	movs	r1, #3
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 fee3 	bl	8003bf0 <ADC_ConversionStop>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002e2e:	7bfb      	ldrb	r3, [r7, #15]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d119      	bne.n	8002e68 <HAL_ADC_Stop_IT+0x64>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f022 021c 	bic.w	r2, r2, #28
 8002e42:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 fff1 	bl	8003e2c <ADC_Disable>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002e4e:	7bfb      	ldrb	r3, [r7, #15]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d109      	bne.n	8002e68 <HAL_ADC_Stop_IT+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e58:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e5c:	f023 0301 	bic.w	r3, r3, #1
 8002e60:	f043 0201 	orr.w	r2, r3, #1
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b083      	sub	sp, #12
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b08a      	sub	sp, #40	; 0x28
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002eb8:	d004      	beq.n	8002ec4 <HAL_ADC_IRQHandler+0x30>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a95      	ldr	r2, [pc, #596]	; (8003114 <HAL_ADC_IRQHandler+0x280>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d101      	bne.n	8002ec8 <HAL_ADC_IRQHandler+0x34>
 8002ec4:	4b94      	ldr	r3, [pc, #592]	; (8003118 <HAL_ADC_IRQHandler+0x284>)
 8002ec6:	e000      	b.n	8002eca <HAL_ADC_IRQHandler+0x36>
 8002ec8:	4b94      	ldr	r3, [pc, #592]	; (800311c <HAL_ADC_IRQHandler+0x288>)
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7ff fb62 	bl	8002594 <LL_ADC_GetMultimode>
 8002ed0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d017      	beq.n	8002f0c <HAL_ADC_IRQHandler+0x78>
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d012      	beq.n	8002f0c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eea:	f003 0310 	and.w	r3, r3, #16
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d105      	bne.n	8002efe <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f001 f8d0 	bl	80040a4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2202      	movs	r2, #2
 8002f0a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	f003 0304 	and.w	r3, r3, #4
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d004      	beq.n	8002f20 <HAL_ADC_IRQHandler+0x8c>
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	f003 0304 	and.w	r3, r3, #4
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d10b      	bne.n	8002f38 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	f000 8094 	beq.w	8003054 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	f003 0308 	and.w	r3, r3, #8
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f000 808e 	beq.w	8003054 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f3c:	f003 0310 	and.w	r3, r3, #16
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d105      	bne.n	8002f50 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f48:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff fa7b 	bl	8002450 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d072      	beq.n	8003046 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a6b      	ldr	r2, [pc, #428]	; (8003114 <HAL_ADC_IRQHandler+0x280>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d009      	beq.n	8002f7e <HAL_ADC_IRQHandler+0xea>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a6c      	ldr	r2, [pc, #432]	; (8003120 <HAL_ADC_IRQHandler+0x28c>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d002      	beq.n	8002f7a <HAL_ADC_IRQHandler+0xe6>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	e003      	b.n	8002f82 <HAL_ADC_IRQHandler+0xee>
 8002f7a:	4b6a      	ldr	r3, [pc, #424]	; (8003124 <HAL_ADC_IRQHandler+0x290>)
 8002f7c:	e001      	b.n	8002f82 <HAL_ADC_IRQHandler+0xee>
 8002f7e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	6812      	ldr	r2, [r2, #0]
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d008      	beq.n	8002f9c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d005      	beq.n	8002f9c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	2b05      	cmp	r3, #5
 8002f94:	d002      	beq.n	8002f9c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	2b09      	cmp	r3, #9
 8002f9a:	d104      	bne.n	8002fa6 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	623b      	str	r3, [r7, #32]
 8002fa4:	e014      	b.n	8002fd0 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a5a      	ldr	r2, [pc, #360]	; (8003114 <HAL_ADC_IRQHandler+0x280>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d009      	beq.n	8002fc4 <HAL_ADC_IRQHandler+0x130>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a5a      	ldr	r2, [pc, #360]	; (8003120 <HAL_ADC_IRQHandler+0x28c>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d002      	beq.n	8002fc0 <HAL_ADC_IRQHandler+0x12c>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	e003      	b.n	8002fc8 <HAL_ADC_IRQHandler+0x134>
 8002fc0:	4b58      	ldr	r3, [pc, #352]	; (8003124 <HAL_ADC_IRQHandler+0x290>)
 8002fc2:	e001      	b.n	8002fc8 <HAL_ADC_IRQHandler+0x134>
 8002fc4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002fc8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002fd0:	6a3b      	ldr	r3, [r7, #32]
 8002fd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d135      	bne.n	8003046 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0308 	and.w	r3, r3, #8
 8002fe4:	2b08      	cmp	r3, #8
 8002fe6:	d12e      	bne.n	8003046 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff fbb1 	bl	8002754 <LL_ADC_REG_IsConversionOngoing>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d11a      	bne.n	800302e <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f022 020c 	bic.w	r2, r2, #12
 8003006:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800300c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003018:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d112      	bne.n	8003046 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003024:	f043 0201 	orr.w	r2, r3, #1
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	65da      	str	r2, [r3, #92]	; 0x5c
 800302c:	e00b      	b.n	8003046 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003032:	f043 0210 	orr.w	r2, r3, #16
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800303e:	f043 0201 	orr.w	r2, r3, #1
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f7fe fdbc 	bl	8001bc4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	220c      	movs	r2, #12
 8003052:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	f003 0320 	and.w	r3, r3, #32
 800305a:	2b00      	cmp	r3, #0
 800305c:	d004      	beq.n	8003068 <HAL_ADC_IRQHandler+0x1d4>
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	f003 0320 	and.w	r3, r3, #32
 8003064:	2b00      	cmp	r3, #0
 8003066:	d10b      	bne.n	8003080 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800306e:	2b00      	cmp	r3, #0
 8003070:	f000 80b2 	beq.w	80031d8 <HAL_ADC_IRQHandler+0x344>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800307a:	2b00      	cmp	r3, #0
 800307c:	f000 80ac 	beq.w	80031d8 <HAL_ADC_IRQHandler+0x344>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003084:	f003 0310 	and.w	r3, r3, #16
 8003088:	2b00      	cmp	r3, #0
 800308a:	d105      	bne.n	8003098 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003090:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff fa16 	bl	80024ce <LL_ADC_INJ_IsTriggerSourceSWStart>
 80030a2:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff f9d1 	bl	8002450 <LL_ADC_REG_IsTriggerSourceSWStart>
 80030ae:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a17      	ldr	r2, [pc, #92]	; (8003114 <HAL_ADC_IRQHandler+0x280>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d009      	beq.n	80030ce <HAL_ADC_IRQHandler+0x23a>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a18      	ldr	r2, [pc, #96]	; (8003120 <HAL_ADC_IRQHandler+0x28c>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d002      	beq.n	80030ca <HAL_ADC_IRQHandler+0x236>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	e003      	b.n	80030d2 <HAL_ADC_IRQHandler+0x23e>
 80030ca:	4b16      	ldr	r3, [pc, #88]	; (8003124 <HAL_ADC_IRQHandler+0x290>)
 80030cc:	e001      	b.n	80030d2 <HAL_ADC_IRQHandler+0x23e>
 80030ce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	6812      	ldr	r2, [r2, #0]
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d008      	beq.n	80030ec <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d005      	beq.n	80030ec <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	2b06      	cmp	r3, #6
 80030e4:	d002      	beq.n	80030ec <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	2b07      	cmp	r3, #7
 80030ea:	d104      	bne.n	80030f6 <HAL_ADC_IRQHandler+0x262>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	623b      	str	r3, [r7, #32]
 80030f4:	e01e      	b.n	8003134 <HAL_ADC_IRQHandler+0x2a0>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a06      	ldr	r2, [pc, #24]	; (8003114 <HAL_ADC_IRQHandler+0x280>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d013      	beq.n	8003128 <HAL_ADC_IRQHandler+0x294>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a06      	ldr	r2, [pc, #24]	; (8003120 <HAL_ADC_IRQHandler+0x28c>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d002      	beq.n	8003110 <HAL_ADC_IRQHandler+0x27c>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	e00d      	b.n	800312c <HAL_ADC_IRQHandler+0x298>
 8003110:	4b04      	ldr	r3, [pc, #16]	; (8003124 <HAL_ADC_IRQHandler+0x290>)
 8003112:	e00b      	b.n	800312c <HAL_ADC_IRQHandler+0x298>
 8003114:	50000100 	.word	0x50000100
 8003118:	50000300 	.word	0x50000300
 800311c:	50000700 	.word	0x50000700
 8003120:	50000500 	.word	0x50000500
 8003124:	50000400 	.word	0x50000400
 8003128:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800312c:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d047      	beq.n	80031ca <HAL_ADC_IRQHandler+0x336>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800313a:	6a3b      	ldr	r3, [r7, #32]
 800313c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d007      	beq.n	8003154 <HAL_ADC_IRQHandler+0x2c0>
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d03f      	beq.n	80031ca <HAL_ADC_IRQHandler+0x336>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800314a:	6a3b      	ldr	r3, [r7, #32]
 800314c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003150:	2b00      	cmp	r3, #0
 8003152:	d13a      	bne.n	80031ca <HAL_ADC_IRQHandler+0x336>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800315e:	2b40      	cmp	r3, #64	; 0x40
 8003160:	d133      	bne.n	80031ca <HAL_ADC_IRQHandler+0x336>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003162:	6a3b      	ldr	r3, [r7, #32]
 8003164:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d12e      	bne.n	80031ca <HAL_ADC_IRQHandler+0x336>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff fb16 	bl	80027a2 <LL_ADC_INJ_IsConversionOngoing>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d11a      	bne.n	80031b2 <HAL_ADC_IRQHandler+0x31e>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800318a:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003190:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800319c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d112      	bne.n	80031ca <HAL_ADC_IRQHandler+0x336>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a8:	f043 0201 	orr.w	r2, r3, #1
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	65da      	str	r2, [r3, #92]	; 0x5c
 80031b0:	e00b      	b.n	80031ca <HAL_ADC_IRQHandler+0x336>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b6:	f043 0210 	orr.w	r2, r3, #16
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031c2:	f043 0201 	orr.w	r2, r3, #1
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 ff42 	bl	8004054 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2260      	movs	r2, #96	; 0x60
 80031d6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d011      	beq.n	8003206 <HAL_ADC_IRQHandler+0x372>
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00c      	beq.n	8003206 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 f8a5 	bl	8003348 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2280      	movs	r2, #128	; 0x80
 8003204:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800320c:	2b00      	cmp	r3, #0
 800320e:	d012      	beq.n	8003236 <HAL_ADC_IRQHandler+0x3a2>
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00d      	beq.n	8003236 <HAL_ADC_IRQHandler+0x3a2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800321e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 ff28 	bl	800407c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003234:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800323c:	2b00      	cmp	r3, #0
 800323e:	d012      	beq.n	8003266 <HAL_ADC_IRQHandler+0x3d2>
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00d      	beq.n	8003266 <HAL_ADC_IRQHandler+0x3d2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800324e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 ff1a 	bl	8004090 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003264:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	f003 0310 	and.w	r3, r3, #16
 800326c:	2b00      	cmp	r3, #0
 800326e:	d043      	beq.n	80032f8 <HAL_ADC_IRQHandler+0x464>
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	f003 0310 	and.w	r3, r3, #16
 8003276:	2b00      	cmp	r3, #0
 8003278:	d03e      	beq.n	80032f8 <HAL_ADC_IRQHandler+0x464>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800327e:	2b00      	cmp	r3, #0
 8003280:	d102      	bne.n	8003288 <HAL_ADC_IRQHandler+0x3f4>
    {
      overrun_error = 1UL;
 8003282:	2301      	movs	r3, #1
 8003284:	627b      	str	r3, [r7, #36]	; 0x24
 8003286:	e021      	b.n	80032cc <HAL_ADC_IRQHandler+0x438>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d015      	beq.n	80032ba <HAL_ADC_IRQHandler+0x426>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003296:	d004      	beq.n	80032a2 <HAL_ADC_IRQHandler+0x40e>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a27      	ldr	r2, [pc, #156]	; (800333c <HAL_ADC_IRQHandler+0x4a8>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d101      	bne.n	80032a6 <HAL_ADC_IRQHandler+0x412>
 80032a2:	4b27      	ldr	r3, [pc, #156]	; (8003340 <HAL_ADC_IRQHandler+0x4ac>)
 80032a4:	e000      	b.n	80032a8 <HAL_ADC_IRQHandler+0x414>
 80032a6:	4b27      	ldr	r3, [pc, #156]	; (8003344 <HAL_ADC_IRQHandler+0x4b0>)
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7ff f981 	bl	80025b0 <LL_ADC_GetMultiDMATransfer>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00b      	beq.n	80032cc <HAL_ADC_IRQHandler+0x438>
        {
          overrun_error = 1UL;
 80032b4:	2301      	movs	r3, #1
 80032b6:	627b      	str	r3, [r7, #36]	; 0x24
 80032b8:	e008      	b.n	80032cc <HAL_ADC_IRQHandler+0x438>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <HAL_ADC_IRQHandler+0x438>
        {
          overrun_error = 1UL;
 80032c8:	2301      	movs	r3, #1
 80032ca:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80032cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d10e      	bne.n	80032f0 <HAL_ADC_IRQHandler+0x45c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032e2:	f043 0202 	orr.w	r2, r3, #2
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 f836 	bl	800335c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2210      	movs	r2, #16
 80032f6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d018      	beq.n	8003334 <HAL_ADC_IRQHandler+0x4a0>
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003308:	2b00      	cmp	r3, #0
 800330a:	d013      	beq.n	8003334 <HAL_ADC_IRQHandler+0x4a0>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003310:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800331c:	f043 0208 	orr.w	r2, r3, #8
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800332c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 fe9a 	bl	8004068 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003334:	bf00      	nop
 8003336:	3728      	adds	r7, #40	; 0x28
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	50000100 	.word	0x50000100
 8003340:	50000300 	.word	0x50000300
 8003344:	50000700 	.word	0x50000700

08003348 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b0b6      	sub	sp, #216	; 0xd8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800337a:	2300      	movs	r3, #0
 800337c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003380:	2300      	movs	r3, #0
 8003382:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800338a:	2b01      	cmp	r3, #1
 800338c:	d102      	bne.n	8003394 <HAL_ADC_ConfigChannel+0x24>
 800338e:	2302      	movs	r3, #2
 8003390:	f000 bc13 	b.w	8003bba <HAL_ADC_ConfigChannel+0x84a>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7ff f9d7 	bl	8002754 <LL_ADC_REG_IsConversionOngoing>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f040 83f3 	bne.w	8003b94 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6818      	ldr	r0, [r3, #0]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	6859      	ldr	r1, [r3, #4]
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	461a      	mov	r2, r3
 80033bc:	f7ff f85b 	bl	8002476 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7ff f9c5 	bl	8002754 <LL_ADC_REG_IsConversionOngoing>
 80033ca:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7ff f9e5 	bl	80027a2 <LL_ADC_INJ_IsConversionOngoing>
 80033d8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80033dc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f040 81d9 	bne.w	8003798 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80033e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f040 81d4 	bne.w	8003798 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033f8:	d10f      	bne.n	800341a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6818      	ldr	r0, [r3, #0]
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2200      	movs	r2, #0
 8003404:	4619      	mov	r1, r3
 8003406:	f7ff f875 	bl	80024f4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003412:	4618      	mov	r0, r3
 8003414:	f7ff f809 	bl	800242a <LL_ADC_SetSamplingTimeCommonConfig>
 8003418:	e00e      	b.n	8003438 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6818      	ldr	r0, [r3, #0]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	6819      	ldr	r1, [r3, #0]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	461a      	mov	r2, r3
 8003428:	f7ff f864 	bl	80024f4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2100      	movs	r1, #0
 8003432:	4618      	mov	r0, r3
 8003434:	f7fe fff9 	bl	800242a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	695a      	ldr	r2, [r3, #20]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	08db      	lsrs	r3, r3, #3
 8003444:	f003 0303 	and.w	r3, r3, #3
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	fa02 f303 	lsl.w	r3, r2, r3
 800344e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	2b04      	cmp	r3, #4
 8003458:	d022      	beq.n	80034a0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6818      	ldr	r0, [r3, #0]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	6919      	ldr	r1, [r3, #16]
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800346a:	f7fe ff53 	bl	8002314 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6818      	ldr	r0, [r3, #0]
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	6919      	ldr	r1, [r3, #16]
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	461a      	mov	r2, r3
 800347c:	f7fe ff9f 	bl	80023be <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6818      	ldr	r0, [r3, #0]
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	6919      	ldr	r1, [r3, #16]
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	7f1b      	ldrb	r3, [r3, #28]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d102      	bne.n	8003496 <HAL_ADC_ConfigChannel+0x126>
 8003490:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003494:	e000      	b.n	8003498 <HAL_ADC_ConfigChannel+0x128>
 8003496:	2300      	movs	r3, #0
 8003498:	461a      	mov	r2, r3
 800349a:	f7fe ffab 	bl	80023f4 <LL_ADC_SetOffsetSaturation>
 800349e:	e17b      	b.n	8003798 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2100      	movs	r1, #0
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7fe ff58 	bl	800235c <LL_ADC_GetOffsetChannel>
 80034ac:	4603      	mov	r3, r0
 80034ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10a      	bne.n	80034cc <HAL_ADC_ConfigChannel+0x15c>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2100      	movs	r1, #0
 80034bc:	4618      	mov	r0, r3
 80034be:	f7fe ff4d 	bl	800235c <LL_ADC_GetOffsetChannel>
 80034c2:	4603      	mov	r3, r0
 80034c4:	0e9b      	lsrs	r3, r3, #26
 80034c6:	f003 021f 	and.w	r2, r3, #31
 80034ca:	e01e      	b.n	800350a <HAL_ADC_ConfigChannel+0x19a>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2100      	movs	r1, #0
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7fe ff42 	bl	800235c <LL_ADC_GetOffsetChannel>
 80034d8:	4603      	mov	r3, r0
 80034da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80034e2:	fa93 f3a3 	rbit	r3, r3
 80034e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80034ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80034ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80034f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80034fa:	2320      	movs	r3, #32
 80034fc:	e004      	b.n	8003508 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80034fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003502:	fab3 f383 	clz	r3, r3
 8003506:	b2db      	uxtb	r3, r3
 8003508:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003512:	2b00      	cmp	r3, #0
 8003514:	d105      	bne.n	8003522 <HAL_ADC_ConfigChannel+0x1b2>
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	0e9b      	lsrs	r3, r3, #26
 800351c:	f003 031f 	and.w	r3, r3, #31
 8003520:	e018      	b.n	8003554 <HAL_ADC_ConfigChannel+0x1e4>
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800352e:	fa93 f3a3 	rbit	r3, r3
 8003532:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003536:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800353a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800353e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003546:	2320      	movs	r3, #32
 8003548:	e004      	b.n	8003554 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800354a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800354e:	fab3 f383 	clz	r3, r3
 8003552:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003554:	429a      	cmp	r2, r3
 8003556:	d106      	bne.n	8003566 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2200      	movs	r2, #0
 800355e:	2100      	movs	r1, #0
 8003560:	4618      	mov	r0, r3
 8003562:	f7fe ff11 	bl	8002388 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2101      	movs	r1, #1
 800356c:	4618      	mov	r0, r3
 800356e:	f7fe fef5 	bl	800235c <LL_ADC_GetOffsetChannel>
 8003572:	4603      	mov	r3, r0
 8003574:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003578:	2b00      	cmp	r3, #0
 800357a:	d10a      	bne.n	8003592 <HAL_ADC_ConfigChannel+0x222>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2101      	movs	r1, #1
 8003582:	4618      	mov	r0, r3
 8003584:	f7fe feea 	bl	800235c <LL_ADC_GetOffsetChannel>
 8003588:	4603      	mov	r3, r0
 800358a:	0e9b      	lsrs	r3, r3, #26
 800358c:	f003 021f 	and.w	r2, r3, #31
 8003590:	e01e      	b.n	80035d0 <HAL_ADC_ConfigChannel+0x260>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2101      	movs	r1, #1
 8003598:	4618      	mov	r0, r3
 800359a:	f7fe fedf 	bl	800235c <LL_ADC_GetOffsetChannel>
 800359e:	4603      	mov	r3, r0
 80035a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80035a8:	fa93 f3a3 	rbit	r3, r3
 80035ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80035b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80035b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80035b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80035c0:	2320      	movs	r3, #32
 80035c2:	e004      	b.n	80035ce <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80035c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80035c8:	fab3 f383 	clz	r3, r3
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d105      	bne.n	80035e8 <HAL_ADC_ConfigChannel+0x278>
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	0e9b      	lsrs	r3, r3, #26
 80035e2:	f003 031f 	and.w	r3, r3, #31
 80035e6:	e018      	b.n	800361a <HAL_ADC_ConfigChannel+0x2aa>
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80035f4:	fa93 f3a3 	rbit	r3, r3
 80035f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80035fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003600:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003604:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003608:	2b00      	cmp	r3, #0
 800360a:	d101      	bne.n	8003610 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800360c:	2320      	movs	r3, #32
 800360e:	e004      	b.n	800361a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003610:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003614:	fab3 f383 	clz	r3, r3
 8003618:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800361a:	429a      	cmp	r2, r3
 800361c:	d106      	bne.n	800362c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2200      	movs	r2, #0
 8003624:	2101      	movs	r1, #1
 8003626:	4618      	mov	r0, r3
 8003628:	f7fe feae 	bl	8002388 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2102      	movs	r1, #2
 8003632:	4618      	mov	r0, r3
 8003634:	f7fe fe92 	bl	800235c <LL_ADC_GetOffsetChannel>
 8003638:	4603      	mov	r3, r0
 800363a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10a      	bne.n	8003658 <HAL_ADC_ConfigChannel+0x2e8>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2102      	movs	r1, #2
 8003648:	4618      	mov	r0, r3
 800364a:	f7fe fe87 	bl	800235c <LL_ADC_GetOffsetChannel>
 800364e:	4603      	mov	r3, r0
 8003650:	0e9b      	lsrs	r3, r3, #26
 8003652:	f003 021f 	and.w	r2, r3, #31
 8003656:	e01e      	b.n	8003696 <HAL_ADC_ConfigChannel+0x326>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2102      	movs	r1, #2
 800365e:	4618      	mov	r0, r3
 8003660:	f7fe fe7c 	bl	800235c <LL_ADC_GetOffsetChannel>
 8003664:	4603      	mov	r3, r0
 8003666:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800366e:	fa93 f3a3 	rbit	r3, r3
 8003672:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003676:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800367a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800367e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003686:	2320      	movs	r3, #32
 8003688:	e004      	b.n	8003694 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800368a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800368e:	fab3 f383 	clz	r3, r3
 8003692:	b2db      	uxtb	r3, r3
 8003694:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d105      	bne.n	80036ae <HAL_ADC_ConfigChannel+0x33e>
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	0e9b      	lsrs	r3, r3, #26
 80036a8:	f003 031f 	and.w	r3, r3, #31
 80036ac:	e016      	b.n	80036dc <HAL_ADC_ConfigChannel+0x36c>
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80036ba:	fa93 f3a3 	rbit	r3, r3
 80036be:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80036c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80036c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80036c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80036ce:	2320      	movs	r3, #32
 80036d0:	e004      	b.n	80036dc <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80036d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80036d6:	fab3 f383 	clz	r3, r3
 80036da:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80036dc:	429a      	cmp	r2, r3
 80036de:	d106      	bne.n	80036ee <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2200      	movs	r2, #0
 80036e6:	2102      	movs	r1, #2
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7fe fe4d 	bl	8002388 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2103      	movs	r1, #3
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7fe fe31 	bl	800235c <LL_ADC_GetOffsetChannel>
 80036fa:	4603      	mov	r3, r0
 80036fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003700:	2b00      	cmp	r3, #0
 8003702:	d10a      	bne.n	800371a <HAL_ADC_ConfigChannel+0x3aa>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2103      	movs	r1, #3
 800370a:	4618      	mov	r0, r3
 800370c:	f7fe fe26 	bl	800235c <LL_ADC_GetOffsetChannel>
 8003710:	4603      	mov	r3, r0
 8003712:	0e9b      	lsrs	r3, r3, #26
 8003714:	f003 021f 	and.w	r2, r3, #31
 8003718:	e017      	b.n	800374a <HAL_ADC_ConfigChannel+0x3da>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2103      	movs	r1, #3
 8003720:	4618      	mov	r0, r3
 8003722:	f7fe fe1b 	bl	800235c <LL_ADC_GetOffsetChannel>
 8003726:	4603      	mov	r3, r0
 8003728:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800372c:	fa93 f3a3 	rbit	r3, r3
 8003730:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003732:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003734:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003736:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003738:	2b00      	cmp	r3, #0
 800373a:	d101      	bne.n	8003740 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800373c:	2320      	movs	r3, #32
 800373e:	e003      	b.n	8003748 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003740:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003742:	fab3 f383 	clz	r3, r3
 8003746:	b2db      	uxtb	r3, r3
 8003748:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003752:	2b00      	cmp	r3, #0
 8003754:	d105      	bne.n	8003762 <HAL_ADC_ConfigChannel+0x3f2>
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	0e9b      	lsrs	r3, r3, #26
 800375c:	f003 031f 	and.w	r3, r3, #31
 8003760:	e011      	b.n	8003786 <HAL_ADC_ConfigChannel+0x416>
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003768:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800376a:	fa93 f3a3 	rbit	r3, r3
 800376e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003770:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003772:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003774:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800377a:	2320      	movs	r3, #32
 800377c:	e003      	b.n	8003786 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800377e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003780:	fab3 f383 	clz	r3, r3
 8003784:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003786:	429a      	cmp	r2, r3
 8003788:	d106      	bne.n	8003798 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2200      	movs	r2, #0
 8003790:	2103      	movs	r1, #3
 8003792:	4618      	mov	r0, r3
 8003794:	f7fe fdf8 	bl	8002388 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4618      	mov	r0, r3
 800379e:	f7fe ff8b 	bl	80026b8 <LL_ADC_IsEnabled>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f040 813d 	bne.w	8003a24 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6818      	ldr	r0, [r3, #0]
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	6819      	ldr	r1, [r3, #0]
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	461a      	mov	r2, r3
 80037b8:	f7fe fec8 	bl	800254c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	4aa2      	ldr	r2, [pc, #648]	; (8003a4c <HAL_ADC_ConfigChannel+0x6dc>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	f040 812e 	bne.w	8003a24 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10b      	bne.n	80037f0 <HAL_ADC_ConfigChannel+0x480>
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	0e9b      	lsrs	r3, r3, #26
 80037de:	3301      	adds	r3, #1
 80037e0:	f003 031f 	and.w	r3, r3, #31
 80037e4:	2b09      	cmp	r3, #9
 80037e6:	bf94      	ite	ls
 80037e8:	2301      	movls	r3, #1
 80037ea:	2300      	movhi	r3, #0
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	e019      	b.n	8003824 <HAL_ADC_ConfigChannel+0x4b4>
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037f8:	fa93 f3a3 	rbit	r3, r3
 80037fc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80037fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003800:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003802:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003804:	2b00      	cmp	r3, #0
 8003806:	d101      	bne.n	800380c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003808:	2320      	movs	r3, #32
 800380a:	e003      	b.n	8003814 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800380c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800380e:	fab3 f383 	clz	r3, r3
 8003812:	b2db      	uxtb	r3, r3
 8003814:	3301      	adds	r3, #1
 8003816:	f003 031f 	and.w	r3, r3, #31
 800381a:	2b09      	cmp	r3, #9
 800381c:	bf94      	ite	ls
 800381e:	2301      	movls	r3, #1
 8003820:	2300      	movhi	r3, #0
 8003822:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003824:	2b00      	cmp	r3, #0
 8003826:	d079      	beq.n	800391c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003830:	2b00      	cmp	r3, #0
 8003832:	d107      	bne.n	8003844 <HAL_ADC_ConfigChannel+0x4d4>
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	0e9b      	lsrs	r3, r3, #26
 800383a:	3301      	adds	r3, #1
 800383c:	069b      	lsls	r3, r3, #26
 800383e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003842:	e015      	b.n	8003870 <HAL_ADC_ConfigChannel+0x500>
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800384c:	fa93 f3a3 	rbit	r3, r3
 8003850:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003854:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003856:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003858:	2b00      	cmp	r3, #0
 800385a:	d101      	bne.n	8003860 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800385c:	2320      	movs	r3, #32
 800385e:	e003      	b.n	8003868 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003860:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003862:	fab3 f383 	clz	r3, r3
 8003866:	b2db      	uxtb	r3, r3
 8003868:	3301      	adds	r3, #1
 800386a:	069b      	lsls	r3, r3, #26
 800386c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003878:	2b00      	cmp	r3, #0
 800387a:	d109      	bne.n	8003890 <HAL_ADC_ConfigChannel+0x520>
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	0e9b      	lsrs	r3, r3, #26
 8003882:	3301      	adds	r3, #1
 8003884:	f003 031f 	and.w	r3, r3, #31
 8003888:	2101      	movs	r1, #1
 800388a:	fa01 f303 	lsl.w	r3, r1, r3
 800388e:	e017      	b.n	80038c0 <HAL_ADC_ConfigChannel+0x550>
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003896:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003898:	fa93 f3a3 	rbit	r3, r3
 800389c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800389e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038a0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80038a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d101      	bne.n	80038ac <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80038a8:	2320      	movs	r3, #32
 80038aa:	e003      	b.n	80038b4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80038ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038ae:	fab3 f383 	clz	r3, r3
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	3301      	adds	r3, #1
 80038b6:	f003 031f 	and.w	r3, r3, #31
 80038ba:	2101      	movs	r1, #1
 80038bc:	fa01 f303 	lsl.w	r3, r1, r3
 80038c0:	ea42 0103 	orr.w	r1, r2, r3
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d10a      	bne.n	80038e6 <HAL_ADC_ConfigChannel+0x576>
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	0e9b      	lsrs	r3, r3, #26
 80038d6:	3301      	adds	r3, #1
 80038d8:	f003 021f 	and.w	r2, r3, #31
 80038dc:	4613      	mov	r3, r2
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	4413      	add	r3, r2
 80038e2:	051b      	lsls	r3, r3, #20
 80038e4:	e018      	b.n	8003918 <HAL_ADC_ConfigChannel+0x5a8>
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ee:	fa93 f3a3 	rbit	r3, r3
 80038f2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80038f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80038f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80038fe:	2320      	movs	r3, #32
 8003900:	e003      	b.n	800390a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003904:	fab3 f383 	clz	r3, r3
 8003908:	b2db      	uxtb	r3, r3
 800390a:	3301      	adds	r3, #1
 800390c:	f003 021f 	and.w	r2, r3, #31
 8003910:	4613      	mov	r3, r2
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	4413      	add	r3, r2
 8003916:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003918:	430b      	orrs	r3, r1
 800391a:	e07e      	b.n	8003a1a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003924:	2b00      	cmp	r3, #0
 8003926:	d107      	bne.n	8003938 <HAL_ADC_ConfigChannel+0x5c8>
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	0e9b      	lsrs	r3, r3, #26
 800392e:	3301      	adds	r3, #1
 8003930:	069b      	lsls	r3, r3, #26
 8003932:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003936:	e015      	b.n	8003964 <HAL_ADC_ConfigChannel+0x5f4>
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800393e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003940:	fa93 f3a3 	rbit	r3, r3
 8003944:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003948:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800394a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394c:	2b00      	cmp	r3, #0
 800394e:	d101      	bne.n	8003954 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003950:	2320      	movs	r3, #32
 8003952:	e003      	b.n	800395c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003956:	fab3 f383 	clz	r3, r3
 800395a:	b2db      	uxtb	r3, r3
 800395c:	3301      	adds	r3, #1
 800395e:	069b      	lsls	r3, r3, #26
 8003960:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800396c:	2b00      	cmp	r3, #0
 800396e:	d109      	bne.n	8003984 <HAL_ADC_ConfigChannel+0x614>
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	0e9b      	lsrs	r3, r3, #26
 8003976:	3301      	adds	r3, #1
 8003978:	f003 031f 	and.w	r3, r3, #31
 800397c:	2101      	movs	r1, #1
 800397e:	fa01 f303 	lsl.w	r3, r1, r3
 8003982:	e017      	b.n	80039b4 <HAL_ADC_ConfigChannel+0x644>
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398a:	6a3b      	ldr	r3, [r7, #32]
 800398c:	fa93 f3a3 	rbit	r3, r3
 8003990:	61fb      	str	r3, [r7, #28]
  return result;
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003998:	2b00      	cmp	r3, #0
 800399a:	d101      	bne.n	80039a0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800399c:	2320      	movs	r3, #32
 800399e:	e003      	b.n	80039a8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80039a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a2:	fab3 f383 	clz	r3, r3
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	3301      	adds	r3, #1
 80039aa:	f003 031f 	and.w	r3, r3, #31
 80039ae:	2101      	movs	r1, #1
 80039b0:	fa01 f303 	lsl.w	r3, r1, r3
 80039b4:	ea42 0103 	orr.w	r1, r2, r3
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10d      	bne.n	80039e0 <HAL_ADC_ConfigChannel+0x670>
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	0e9b      	lsrs	r3, r3, #26
 80039ca:	3301      	adds	r3, #1
 80039cc:	f003 021f 	and.w	r2, r3, #31
 80039d0:	4613      	mov	r3, r2
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	4413      	add	r3, r2
 80039d6:	3b1e      	subs	r3, #30
 80039d8:	051b      	lsls	r3, r3, #20
 80039da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80039de:	e01b      	b.n	8003a18 <HAL_ADC_ConfigChannel+0x6a8>
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	fa93 f3a3 	rbit	r3, r3
 80039ec:	613b      	str	r3, [r7, #16]
  return result;
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80039f8:	2320      	movs	r3, #32
 80039fa:	e003      	b.n	8003a04 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	fab3 f383 	clz	r3, r3
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	3301      	adds	r3, #1
 8003a06:	f003 021f 	and.w	r2, r3, #31
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	4413      	add	r3, r2
 8003a10:	3b1e      	subs	r3, #30
 8003a12:	051b      	lsls	r3, r3, #20
 8003a14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a18:	430b      	orrs	r3, r1
 8003a1a:	683a      	ldr	r2, [r7, #0]
 8003a1c:	6892      	ldr	r2, [r2, #8]
 8003a1e:	4619      	mov	r1, r3
 8003a20:	f7fe fd68 	bl	80024f4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	4b09      	ldr	r3, [pc, #36]	; (8003a50 <HAL_ADC_ConfigChannel+0x6e0>)
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f000 80be 	beq.w	8003bae <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a3a:	d004      	beq.n	8003a46 <HAL_ADC_ConfigChannel+0x6d6>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a04      	ldr	r2, [pc, #16]	; (8003a54 <HAL_ADC_ConfigChannel+0x6e4>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d10a      	bne.n	8003a5c <HAL_ADC_ConfigChannel+0x6ec>
 8003a46:	4b04      	ldr	r3, [pc, #16]	; (8003a58 <HAL_ADC_ConfigChannel+0x6e8>)
 8003a48:	e009      	b.n	8003a5e <HAL_ADC_ConfigChannel+0x6ee>
 8003a4a:	bf00      	nop
 8003a4c:	407f0000 	.word	0x407f0000
 8003a50:	80080000 	.word	0x80080000
 8003a54:	50000100 	.word	0x50000100
 8003a58:	50000300 	.word	0x50000300
 8003a5c:	4b59      	ldr	r3, [pc, #356]	; (8003bc4 <HAL_ADC_ConfigChannel+0x854>)
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7fe fc4a 	bl	80022f8 <LL_ADC_GetCommonPathInternalCh>
 8003a64:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a56      	ldr	r2, [pc, #344]	; (8003bc8 <HAL_ADC_ConfigChannel+0x858>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d004      	beq.n	8003a7c <HAL_ADC_ConfigChannel+0x70c>
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a55      	ldr	r2, [pc, #340]	; (8003bcc <HAL_ADC_ConfigChannel+0x85c>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d13a      	bne.n	8003af2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003a7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d134      	bne.n	8003af2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a90:	d005      	beq.n	8003a9e <HAL_ADC_ConfigChannel+0x72e>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a4e      	ldr	r2, [pc, #312]	; (8003bd0 <HAL_ADC_ConfigChannel+0x860>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	f040 8085 	bne.w	8003ba8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003aa6:	d004      	beq.n	8003ab2 <HAL_ADC_ConfigChannel+0x742>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a49      	ldr	r2, [pc, #292]	; (8003bd4 <HAL_ADC_ConfigChannel+0x864>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d101      	bne.n	8003ab6 <HAL_ADC_ConfigChannel+0x746>
 8003ab2:	4a49      	ldr	r2, [pc, #292]	; (8003bd8 <HAL_ADC_ConfigChannel+0x868>)
 8003ab4:	e000      	b.n	8003ab8 <HAL_ADC_ConfigChannel+0x748>
 8003ab6:	4a43      	ldr	r2, [pc, #268]	; (8003bc4 <HAL_ADC_ConfigChannel+0x854>)
 8003ab8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003abc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	4610      	mov	r0, r2
 8003ac4:	f7fe fc05 	bl	80022d2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ac8:	4b44      	ldr	r3, [pc, #272]	; (8003bdc <HAL_ADC_ConfigChannel+0x86c>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	099b      	lsrs	r3, r3, #6
 8003ace:	4a44      	ldr	r2, [pc, #272]	; (8003be0 <HAL_ADC_ConfigChannel+0x870>)
 8003ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad4:	099b      	lsrs	r3, r3, #6
 8003ad6:	1c5a      	adds	r2, r3, #1
 8003ad8:	4613      	mov	r3, r2
 8003ada:	005b      	lsls	r3, r3, #1
 8003adc:	4413      	add	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003ae2:	e002      	b.n	8003aea <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1f9      	bne.n	8003ae4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003af0:	e05a      	b.n	8003ba8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a3b      	ldr	r2, [pc, #236]	; (8003be4 <HAL_ADC_ConfigChannel+0x874>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d125      	bne.n	8003b48 <HAL_ADC_ConfigChannel+0x7d8>
 8003afc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d11f      	bne.n	8003b48 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a31      	ldr	r2, [pc, #196]	; (8003bd4 <HAL_ADC_ConfigChannel+0x864>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d104      	bne.n	8003b1c <HAL_ADC_ConfigChannel+0x7ac>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a34      	ldr	r2, [pc, #208]	; (8003be8 <HAL_ADC_ConfigChannel+0x878>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d047      	beq.n	8003bac <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b24:	d004      	beq.n	8003b30 <HAL_ADC_ConfigChannel+0x7c0>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a2a      	ldr	r2, [pc, #168]	; (8003bd4 <HAL_ADC_ConfigChannel+0x864>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d101      	bne.n	8003b34 <HAL_ADC_ConfigChannel+0x7c4>
 8003b30:	4a29      	ldr	r2, [pc, #164]	; (8003bd8 <HAL_ADC_ConfigChannel+0x868>)
 8003b32:	e000      	b.n	8003b36 <HAL_ADC_ConfigChannel+0x7c6>
 8003b34:	4a23      	ldr	r2, [pc, #140]	; (8003bc4 <HAL_ADC_ConfigChannel+0x854>)
 8003b36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b3e:	4619      	mov	r1, r3
 8003b40:	4610      	mov	r0, r2
 8003b42:	f7fe fbc6 	bl	80022d2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b46:	e031      	b.n	8003bac <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a27      	ldr	r2, [pc, #156]	; (8003bec <HAL_ADC_ConfigChannel+0x87c>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d12d      	bne.n	8003bae <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003b52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d127      	bne.n	8003bae <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a1c      	ldr	r2, [pc, #112]	; (8003bd4 <HAL_ADC_ConfigChannel+0x864>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d022      	beq.n	8003bae <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b70:	d004      	beq.n	8003b7c <HAL_ADC_ConfigChannel+0x80c>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a17      	ldr	r2, [pc, #92]	; (8003bd4 <HAL_ADC_ConfigChannel+0x864>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d101      	bne.n	8003b80 <HAL_ADC_ConfigChannel+0x810>
 8003b7c:	4a16      	ldr	r2, [pc, #88]	; (8003bd8 <HAL_ADC_ConfigChannel+0x868>)
 8003b7e:	e000      	b.n	8003b82 <HAL_ADC_ConfigChannel+0x812>
 8003b80:	4a10      	ldr	r2, [pc, #64]	; (8003bc4 <HAL_ADC_ConfigChannel+0x854>)
 8003b82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	4610      	mov	r0, r2
 8003b8e:	f7fe fba0 	bl	80022d2 <LL_ADC_SetCommonPathInternalCh>
 8003b92:	e00c      	b.n	8003bae <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b98:	f043 0220 	orr.w	r2, r3, #32
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003ba6:	e002      	b.n	8003bae <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ba8:	bf00      	nop
 8003baa:	e000      	b.n	8003bae <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003bac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003bb6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	37d8      	adds	r7, #216	; 0xd8
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	50000700 	.word	0x50000700
 8003bc8:	c3210000 	.word	0xc3210000
 8003bcc:	90c00010 	.word	0x90c00010
 8003bd0:	50000600 	.word	0x50000600
 8003bd4:	50000100 	.word	0x50000100
 8003bd8:	50000300 	.word	0x50000300
 8003bdc:	20000000 	.word	0x20000000
 8003be0:	053e2d63 	.word	0x053e2d63
 8003be4:	c7520000 	.word	0xc7520000
 8003be8:	50000500 	.word	0x50000500
 8003bec:	cb840000 	.word	0xcb840000

08003bf0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b088      	sub	sp, #32
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7fe fda4 	bl	8002754 <LL_ADC_REG_IsConversionOngoing>
 8003c0c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7fe fdc5 	bl	80027a2 <LL_ADC_INJ_IsConversionOngoing>
 8003c18:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d103      	bne.n	8003c28 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f000 8098 	beq.w	8003d58 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d02a      	beq.n	8003c8c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	7f5b      	ldrb	r3, [r3, #29]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d126      	bne.n	8003c8c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	7f1b      	ldrb	r3, [r3, #28]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d122      	bne.n	8003c8c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003c46:	2301      	movs	r3, #1
 8003c48:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003c4a:	e014      	b.n	8003c76 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	4a45      	ldr	r2, [pc, #276]	; (8003d64 <ADC_ConversionStop+0x174>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d90d      	bls.n	8003c70 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c58:	f043 0210 	orr.w	r2, r3, #16
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c64:	f043 0201 	orr.w	r2, r3, #1
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e074      	b.n	8003d5a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	3301      	adds	r3, #1
 8003c74:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c80:	2b40      	cmp	r3, #64	; 0x40
 8003c82:	d1e3      	bne.n	8003c4c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2240      	movs	r2, #64	; 0x40
 8003c8a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d014      	beq.n	8003cbc <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7fe fd5c 	bl	8002754 <LL_ADC_REG_IsConversionOngoing>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00c      	beq.n	8003cbc <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7fe fd19 	bl	80026de <LL_ADC_IsDisableOngoing>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d104      	bne.n	8003cbc <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7fe fd38 	bl	800272c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d014      	beq.n	8003cec <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7fe fd6b 	bl	80027a2 <LL_ADC_INJ_IsConversionOngoing>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00c      	beq.n	8003cec <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7fe fd01 	bl	80026de <LL_ADC_IsDisableOngoing>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d104      	bne.n	8003cec <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7fe fd47 	bl	800277a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d005      	beq.n	8003cfe <ADC_ConversionStop+0x10e>
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	2b03      	cmp	r3, #3
 8003cf6:	d105      	bne.n	8003d04 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003cf8:	230c      	movs	r3, #12
 8003cfa:	617b      	str	r3, [r7, #20]
        break;
 8003cfc:	e005      	b.n	8003d0a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003cfe:	2308      	movs	r3, #8
 8003d00:	617b      	str	r3, [r7, #20]
        break;
 8003d02:	e002      	b.n	8003d0a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003d04:	2304      	movs	r3, #4
 8003d06:	617b      	str	r3, [r7, #20]
        break;
 8003d08:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003d0a:	f7fe fac3 	bl	8002294 <HAL_GetTick>
 8003d0e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003d10:	e01b      	b.n	8003d4a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003d12:	f7fe fabf 	bl	8002294 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b05      	cmp	r3, #5
 8003d1e:	d914      	bls.n	8003d4a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689a      	ldr	r2, [r3, #8]
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00d      	beq.n	8003d4a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d32:	f043 0210 	orr.w	r2, r3, #16
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d3e:	f043 0201 	orr.w	r2, r3, #1
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e007      	b.n	8003d5a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	689a      	ldr	r2, [r3, #8]
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	4013      	ands	r3, r2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1dc      	bne.n	8003d12 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3720      	adds	r7, #32
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	a33fffff 	.word	0xa33fffff

08003d68 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7fe fc9f 	bl	80026b8 <LL_ADC_IsEnabled>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d14d      	bne.n	8003e1c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689a      	ldr	r2, [r3, #8]
 8003d86:	4b28      	ldr	r3, [pc, #160]	; (8003e28 <ADC_Enable+0xc0>)
 8003d88:	4013      	ands	r3, r2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00d      	beq.n	8003daa <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d92:	f043 0210 	orr.w	r2, r3, #16
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d9e:	f043 0201 	orr.w	r2, r3, #1
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e039      	b.n	8003e1e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fe fc5a 	bl	8002668 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003db4:	f7fe fa6e 	bl	8002294 <HAL_GetTick>
 8003db8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003dba:	e028      	b.n	8003e0e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7fe fc79 	bl	80026b8 <LL_ADC_IsEnabled>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d104      	bne.n	8003dd6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7fe fc49 	bl	8002668 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003dd6:	f7fe fa5d 	bl	8002294 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d914      	bls.n	8003e0e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d00d      	beq.n	8003e0e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df6:	f043 0210 	orr.w	r2, r3, #16
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e02:	f043 0201 	orr.w	r2, r3, #1
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e007      	b.n	8003e1e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0301 	and.w	r3, r3, #1
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d1cf      	bne.n	8003dbc <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	8000003f 	.word	0x8000003f

08003e2c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7fe fc50 	bl	80026de <LL_ADC_IsDisableOngoing>
 8003e3e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7fe fc37 	bl	80026b8 <LL_ADC_IsEnabled>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d047      	beq.n	8003ee0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d144      	bne.n	8003ee0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f003 030d 	and.w	r3, r3, #13
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d10c      	bne.n	8003e7e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7fe fc11 	bl	8002690 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2203      	movs	r2, #3
 8003e74:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003e76:	f7fe fa0d 	bl	8002294 <HAL_GetTick>
 8003e7a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e7c:	e029      	b.n	8003ed2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e82:	f043 0210 	orr.w	r2, r3, #16
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e8e:	f043 0201 	orr.w	r2, r3, #1
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e023      	b.n	8003ee2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003e9a:	f7fe f9fb 	bl	8002294 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d914      	bls.n	8003ed2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00d      	beq.n	8003ed2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eba:	f043 0210 	orr.w	r2, r3, #16
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ec6:	f043 0201 	orr.w	r2, r3, #1
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e007      	b.n	8003ee2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1dc      	bne.n	8003e9a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3710      	adds	r7, #16
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <LL_ADC_IsEnabled>:
{
 8003eea:	b480      	push	{r7}
 8003eec:	b083      	sub	sp, #12
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d101      	bne.n	8003f02 <LL_ADC_IsEnabled+0x18>
 8003efe:	2301      	movs	r3, #1
 8003f00:	e000      	b.n	8003f04 <LL_ADC_IsEnabled+0x1a>
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <LL_ADC_StartCalibration>:
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003f22:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003f26:	683a      	ldr	r2, [r7, #0]
 8003f28:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	609a      	str	r2, [r3, #8]
}
 8003f36:	bf00      	nop
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr

08003f42 <LL_ADC_IsCalibrationOnGoing>:
{
 8003f42:	b480      	push	{r7}
 8003f44:	b083      	sub	sp, #12
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f56:	d101      	bne.n	8003f5c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e000      	b.n	8003f5e <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr

08003f6a <LL_ADC_REG_IsConversionOngoing>:
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	b083      	sub	sp, #12
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f003 0304 	and.w	r3, r3, #4
 8003f7a:	2b04      	cmp	r3, #4
 8003f7c:	d101      	bne.n	8003f82 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e000      	b.n	8003f84 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d101      	bne.n	8003fac <HAL_ADCEx_Calibration_Start+0x1c>
 8003fa8:	2302      	movs	r3, #2
 8003faa:	e04d      	b.n	8004048 <HAL_ADCEx_Calibration_Start+0xb8>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f7ff ff39 	bl	8003e2c <ADC_Disable>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003fbe:	7bfb      	ldrb	r3, [r7, #15]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d136      	bne.n	8004032 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003fcc:	f023 0302 	bic.w	r3, r3, #2
 8003fd0:	f043 0202 	orr.w	r2, r3, #2
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	6839      	ldr	r1, [r7, #0]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7ff ff96 	bl	8003f10 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003fe4:	e014      	b.n	8004010 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	4a18      	ldr	r2, [pc, #96]	; (8004050 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d90d      	bls.n	8004010 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff8:	f023 0312 	bic.w	r3, r3, #18
 8003ffc:	f043 0210 	orr.w	r2, r3, #16
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e01b      	b.n	8004048 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4618      	mov	r0, r3
 8004016:	f7ff ff94 	bl	8003f42 <LL_ADC_IsCalibrationOnGoing>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1e2      	bne.n	8003fe6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004024:	f023 0303 	bic.w	r3, r3, #3
 8004028:	f043 0201 	orr.w	r2, r3, #1
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004030:	e005      	b.n	800403e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004036:	f043 0210 	orr.w	r2, r3, #16
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004046:	7bfb      	ldrb	r3, [r7, #15]
}
 8004048:	4618      	mov	r0, r3
 800404a:	3710      	adds	r7, #16
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	0004de01 	.word	0x0004de01

08004054 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80040b8:	b590      	push	{r4, r7, lr}
 80040ba:	b0a1      	sub	sp, #132	; 0x84
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040c2:	2300      	movs	r3, #0
 80040c4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d101      	bne.n	80040d6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80040d2:	2302      	movs	r3, #2
 80040d4:	e0e7      	b.n	80042a6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80040de:	2300      	movs	r3, #0
 80040e0:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80040e2:	2300      	movs	r3, #0
 80040e4:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040ee:	d102      	bne.n	80040f6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80040f0:	4b6f      	ldr	r3, [pc, #444]	; (80042b0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80040f2:	60bb      	str	r3, [r7, #8]
 80040f4:	e009      	b.n	800410a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a6e      	ldr	r2, [pc, #440]	; (80042b4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d102      	bne.n	8004106 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004100:	4b6d      	ldr	r3, [pc, #436]	; (80042b8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004102:	60bb      	str	r3, [r7, #8]
 8004104:	e001      	b.n	800410a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004106:	2300      	movs	r3, #0
 8004108:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d10b      	bne.n	8004128 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004114:	f043 0220 	orr.w	r2, r3, #32
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e0be      	b.n	80042a6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	4618      	mov	r0, r3
 800412c:	f7ff ff1d 	bl	8003f6a <LL_ADC_REG_IsConversionOngoing>
 8004130:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4618      	mov	r0, r3
 8004138:	f7ff ff17 	bl	8003f6a <LL_ADC_REG_IsConversionOngoing>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	f040 80a0 	bne.w	8004284 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004144:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004146:	2b00      	cmp	r3, #0
 8004148:	f040 809c 	bne.w	8004284 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004154:	d004      	beq.n	8004160 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a55      	ldr	r2, [pc, #340]	; (80042b0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d101      	bne.n	8004164 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004160:	4b56      	ldr	r3, [pc, #344]	; (80042bc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004162:	e000      	b.n	8004166 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004164:	4b56      	ldr	r3, [pc, #344]	; (80042c0 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004166:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d04b      	beq.n	8004208 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004170:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	6859      	ldr	r1, [r3, #4]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004182:	035b      	lsls	r3, r3, #13
 8004184:	430b      	orrs	r3, r1
 8004186:	431a      	orrs	r2, r3
 8004188:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800418a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004194:	d004      	beq.n	80041a0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a45      	ldr	r2, [pc, #276]	; (80042b0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d10f      	bne.n	80041c0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80041a0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80041a4:	f7ff fea1 	bl	8003eea <LL_ADC_IsEnabled>
 80041a8:	4604      	mov	r4, r0
 80041aa:	4841      	ldr	r0, [pc, #260]	; (80042b0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80041ac:	f7ff fe9d 	bl	8003eea <LL_ADC_IsEnabled>
 80041b0:	4603      	mov	r3, r0
 80041b2:	4323      	orrs	r3, r4
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	bf0c      	ite	eq
 80041b8:	2301      	moveq	r3, #1
 80041ba:	2300      	movne	r3, #0
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	e012      	b.n	80041e6 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80041c0:	483c      	ldr	r0, [pc, #240]	; (80042b4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80041c2:	f7ff fe92 	bl	8003eea <LL_ADC_IsEnabled>
 80041c6:	4604      	mov	r4, r0
 80041c8:	483b      	ldr	r0, [pc, #236]	; (80042b8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80041ca:	f7ff fe8e 	bl	8003eea <LL_ADC_IsEnabled>
 80041ce:	4603      	mov	r3, r0
 80041d0:	431c      	orrs	r4, r3
 80041d2:	483c      	ldr	r0, [pc, #240]	; (80042c4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80041d4:	f7ff fe89 	bl	8003eea <LL_ADC_IsEnabled>
 80041d8:	4603      	mov	r3, r0
 80041da:	4323      	orrs	r3, r4
 80041dc:	2b00      	cmp	r3, #0
 80041de:	bf0c      	ite	eq
 80041e0:	2301      	moveq	r3, #1
 80041e2:	2300      	movne	r3, #0
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d056      	beq.n	8004298 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80041ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80041f2:	f023 030f 	bic.w	r3, r3, #15
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	6811      	ldr	r1, [r2, #0]
 80041fa:	683a      	ldr	r2, [r7, #0]
 80041fc:	6892      	ldr	r2, [r2, #8]
 80041fe:	430a      	orrs	r2, r1
 8004200:	431a      	orrs	r2, r3
 8004202:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004204:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004206:	e047      	b.n	8004298 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004208:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004210:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004212:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800421c:	d004      	beq.n	8004228 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a23      	ldr	r2, [pc, #140]	; (80042b0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d10f      	bne.n	8004248 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004228:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800422c:	f7ff fe5d 	bl	8003eea <LL_ADC_IsEnabled>
 8004230:	4604      	mov	r4, r0
 8004232:	481f      	ldr	r0, [pc, #124]	; (80042b0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004234:	f7ff fe59 	bl	8003eea <LL_ADC_IsEnabled>
 8004238:	4603      	mov	r3, r0
 800423a:	4323      	orrs	r3, r4
 800423c:	2b00      	cmp	r3, #0
 800423e:	bf0c      	ite	eq
 8004240:	2301      	moveq	r3, #1
 8004242:	2300      	movne	r3, #0
 8004244:	b2db      	uxtb	r3, r3
 8004246:	e012      	b.n	800426e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004248:	481a      	ldr	r0, [pc, #104]	; (80042b4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800424a:	f7ff fe4e 	bl	8003eea <LL_ADC_IsEnabled>
 800424e:	4604      	mov	r4, r0
 8004250:	4819      	ldr	r0, [pc, #100]	; (80042b8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004252:	f7ff fe4a 	bl	8003eea <LL_ADC_IsEnabled>
 8004256:	4603      	mov	r3, r0
 8004258:	431c      	orrs	r4, r3
 800425a:	481a      	ldr	r0, [pc, #104]	; (80042c4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800425c:	f7ff fe45 	bl	8003eea <LL_ADC_IsEnabled>
 8004260:	4603      	mov	r3, r0
 8004262:	4323      	orrs	r3, r4
 8004264:	2b00      	cmp	r3, #0
 8004266:	bf0c      	ite	eq
 8004268:	2301      	moveq	r3, #1
 800426a:	2300      	movne	r3, #0
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d012      	beq.n	8004298 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004272:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800427a:	f023 030f 	bic.w	r3, r3, #15
 800427e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004280:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004282:	e009      	b.n	8004298 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004288:	f043 0220 	orr.w	r2, r3, #32
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004296:	e000      	b.n	800429a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004298:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80042a2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3784      	adds	r7, #132	; 0x84
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd90      	pop	{r4, r7, pc}
 80042ae:	bf00      	nop
 80042b0:	50000100 	.word	0x50000100
 80042b4:	50000400 	.word	0x50000400
 80042b8:	50000500 	.word	0x50000500
 80042bc:	50000300 	.word	0x50000300
 80042c0:	50000700 	.word	0x50000700
 80042c4:	50000600 	.word	0x50000600

080042c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f003 0307 	and.w	r3, r3, #7
 80042d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042d8:	4b0c      	ldr	r3, [pc, #48]	; (800430c <__NVIC_SetPriorityGrouping+0x44>)
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042de:	68ba      	ldr	r2, [r7, #8]
 80042e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042e4:	4013      	ands	r3, r2
 80042e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80042f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042fa:	4a04      	ldr	r2, [pc, #16]	; (800430c <__NVIC_SetPriorityGrouping+0x44>)
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	60d3      	str	r3, [r2, #12]
}
 8004300:	bf00      	nop
 8004302:	3714      	adds	r7, #20
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr
 800430c:	e000ed00 	.word	0xe000ed00

08004310 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004310:	b480      	push	{r7}
 8004312:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004314:	4b04      	ldr	r3, [pc, #16]	; (8004328 <__NVIC_GetPriorityGrouping+0x18>)
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	0a1b      	lsrs	r3, r3, #8
 800431a:	f003 0307 	and.w	r3, r3, #7
}
 800431e:	4618      	mov	r0, r3
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr
 8004328:	e000ed00 	.word	0xe000ed00

0800432c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	4603      	mov	r3, r0
 8004334:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800433a:	2b00      	cmp	r3, #0
 800433c:	db0b      	blt.n	8004356 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800433e:	79fb      	ldrb	r3, [r7, #7]
 8004340:	f003 021f 	and.w	r2, r3, #31
 8004344:	4907      	ldr	r1, [pc, #28]	; (8004364 <__NVIC_EnableIRQ+0x38>)
 8004346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800434a:	095b      	lsrs	r3, r3, #5
 800434c:	2001      	movs	r0, #1
 800434e:	fa00 f202 	lsl.w	r2, r0, r2
 8004352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004356:	bf00      	nop
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	e000e100 	.word	0xe000e100

08004368 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	4603      	mov	r3, r0
 8004370:	6039      	str	r1, [r7, #0]
 8004372:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004378:	2b00      	cmp	r3, #0
 800437a:	db0a      	blt.n	8004392 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	b2da      	uxtb	r2, r3
 8004380:	490c      	ldr	r1, [pc, #48]	; (80043b4 <__NVIC_SetPriority+0x4c>)
 8004382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004386:	0112      	lsls	r2, r2, #4
 8004388:	b2d2      	uxtb	r2, r2
 800438a:	440b      	add	r3, r1
 800438c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004390:	e00a      	b.n	80043a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	b2da      	uxtb	r2, r3
 8004396:	4908      	ldr	r1, [pc, #32]	; (80043b8 <__NVIC_SetPriority+0x50>)
 8004398:	79fb      	ldrb	r3, [r7, #7]
 800439a:	f003 030f 	and.w	r3, r3, #15
 800439e:	3b04      	subs	r3, #4
 80043a0:	0112      	lsls	r2, r2, #4
 80043a2:	b2d2      	uxtb	r2, r2
 80043a4:	440b      	add	r3, r1
 80043a6:	761a      	strb	r2, [r3, #24]
}
 80043a8:	bf00      	nop
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr
 80043b4:	e000e100 	.word	0xe000e100
 80043b8:	e000ed00 	.word	0xe000ed00

080043bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043bc:	b480      	push	{r7}
 80043be:	b089      	sub	sp, #36	; 0x24
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f003 0307 	and.w	r3, r3, #7
 80043ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	f1c3 0307 	rsb	r3, r3, #7
 80043d6:	2b04      	cmp	r3, #4
 80043d8:	bf28      	it	cs
 80043da:	2304      	movcs	r3, #4
 80043dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	3304      	adds	r3, #4
 80043e2:	2b06      	cmp	r3, #6
 80043e4:	d902      	bls.n	80043ec <NVIC_EncodePriority+0x30>
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	3b03      	subs	r3, #3
 80043ea:	e000      	b.n	80043ee <NVIC_EncodePriority+0x32>
 80043ec:	2300      	movs	r3, #0
 80043ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043f0:	f04f 32ff 	mov.w	r2, #4294967295
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	fa02 f303 	lsl.w	r3, r2, r3
 80043fa:	43da      	mvns	r2, r3
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	401a      	ands	r2, r3
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004404:	f04f 31ff 	mov.w	r1, #4294967295
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	fa01 f303 	lsl.w	r3, r1, r3
 800440e:	43d9      	mvns	r1, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004414:	4313      	orrs	r3, r2
         );
}
 8004416:	4618      	mov	r0, r3
 8004418:	3724      	adds	r7, #36	; 0x24
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
	...

08004424 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	3b01      	subs	r3, #1
 8004430:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004434:	d301      	bcc.n	800443a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004436:	2301      	movs	r3, #1
 8004438:	e00f      	b.n	800445a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800443a:	4a0a      	ldr	r2, [pc, #40]	; (8004464 <SysTick_Config+0x40>)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	3b01      	subs	r3, #1
 8004440:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004442:	210f      	movs	r1, #15
 8004444:	f04f 30ff 	mov.w	r0, #4294967295
 8004448:	f7ff ff8e 	bl	8004368 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800444c:	4b05      	ldr	r3, [pc, #20]	; (8004464 <SysTick_Config+0x40>)
 800444e:	2200      	movs	r2, #0
 8004450:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004452:	4b04      	ldr	r3, [pc, #16]	; (8004464 <SysTick_Config+0x40>)
 8004454:	2207      	movs	r2, #7
 8004456:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3708      	adds	r7, #8
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	e000e010 	.word	0xe000e010

08004468 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f7ff ff29 	bl	80042c8 <__NVIC_SetPriorityGrouping>
}
 8004476:	bf00      	nop
 8004478:	3708      	adds	r7, #8
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800447e:	b580      	push	{r7, lr}
 8004480:	b086      	sub	sp, #24
 8004482:	af00      	add	r7, sp, #0
 8004484:	4603      	mov	r3, r0
 8004486:	60b9      	str	r1, [r7, #8]
 8004488:	607a      	str	r2, [r7, #4]
 800448a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800448c:	f7ff ff40 	bl	8004310 <__NVIC_GetPriorityGrouping>
 8004490:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	68b9      	ldr	r1, [r7, #8]
 8004496:	6978      	ldr	r0, [r7, #20]
 8004498:	f7ff ff90 	bl	80043bc <NVIC_EncodePriority>
 800449c:	4602      	mov	r2, r0
 800449e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044a2:	4611      	mov	r1, r2
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7ff ff5f 	bl	8004368 <__NVIC_SetPriority>
}
 80044aa:	bf00      	nop
 80044ac:	3718      	adds	r7, #24
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b082      	sub	sp, #8
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	4603      	mov	r3, r0
 80044ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7ff ff33 	bl	800432c <__NVIC_EnableIRQ>
}
 80044c6:	bf00      	nop
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b082      	sub	sp, #8
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f7ff ffa4 	bl	8004424 <SysTick_Config>
 80044dc:	4603      	mov	r3, r0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3708      	adds	r7, #8
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
	...

080044e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d101      	bne.n	80044fa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e08d      	b.n	8004616 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	461a      	mov	r2, r3
 8004500:	4b47      	ldr	r3, [pc, #284]	; (8004620 <HAL_DMA_Init+0x138>)
 8004502:	429a      	cmp	r2, r3
 8004504:	d80f      	bhi.n	8004526 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	461a      	mov	r2, r3
 800450c:	4b45      	ldr	r3, [pc, #276]	; (8004624 <HAL_DMA_Init+0x13c>)
 800450e:	4413      	add	r3, r2
 8004510:	4a45      	ldr	r2, [pc, #276]	; (8004628 <HAL_DMA_Init+0x140>)
 8004512:	fba2 2303 	umull	r2, r3, r2, r3
 8004516:	091b      	lsrs	r3, r3, #4
 8004518:	009a      	lsls	r2, r3, #2
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a42      	ldr	r2, [pc, #264]	; (800462c <HAL_DMA_Init+0x144>)
 8004522:	641a      	str	r2, [r3, #64]	; 0x40
 8004524:	e00e      	b.n	8004544 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	461a      	mov	r2, r3
 800452c:	4b40      	ldr	r3, [pc, #256]	; (8004630 <HAL_DMA_Init+0x148>)
 800452e:	4413      	add	r3, r2
 8004530:	4a3d      	ldr	r2, [pc, #244]	; (8004628 <HAL_DMA_Init+0x140>)
 8004532:	fba2 2303 	umull	r2, r3, r2, r3
 8004536:	091b      	lsrs	r3, r3, #4
 8004538:	009a      	lsls	r2, r3, #2
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a3c      	ldr	r2, [pc, #240]	; (8004634 <HAL_DMA_Init+0x14c>)
 8004542:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2202      	movs	r2, #2
 8004548:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800455a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800455e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004568:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004574:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004580:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	4313      	orrs	r3, r2
 800458c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 fa76 	bl	8004a88 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045a4:	d102      	bne.n	80045ac <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685a      	ldr	r2, [r3, #4]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045b4:	b2d2      	uxtb	r2, r2
 80045b6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80045c0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d010      	beq.n	80045ec <HAL_DMA_Init+0x104>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	2b04      	cmp	r3, #4
 80045d0:	d80c      	bhi.n	80045ec <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 fa96 	bl	8004b04 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045dc:	2200      	movs	r2, #0
 80045de:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80045e8:	605a      	str	r2, [r3, #4]
 80045ea:	e008      	b.n	80045fe <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3710      	adds	r7, #16
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	40020407 	.word	0x40020407
 8004624:	bffdfff8 	.word	0xbffdfff8
 8004628:	cccccccd 	.word	0xcccccccd
 800462c:	40020000 	.word	0x40020000
 8004630:	bffdfbf8 	.word	0xbffdfbf8
 8004634:	40020400 	.word	0x40020400

08004638 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b086      	sub	sp, #24
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
 8004644:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004646:	2300      	movs	r3, #0
 8004648:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004650:	2b01      	cmp	r3, #1
 8004652:	d101      	bne.n	8004658 <HAL_DMA_Start_IT+0x20>
 8004654:	2302      	movs	r3, #2
 8004656:	e066      	b.n	8004726 <HAL_DMA_Start_IT+0xee>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004666:	b2db      	uxtb	r3, r3
 8004668:	2b01      	cmp	r3, #1
 800466a:	d155      	bne.n	8004718 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2202      	movs	r2, #2
 8004670:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2200      	movs	r2, #0
 8004678:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f022 0201 	bic.w	r2, r2, #1
 8004688:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	68b9      	ldr	r1, [r7, #8]
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f000 f9bb 	bl	8004a0c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469a:	2b00      	cmp	r3, #0
 800469c:	d008      	beq.n	80046b0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f042 020e 	orr.w	r2, r2, #14
 80046ac:	601a      	str	r2, [r3, #0]
 80046ae:	e00f      	b.n	80046d0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f022 0204 	bic.w	r2, r2, #4
 80046be:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f042 020a 	orr.w	r2, r2, #10
 80046ce:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d007      	beq.n	80046ee <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046ec:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d007      	beq.n	8004706 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004700:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004704:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f042 0201 	orr.w	r2, r2, #1
 8004714:	601a      	str	r2, [r3, #0]
 8004716:	e005      	b.n	8004724 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004720:	2302      	movs	r3, #2
 8004722:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004724:	7dfb      	ldrb	r3, [r7, #23]
}
 8004726:	4618      	mov	r0, r3
 8004728:	3718      	adds	r7, #24
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800472e:	b480      	push	{r7}
 8004730:	b085      	sub	sp, #20
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004736:	2300      	movs	r3, #0
 8004738:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b02      	cmp	r3, #2
 8004744:	d005      	beq.n	8004752 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2204      	movs	r2, #4
 800474a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	73fb      	strb	r3, [r7, #15]
 8004750:	e037      	b.n	80047c2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f022 020e 	bic.w	r2, r2, #14
 8004760:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800476c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004770:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f022 0201 	bic.w	r2, r2, #1
 8004780:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004786:	f003 021f 	and.w	r2, r3, #31
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478e:	2101      	movs	r1, #1
 8004790:	fa01 f202 	lsl.w	r2, r1, r2
 8004794:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800479e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00c      	beq.n	80047c2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047b6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80047c0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80047d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3714      	adds	r7, #20
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047e8:	2300      	movs	r3, #0
 80047ea:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d00d      	beq.n	8004814 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2204      	movs	r2, #4
 80047fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2201      	movs	r2, #1
 8004802:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	73fb      	strb	r3, [r7, #15]
 8004812:	e047      	b.n	80048a4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f022 020e 	bic.w	r2, r2, #14
 8004822:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f022 0201 	bic.w	r2, r2, #1
 8004832:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800483e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004842:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004848:	f003 021f 	and.w	r2, r3, #31
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004850:	2101      	movs	r1, #1
 8004852:	fa01 f202 	lsl.w	r2, r1, r2
 8004856:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004860:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00c      	beq.n	8004884 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004874:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004878:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004882:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004898:	2b00      	cmp	r3, #0
 800489a:	d003      	beq.n	80048a4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	4798      	blx	r3
    }
  }
  return status;
 80048a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3710      	adds	r7, #16
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}

080048ae <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80048ae:	b580      	push	{r7, lr}
 80048b0:	b084      	sub	sp, #16
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ca:	f003 031f 	and.w	r3, r3, #31
 80048ce:	2204      	movs	r2, #4
 80048d0:	409a      	lsls	r2, r3
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	4013      	ands	r3, r2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d026      	beq.n	8004928 <HAL_DMA_IRQHandler+0x7a>
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	f003 0304 	and.w	r3, r3, #4
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d021      	beq.n	8004928 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0320 	and.w	r3, r3, #32
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d107      	bne.n	8004902 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f022 0204 	bic.w	r2, r2, #4
 8004900:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004906:	f003 021f 	and.w	r2, r3, #31
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490e:	2104      	movs	r1, #4
 8004910:	fa01 f202 	lsl.w	r2, r1, r2
 8004914:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491a:	2b00      	cmp	r3, #0
 800491c:	d071      	beq.n	8004a02 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004926:	e06c      	b.n	8004a02 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800492c:	f003 031f 	and.w	r3, r3, #31
 8004930:	2202      	movs	r2, #2
 8004932:	409a      	lsls	r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	4013      	ands	r3, r2
 8004938:	2b00      	cmp	r3, #0
 800493a:	d02e      	beq.n	800499a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d029      	beq.n	800499a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0320 	and.w	r3, r3, #32
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10b      	bne.n	800496c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f022 020a 	bic.w	r2, r2, #10
 8004962:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004970:	f003 021f 	and.w	r2, r3, #31
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004978:	2102      	movs	r1, #2
 800497a:	fa01 f202 	lsl.w	r2, r1, r2
 800497e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498c:	2b00      	cmp	r3, #0
 800498e:	d038      	beq.n	8004a02 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004998:	e033      	b.n	8004a02 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800499e:	f003 031f 	and.w	r3, r3, #31
 80049a2:	2208      	movs	r2, #8
 80049a4:	409a      	lsls	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	4013      	ands	r3, r2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d02a      	beq.n	8004a04 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	f003 0308 	and.w	r3, r3, #8
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d025      	beq.n	8004a04 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f022 020e 	bic.w	r2, r2, #14
 80049c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049cc:	f003 021f 	and.w	r2, r3, #31
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d4:	2101      	movs	r1, #1
 80049d6:	fa01 f202 	lsl.w	r2, r1, r2
 80049da:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d004      	beq.n	8004a04 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004a02:	bf00      	nop
 8004a04:	bf00      	nop
}
 8004a06:	3710      	adds	r7, #16
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
 8004a18:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004a22:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d004      	beq.n	8004a36 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004a34:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a3a:	f003 021f 	and.w	r2, r3, #31
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	2101      	movs	r1, #1
 8004a44:	fa01 f202 	lsl.w	r2, r1, r2
 8004a48:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	683a      	ldr	r2, [r7, #0]
 8004a50:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	2b10      	cmp	r3, #16
 8004a58:	d108      	bne.n	8004a6c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68ba      	ldr	r2, [r7, #8]
 8004a68:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004a6a:	e007      	b.n	8004a7c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68ba      	ldr	r2, [r7, #8]
 8004a72:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	60da      	str	r2, [r3, #12]
}
 8004a7c:	bf00      	nop
 8004a7e:	3714      	adds	r7, #20
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b087      	sub	sp, #28
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	461a      	mov	r2, r3
 8004a96:	4b16      	ldr	r3, [pc, #88]	; (8004af0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d802      	bhi.n	8004aa2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004a9c:	4b15      	ldr	r3, [pc, #84]	; (8004af4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004a9e:	617b      	str	r3, [r7, #20]
 8004aa0:	e001      	b.n	8004aa6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004aa2:	4b15      	ldr	r3, [pc, #84]	; (8004af8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004aa4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	3b08      	subs	r3, #8
 8004ab2:	4a12      	ldr	r2, [pc, #72]	; (8004afc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab8:	091b      	lsrs	r3, r3, #4
 8004aba:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac0:	089b      	lsrs	r3, r3, #2
 8004ac2:	009a      	lsls	r2, r3, #2
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	461a      	mov	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a0b      	ldr	r2, [pc, #44]	; (8004b00 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004ad2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f003 031f 	and.w	r3, r3, #31
 8004ada:	2201      	movs	r2, #1
 8004adc:	409a      	lsls	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004ae2:	bf00      	nop
 8004ae4:	371c      	adds	r7, #28
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	40020407 	.word	0x40020407
 8004af4:	40020800 	.word	0x40020800
 8004af8:	40020820 	.word	0x40020820
 8004afc:	cccccccd 	.word	0xcccccccd
 8004b00:	40020880 	.word	0x40020880

08004b04 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	4b0b      	ldr	r3, [pc, #44]	; (8004b44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004b18:	4413      	add	r3, r2
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a08      	ldr	r2, [pc, #32]	; (8004b48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004b26:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	f003 031f 	and.w	r3, r3, #31
 8004b30:	2201      	movs	r2, #1
 8004b32:	409a      	lsls	r2, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004b38:	bf00      	nop
 8004b3a:	3714      	adds	r7, #20
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr
 8004b44:	1000823f 	.word	0x1000823f
 8004b48:	40020940 	.word	0x40020940

08004b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b087      	sub	sp, #28
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004b56:	2300      	movs	r3, #0
 8004b58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004b5a:	e15a      	b.n	8004e12 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	2101      	movs	r1, #1
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	fa01 f303 	lsl.w	r3, r1, r3
 8004b68:	4013      	ands	r3, r2
 8004b6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	f000 814c 	beq.w	8004e0c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d00b      	beq.n	8004b94 <HAL_GPIO_Init+0x48>
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d007      	beq.n	8004b94 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b88:	2b11      	cmp	r3, #17
 8004b8a:	d003      	beq.n	8004b94 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	2b12      	cmp	r3, #18
 8004b92:	d130      	bne.n	8004bf6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	005b      	lsls	r3, r3, #1
 8004b9e:	2203      	movs	r2, #3
 8004ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba4:	43db      	mvns	r3, r3
 8004ba6:	693a      	ldr	r2, [r7, #16]
 8004ba8:	4013      	ands	r3, r2
 8004baa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	68da      	ldr	r2, [r3, #12]
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	005b      	lsls	r3, r3, #1
 8004bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb8:	693a      	ldr	r2, [r7, #16]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	693a      	ldr	r2, [r7, #16]
 8004bc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004bca:	2201      	movs	r2, #1
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd2:	43db      	mvns	r3, r3
 8004bd4:	693a      	ldr	r2, [r7, #16]
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	091b      	lsrs	r3, r3, #4
 8004be0:	f003 0201 	and.w	r2, r3, #1
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bea:	693a      	ldr	r2, [r7, #16]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	693a      	ldr	r2, [r7, #16]
 8004bf4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	005b      	lsls	r3, r3, #1
 8004c00:	2203      	movs	r2, #3
 8004c02:	fa02 f303 	lsl.w	r3, r2, r3
 8004c06:	43db      	mvns	r3, r3
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	689a      	ldr	r2, [r3, #8]
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	005b      	lsls	r3, r3, #1
 8004c16:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d003      	beq.n	8004c36 <HAL_GPIO_Init+0xea>
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	2b12      	cmp	r3, #18
 8004c34:	d123      	bne.n	8004c7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	08da      	lsrs	r2, r3, #3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	3208      	adds	r2, #8
 8004c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	f003 0307 	and.w	r3, r3, #7
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	220f      	movs	r2, #15
 8004c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c52:	43db      	mvns	r3, r3
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	4013      	ands	r3, r2
 8004c58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	691a      	ldr	r2, [r3, #16]
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	f003 0307 	and.w	r3, r3, #7
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	08da      	lsrs	r2, r3, #3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	3208      	adds	r2, #8
 8004c78:	6939      	ldr	r1, [r7, #16]
 8004c7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	005b      	lsls	r3, r3, #1
 8004c88:	2203      	movs	r2, #3
 8004c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8e:	43db      	mvns	r3, r3
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	4013      	ands	r3, r2
 8004c94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f003 0203 	and.w	r2, r3, #3
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	005b      	lsls	r3, r3, #1
 8004ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	693a      	ldr	r2, [r7, #16]
 8004cb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	f000 80a6 	beq.w	8004e0c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cc0:	4b5b      	ldr	r3, [pc, #364]	; (8004e30 <HAL_GPIO_Init+0x2e4>)
 8004cc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cc4:	4a5a      	ldr	r2, [pc, #360]	; (8004e30 <HAL_GPIO_Init+0x2e4>)
 8004cc6:	f043 0301 	orr.w	r3, r3, #1
 8004cca:	6613      	str	r3, [r2, #96]	; 0x60
 8004ccc:	4b58      	ldr	r3, [pc, #352]	; (8004e30 <HAL_GPIO_Init+0x2e4>)
 8004cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cd0:	f003 0301 	and.w	r3, r3, #1
 8004cd4:	60bb      	str	r3, [r7, #8]
 8004cd6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004cd8:	4a56      	ldr	r2, [pc, #344]	; (8004e34 <HAL_GPIO_Init+0x2e8>)
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	089b      	lsrs	r3, r3, #2
 8004cde:	3302      	adds	r3, #2
 8004ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	f003 0303 	and.w	r3, r3, #3
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	220f      	movs	r2, #15
 8004cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf4:	43db      	mvns	r3, r3
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004d02:	d01f      	beq.n	8004d44 <HAL_GPIO_Init+0x1f8>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a4c      	ldr	r2, [pc, #304]	; (8004e38 <HAL_GPIO_Init+0x2ec>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d019      	beq.n	8004d40 <HAL_GPIO_Init+0x1f4>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a4b      	ldr	r2, [pc, #300]	; (8004e3c <HAL_GPIO_Init+0x2f0>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d013      	beq.n	8004d3c <HAL_GPIO_Init+0x1f0>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a4a      	ldr	r2, [pc, #296]	; (8004e40 <HAL_GPIO_Init+0x2f4>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d00d      	beq.n	8004d38 <HAL_GPIO_Init+0x1ec>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a49      	ldr	r2, [pc, #292]	; (8004e44 <HAL_GPIO_Init+0x2f8>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d007      	beq.n	8004d34 <HAL_GPIO_Init+0x1e8>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a48      	ldr	r2, [pc, #288]	; (8004e48 <HAL_GPIO_Init+0x2fc>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d101      	bne.n	8004d30 <HAL_GPIO_Init+0x1e4>
 8004d2c:	2305      	movs	r3, #5
 8004d2e:	e00a      	b.n	8004d46 <HAL_GPIO_Init+0x1fa>
 8004d30:	2306      	movs	r3, #6
 8004d32:	e008      	b.n	8004d46 <HAL_GPIO_Init+0x1fa>
 8004d34:	2304      	movs	r3, #4
 8004d36:	e006      	b.n	8004d46 <HAL_GPIO_Init+0x1fa>
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e004      	b.n	8004d46 <HAL_GPIO_Init+0x1fa>
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	e002      	b.n	8004d46 <HAL_GPIO_Init+0x1fa>
 8004d40:	2301      	movs	r3, #1
 8004d42:	e000      	b.n	8004d46 <HAL_GPIO_Init+0x1fa>
 8004d44:	2300      	movs	r3, #0
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	f002 0203 	and.w	r2, r2, #3
 8004d4c:	0092      	lsls	r2, r2, #2
 8004d4e:	4093      	lsls	r3, r2
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d56:	4937      	ldr	r1, [pc, #220]	; (8004e34 <HAL_GPIO_Init+0x2e8>)
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	089b      	lsrs	r3, r3, #2
 8004d5c:	3302      	adds	r3, #2
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004d64:	4b39      	ldr	r3, [pc, #228]	; (8004e4c <HAL_GPIO_Init+0x300>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	43db      	mvns	r3, r3
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	4013      	ands	r3, r2
 8004d72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d003      	beq.n	8004d88 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004d88:	4a30      	ldr	r2, [pc, #192]	; (8004e4c <HAL_GPIO_Init+0x300>)
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004d8e:	4b2f      	ldr	r3, [pc, #188]	; (8004e4c <HAL_GPIO_Init+0x300>)
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	43db      	mvns	r3, r3
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d003      	beq.n	8004db2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004db2:	4a26      	ldr	r2, [pc, #152]	; (8004e4c <HAL_GPIO_Init+0x300>)
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004db8:	4b24      	ldr	r3, [pc, #144]	; (8004e4c <HAL_GPIO_Init+0x300>)
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	43db      	mvns	r3, r3
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d003      	beq.n	8004ddc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004ddc:	4a1b      	ldr	r2, [pc, #108]	; (8004e4c <HAL_GPIO_Init+0x300>)
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004de2:	4b1a      	ldr	r3, [pc, #104]	; (8004e4c <HAL_GPIO_Init+0x300>)
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	43db      	mvns	r3, r3
 8004dec:	693a      	ldr	r2, [r7, #16]
 8004dee:	4013      	ands	r3, r2
 8004df0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d003      	beq.n	8004e06 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004dfe:	693a      	ldr	r2, [r7, #16]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004e06:	4a11      	ldr	r2, [pc, #68]	; (8004e4c <HAL_GPIO_Init+0x300>)
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	3301      	adds	r3, #1
 8004e10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	fa22 f303 	lsr.w	r3, r2, r3
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f47f ae9d 	bne.w	8004b5c <HAL_GPIO_Init+0x10>
  }
}
 8004e22:	bf00      	nop
 8004e24:	bf00      	nop
 8004e26:	371c      	adds	r7, #28
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr
 8004e30:	40021000 	.word	0x40021000
 8004e34:	40010000 	.word	0x40010000
 8004e38:	48000400 	.word	0x48000400
 8004e3c:	48000800 	.word	0x48000800
 8004e40:	48000c00 	.word	0x48000c00
 8004e44:	48001000 	.word	0x48001000
 8004e48:	48001400 	.word	0x48001400
 8004e4c:	40010400 	.word	0x40010400

08004e50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	460b      	mov	r3, r1
 8004e5a:	807b      	strh	r3, [r7, #2]
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e60:	787b      	ldrb	r3, [r7, #1]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d003      	beq.n	8004e6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e66:	887a      	ldrh	r2, [r7, #2]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004e6c:	e002      	b.n	8004e74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004e6e:	887a      	ldrh	r2, [r7, #2]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004e74:	bf00      	nop
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b086      	sub	sp, #24
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d101      	bne.n	8004e92 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e0be      	b.n	8005010 <HAL_HRTIM_Init+0x190>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2202      	movs	r2, #2
 8004e96:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  hhrtim->hdmaTimerF = (DMA_HandleTypeDef *)NULL;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f003 0301 	and.w	r3, r3, #1
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d02e      	beq.n	8004f3c <HAL_HRTIM_Init+0xbc>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a4d      	ldr	r2, [pc, #308]	; (8005018 <HAL_HRTIM_Init+0x198>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d10b      	bne.n	8004f00 <HAL_HRTIM_Init+0x80>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8004ee8:	4b4c      	ldr	r3, [pc, #304]	; (800501c <HAL_HRTIM_Init+0x19c>)
 8004eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eec:	4a4b      	ldr	r2, [pc, #300]	; (800501c <HAL_HRTIM_Init+0x19c>)
 8004eee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ef2:	6613      	str	r3, [r2, #96]	; 0x60
 8004ef4:	4b49      	ldr	r3, [pc, #292]	; (800501c <HAL_HRTIM_Init+0x19c>)
 8004ef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ef8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004efc:	60fb      	str	r3, [r7, #12]
 8004efe:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004f0e:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004f24:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004f2e:	693a      	ldr	r2, [r7, #16]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	693a      	ldr	r2, [r7, #16]
 8004f3a:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f7fc fd39 	bl	80019b4 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f003 0302 	and.w	r3, r3, #2
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d012      	beq.n	8004f74 <HAL_HRTIM_Init+0xf4>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f5c:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8004f84:	2300      	movs	r3, #0
 8004f86:	75fb      	strb	r3, [r7, #23]
 8004f88:	e03e      	b.n	8005008 <HAL_HRTIM_Init+0x188>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8004f8a:	7dfa      	ldrb	r2, [r7, #23]
 8004f8c:	6879      	ldr	r1, [r7, #4]
 8004f8e:	4613      	mov	r3, r2
 8004f90:	00db      	lsls	r3, r3, #3
 8004f92:	1a9b      	subs	r3, r3, r2
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	440b      	add	r3, r1
 8004f98:	3318      	adds	r3, #24
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8004f9e:	7dfa      	ldrb	r2, [r7, #23]
 8004fa0:	6879      	ldr	r1, [r7, #4]
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	00db      	lsls	r3, r3, #3
 8004fa6:	1a9b      	subs	r3, r3, r2
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	440b      	add	r3, r1
 8004fac:	331c      	adds	r3, #28
 8004fae:	2200      	movs	r2, #0
 8004fb0:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8004fb2:	7dfa      	ldrb	r2, [r7, #23]
 8004fb4:	6879      	ldr	r1, [r7, #4]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	00db      	lsls	r3, r3, #3
 8004fba:	1a9b      	subs	r3, r3, r2
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	440b      	add	r3, r1
 8004fc0:	3320      	adds	r3, #32
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8004fc6:	7dfa      	ldrb	r2, [r7, #23]
 8004fc8:	6879      	ldr	r1, [r7, #4]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	00db      	lsls	r3, r3, #3
 8004fce:	1a9b      	subs	r3, r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	440b      	add	r3, r1
 8004fd4:	3324      	adds	r3, #36	; 0x24
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8004fda:	7dfa      	ldrb	r2, [r7, #23]
 8004fdc:	6879      	ldr	r1, [r7, #4]
 8004fde:	4613      	mov	r3, r2
 8004fe0:	00db      	lsls	r3, r3, #3
 8004fe2:	1a9b      	subs	r3, r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	440b      	add	r3, r1
 8004fe8:	3328      	adds	r3, #40	; 0x28
 8004fea:	2200      	movs	r2, #0
 8004fec:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8004fee:	7dfa      	ldrb	r2, [r7, #23]
 8004ff0:	6879      	ldr	r1, [r7, #4]
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	00db      	lsls	r3, r3, #3
 8004ff6:	1a9b      	subs	r3, r3, r2
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	440b      	add	r3, r1
 8004ffc:	3330      	adds	r3, #48	; 0x30
 8004ffe:	2200      	movs	r2, #0
 8005000:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8005002:	7dfb      	ldrb	r3, [r7, #23]
 8005004:	3301      	adds	r3, #1
 8005006:	75fb      	strb	r3, [r7, #23]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8005008:	7dfb      	ldrb	r3, [r7, #23]
 800500a:	2b06      	cmp	r3, #6
 800500c:	d9bd      	bls.n	8004f8a <HAL_HRTIM_Init+0x10a>
  }

  return HAL_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3718      	adds	r7, #24
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}
 8005018:	40016800 	.word	0x40016800
 800501c:	40021000 	.word	0x40021000

08005020 <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t CalibrationRate)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8005030:	2b01      	cmp	r3, #1
 8005032:	d101      	bne.n	8005038 <HAL_HRTIM_DLLCalibrationStart+0x18>
 8005034:	2302      	movs	r3, #2
 8005036:	e045      	b.n	80050c4 <HAL_HRTIM_DLLCalibrationStart+0xa4>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2202      	movs	r2, #2
 8005044:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800504e:	d114      	bne.n	800507a <HAL_HRTIM_DLLCalibrationStart+0x5a>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f022 0202 	bic.w	r2, r2, #2
 8005060:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f042 0201 	orr.w	r2, r2, #1
 8005074:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
 8005078:	e01f      	b.n	80050ba <HAL_HRTIM_DLLCalibrationStart+0x9a>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f042 0202 	orr.w	r2, r2, #2
 800508a:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8005096:	f023 010c 	bic.w	r1, r3, #12
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	683a      	ldr	r2, [r7, #0]
 80050a0:	430a      	orrs	r2, r1
 80050a2:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f042 0201 	orr.w	r2, r2, #1
 80050b6:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t Timeout)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 80050da:	f7fd f8db 	bl	8002294 <HAL_GetTick>
 80050de:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 80050e0:	e014      	b.n	800510c <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e8:	d010      	beq.n	800510c <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0U))
 80050ea:	f7fd f8d3 	bl	8002294 <HAL_GetTick>
 80050ee:	4602      	mov	r2, r0
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	683a      	ldr	r2, [r7, #0]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d302      	bcc.n	8005100 <HAL_HRTIM_PollForDLLCalibration+0x30>
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d105      	bne.n	800510c <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2207      	movs	r2, #7
 8005104:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
        return HAL_TIMEOUT;
 8005108:	2303      	movs	r3, #3
 800510a:	e011      	b.n	8005130 <HAL_HRTIM_PollForDLLCalibration+0x60>
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8005114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800511c:	d1e1      	bne.n	80050e2 <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2201      	movs	r2, #1
 8005122:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	3710      	adds	r7, #16
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800514a:	b2db      	uxtb	r3, r3
 800514c:	2b02      	cmp	r3, #2
 800514e:	d101      	bne.n	8005154 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8005150:	2302      	movs	r3, #2
 8005152:	e015      	b.n	8005180 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2202      	movs	r2, #2
 8005158:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	2b06      	cmp	r3, #6
 8005160:	d104      	bne.n	800516c <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8005162:	6879      	ldr	r1, [r7, #4]
 8005164:	68f8      	ldr	r0, [r7, #12]
 8005166:	f000 fe62 	bl	8005e2e <HRTIM_MasterBase_Config>
 800516a:	e004      	b.n	8005176 <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	68b9      	ldr	r1, [r7, #8]
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	f000 fe8b 	bl	8005e8c <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2201      	movs	r2, #1
 800517a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  return HAL_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	3710      	adds	r7, #16
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <HAL_HRTIM_ADCTriggerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_ADCTriggerConfig(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t ADCTrigger,
                                             HRTIM_ADCTriggerCfgTypeDef* pADCTriggerCfg)
{
 8005188:	b480      	push	{r7}
 800518a:	b087      	sub	sp, #28
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]

  /* Check parameters */
  assert_param(IS_HRTIM_ADCTRIGGER(ADCTrigger));
  assert_param(IS_HRTIM_ADCTRIGGERUPDATE(pADCTriggerCfg->UpdateSource));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800519a:	b2db      	uxtb	r3, r3
 800519c:	2b02      	cmp	r3, #2
 800519e:	d101      	bne.n	80051a4 <HAL_HRTIM_ADCTriggerConfig+0x1c>
  {
     return HAL_BUSY;
 80051a0:	2302      	movs	r3, #2
 80051a2:	e1d7      	b.n	8005554 <HAL_HRTIM_ADCTriggerConfig+0x3cc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d101      	bne.n	80051b2 <HAL_HRTIM_ADCTriggerConfig+0x2a>
 80051ae:	2302      	movs	r3, #2
 80051b0:	e1d0      	b.n	8005554 <HAL_HRTIM_ADCTriggerConfig+0x3cc>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2201      	movs	r2, #1
 80051b6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2202      	movs	r2, #2
 80051be:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Set the ADC trigger update source */
  hrtim_cr1 = hhrtim->Instance->sCommonRegs.CR1;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80051ca:	617b      	str	r3, [r7, #20]
  hrtim_adcur = hhrtim->Instance->sCommonRegs.ADCUR;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 80051d4:	613b      	str	r3, [r7, #16]

  switch (ADCTrigger)
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051dc:	f000 816d 	beq.w	80054ba <HAL_HRTIM_ADCTriggerConfig+0x332>
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051e6:	f200 818d 	bhi.w	8005504 <HAL_HRTIM_ADCTriggerConfig+0x37c>
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051f0:	f000 813f 	beq.w	8005472 <HAL_HRTIM_ADCTriggerConfig+0x2ea>
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051fa:	f200 8183 	bhi.w	8005504 <HAL_HRTIM_ADCTriggerConfig+0x37c>
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	2b80      	cmp	r3, #128	; 0x80
 8005202:	f000 8111 	beq.w	8005428 <HAL_HRTIM_ADCTriggerConfig+0x2a0>
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	2b80      	cmp	r3, #128	; 0x80
 800520a:	f200 817b 	bhi.w	8005504 <HAL_HRTIM_ADCTriggerConfig+0x37c>
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	2b20      	cmp	r3, #32
 8005212:	d84b      	bhi.n	80052ac <HAL_HRTIM_ADCTriggerConfig+0x124>
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	2b00      	cmp	r3, #0
 8005218:	f000 8174 	beq.w	8005504 <HAL_HRTIM_ADCTriggerConfig+0x37c>
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	3b01      	subs	r3, #1
 8005220:	2b1f      	cmp	r3, #31
 8005222:	f200 816f 	bhi.w	8005504 <HAL_HRTIM_ADCTriggerConfig+0x37c>
 8005226:	a201      	add	r2, pc, #4	; (adr r2, 800522c <HAL_HRTIM_ADCTriggerConfig+0xa4>)
 8005228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800522c:	080052b7 	.word	0x080052b7
 8005230:	080052db 	.word	0x080052db
 8005234:	08005505 	.word	0x08005505
 8005238:	08005301 	.word	0x08005301
 800523c:	08005505 	.word	0x08005505
 8005240:	08005505 	.word	0x08005505
 8005244:	08005505 	.word	0x08005505
 8005248:	08005327 	.word	0x08005327
 800524c:	08005505 	.word	0x08005505
 8005250:	08005505 	.word	0x08005505
 8005254:	08005505 	.word	0x08005505
 8005258:	08005505 	.word	0x08005505
 800525c:	08005505 	.word	0x08005505
 8005260:	08005505 	.word	0x08005505
 8005264:	08005505 	.word	0x08005505
 8005268:	0800534d 	.word	0x0800534d
 800526c:	08005505 	.word	0x08005505
 8005270:	08005505 	.word	0x08005505
 8005274:	08005505 	.word	0x08005505
 8005278:	08005505 	.word	0x08005505
 800527c:	08005505 	.word	0x08005505
 8005280:	08005505 	.word	0x08005505
 8005284:	08005505 	.word	0x08005505
 8005288:	08005505 	.word	0x08005505
 800528c:	08005505 	.word	0x08005505
 8005290:	08005505 	.word	0x08005505
 8005294:	08005505 	.word	0x08005505
 8005298:	08005505 	.word	0x08005505
 800529c:	08005505 	.word	0x08005505
 80052a0:	08005505 	.word	0x08005505
 80052a4:	08005505 	.word	0x08005505
 80052a8:	08005395 	.word	0x08005395
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	2b40      	cmp	r3, #64	; 0x40
 80052b0:	f000 8095 	beq.w	80053de <HAL_HRTIM_ADCTriggerConfig+0x256>
 80052b4:	e126      	b.n	8005504 <HAL_HRTIM_ADCTriggerConfig+0x37c>
  {
  case HRTIM_ADCTRIGGER_1:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC1USRC);
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80052bc:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= (pADCTriggerCfg->UpdateSource & HRTIM_CR1_ADC1USRC);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 1 source */
      hhrtim->Instance->sCommonRegs.ADC1R = pADCTriggerCfg->Trigger;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	6852      	ldr	r2, [r2, #4]
 80052d4:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
      break;
 80052d8:	e11d      	b.n	8005516 <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_2:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC2USRC);
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 80052e0:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 3U) & HRTIM_CR1_ADC2USRC);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	00db      	lsls	r3, r3, #3
 80052e8:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 80052ec:	697a      	ldr	r2, [r7, #20]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 2 source */
      hhrtim->Instance->sCommonRegs.ADC2R = pADCTriggerCfg->Trigger;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	6852      	ldr	r2, [r2, #4]
 80052fa:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
      break;
 80052fe:	e10a      	b.n	8005516 <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_3:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC3USRC);
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8005306:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 6U) & HRTIM_CR1_ADC3USRC);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	019b      	lsls	r3, r3, #6
 800530e:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	4313      	orrs	r3, r2
 8005316:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 3 source */
      hhrtim->Instance->sCommonRegs.ADC3R = pADCTriggerCfg->Trigger;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	6852      	ldr	r2, [r2, #4]
 8005320:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
      break;
 8005324:	e0f7      	b.n	8005516 <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_4:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC4USRC);
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 800532c:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 9U) & HRTIM_CR1_ADC4USRC);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	025b      	lsls	r3, r3, #9
 8005334:	f003 6360 	and.w	r3, r3, #234881024	; 0xe000000
 8005338:	697a      	ldr	r2, [r7, #20]
 800533a:	4313      	orrs	r3, r2
 800533c:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 4 source */
      hhrtim->Instance->sCommonRegs.ADC4R = pADCTriggerCfg->Trigger;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	6852      	ldr	r2, [r2, #4]
 8005346:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
      break;
 800534a:	e0e4      	b.n	8005516 <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_5:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD5USRC);
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	f023 0307 	bic.w	r3, r3, #7
 8005352:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 16U) & HRTIM_ADCUR_AD5USRC);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	0c1b      	lsrs	r3, r3, #16
 800535a:	f003 0307 	and.w	r3, r3, #7
 800535e:	693a      	ldr	r2, [r7, #16]
 8005360:	4313      	orrs	r3, r2
 8005362:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 5 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD5TRG);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	; 0x3f8
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f022 021f 	bic.w	r2, r2, #31
 8005374:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD5TRG_Pos) & HRTIM_ADCER_AD5TRG);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	; 0x3f8
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	f003 021f 	and.w	r2, r3, #31
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	430a      	orrs	r2, r1
 800538e:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      break;
 8005392:	e0c0      	b.n	8005516 <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_6:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD6USRC);
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800539a:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 12U) & HRTIM_ADCUR_AD6USRC);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	0b1b      	lsrs	r3, r3, #12
 80053a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80053a6:	693a      	ldr	r2, [r7, #16]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 6 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD6TRG);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	; 0x3f8
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f422 7278 	bic.w	r2, r2, #992	; 0x3e0
 80053bc:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD6TRG_Pos) & HRTIM_ADCER_AD6TRG);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	; 0x3f8
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	015b      	lsls	r3, r3, #5
 80053ce:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	430a      	orrs	r2, r1
 80053d8:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      break;
 80053dc:	e09b      	b.n	8005516 <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_7:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD7USRC);
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80053e4:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 8U) & HRTIM_ADCUR_AD7USRC);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	0a1b      	lsrs	r3, r3, #8
 80053ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80053f0:	693a      	ldr	r2, [r7, #16]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 7 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD7TRG);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	; 0x3f8
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8005406:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD7TRG_Pos) & HRTIM_ADCER_AD7TRG);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	; 0x3f8
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	029b      	lsls	r3, r3, #10
 8005418:	f403 42f8 	and.w	r2, r3, #31744	; 0x7c00
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	430a      	orrs	r2, r1
 8005422:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      break;
 8005426:	e076      	b.n	8005516 <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_8:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD8USRC);
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800542e:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 4U) & HRTIM_ADCUR_AD8USRC);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	091b      	lsrs	r3, r3, #4
 8005436:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	4313      	orrs	r3, r2
 800543e:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 8 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD8TRG);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	; 0x3f8
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8005450:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD8TRG_Pos) & HRTIM_ADCER_AD8TRG);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	; 0x3f8
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	041b      	lsls	r3, r3, #16
 8005462:	f403 12f8 	and.w	r2, r3, #2031616	; 0x1f0000
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	430a      	orrs	r2, r1
 800546c:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      break;
 8005470:	e051      	b.n	8005516 <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_9:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD9USRC);
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8005478:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource) & HRTIM_ADCUR_AD9USRC);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	4313      	orrs	r3, r2
 8005486:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 9 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD9TRG);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	; 0x3f8
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f022 7278 	bic.w	r2, r2, #65011712	; 0x3e00000
 8005498:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD9TRG_Pos) & HRTIM_ADCER_AD9TRG);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	; 0x3f8
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	055b      	lsls	r3, r3, #21
 80054aa:	f003 7278 	and.w	r2, r3, #65011712	; 0x3e00000
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	430a      	orrs	r2, r1
 80054b4:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      break;
 80054b8:	e02d      	b.n	8005516 <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_10:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD10USRC);
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80054c0:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource << 4U) & HRTIM_ADCUR_AD10USRC);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	011b      	lsls	r3, r3, #4
 80054c8:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
 80054cc:	693a      	ldr	r2, [r7, #16]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 10 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD10TRG);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	; 0x3f8
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f022 42f8 	bic.w	r2, r2, #2080374784	; 0x7c000000
 80054e2:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD10TRG_Pos) & HRTIM_ADCER_AD10TRG);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	; 0x3f8
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	069b      	lsls	r3, r3, #26
 80054f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	430a      	orrs	r2, r1
 80054fe:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      break;
 8005502:	e008      	b.n	8005516 <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2207      	movs	r2, #7
 8005508:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 8005514:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800551c:	b2db      	uxtb	r3, r3
 800551e:	2b07      	cmp	r3, #7
 8005520:	d101      	bne.n	8005526 <HAL_HRTIM_ADCTriggerConfig+0x39e>
  {
     return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e016      	b.n	8005554 <HAL_HRTIM_ADCTriggerConfig+0x3cc>
  }

  /* Update the HRTIM registers */
  if (ADCTrigger < HRTIM_ADCTRIGGER_5)
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	2b0f      	cmp	r3, #15
 800552a:	d805      	bhi.n	8005538 <HAL_HRTIM_ADCTriggerConfig+0x3b0>
  {
   hhrtim->Instance->sCommonRegs.CR1 = hrtim_cr1;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	697a      	ldr	r2, [r7, #20]
 8005532:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
 8005536:	e004      	b.n	8005542 <HAL_HRTIM_ADCTriggerConfig+0x3ba>
  }
  else
  {
   hhrtim->Instance->sCommonRegs.ADCUR = hrtim_adcur;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	693a      	ldr	r2, [r7, #16]
 800553e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2201      	movs	r2, #1
 8005546:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8005552:	2300      	movs	r3, #0
}
 8005554:	4618      	mov	r0, r3
 8005556:	371c      	adds	r7, #28
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <HAL_HRTIM_ADCPostScalerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_ADCPostScalerConfig(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t ADCTrigger,
                                             uint32_t Postscaler)
{
 8005560:	b480      	push	{r7}
 8005562:	b085      	sub	sp, #20
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
  /* Check parameters */
  assert_param(IS_HRTIM_ADCTRIGGER(ADCTrigger));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8005572:	b2db      	uxtb	r3, r3
 8005574:	2b02      	cmp	r3, #2
 8005576:	d101      	bne.n	800557c <HAL_HRTIM_ADCPostScalerConfig+0x1c>
  {
     return HAL_BUSY;
 8005578:	2302      	movs	r3, #2
 800557a:	e135      	b.n	80057e8 <HAL_HRTIM_ADCPostScalerConfig+0x288>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8005582:	2b01      	cmp	r3, #1
 8005584:	d101      	bne.n	800558a <HAL_HRTIM_ADCPostScalerConfig+0x2a>
 8005586:	2302      	movs	r3, #2
 8005588:	e12e      	b.n	80057e8 <HAL_HRTIM_ADCPostScalerConfig+0x288>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2201      	movs	r2, #1
 800558e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2202      	movs	r2, #2
 8005596:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  switch (ADCTrigger)
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055a0:	f000 80f8 	beq.w	8005794 <HAL_HRTIM_ADCPostScalerConfig+0x234>
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055aa:	f200 8103 	bhi.w	80057b4 <HAL_HRTIM_ADCPostScalerConfig+0x254>
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055b4:	f000 80de 	beq.w	8005774 <HAL_HRTIM_ADCPostScalerConfig+0x214>
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055be:	f200 80f9 	bhi.w	80057b4 <HAL_HRTIM_ADCPostScalerConfig+0x254>
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	2b80      	cmp	r3, #128	; 0x80
 80055c6:	f000 80c5 	beq.w	8005754 <HAL_HRTIM_ADCPostScalerConfig+0x1f4>
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	2b80      	cmp	r3, #128	; 0x80
 80055ce:	f200 80f1 	bhi.w	80057b4 <HAL_HRTIM_ADCPostScalerConfig+0x254>
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	2b20      	cmp	r3, #32
 80055d6:	d84b      	bhi.n	8005670 <HAL_HRTIM_ADCPostScalerConfig+0x110>
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	f000 80ea 	beq.w	80057b4 <HAL_HRTIM_ADCPostScalerConfig+0x254>
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	3b01      	subs	r3, #1
 80055e4:	2b1f      	cmp	r3, #31
 80055e6:	f200 80e5 	bhi.w	80057b4 <HAL_HRTIM_ADCPostScalerConfig+0x254>
 80055ea:	a201      	add	r2, pc, #4	; (adr r2, 80055f0 <HAL_HRTIM_ADCPostScalerConfig+0x90>)
 80055ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f0:	08005679 	.word	0x08005679
 80055f4:	08005697 	.word	0x08005697
 80055f8:	080057b5 	.word	0x080057b5
 80055fc:	080056b7 	.word	0x080056b7
 8005600:	080057b5 	.word	0x080057b5
 8005604:	080057b5 	.word	0x080057b5
 8005608:	080057b5 	.word	0x080057b5
 800560c:	080056d7 	.word	0x080056d7
 8005610:	080057b5 	.word	0x080057b5
 8005614:	080057b5 	.word	0x080057b5
 8005618:	080057b5 	.word	0x080057b5
 800561c:	080057b5 	.word	0x080057b5
 8005620:	080057b5 	.word	0x080057b5
 8005624:	080057b5 	.word	0x080057b5
 8005628:	080057b5 	.word	0x080057b5
 800562c:	080056f7 	.word	0x080056f7
 8005630:	080057b5 	.word	0x080057b5
 8005634:	080057b5 	.word	0x080057b5
 8005638:	080057b5 	.word	0x080057b5
 800563c:	080057b5 	.word	0x080057b5
 8005640:	080057b5 	.word	0x080057b5
 8005644:	080057b5 	.word	0x080057b5
 8005648:	080057b5 	.word	0x080057b5
 800564c:	080057b5 	.word	0x080057b5
 8005650:	080057b5 	.word	0x080057b5
 8005654:	080057b5 	.word	0x080057b5
 8005658:	080057b5 	.word	0x080057b5
 800565c:	080057b5 	.word	0x080057b5
 8005660:	080057b5 	.word	0x080057b5
 8005664:	080057b5 	.word	0x080057b5
 8005668:	080057b5 	.word	0x080057b5
 800566c:	08005717 	.word	0x08005717
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	2b40      	cmp	r3, #64	; 0x40
 8005674:	d05e      	beq.n	8005734 <HAL_HRTIM_ADCPostScalerConfig+0x1d4>
 8005676:	e09d      	b.n	80057b4 <HAL_HRTIM_ADCPostScalerConfig+0x254>
  {
  case HRTIM_ADCTRIGGER_1:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD1PSC, (Postscaler & HRTIM_ADCPS1_AD1PSC));
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8005680:	f023 011f 	bic.w	r1, r3, #31
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f003 021f 	and.w	r2, r3, #31
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	430a      	orrs	r2, r1
 8005690:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      break;
 8005694:	e097      	b.n	80057c6 <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_2:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD2PSC, ((Postscaler << HRTIM_ADCPS1_AD2PSC_Pos) & HRTIM_ADCPS1_AD2PSC));
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800569e:	f423 61f8 	bic.w	r1, r3, #1984	; 0x7c0
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	019b      	lsls	r3, r3, #6
 80056a6:	f403 62f8 	and.w	r2, r3, #1984	; 0x7c0
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	430a      	orrs	r2, r1
 80056b0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      break;
 80056b4:	e087      	b.n	80057c6 <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_3:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD3PSC, ((Postscaler << HRTIM_ADCPS1_AD3PSC_Pos) & HRTIM_ADCPS1_AD3PSC));
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80056be:	f423 31f8 	bic.w	r1, r3, #126976	; 0x1f000
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	031b      	lsls	r3, r3, #12
 80056c6:	f403 32f8 	and.w	r2, r3, #126976	; 0x1f000
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	430a      	orrs	r2, r1
 80056d0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      break;
 80056d4:	e077      	b.n	80057c6 <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_4:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD4PSC, ((Postscaler << HRTIM_ADCPS1_AD4PSC_Pos) & HRTIM_ADCPS1_AD4PSC));
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80056de:	f423 01f8 	bic.w	r1, r3, #8126464	; 0x7c0000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	049b      	lsls	r3, r3, #18
 80056e6:	f403 02f8 	and.w	r2, r3, #8126464	; 0x7c0000
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	430a      	orrs	r2, r1
 80056f0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      break;
 80056f4:	e067      	b.n	80057c6 <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_5:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD5PSC, ((Postscaler << HRTIM_ADCPS1_AD5PSC_Pos) & HRTIM_ADCPS1_AD5PSC));
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80056fe:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	061b      	lsls	r3, r3, #24
 8005706:	f003 52f8 	and.w	r2, r3, #520093696	; 0x1f000000
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	430a      	orrs	r2, r1
 8005710:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      break;
 8005714:	e057      	b.n	80057c6 <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_6:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD6PSC, ((Postscaler << HRTIM_ADCPS2_AD6PSC_Pos) & HRTIM_ADCPS2_AD6PSC));
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800571e:	f023 011f 	bic.w	r1, r3, #31
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f003 021f 	and.w	r2, r3, #31
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	430a      	orrs	r2, r1
 800572e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      break;
 8005732:	e048      	b.n	80057c6 <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_7:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD7PSC, ((Postscaler << HRTIM_ADCPS2_AD7PSC_Pos) & HRTIM_ADCPS2_AD7PSC));
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800573c:	f423 61f8 	bic.w	r1, r3, #1984	; 0x7c0
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	019b      	lsls	r3, r3, #6
 8005744:	f403 62f8 	and.w	r2, r3, #1984	; 0x7c0
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	430a      	orrs	r2, r1
 800574e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      break;
 8005752:	e038      	b.n	80057c6 <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_8:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD8PSC, ((Postscaler << HRTIM_ADCPS2_AD8PSC_Pos) & HRTIM_ADCPS2_AD8PSC));
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800575c:	f423 31f8 	bic.w	r1, r3, #126976	; 0x1f000
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	031b      	lsls	r3, r3, #12
 8005764:	f403 32f8 	and.w	r2, r3, #126976	; 0x1f000
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	430a      	orrs	r2, r1
 800576e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      break;
 8005772:	e028      	b.n	80057c6 <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_9:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD9PSC, ((Postscaler << HRTIM_ADCPS2_AD9PSC_Pos) & HRTIM_ADCPS2_AD9PSC));
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800577c:	f423 01f8 	bic.w	r1, r3, #8126464	; 0x7c0000
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	049b      	lsls	r3, r3, #18
 8005784:	f403 02f8 	and.w	r2, r3, #8126464	; 0x7c0000
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	430a      	orrs	r2, r1
 800578e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      break;
 8005792:	e018      	b.n	80057c6 <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_10:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD10PSC, ((Postscaler << HRTIM_ADCPS2_AD10PSC_Pos) & HRTIM_ADCPS2_AD10PSC));
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800579c:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	061b      	lsls	r3, r3, #24
 80057a4:	f003 52f8 	and.w	r2, r3, #520093696	; 0x1f000000
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	430a      	orrs	r2, r1
 80057ae:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      break;
 80057b2:	e008      	b.n	80057c6 <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2207      	movs	r2, #7
 80057b8:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 80057c4:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	2b07      	cmp	r3, #7
 80057d0:	d101      	bne.n	80057d6 <HAL_HRTIM_ADCPostScalerConfig+0x276>
  {
     return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e008      	b.n	80057e8 <HAL_HRTIM_ADCPostScalerConfig+0x288>
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2201      	movs	r2, #1
 80057da:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3714      	adds	r7, #20
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8005806:	b2db      	uxtb	r3, r3
 8005808:	2b02      	cmp	r3, #2
 800580a:	d101      	bne.n	8005810 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 800580c:	2302      	movs	r3, #2
 800580e:	e05f      	b.n	80058d0 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8005816:	2b01      	cmp	r3, #1
 8005818:	d101      	bne.n	800581e <HAL_HRTIM_WaveformTimerConfig+0x2a>
 800581a:	2302      	movs	r3, #2
 800581c:	e058      	b.n	80058d0 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2201      	movs	r2, #1
 8005822:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2202      	movs	r2, #2
 800582a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	2b06      	cmp	r3, #6
 8005832:	d104      	bne.n	800583e <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8005834:	6879      	ldr	r1, [r7, #4]
 8005836:	68f8      	ldr	r0, [r7, #12]
 8005838:	f000 fb68 	bl	8005f0c <HRTIM_MasterWaveform_Config>
 800583c:	e004      	b.n	8005848 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));
    assert_param(IS_HRTIM_TIMSYNCUPDATE(pTimerCfg->ReSyncUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	68b9      	ldr	r1, [r7, #8]
 8005842:	68f8      	ldr	r0, [r7, #12]
 8005844:	f000 fc00 	bl	8006048 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6819      	ldr	r1, [r3, #0]
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	68ba      	ldr	r2, [r7, #8]
 8005850:	4613      	mov	r3, r2
 8005852:	00db      	lsls	r3, r3, #3
 8005854:	1a9b      	subs	r3, r3, r2
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	4403      	add	r3, r0
 800585a:	3320      	adds	r3, #32
 800585c:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6859      	ldr	r1, [r3, #4]
 8005862:	68f8      	ldr	r0, [r7, #12]
 8005864:	68ba      	ldr	r2, [r7, #8]
 8005866:	4613      	mov	r3, r2
 8005868:	00db      	lsls	r3, r3, #3
 800586a:	1a9b      	subs	r3, r3, r2
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	4403      	add	r3, r0
 8005870:	3324      	adds	r3, #36	; 0x24
 8005872:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6899      	ldr	r1, [r3, #8]
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	68ba      	ldr	r2, [r7, #8]
 800587c:	4613      	mov	r3, r2
 800587e:	00db      	lsls	r3, r3, #3
 8005880:	1a9b      	subs	r3, r3, r2
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	4403      	add	r3, r0
 8005886:	3328      	adds	r3, #40	; 0x28
 8005888:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	68d9      	ldr	r1, [r3, #12]
 800588e:	68f8      	ldr	r0, [r7, #12]
 8005890:	68ba      	ldr	r2, [r7, #8]
 8005892:	4613      	mov	r3, r2
 8005894:	00db      	lsls	r3, r3, #3
 8005896:	1a9b      	subs	r3, r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	4403      	add	r3, r0
 800589c:	332c      	adds	r3, #44	; 0x2c
 800589e:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6919      	ldr	r1, [r3, #16]
 80058a4:	68f8      	ldr	r0, [r7, #12]
 80058a6:	68ba      	ldr	r2, [r7, #8]
 80058a8:	4613      	mov	r3, r2
 80058aa:	00db      	lsls	r3, r3, #3
 80058ac:	1a9b      	subs	r3, r3, r2
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4403      	add	r3, r0
 80058b2:	3330      	adds	r3, #48	; 0x30
 80058b4:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 80058b6:	68b9      	ldr	r1, [r7, #8]
 80058b8:	68f8      	ldr	r0, [r7, #12]
 80058ba:	f000 fec9 	bl	8006650 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2201      	movs	r2, #1
 80058c2:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3710      	adds	r7, #16
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <HAL_HRTIM_WaveformTimerControl>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerControl(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                HRTIM_TimerCtlTypeDef * pTimerCtl)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	607a      	str	r2, [r7, #4]
    assert_param(IS_HRTIM_TIMERGTCMP1(pTimerCtl->GreaterCMP1));
    assert_param(IS_HRTIM_DUALDAC_RESET(pTimerCtl->DualChannelDacReset));
    assert_param(IS_HRTIM_DUALDAC_STEP(pTimerCtl->DualChannelDacStep));
    assert_param(IS_HRTIM_DUALDAC_ENABLE(pTimerCtl->DualChannelDacEnable));

    if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d101      	bne.n	80058f4 <HAL_HRTIM_WaveformTimerControl+0x1c>
    {
       return HAL_BUSY;
 80058f0:	2302      	movs	r3, #2
 80058f2:	e020      	b.n	8005936 <HAL_HRTIM_WaveformTimerControl+0x5e>
    }

    /* Process Locked */
    __HAL_LOCK(hhrtim);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d101      	bne.n	8005902 <HAL_HRTIM_WaveformTimerControl+0x2a>
 80058fe:	2302      	movs	r3, #2
 8005900:	e019      	b.n	8005936 <HAL_HRTIM_WaveformTimerControl+0x5e>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2201      	movs	r2, #1
 8005906:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2202      	movs	r2, #2
 800590e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Control(hhrtim, TimerIdx, pTimerCtl);
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	68b9      	ldr	r1, [r7, #8]
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	f000 fd2a 	bl	8006370 <HRTIM_TimingUnitWaveform_Control>

    /* Force a software update */
    HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 800591c:	68b9      	ldr	r1, [r7, #8]
 800591e:	68f8      	ldr	r0, [r7, #12]
 8005920:	f000 fe96 	bl	8006650 <HRTIM_ForceRegistersUpdate>

    hhrtim->State = HAL_HRTIM_STATE_READY;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    /* Process Unlocked */
    __HAL_UNLOCK(hhrtim);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3710      	adds	r7, #16
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
	...

08005940 <HAL_HRTIM_DeadTimeConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_DeadTimeConfig(HRTIM_HandleTypeDef * hhrtim,
                                           uint32_t TimerIdx,
                                           HRTIM_DeadTimeCfgTypeDef* pDeadTimeCfg)
{
 8005940:	b480      	push	{r7}
 8005942:	b087      	sub	sp, #28
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_TIMDEADTIME_RISINGSIGNLOCK(pDeadTimeCfg->RisingSignLock));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGSIGN(pDeadTimeCfg->FallingSign));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGLOCK(pDeadTimeCfg->FallingLock));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGSIGNLOCK(pDeadTimeCfg->FallingSignLock));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8005952:	b2db      	uxtb	r3, r3
 8005954:	2b02      	cmp	r3, #2
 8005956:	d101      	bne.n	800595c <HAL_HRTIM_DeadTimeConfig+0x1c>
  {
     return HAL_BUSY;
 8005958:	2302      	movs	r3, #2
 800595a:	e067      	b.n	8005a2c <HAL_HRTIM_DeadTimeConfig+0xec>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8005962:	2b01      	cmp	r3, #1
 8005964:	d101      	bne.n	800596a <HAL_HRTIM_DeadTimeConfig+0x2a>
 8005966:	2302      	movs	r3, #2
 8005968:	e060      	b.n	8005a2c <HAL_HRTIM_DeadTimeConfig+0xec>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2201      	movs	r2, #1
 800596e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2202      	movs	r2, #2
 8005976:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Set timer deadtime configuration */
  hrtim_dtr  = (pDeadTimeCfg->Prescaler & HRTIM_DTR_DTPRSC);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8005982:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingValue & HRTIM_DTR_DTR);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800598c:	697a      	ldr	r2, [r7, #20]
 800598e:	4313      	orrs	r3, r2
 8005990:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingSign & HRTIM_DTR_SDTR);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800599a:	697a      	ldr	r2, [r7, #20]
 800599c:	4313      	orrs	r3, r2
 800599e:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingSignLock & HRTIM_DTR_DTRSLK);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059a8:	697a      	ldr	r2, [r7, #20]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingLock & HRTIM_DTR_DTRLK);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059b6:	697a      	ldr	r2, [r7, #20]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= ((pDeadTimeCfg->FallingValue << 16U) & HRTIM_DTR_DTF);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	695b      	ldr	r3, [r3, #20]
 80059c0:	041a      	lsls	r2, r3, #16
 80059c2:	4b1d      	ldr	r3, [pc, #116]	; (8005a38 <HAL_HRTIM_DeadTimeConfig+0xf8>)
 80059c4:	4013      	ands	r3, r2
 80059c6:	697a      	ldr	r2, [r7, #20]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingSign & HRTIM_DTR_SDTF);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	699b      	ldr	r3, [r3, #24]
 80059d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059d4:	697a      	ldr	r2, [r7, #20]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingSignLock & HRTIM_DTR_DTFSLK);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a1b      	ldr	r3, [r3, #32]
 80059de:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80059e2:	697a      	ldr	r2, [r7, #20]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingLock & HRTIM_DTR_DTFLK);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	69db      	ldr	r3, [r3, #28]
 80059ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR, (
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	01db      	lsls	r3, r3, #7
 80059fe:	4413      	add	r3, r2
 8005a00:	33b8      	adds	r3, #184	; 0xb8
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	4b0d      	ldr	r3, [pc, #52]	; (8005a3c <HAL_HRTIM_DeadTimeConfig+0xfc>)
 8005a06:	4013      	ands	r3, r2
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	6811      	ldr	r1, [r2, #0]
 8005a0c:	697a      	ldr	r2, [r7, #20]
 8005a0e:	431a      	orrs	r2, r3
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	01db      	lsls	r3, r3, #7
 8005a14:	440b      	add	r3, r1
 8005a16:	33b8      	adds	r3, #184	; 0xb8
 8005a18:	601a      	str	r2, [r3, #0]
                 HRTIM_DTR_DTR | HRTIM_DTR_SDTR | HRTIM_DTR_DTPRSC |
                 HRTIM_DTR_DTRSLK | HRTIM_DTR_DTRLK | HRTIM_DTR_DTF |
                 HRTIM_DTR_SDTF | HRTIM_DTR_DTFSLK | HRTIM_DTR_DTFLK), hrtim_dtr);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	371c      	adds	r7, #28
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr
 8005a38:	01ff0000 	.word	0x01ff0000
 8005a3c:	3c002000 	.word	0x3c002000

08005a40 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
 8005a4c:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d101      	bne.n	8005a5e <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 8005a5a:	2302      	movs	r3, #2
 8005a5c:	e157      	b.n	8005d0e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d101      	bne.n	8005a6c <HAL_HRTIM_WaveformCompareConfig+0x2c>
 8005a68:	2302      	movs	r3, #2
 8005a6a:	e150      	b.n	8005d0e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2202      	movs	r2, #2
 8005a78:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	2b06      	cmp	r3, #6
 8005a80:	d140      	bne.n	8005b04 <HAL_HRTIM_WaveformCompareConfig+0xc4>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	3b01      	subs	r3, #1
 8005a86:	2b07      	cmp	r3, #7
 8005a88:	d82a      	bhi.n	8005ae0 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 8005a8a:	a201      	add	r2, pc, #4	; (adr r2, 8005a90 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 8005a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a90:	08005ab1 	.word	0x08005ab1
 8005a94:	08005abd 	.word	0x08005abd
 8005a98:	08005ae1 	.word	0x08005ae1
 8005a9c:	08005ac9 	.word	0x08005ac9
 8005aa0:	08005ae1 	.word	0x08005ae1
 8005aa4:	08005ae1 	.word	0x08005ae1
 8005aa8:	08005ae1 	.word	0x08005ae1
 8005aac:	08005ad5 	.word	0x08005ad5
  {
    switch (CompareUnit)
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	683a      	ldr	r2, [r7, #0]
 8005ab6:	6812      	ldr	r2, [r2, #0]
 8005ab8:	61da      	str	r2, [r3, #28]
        break;
 8005aba:	e01a      	b.n	8005af2 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	683a      	ldr	r2, [r7, #0]
 8005ac2:	6812      	ldr	r2, [r2, #0]
 8005ac4:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 8005ac6:	e014      	b.n	8005af2 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	683a      	ldr	r2, [r7, #0]
 8005ace:	6812      	ldr	r2, [r2, #0]
 8005ad0:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 8005ad2:	e00e      	b.n	8005af2 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	683a      	ldr	r2, [r7, #0]
 8005ada:	6812      	ldr	r2, [r2, #0]
 8005adc:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 8005ade:	e008      	b.n	8005af2 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2207      	movs	r2, #7
 8005ae4:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

        break;
 8005af0:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	2b07      	cmp	r3, #7
 8005afc:	f040 80fe 	bne.w	8005cfc <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e104      	b.n	8005d0e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	3b01      	subs	r3, #1
 8005b08:	2b07      	cmp	r3, #7
 8005b0a:	f200 80e3 	bhi.w	8005cd4 <HAL_HRTIM_WaveformCompareConfig+0x294>
 8005b0e:	a201      	add	r2, pc, #4	; (adr r2, 8005b14 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 8005b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b14:	08005b35 	.word	0x08005b35
 8005b18:	08005b49 	.word	0x08005b49
 8005b1c:	08005cd5 	.word	0x08005cd5
 8005b20:	08005c05 	.word	0x08005c05
 8005b24:	08005cd5 	.word	0x08005cd5
 8005b28:	08005cd5 	.word	0x08005cd5
 8005b2c:	08005cd5 	.word	0x08005cd5
 8005b30:	08005c19 	.word	0x08005c19
    switch (CompareUnit)
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6819      	ldr	r1, [r3, #0]
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	01db      	lsls	r3, r3, #7
 8005b40:	440b      	add	r3, r1
 8005b42:	339c      	adds	r3, #156	; 0x9c
 8005b44:	601a      	str	r2, [r3, #0]
        break;
 8005b46:	e0d1      	b.n	8005cec <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	6819      	ldr	r1, [r3, #0]
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	01db      	lsls	r3, r3, #7
 8005b54:	440b      	add	r3, r1
 8005b56:	33a4      	adds	r3, #164	; 0xa4
 8005b58:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d03f      	beq.n	8005be2 <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	01db      	lsls	r3, r3, #7
 8005b6c:	4413      	add	r3, r2
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	6811      	ldr	r1, [r2, #0]
 8005b74:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	01db      	lsls	r3, r3, #7
 8005b7e:	440b      	add	r3, r1
 8005b80:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	3301      	adds	r3, #1
 8005b8a:	01db      	lsls	r3, r3, #7
 8005b8c:	4413      	add	r3, r2
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	68f9      	ldr	r1, [r7, #12]
 8005b96:	6809      	ldr	r1, [r1, #0]
 8005b98:	431a      	orrs	r2, r3
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	01db      	lsls	r3, r3, #7
 8005ba0:	440b      	add	r3, r1
 8005ba2:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bac:	d109      	bne.n	8005bc2 <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6819      	ldr	r1, [r3, #0]
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	689a      	ldr	r2, [r3, #8]
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	01db      	lsls	r3, r3, #7
 8005bba:	440b      	add	r3, r1
 8005bbc:	339c      	adds	r3, #156	; 0x9c
 8005bbe:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 8005bc0:	e091      	b.n	8005ce6 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005bca:	f040 808c 	bne.w	8005ce6 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6819      	ldr	r1, [r3, #0]
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	689a      	ldr	r2, [r3, #8]
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	01db      	lsls	r3, r3, #7
 8005bda:	440b      	add	r3, r1
 8005bdc:	33a8      	adds	r3, #168	; 0xa8
 8005bde:	601a      	str	r2, [r3, #0]
         break;
 8005be0:	e081      	b.n	8005ce6 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	3301      	adds	r3, #1
 8005bea:	01db      	lsls	r3, r3, #7
 8005bec:	4413      	add	r3, r2
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	6811      	ldr	r1, [r2, #0]
 8005bf4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	01db      	lsls	r3, r3, #7
 8005bfe:	440b      	add	r3, r1
 8005c00:	601a      	str	r2, [r3, #0]
         break;
 8005c02:	e070      	b.n	8005ce6 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6819      	ldr	r1, [r3, #0]
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	01db      	lsls	r3, r3, #7
 8005c10:	440b      	add	r3, r1
 8005c12:	33a8      	adds	r3, #168	; 0xa8
 8005c14:	601a      	str	r2, [r3, #0]
        break;
 8005c16:	e069      	b.n	8005cec <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6819      	ldr	r1, [r3, #0]
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	01db      	lsls	r3, r3, #7
 8005c24:	440b      	add	r3, r1
 8005c26:	33ac      	adds	r3, #172	; 0xac
 8005c28:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d03f      	beq.n	8005cb2 <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	3301      	adds	r3, #1
 8005c3a:	01db      	lsls	r3, r3, #7
 8005c3c:	4413      	add	r3, r2
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	6811      	ldr	r1, [r2, #0]
 8005c44:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	01db      	lsls	r3, r3, #7
 8005c4e:	440b      	add	r3, r1
 8005c50:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	3301      	adds	r3, #1
 8005c5a:	01db      	lsls	r3, r3, #7
 8005c5c:	4413      	add	r3, r2
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	68f9      	ldr	r1, [r7, #12]
 8005c68:	6809      	ldr	r1, [r1, #0]
 8005c6a:	431a      	orrs	r2, r3
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	01db      	lsls	r3, r3, #7
 8005c72:	440b      	add	r3, r1
 8005c74:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c7e:	d109      	bne.n	8005c94 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6819      	ldr	r1, [r3, #0]
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	689a      	ldr	r2, [r3, #8]
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	01db      	lsls	r3, r3, #7
 8005c8c:	440b      	add	r3, r1
 8005c8e:	339c      	adds	r3, #156	; 0x9c
 8005c90:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 8005c92:	e02a      	b.n	8005cea <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c9c:	d125      	bne.n	8005cea <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6819      	ldr	r1, [r3, #0]
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	689a      	ldr	r2, [r3, #8]
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	01db      	lsls	r3, r3, #7
 8005caa:	440b      	add	r3, r1
 8005cac:	33a8      	adds	r3, #168	; 0xa8
 8005cae:	601a      	str	r2, [r3, #0]
         break;
 8005cb0:	e01b      	b.n	8005cea <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	3301      	adds	r3, #1
 8005cba:	01db      	lsls	r3, r3, #7
 8005cbc:	4413      	add	r3, r2
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	6811      	ldr	r1, [r2, #0]
 8005cc4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	01db      	lsls	r3, r3, #7
 8005cce:	440b      	add	r3, r1
 8005cd0:	601a      	str	r2, [r3, #0]
         break;
 8005cd2:	e00a      	b.n	8005cea <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2207      	movs	r2, #7
 8005cd8:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 8005ce4:	e002      	b.n	8005cec <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8005ce6:	bf00      	nop
 8005ce8:	e000      	b.n	8005cec <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8005cea:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	2b07      	cmp	r3, #7
 8005cf6:	d101      	bne.n	8005cfc <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e008      	b.n	8005d0e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3714      	adds	r7, #20
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop

08005d1c <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	607a      	str	r2, [r7, #4]
 8005d28:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	d101      	bne.n	8005d3a <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 8005d36:	2302      	movs	r3, #2
 8005d38:	e01d      	b.n	8005d76 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d101      	bne.n	8005d48 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8005d44:	2302      	movs	r3, #2
 8005d46:	e016      	b.n	8005d76 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2202      	movs	r2, #2
 8005d54:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	68b9      	ldr	r1, [r7, #8]
 8005d5e:	68f8      	ldr	r0, [r7, #12]
 8005d60:	f000 fb66 	bl	8006430 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}

08005d7e <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TF2: Timer F - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t OutputsToStart)
{
 8005d7e:	b480      	push	{r7}
 8005d80:	b083      	sub	sp, #12
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
 8005d86:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d101      	bne.n	8005d96 <HAL_HRTIM_WaveformOutputStart+0x18>
 8005d92:	2302      	movs	r3, #2
 8005d94:	e01a      	b.n	8005dcc <HAL_HRTIM_WaveformOutputStart+0x4e>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2202      	movs	r2, #2
 8005da2:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f8d3 1394 	ldr.w	r1, [r3, #916]	; 0x394
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	683a      	ldr	r2, [r7, #0]
 8005db4:	430a      	orrs	r2, r1
 8005db6:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <HAL_HRTIM_WaveformCountStart>:
  *                   @arg HRTIM_TIMERID_TIMER_F
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart(HRTIM_HandleTypeDef * hhrtim,
                                                 uint32_t Timers)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d101      	bne.n	8005df0 <HAL_HRTIM_WaveformCountStart+0x18>
 8005dec:	2302      	movs	r3, #2
 8005dee:	e018      	b.n	8005e22 <HAL_HRTIM_WaveformCountStart+0x4a>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2202      	movs	r2, #2
 8005dfc:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6819      	ldr	r1, [r3, #0]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	683a      	ldr	r2, [r7, #0]
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	370c      	adds	r7, #12
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr

08005e2e <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                     HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8005e2e:	b480      	push	{r7}
 8005e30:	b085      	sub	sp, #20
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
 8005e36:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f023 0307 	bic.w	r3, r3, #7
 8005e46:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f023 0318 	bic.w	r3, r3, #24
 8005e58:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68fa      	ldr	r2, [r7, #12]
 8005e6a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	683a      	ldr	r2, [r7, #0]
 8005e72:	6812      	ldr	r2, [r2, #0]
 8005e74:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	683a      	ldr	r2, [r7, #0]
 8005e7c:	6852      	ldr	r2, [r2, #4]
 8005e7e:	619a      	str	r2, [r3, #24]
}
 8005e80:	bf00      	nop
 8005e82:	3714      	adds	r7, #20
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                         uint32_t TimerIdx ,
                                         HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b087      	sub	sp, #28
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	01db      	lsls	r3, r3, #7
 8005ea2:	4413      	add	r3, r2
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	f023 0307 	bic.w	r3, r3, #7
 8005eae:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	697a      	ldr	r2, [r7, #20]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	f023 0318 	bic.w	r3, r3, #24
 8005ec0:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	697a      	ldr	r2, [r7, #20]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	01db      	lsls	r3, r3, #7
 8005ed6:	4413      	add	r3, r2
 8005ed8:	697a      	ldr	r2, [r7, #20]
 8005eda:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6819      	ldr	r1, [r3, #0]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	01db      	lsls	r3, r3, #7
 8005ee8:	440b      	add	r3, r1
 8005eea:	3394      	adds	r3, #148	; 0x94
 8005eec:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6819      	ldr	r1, [r3, #0]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	685a      	ldr	r2, [r3, #4]
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	01db      	lsls	r3, r3, #7
 8005efa:	440b      	add	r3, r1
 8005efc:	3398      	adds	r3, #152	; 0x98
 8005efe:	601a      	str	r2, [r3, #0]
}
 8005f00:	bf00      	nop
 8005f02:	371c      	adds	r7, #28
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                         HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b085      	sub	sp, #20
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8005f26:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f023 0320 	bic.w	r3, r3, #32
 8005f2e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	695b      	ldr	r3, [r3, #20]
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	60fb      	str	r3, [r7, #12]

  /* INTLVD bits are set to 00 */
  hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005f40:	60fb      	str	r3, [r7, #12]
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	695b      	ldr	r3, [r3, #20]
 8005f46:	2b20      	cmp	r3, #32
 8005f48:	d003      	beq.n	8005f52 <HRTIM_MasterWaveform_Config+0x46>
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	699b      	ldr	r3, [r3, #24]
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	d108      	bne.n	8005f64 <HRTIM_MasterWaveform_Config+0x58>
  {
    /* INTLVD bits set to 00 */
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005f58:	60fb      	str	r3, [r7, #12]
    hrtim_mcr |= (HRTIM_MCR_HALF);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f043 0320 	orr.w	r3, r3, #32
 8005f60:	60fb      	str	r3, [r7, #12]
 8005f62:	e021      	b.n	8005fa8 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	699b      	ldr	r3, [r3, #24]
 8005f68:	2b03      	cmp	r3, #3
 8005f6a:	d108      	bne.n	8005f7e <HRTIM_MasterWaveform_Config+0x72>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_0);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f72:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_1);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f7a:	60fb      	str	r3, [r7, #12]
 8005f7c:	e014      	b.n	8005fa8 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	699b      	ldr	r3, [r3, #24]
 8005f82:	2b04      	cmp	r3, #4
 8005f84:	d108      	bne.n	8005f98 <HRTIM_MasterWaveform_Config+0x8c>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_1);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f8c:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_0);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f94:	60fb      	str	r3, [r7, #12]
 8005f96:	e007      	b.n	8005fa8 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else
  {
        hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f023 0320 	bic.w	r3, r3, #32
 8005f9e:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005fa6:	60fb      	str	r3, [r7, #12]
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fae:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	69db      	ldr	r3, [r3, #28]
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fc0:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	6a1b      	ldr	r3, [r3, #32]
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005fd2:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8005fe4:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005ff6:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	4313      	orrs	r3, r2
 8006002:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800600a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	4313      	orrs	r3, r2
 8006014:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800601c:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006022:	68ba      	ldr	r2, [r7, #8]
 8006024:	4313      	orrs	r3, r2
 8006026:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68ba      	ldr	r2, [r7, #8]
 8006036:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 800603a:	bf00      	nop
 800603c:	3714      	adds	r7, #20
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr
	...

08006048 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8006048:	b480      	push	{r7}
 800604a:	b08b      	sub	sp, #44	; 0x2c
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	3301      	adds	r3, #1
 800605c:	01db      	lsls	r3, r3, #7
 800605e:	4413      	add	r3, r2
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	6811      	ldr	r1, [r2, #0]
 8006066:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	3301      	adds	r3, #1
 800606e:	01db      	lsls	r3, r3, #7
 8006070:	440b      	add	r3, r1
 8006072:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	3301      	adds	r3, #1
 800607c:	01db      	lsls	r3, r3, #7
 800607e:	4413      	add	r3, r2
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	01db      	lsls	r3, r3, #7
 800608c:	4413      	add	r3, r2
 800608e:	33e8      	adds	r3, #232	; 0xe8
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	01db      	lsls	r3, r3, #7
 800609c:	4413      	add	r3, r2
 800609e:	33e4      	adds	r3, #228	; 0xe4
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 80060ac:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 80060ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b0:	f023 0320 	bic.w	r3, r3, #32
 80060b4:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	695b      	ldr	r3, [r3, #20]
 80060ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060bc:	4313      	orrs	r3, r2
 80060be:	627b      	str	r3, [r7, #36]	; 0x24

  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	695b      	ldr	r3, [r3, #20]
 80060c4:	2b20      	cmp	r3, #32
 80060c6:	d003      	beq.n	80060d0 <HRTIM_TimingUnitWaveform_Config+0x88>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	699b      	ldr	r3, [r3, #24]
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d108      	bne.n	80060e2 <HRTIM_TimingUnitWaveform_Config+0x9a>
  {
    /* INTLVD bits set to 00 */
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 80060d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d2:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 80060d6:	627b      	str	r3, [r7, #36]	; 0x24
    hrtim_timcr |= (HRTIM_TIMCR_HALF);
 80060d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060da:	f043 0320 	orr.w	r3, r3, #32
 80060de:	627b      	str	r3, [r7, #36]	; 0x24
 80060e0:	e021      	b.n	8006126 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	2b03      	cmp	r3, #3
 80060e8:	d108      	bne.n	80060fc <HRTIM_TimingUnitWaveform_Config+0xb4>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_0);
 80060ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060f0:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_1);
 80060f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060f8:	627b      	str	r3, [r7, #36]	; 0x24
 80060fa:	e014      	b.n	8006126 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	699b      	ldr	r3, [r3, #24]
 8006100:	2b04      	cmp	r3, #4
 8006102:	d108      	bne.n	8006116 <HRTIM_TimingUnitWaveform_Config+0xce>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_1);
 8006104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800610a:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_0);
 800610c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006112:	627b      	str	r3, [r7, #36]	; 0x24
 8006114:	e007      	b.n	8006126 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else
  {
        hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8006116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006118:	f023 0320 	bic.w	r3, r3, #32
 800611c:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 800611e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006120:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 8006124:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8006126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006128:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800612c:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	69db      	ldr	r3, [r3, #28]
 8006132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006134:	4313      	orrs	r3, r2
 8006136:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8006138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800613e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6a1b      	ldr	r3, [r3, #32]
 8006144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006146:	4313      	orrs	r3, r2
 8006148:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 800614a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006150:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006158:	4313      	orrs	r3, r2
 800615a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 800615c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615e:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8006162:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800616a:	4313      	orrs	r3, r2
 800616c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 800616e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006170:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006174:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800617c:	4313      	orrs	r3, r2
 800617e:	627b      	str	r3, [r7, #36]	; 0x24

  if (pTimerCfg->UpdateGating == HRTIM_UPDATEGATING_INDEPENDENT)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006184:	2b00      	cmp	r3, #0
 8006186:	d109      	bne.n	800619c <HRTIM_TimingUnitWaveform_Config+0x154>
  {
    /* Timing unit Re-Synchronized Update */
    hrtim_timcr &= ~(HRTIM_TIMCR_RSYNCU);
 8006188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800618e:	627b      	str	r3, [r7, #36]	; 0x24
    hrtim_timcr |= (pTimerCfg->ReSyncUpdate) << HRTIM_TIMCR_RSYNCU_Pos;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006194:	025b      	lsls	r3, r3, #9
 8006196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006198:	4313      	orrs	r3, r2
 800619a:	627b      	str	r3, [r7, #36]	; 0x24
  }


  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 800619c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80061a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061ac:	d103      	bne.n	80061b6 <HRTIM_TimingUnitWaveform_Config+0x16e>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 80061ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061b4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 80061b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061bc:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061c4:	4313      	orrs	r3, r2
 80061c6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 80061c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061ce:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061d6:	4313      	orrs	r3, r2
 80061d8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 80061da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061dc:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 80061e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061e4:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ec:	4313      	orrs	r3, r2
 80061ee:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80061f6:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006200:	69ba      	ldr	r2, [r7, #24]
 8006202:	4313      	orrs	r3, r2
 8006204:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800620c:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006212:	69ba      	ldr	r2, [r7, #24]
 8006214:	4313      	orrs	r3, r2
 8006216:	61bb      	str	r3, [r7, #24]

    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8006218:	6a3b      	ldr	r3, [r7, #32]
 800621a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800621e:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006224:	6a3a      	ldr	r2, [r7, #32]
 8006226:	4313      	orrs	r3, r2
 8006228:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800622e:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8006232:	d004      	beq.n	800623e <HRTIM_TimingUnitWaveform_Config+0x1f6>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006238:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 800623c:	d103      	bne.n	8006246 <HRTIM_TimingUnitWaveform_Config+0x1fe>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006242:	2b40      	cmp	r3, #64	; 0x40
 8006244:	d108      	bne.n	8006258 <HRTIM_TimingUnitWaveform_Config+0x210>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8006246:	6a3b      	ldr	r3, [r7, #32]
 8006248:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 800624c:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006252:	6a3a      	ldr	r2, [r7, #32]
 8006254:	4313      	orrs	r3, r2
 8006256:	623b      	str	r3, [r7, #32]
  }

  /* Set the BIAR mode : one bit for both outputs */
  hrtim_timoutr &= ~(HRTIM_OUTR_BIAR);
 8006258:	6a3b      	ldr	r3, [r7, #32]
 800625a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800625e:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006264:	6a3a      	ldr	r2, [r7, #32]
 8006266:	4313      	orrs	r3, r2
 8006268:	623b      	str	r3, [r7, #32]

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800626e:	617b      	str	r3, [r7, #20]
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	2b05      	cmp	r3, #5
 8006274:	d850      	bhi.n	8006318 <HRTIM_TimingUnitWaveform_Config+0x2d0>
 8006276:	a201      	add	r2, pc, #4	; (adr r2, 800627c <HRTIM_TimingUnitWaveform_Config+0x234>)
 8006278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800627c:	08006295 	.word	0x08006295
 8006280:	080062ab 	.word	0x080062ab
 8006284:	080062c1 	.word	0x080062c1
 8006288:	080062d7 	.word	0x080062d7
 800628c:	080062ed 	.word	0x080062ed
 8006290:	08006303 	.word	0x08006303
  /* Set the timer burst mode */
  switch (TimerIdx)
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800629a:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a0:	005b      	lsls	r3, r3, #1
 80062a2:	69fa      	ldr	r2, [r7, #28]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	61fb      	str	r3, [r7, #28]
      break;
 80062a8:	e037      	b.n	800631a <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062b0:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	69fa      	ldr	r2, [r7, #28]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	61fb      	str	r3, [r7, #28]
      break;
 80062be:	e02c      	b.n	800631a <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80062c6:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062cc:	00db      	lsls	r3, r3, #3
 80062ce:	69fa      	ldr	r2, [r7, #28]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	61fb      	str	r3, [r7, #28]
      break;
 80062d4:	e021      	b.n	800631a <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80062dc:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e2:	011b      	lsls	r3, r3, #4
 80062e4:	69fa      	ldr	r2, [r7, #28]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	61fb      	str	r3, [r7, #28]
      break;
 80062ea:	e016      	b.n	800631a <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80062f2:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f8:	015b      	lsls	r3, r3, #5
 80062fa:	69fa      	ldr	r2, [r7, #28]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	61fb      	str	r3, [r7, #28]
      break;
 8006300:	e00b      	b.n	800631a <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TFBM);
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8006308:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 6U);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800630e:	019b      	lsls	r3, r3, #6
 8006310:	69fa      	ldr	r2, [r7, #28]
 8006312:	4313      	orrs	r3, r2
 8006314:	61fb      	str	r3, [r7, #28]
      break;
 8006316:	e000      	b.n	800631a <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  default:
    break;
 8006318:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	3301      	adds	r3, #1
 8006322:	01db      	lsls	r3, r3, #7
 8006324:	4413      	add	r3, r2
 8006326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006328:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	01db      	lsls	r3, r3, #7
 8006332:	4413      	add	r3, r2
 8006334:	33e8      	adds	r3, #232	; 0xe8
 8006336:	69ba      	ldr	r2, [r7, #24]
 8006338:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	01db      	lsls	r3, r3, #7
 8006342:	4413      	add	r3, r2
 8006344:	33e4      	adds	r3, #228	; 0xe4
 8006346:	6a3a      	ldr	r2, [r7, #32]
 8006348:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	01db      	lsls	r3, r3, #7
 8006352:	4413      	add	r3, r2
 8006354:	33d4      	adds	r3, #212	; 0xd4
 8006356:	697a      	ldr	r2, [r7, #20]
 8006358:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	69fa      	ldr	r2, [r7, #28]
 8006360:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8006364:	bf00      	nop
 8006366:	372c      	adds	r7, #44	; 0x2c
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <HRTIM_TimingUnitWaveform_Control>:
  * @retval None
  */
static void HRTIM_TimingUnitWaveform_Control(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             HRTIM_TimerCtlTypeDef * pTimerCtl)
{
 8006370:	b480      	push	{r7}
 8006372:	b087      	sub	sp, #28
 8006374:	af00      	add	r7, sp, #0
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	607a      	str	r2, [r7, #4]
   uint32_t hrtim_timcr2;

   /* Configure timing unit (Timer A to Timer F) */
   hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	01db      	lsls	r3, r3, #7
 8006384:	4413      	add	r3, r2
 8006386:	33ec      	adds	r3, #236	; 0xec
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	617b      	str	r3, [r7, #20]

   /* Set the UpDown counting Mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_UDM);
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	f023 0310 	bic.w	r3, r3, #16
 8006392:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= (pTimerCtl->UpDownMode << HRTIM_TIMCR2_UDM_Pos) ;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	011b      	lsls	r3, r3, #4
 800639a:	697a      	ldr	r2, [r7, #20]
 800639c:	4313      	orrs	r3, r2
 800639e:	617b      	str	r3, [r7, #20]

   /* Set the TrigHalf Mode : requires the counter to be disabled */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_TRGHLF);
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80063a6:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->TrigHalf;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	697a      	ldr	r2, [r7, #20]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	617b      	str	r3, [r7, #20]

   /* define the compare event operating mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP1);
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063b8:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->GreaterCMP1;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	697a      	ldr	r2, [r7, #20]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	617b      	str	r3, [r7, #20]

   /* define the compare event operating mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP3);
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80063ca:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->GreaterCMP3;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	697a      	ldr	r2, [r7, #20]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	617b      	str	r3, [r7, #20]

   if (pTimerCtl->DualChannelDacEnable == HRTIM_TIMER_DCDE_ENABLED)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d11a      	bne.n	8006414 <HRTIM_TimingUnitWaveform_Control+0xa4>
   {
      /* Set the DualChannel DAC Reset trigger : requires DCDE enabled */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDR);
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	f023 0304 	bic.w	r3, r3, #4
 80063e4:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacReset;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	697a      	ldr	r2, [r7, #20]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	617b      	str	r3, [r7, #20]

      /* Set the DualChannel DAC Step trigger : requires DCDE enabled */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDS);
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	f023 0302 	bic.w	r3, r3, #2
 80063f6:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacStep;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	695b      	ldr	r3, [r3, #20]
 80063fc:	697a      	ldr	r2, [r7, #20]
 80063fe:	4313      	orrs	r3, r2
 8006400:	617b      	str	r3, [r7, #20]

      /* Enable the DualChannel DAC trigger */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDE);
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	f023 0301 	bic.w	r3, r3, #1
 8006408:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacEnable;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	699b      	ldr	r3, [r3, #24]
 800640e:	697a      	ldr	r2, [r7, #20]
 8006410:	4313      	orrs	r3, r2
 8006412:	617b      	str	r3, [r7, #20]
   }
   /* Update the HRTIM registers */
   hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2  = hrtim_timcr2;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	01db      	lsls	r3, r3, #7
 800641c:	4413      	add	r3, r2
 800641e:	33ec      	adds	r3, #236	; 0xec
 8006420:	697a      	ldr	r2, [r7, #20]
 8006422:	601a      	str	r2, [r3, #0]

}
 8006424:	bf00      	nop
 8006426:	371c      	adds	r7, #28
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8006430:	b480      	push	{r7}
 8006432:	b089      	sub	sp, #36	; 0x24
 8006434:	af00      	add	r7, sp, #0
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	607a      	str	r2, [r7, #4]
 800643c:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 800643e:	2300      	movs	r3, #0
 8006440:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	01db      	lsls	r3, r3, #7
 800644a:	4413      	add	r3, r2
 800644c:	33e4      	adds	r3, #228	; 0xe4
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	01db      	lsls	r3, r3, #7
 800645a:	4413      	add	r3, r2
 800645c:	33b8      	adds	r3, #184	; 0xb8
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	617b      	str	r3, [r7, #20]

  switch (Output)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006468:	f000 8088 	beq.w	800657c <HRTIM_OutputConfig+0x14c>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006472:	f200 8098 	bhi.w	80065a6 <HRTIM_OutputConfig+0x176>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800647c:	d06b      	beq.n	8006556 <HRTIM_OutputConfig+0x126>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006484:	f200 808f 	bhi.w	80065a6 <HRTIM_OutputConfig+0x176>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800648e:	d075      	beq.n	800657c <HRTIM_OutputConfig+0x14c>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006496:	f200 8086 	bhi.w	80065a6 <HRTIM_OutputConfig+0x176>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064a0:	d059      	beq.n	8006556 <HRTIM_OutputConfig+0x126>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064a8:	d87d      	bhi.n	80065a6 <HRTIM_OutputConfig+0x176>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2b80      	cmp	r3, #128	; 0x80
 80064ae:	d065      	beq.n	800657c <HRTIM_OutputConfig+0x14c>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2b80      	cmp	r3, #128	; 0x80
 80064b4:	d877      	bhi.n	80065a6 <HRTIM_OutputConfig+0x176>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2b20      	cmp	r3, #32
 80064ba:	d849      	bhi.n	8006550 <HRTIM_OutputConfig+0x120>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d071      	beq.n	80065a6 <HRTIM_OutputConfig+0x176>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	3b01      	subs	r3, #1
 80064c6:	2b1f      	cmp	r3, #31
 80064c8:	d86d      	bhi.n	80065a6 <HRTIM_OutputConfig+0x176>
 80064ca:	a201      	add	r2, pc, #4	; (adr r2, 80064d0 <HRTIM_OutputConfig+0xa0>)
 80064cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d0:	08006557 	.word	0x08006557
 80064d4:	0800657d 	.word	0x0800657d
 80064d8:	080065a7 	.word	0x080065a7
 80064dc:	08006557 	.word	0x08006557
 80064e0:	080065a7 	.word	0x080065a7
 80064e4:	080065a7 	.word	0x080065a7
 80064e8:	080065a7 	.word	0x080065a7
 80064ec:	0800657d 	.word	0x0800657d
 80064f0:	080065a7 	.word	0x080065a7
 80064f4:	080065a7 	.word	0x080065a7
 80064f8:	080065a7 	.word	0x080065a7
 80064fc:	080065a7 	.word	0x080065a7
 8006500:	080065a7 	.word	0x080065a7
 8006504:	080065a7 	.word	0x080065a7
 8006508:	080065a7 	.word	0x080065a7
 800650c:	08006557 	.word	0x08006557
 8006510:	080065a7 	.word	0x080065a7
 8006514:	080065a7 	.word	0x080065a7
 8006518:	080065a7 	.word	0x080065a7
 800651c:	080065a7 	.word	0x080065a7
 8006520:	080065a7 	.word	0x080065a7
 8006524:	080065a7 	.word	0x080065a7
 8006528:	080065a7 	.word	0x080065a7
 800652c:	080065a7 	.word	0x080065a7
 8006530:	080065a7 	.word	0x080065a7
 8006534:	080065a7 	.word	0x080065a7
 8006538:	080065a7 	.word	0x080065a7
 800653c:	080065a7 	.word	0x080065a7
 8006540:	080065a7 	.word	0x080065a7
 8006544:	080065a7 	.word	0x080065a7
 8006548:	080065a7 	.word	0x080065a7
 800654c:	0800657d 	.word	0x0800657d
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2b40      	cmp	r3, #64	; 0x40
 8006554:	d127      	bne.n	80065a6 <HRTIM_OutputConfig+0x176>
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
  case HRTIM_OUTPUT_TF1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6819      	ldr	r1, [r3, #0]
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	685a      	ldr	r2, [r3, #4]
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	01db      	lsls	r3, r3, #7
 8006562:	440b      	add	r3, r1
 8006564:	33bc      	adds	r3, #188	; 0xbc
 8006566:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6819      	ldr	r1, [r3, #0]
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	689a      	ldr	r2, [r3, #8]
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	01db      	lsls	r3, r3, #7
 8006574:	440b      	add	r3, r1
 8006576:	33c0      	adds	r3, #192	; 0xc0
 8006578:	601a      	str	r2, [r3, #0]
      break;
 800657a:	e015      	b.n	80065a8 <HRTIM_OutputConfig+0x178>
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
  case HRTIM_OUTPUT_TF2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6819      	ldr	r1, [r3, #0]
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	685a      	ldr	r2, [r3, #4]
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	01db      	lsls	r3, r3, #7
 8006588:	440b      	add	r3, r1
 800658a:	33c4      	adds	r3, #196	; 0xc4
 800658c:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6819      	ldr	r1, [r3, #0]
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	689a      	ldr	r2, [r3, #8]
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	01db      	lsls	r3, r3, #7
 800659a:	440b      	add	r3, r1
 800659c:	33c8      	adds	r3, #200	; 0xc8
 800659e:	601a      	str	r2, [r3, #0]
      shift = 16U;
 80065a0:	2310      	movs	r3, #16
 80065a2:	61bb      	str	r3, [r7, #24]
      break;
 80065a4:	e000      	b.n	80065a8 <HRTIM_OutputConfig+0x178>
    }

  default:
    break;
 80065a6:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 80065a8:	22fe      	movs	r2, #254	; 0xfe
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 80065b0:	43db      	mvns	r3, r3
 80065b2:	69fa      	ldr	r2, [r7, #28]
 80065b4:	4013      	ands	r3, r2
 80065b6:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	fa02 f303 	lsl.w	r3, r2, r3
 80065c2:	69fa      	ldr	r2, [r7, #28]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	68da      	ldr	r2, [r3, #12]
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	fa02 f303 	lsl.w	r3, r2, r3
 80065d2:	69fa      	ldr	r2, [r7, #28]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	691a      	ldr	r2, [r3, #16]
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	fa02 f303 	lsl.w	r3, r2, r3
 80065e2:	69fa      	ldr	r2, [r7, #28]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	695a      	ldr	r2, [r3, #20]
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	fa02 f303 	lsl.w	r3, r2, r3
 80065f2:	69fa      	ldr	r2, [r7, #28]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	699a      	ldr	r2, [r3, #24]
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006602:	69fa      	ldr	r2, [r7, #28]
 8006604:	4313      	orrs	r3, r2
 8006606:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	2b08      	cmp	r3, #8
 800660e:	d111      	bne.n	8006634 <HRTIM_OutputConfig+0x204>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8006616:	2b00      	cmp	r3, #0
 8006618:	d10c      	bne.n	8006634 <HRTIM_OutputConfig+0x204>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8006620:	2b00      	cmp	r3, #0
 8006622:	d107      	bne.n	8006634 <HRTIM_OutputConfig+0x204>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	69da      	ldr	r2, [r3, #28]
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	fa02 f303 	lsl.w	r3, r2, r3
 800662e:	69fa      	ldr	r2, [r7, #28]
 8006630:	4313      	orrs	r3, r2
 8006632:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	01db      	lsls	r3, r3, #7
 800663c:	4413      	add	r3, r2
 800663e:	33e4      	adds	r3, #228	; 0xe4
 8006640:	69fa      	ldr	r2, [r7, #28]
 8006642:	601a      	str	r2, [r3, #0]
}
 8006644:	bf00      	nop
 8006646:	3724      	adds	r7, #36	; 0x24
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	2b06      	cmp	r3, #6
 800665e:	d85e      	bhi.n	800671e <HRTIM_ForceRegistersUpdate+0xce>
 8006660:	a201      	add	r2, pc, #4	; (adr r2, 8006668 <HRTIM_ForceRegistersUpdate+0x18>)
 8006662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006666:	bf00      	nop
 8006668:	0800669b 	.word	0x0800669b
 800666c:	080066b1 	.word	0x080066b1
 8006670:	080066c7 	.word	0x080066c7
 8006674:	080066dd 	.word	0x080066dd
 8006678:	080066f3 	.word	0x080066f3
 800667c:	08006709 	.word	0x08006709
 8006680:	08006685 	.word	0x08006685
  switch (TimerIdx)
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f042 0201 	orr.w	r2, r2, #1
 8006694:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8006698:	e042      	b.n	8006720 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f042 0202 	orr.w	r2, r2, #2
 80066aa:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80066ae:	e037      	b.n	8006720 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f042 0204 	orr.w	r2, r2, #4
 80066c0:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80066c4:	e02c      	b.n	8006720 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f042 0208 	orr.w	r2, r2, #8
 80066d6:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80066da:	e021      	b.n	8006720 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f042 0210 	orr.w	r2, r2, #16
 80066ec:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80066f0:	e016      	b.n	8006720 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f042 0220 	orr.w	r2, r2, #32
 8006702:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8006706:	e00b      	b.n	8006720 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006718:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800671c:	e000      	b.n	8006720 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  default:
    break;
 800671e:	bf00      	nop
  }
}
 8006720:	bf00      	nop
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800672c:	b480      	push	{r7}
 800672e:	b085      	sub	sp, #20
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d141      	bne.n	80067be <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800673a:	4b4b      	ldr	r3, [pc, #300]	; (8006868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006746:	d131      	bne.n	80067ac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006748:	4b47      	ldr	r3, [pc, #284]	; (8006868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800674a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800674e:	4a46      	ldr	r2, [pc, #280]	; (8006868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006750:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006754:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006758:	4b43      	ldr	r3, [pc, #268]	; (8006868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006760:	4a41      	ldr	r2, [pc, #260]	; (8006868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006762:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006766:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006768:	4b40      	ldr	r3, [pc, #256]	; (800686c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	2232      	movs	r2, #50	; 0x32
 800676e:	fb02 f303 	mul.w	r3, r2, r3
 8006772:	4a3f      	ldr	r2, [pc, #252]	; (8006870 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006774:	fba2 2303 	umull	r2, r3, r2, r3
 8006778:	0c9b      	lsrs	r3, r3, #18
 800677a:	3301      	adds	r3, #1
 800677c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800677e:	e002      	b.n	8006786 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	3b01      	subs	r3, #1
 8006784:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006786:	4b38      	ldr	r3, [pc, #224]	; (8006868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006788:	695b      	ldr	r3, [r3, #20]
 800678a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800678e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006792:	d102      	bne.n	800679a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1f2      	bne.n	8006780 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800679a:	4b33      	ldr	r3, [pc, #204]	; (8006868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800679c:	695b      	ldr	r3, [r3, #20]
 800679e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067a6:	d158      	bne.n	800685a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80067a8:	2303      	movs	r3, #3
 80067aa:	e057      	b.n	800685c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80067ac:	4b2e      	ldr	r3, [pc, #184]	; (8006868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067b2:	4a2d      	ldr	r2, [pc, #180]	; (8006868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80067bc:	e04d      	b.n	800685a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067c4:	d141      	bne.n	800684a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80067c6:	4b28      	ldr	r3, [pc, #160]	; (8006868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80067ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067d2:	d131      	bne.n	8006838 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80067d4:	4b24      	ldr	r3, [pc, #144]	; (8006868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067da:	4a23      	ldr	r2, [pc, #140]	; (8006868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80067e4:	4b20      	ldr	r3, [pc, #128]	; (8006868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80067ec:	4a1e      	ldr	r2, [pc, #120]	; (8006868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80067f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80067f4:	4b1d      	ldr	r3, [pc, #116]	; (800686c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2232      	movs	r2, #50	; 0x32
 80067fa:	fb02 f303 	mul.w	r3, r2, r3
 80067fe:	4a1c      	ldr	r2, [pc, #112]	; (8006870 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006800:	fba2 2303 	umull	r2, r3, r2, r3
 8006804:	0c9b      	lsrs	r3, r3, #18
 8006806:	3301      	adds	r3, #1
 8006808:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800680a:	e002      	b.n	8006812 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	3b01      	subs	r3, #1
 8006810:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006812:	4b15      	ldr	r3, [pc, #84]	; (8006868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006814:	695b      	ldr	r3, [r3, #20]
 8006816:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800681a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800681e:	d102      	bne.n	8006826 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d1f2      	bne.n	800680c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006826:	4b10      	ldr	r3, [pc, #64]	; (8006868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006828:	695b      	ldr	r3, [r3, #20]
 800682a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800682e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006832:	d112      	bne.n	800685a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006834:	2303      	movs	r3, #3
 8006836:	e011      	b.n	800685c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006838:	4b0b      	ldr	r3, [pc, #44]	; (8006868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800683a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800683e:	4a0a      	ldr	r2, [pc, #40]	; (8006868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006844:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006848:	e007      	b.n	800685a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800684a:	4b07      	ldr	r3, [pc, #28]	; (8006868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006852:	4a05      	ldr	r2, [pc, #20]	; (8006868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006854:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006858:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800685a:	2300      	movs	r3, #0
}
 800685c:	4618      	mov	r0, r3
 800685e:	3714      	adds	r7, #20
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr
 8006868:	40007000 	.word	0x40007000
 800686c:	20000000 	.word	0x20000000
 8006870:	431bde83 	.word	0x431bde83

08006874 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006874:	b480      	push	{r7}
 8006876:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006878:	4b05      	ldr	r3, [pc, #20]	; (8006890 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	4a04      	ldr	r2, [pc, #16]	; (8006890 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800687e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006882:	6093      	str	r3, [r2, #8]
}
 8006884:	bf00      	nop
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr
 800688e:	bf00      	nop
 8006890:	40007000 	.word	0x40007000

08006894 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b088      	sub	sp, #32
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d101      	bne.n	80068a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e308      	b.n	8006eb8 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 0301 	and.w	r3, r3, #1
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d075      	beq.n	800699e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068b2:	4ba3      	ldr	r3, [pc, #652]	; (8006b40 <HAL_RCC_OscConfig+0x2ac>)
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	f003 030c 	and.w	r3, r3, #12
 80068ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80068bc:	4ba0      	ldr	r3, [pc, #640]	; (8006b40 <HAL_RCC_OscConfig+0x2ac>)
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	f003 0303 	and.w	r3, r3, #3
 80068c4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80068c6:	69bb      	ldr	r3, [r7, #24]
 80068c8:	2b0c      	cmp	r3, #12
 80068ca:	d102      	bne.n	80068d2 <HAL_RCC_OscConfig+0x3e>
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	2b03      	cmp	r3, #3
 80068d0:	d002      	beq.n	80068d8 <HAL_RCC_OscConfig+0x44>
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	2b08      	cmp	r3, #8
 80068d6:	d10b      	bne.n	80068f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068d8:	4b99      	ldr	r3, [pc, #612]	; (8006b40 <HAL_RCC_OscConfig+0x2ac>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d05b      	beq.n	800699c <HAL_RCC_OscConfig+0x108>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d157      	bne.n	800699c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	e2e3      	b.n	8006eb8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068f8:	d106      	bne.n	8006908 <HAL_RCC_OscConfig+0x74>
 80068fa:	4b91      	ldr	r3, [pc, #580]	; (8006b40 <HAL_RCC_OscConfig+0x2ac>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a90      	ldr	r2, [pc, #576]	; (8006b40 <HAL_RCC_OscConfig+0x2ac>)
 8006900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006904:	6013      	str	r3, [r2, #0]
 8006906:	e01d      	b.n	8006944 <HAL_RCC_OscConfig+0xb0>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006910:	d10c      	bne.n	800692c <HAL_RCC_OscConfig+0x98>
 8006912:	4b8b      	ldr	r3, [pc, #556]	; (8006b40 <HAL_RCC_OscConfig+0x2ac>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a8a      	ldr	r2, [pc, #552]	; (8006b40 <HAL_RCC_OscConfig+0x2ac>)
 8006918:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800691c:	6013      	str	r3, [r2, #0]
 800691e:	4b88      	ldr	r3, [pc, #544]	; (8006b40 <HAL_RCC_OscConfig+0x2ac>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a87      	ldr	r2, [pc, #540]	; (8006b40 <HAL_RCC_OscConfig+0x2ac>)
 8006924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006928:	6013      	str	r3, [r2, #0]
 800692a:	e00b      	b.n	8006944 <HAL_RCC_OscConfig+0xb0>
 800692c:	4b84      	ldr	r3, [pc, #528]	; (8006b40 <HAL_RCC_OscConfig+0x2ac>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a83      	ldr	r2, [pc, #524]	; (8006b40 <HAL_RCC_OscConfig+0x2ac>)
 8006932:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006936:	6013      	str	r3, [r2, #0]
 8006938:	4b81      	ldr	r3, [pc, #516]	; (8006b40 <HAL_RCC_OscConfig+0x2ac>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a80      	ldr	r2, [pc, #512]	; (8006b40 <HAL_RCC_OscConfig+0x2ac>)
 800693e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006942:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d013      	beq.n	8006974 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800694c:	f7fb fca2 	bl	8002294 <HAL_GetTick>
 8006950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006952:	e008      	b.n	8006966 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006954:	f7fb fc9e 	bl	8002294 <HAL_GetTick>
 8006958:	4602      	mov	r2, r0
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	2b64      	cmp	r3, #100	; 0x64
 8006960:	d901      	bls.n	8006966 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006962:	2303      	movs	r3, #3
 8006964:	e2a8      	b.n	8006eb8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006966:	4b76      	ldr	r3, [pc, #472]	; (8006b40 <HAL_RCC_OscConfig+0x2ac>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800696e:	2b00      	cmp	r3, #0
 8006970:	d0f0      	beq.n	8006954 <HAL_RCC_OscConfig+0xc0>
 8006972:	e014      	b.n	800699e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006974:	f7fb fc8e 	bl	8002294 <HAL_GetTick>
 8006978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800697a:	e008      	b.n	800698e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800697c:	f7fb fc8a 	bl	8002294 <HAL_GetTick>
 8006980:	4602      	mov	r2, r0
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	1ad3      	subs	r3, r2, r3
 8006986:	2b64      	cmp	r3, #100	; 0x64
 8006988:	d901      	bls.n	800698e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800698a:	2303      	movs	r3, #3
 800698c:	e294      	b.n	8006eb8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800698e:	4b6c      	ldr	r3, [pc, #432]	; (8006b40 <HAL_RCC_OscConfig+0x2ac>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006996:	2b00      	cmp	r3, #0
 8006998:	d1f0      	bne.n	800697c <HAL_RCC_OscConfig+0xe8>
 800699a:	e000      	b.n	800699e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800699c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 0302 	and.w	r3, r3, #2
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d075      	beq.n	8006a96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069aa:	4b65      	ldr	r3, [pc, #404]	; (8006b40 <HAL_RCC_OscConfig+0x2ac>)
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	f003 030c 	and.w	r3, r3, #12
 80069b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80069b4:	4b62      	ldr	r3, [pc, #392]	; (8006b40 <HAL_RCC_OscConfig+0x2ac>)
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	f003 0303 	and.w	r3, r3, #3
 80069bc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	2b0c      	cmp	r3, #12
 80069c2:	d102      	bne.n	80069ca <HAL_RCC_OscConfig+0x136>
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	2b02      	cmp	r3, #2
 80069c8:	d002      	beq.n	80069d0 <HAL_RCC_OscConfig+0x13c>
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	2b04      	cmp	r3, #4
 80069ce:	d11f      	bne.n	8006a10 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80069d0:	4b5b      	ldr	r3, [pc, #364]	; (8006b40 <HAL_RCC_OscConfig+0x2ac>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d005      	beq.n	80069e8 <HAL_RCC_OscConfig+0x154>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d101      	bne.n	80069e8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	e267      	b.n	8006eb8 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069e8:	4b55      	ldr	r3, [pc, #340]	; (8006b40 <HAL_RCC_OscConfig+0x2ac>)
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	691b      	ldr	r3, [r3, #16]
 80069f4:	061b      	lsls	r3, r3, #24
 80069f6:	4952      	ldr	r1, [pc, #328]	; (8006b40 <HAL_RCC_OscConfig+0x2ac>)
 80069f8:	4313      	orrs	r3, r2
 80069fa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80069fc:	4b51      	ldr	r3, [pc, #324]	; (8006b44 <HAL_RCC_OscConfig+0x2b0>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7fb fbfb 	bl	80021fc <HAL_InitTick>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d043      	beq.n	8006a94 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e253      	b.n	8006eb8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d023      	beq.n	8006a60 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a18:	4b49      	ldr	r3, [pc, #292]	; (8006b40 <HAL_RCC_OscConfig+0x2ac>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a48      	ldr	r2, [pc, #288]	; (8006b40 <HAL_RCC_OscConfig+0x2ac>)
 8006a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a24:	f7fb fc36 	bl	8002294 <HAL_GetTick>
 8006a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a2a:	e008      	b.n	8006a3e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a2c:	f7fb fc32 	bl	8002294 <HAL_GetTick>
 8006a30:	4602      	mov	r2, r0
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	1ad3      	subs	r3, r2, r3
 8006a36:	2b02      	cmp	r3, #2
 8006a38:	d901      	bls.n	8006a3e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	e23c      	b.n	8006eb8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a3e:	4b40      	ldr	r3, [pc, #256]	; (8006b40 <HAL_RCC_OscConfig+0x2ac>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d0f0      	beq.n	8006a2c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a4a:	4b3d      	ldr	r3, [pc, #244]	; (8006b40 <HAL_RCC_OscConfig+0x2ac>)
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	061b      	lsls	r3, r3, #24
 8006a58:	4939      	ldr	r1, [pc, #228]	; (8006b40 <HAL_RCC_OscConfig+0x2ac>)
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	604b      	str	r3, [r1, #4]
 8006a5e:	e01a      	b.n	8006a96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a60:	4b37      	ldr	r3, [pc, #220]	; (8006b40 <HAL_RCC_OscConfig+0x2ac>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a36      	ldr	r2, [pc, #216]	; (8006b40 <HAL_RCC_OscConfig+0x2ac>)
 8006a66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a6c:	f7fb fc12 	bl	8002294 <HAL_GetTick>
 8006a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006a72:	e008      	b.n	8006a86 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a74:	f7fb fc0e 	bl	8002294 <HAL_GetTick>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	1ad3      	subs	r3, r2, r3
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	d901      	bls.n	8006a86 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006a82:	2303      	movs	r3, #3
 8006a84:	e218      	b.n	8006eb8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006a86:	4b2e      	ldr	r3, [pc, #184]	; (8006b40 <HAL_RCC_OscConfig+0x2ac>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d1f0      	bne.n	8006a74 <HAL_RCC_OscConfig+0x1e0>
 8006a92:	e000      	b.n	8006a96 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a94:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 0308 	and.w	r3, r3, #8
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d03c      	beq.n	8006b1c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	695b      	ldr	r3, [r3, #20]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d01c      	beq.n	8006ae4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006aaa:	4b25      	ldr	r3, [pc, #148]	; (8006b40 <HAL_RCC_OscConfig+0x2ac>)
 8006aac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ab0:	4a23      	ldr	r2, [pc, #140]	; (8006b40 <HAL_RCC_OscConfig+0x2ac>)
 8006ab2:	f043 0301 	orr.w	r3, r3, #1
 8006ab6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aba:	f7fb fbeb 	bl	8002294 <HAL_GetTick>
 8006abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006ac0:	e008      	b.n	8006ad4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ac2:	f7fb fbe7 	bl	8002294 <HAL_GetTick>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	2b02      	cmp	r3, #2
 8006ace:	d901      	bls.n	8006ad4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006ad0:	2303      	movs	r3, #3
 8006ad2:	e1f1      	b.n	8006eb8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006ad4:	4b1a      	ldr	r3, [pc, #104]	; (8006b40 <HAL_RCC_OscConfig+0x2ac>)
 8006ad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ada:	f003 0302 	and.w	r3, r3, #2
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d0ef      	beq.n	8006ac2 <HAL_RCC_OscConfig+0x22e>
 8006ae2:	e01b      	b.n	8006b1c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ae4:	4b16      	ldr	r3, [pc, #88]	; (8006b40 <HAL_RCC_OscConfig+0x2ac>)
 8006ae6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006aea:	4a15      	ldr	r2, [pc, #84]	; (8006b40 <HAL_RCC_OscConfig+0x2ac>)
 8006aec:	f023 0301 	bic.w	r3, r3, #1
 8006af0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006af4:	f7fb fbce 	bl	8002294 <HAL_GetTick>
 8006af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006afa:	e008      	b.n	8006b0e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006afc:	f7fb fbca 	bl	8002294 <HAL_GetTick>
 8006b00:	4602      	mov	r2, r0
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	1ad3      	subs	r3, r2, r3
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	d901      	bls.n	8006b0e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	e1d4      	b.n	8006eb8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006b0e:	4b0c      	ldr	r3, [pc, #48]	; (8006b40 <HAL_RCC_OscConfig+0x2ac>)
 8006b10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b14:	f003 0302 	and.w	r3, r3, #2
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d1ef      	bne.n	8006afc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 0304 	and.w	r3, r3, #4
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	f000 80ab 	beq.w	8006c80 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006b2e:	4b04      	ldr	r3, [pc, #16]	; (8006b40 <HAL_RCC_OscConfig+0x2ac>)
 8006b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d106      	bne.n	8006b48 <HAL_RCC_OscConfig+0x2b4>
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e005      	b.n	8006b4a <HAL_RCC_OscConfig+0x2b6>
 8006b3e:	bf00      	nop
 8006b40:	40021000 	.word	0x40021000
 8006b44:	20000004 	.word	0x20000004
 8006b48:	2300      	movs	r3, #0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00d      	beq.n	8006b6a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b4e:	4baf      	ldr	r3, [pc, #700]	; (8006e0c <HAL_RCC_OscConfig+0x578>)
 8006b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b52:	4aae      	ldr	r2, [pc, #696]	; (8006e0c <HAL_RCC_OscConfig+0x578>)
 8006b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b58:	6593      	str	r3, [r2, #88]	; 0x58
 8006b5a:	4bac      	ldr	r3, [pc, #688]	; (8006e0c <HAL_RCC_OscConfig+0x578>)
 8006b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b62:	60fb      	str	r3, [r7, #12]
 8006b64:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006b66:	2301      	movs	r3, #1
 8006b68:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b6a:	4ba9      	ldr	r3, [pc, #676]	; (8006e10 <HAL_RCC_OscConfig+0x57c>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d118      	bne.n	8006ba8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b76:	4ba6      	ldr	r3, [pc, #664]	; (8006e10 <HAL_RCC_OscConfig+0x57c>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4aa5      	ldr	r2, [pc, #660]	; (8006e10 <HAL_RCC_OscConfig+0x57c>)
 8006b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b82:	f7fb fb87 	bl	8002294 <HAL_GetTick>
 8006b86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b88:	e008      	b.n	8006b9c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b8a:	f7fb fb83 	bl	8002294 <HAL_GetTick>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	1ad3      	subs	r3, r2, r3
 8006b94:	2b02      	cmp	r3, #2
 8006b96:	d901      	bls.n	8006b9c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006b98:	2303      	movs	r3, #3
 8006b9a:	e18d      	b.n	8006eb8 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b9c:	4b9c      	ldr	r3, [pc, #624]	; (8006e10 <HAL_RCC_OscConfig+0x57c>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d0f0      	beq.n	8006b8a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d108      	bne.n	8006bc2 <HAL_RCC_OscConfig+0x32e>
 8006bb0:	4b96      	ldr	r3, [pc, #600]	; (8006e0c <HAL_RCC_OscConfig+0x578>)
 8006bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bb6:	4a95      	ldr	r2, [pc, #596]	; (8006e0c <HAL_RCC_OscConfig+0x578>)
 8006bb8:	f043 0301 	orr.w	r3, r3, #1
 8006bbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006bc0:	e024      	b.n	8006c0c <HAL_RCC_OscConfig+0x378>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	2b05      	cmp	r3, #5
 8006bc8:	d110      	bne.n	8006bec <HAL_RCC_OscConfig+0x358>
 8006bca:	4b90      	ldr	r3, [pc, #576]	; (8006e0c <HAL_RCC_OscConfig+0x578>)
 8006bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bd0:	4a8e      	ldr	r2, [pc, #568]	; (8006e0c <HAL_RCC_OscConfig+0x578>)
 8006bd2:	f043 0304 	orr.w	r3, r3, #4
 8006bd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006bda:	4b8c      	ldr	r3, [pc, #560]	; (8006e0c <HAL_RCC_OscConfig+0x578>)
 8006bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006be0:	4a8a      	ldr	r2, [pc, #552]	; (8006e0c <HAL_RCC_OscConfig+0x578>)
 8006be2:	f043 0301 	orr.w	r3, r3, #1
 8006be6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006bea:	e00f      	b.n	8006c0c <HAL_RCC_OscConfig+0x378>
 8006bec:	4b87      	ldr	r3, [pc, #540]	; (8006e0c <HAL_RCC_OscConfig+0x578>)
 8006bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bf2:	4a86      	ldr	r2, [pc, #536]	; (8006e0c <HAL_RCC_OscConfig+0x578>)
 8006bf4:	f023 0301 	bic.w	r3, r3, #1
 8006bf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006bfc:	4b83      	ldr	r3, [pc, #524]	; (8006e0c <HAL_RCC_OscConfig+0x578>)
 8006bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c02:	4a82      	ldr	r2, [pc, #520]	; (8006e0c <HAL_RCC_OscConfig+0x578>)
 8006c04:	f023 0304 	bic.w	r3, r3, #4
 8006c08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d016      	beq.n	8006c42 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c14:	f7fb fb3e 	bl	8002294 <HAL_GetTick>
 8006c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c1a:	e00a      	b.n	8006c32 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c1c:	f7fb fb3a 	bl	8002294 <HAL_GetTick>
 8006c20:	4602      	mov	r2, r0
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d901      	bls.n	8006c32 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e142      	b.n	8006eb8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c32:	4b76      	ldr	r3, [pc, #472]	; (8006e0c <HAL_RCC_OscConfig+0x578>)
 8006c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c38:	f003 0302 	and.w	r3, r3, #2
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d0ed      	beq.n	8006c1c <HAL_RCC_OscConfig+0x388>
 8006c40:	e015      	b.n	8006c6e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c42:	f7fb fb27 	bl	8002294 <HAL_GetTick>
 8006c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006c48:	e00a      	b.n	8006c60 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c4a:	f7fb fb23 	bl	8002294 <HAL_GetTick>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	1ad3      	subs	r3, r2, r3
 8006c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d901      	bls.n	8006c60 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006c5c:	2303      	movs	r3, #3
 8006c5e:	e12b      	b.n	8006eb8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006c60:	4b6a      	ldr	r3, [pc, #424]	; (8006e0c <HAL_RCC_OscConfig+0x578>)
 8006c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c66:	f003 0302 	and.w	r3, r3, #2
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d1ed      	bne.n	8006c4a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006c6e:	7ffb      	ldrb	r3, [r7, #31]
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d105      	bne.n	8006c80 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c74:	4b65      	ldr	r3, [pc, #404]	; (8006e0c <HAL_RCC_OscConfig+0x578>)
 8006c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c78:	4a64      	ldr	r2, [pc, #400]	; (8006e0c <HAL_RCC_OscConfig+0x578>)
 8006c7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c7e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 0320 	and.w	r3, r3, #32
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d03c      	beq.n	8006d06 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	699b      	ldr	r3, [r3, #24]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d01c      	beq.n	8006cce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006c94:	4b5d      	ldr	r3, [pc, #372]	; (8006e0c <HAL_RCC_OscConfig+0x578>)
 8006c96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c9a:	4a5c      	ldr	r2, [pc, #368]	; (8006e0c <HAL_RCC_OscConfig+0x578>)
 8006c9c:	f043 0301 	orr.w	r3, r3, #1
 8006ca0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ca4:	f7fb faf6 	bl	8002294 <HAL_GetTick>
 8006ca8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006caa:	e008      	b.n	8006cbe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006cac:	f7fb faf2 	bl	8002294 <HAL_GetTick>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	1ad3      	subs	r3, r2, r3
 8006cb6:	2b02      	cmp	r3, #2
 8006cb8:	d901      	bls.n	8006cbe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006cba:	2303      	movs	r3, #3
 8006cbc:	e0fc      	b.n	8006eb8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006cbe:	4b53      	ldr	r3, [pc, #332]	; (8006e0c <HAL_RCC_OscConfig+0x578>)
 8006cc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006cc4:	f003 0302 	and.w	r3, r3, #2
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d0ef      	beq.n	8006cac <HAL_RCC_OscConfig+0x418>
 8006ccc:	e01b      	b.n	8006d06 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006cce:	4b4f      	ldr	r3, [pc, #316]	; (8006e0c <HAL_RCC_OscConfig+0x578>)
 8006cd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006cd4:	4a4d      	ldr	r2, [pc, #308]	; (8006e0c <HAL_RCC_OscConfig+0x578>)
 8006cd6:	f023 0301 	bic.w	r3, r3, #1
 8006cda:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cde:	f7fb fad9 	bl	8002294 <HAL_GetTick>
 8006ce2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006ce4:	e008      	b.n	8006cf8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006ce6:	f7fb fad5 	bl	8002294 <HAL_GetTick>
 8006cea:	4602      	mov	r2, r0
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	1ad3      	subs	r3, r2, r3
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	d901      	bls.n	8006cf8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006cf4:	2303      	movs	r3, #3
 8006cf6:	e0df      	b.n	8006eb8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006cf8:	4b44      	ldr	r3, [pc, #272]	; (8006e0c <HAL_RCC_OscConfig+0x578>)
 8006cfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006cfe:	f003 0302 	and.w	r3, r3, #2
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d1ef      	bne.n	8006ce6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	69db      	ldr	r3, [r3, #28]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	f000 80d3 	beq.w	8006eb6 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d10:	4b3e      	ldr	r3, [pc, #248]	; (8006e0c <HAL_RCC_OscConfig+0x578>)
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	f003 030c 	and.w	r3, r3, #12
 8006d18:	2b0c      	cmp	r3, #12
 8006d1a:	f000 808d 	beq.w	8006e38 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	69db      	ldr	r3, [r3, #28]
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	d15a      	bne.n	8006ddc <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d26:	4b39      	ldr	r3, [pc, #228]	; (8006e0c <HAL_RCC_OscConfig+0x578>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a38      	ldr	r2, [pc, #224]	; (8006e0c <HAL_RCC_OscConfig+0x578>)
 8006d2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d32:	f7fb faaf 	bl	8002294 <HAL_GetTick>
 8006d36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d38:	e008      	b.n	8006d4c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d3a:	f7fb faab 	bl	8002294 <HAL_GetTick>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	1ad3      	subs	r3, r2, r3
 8006d44:	2b02      	cmp	r3, #2
 8006d46:	d901      	bls.n	8006d4c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8006d48:	2303      	movs	r3, #3
 8006d4a:	e0b5      	b.n	8006eb8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d4c:	4b2f      	ldr	r3, [pc, #188]	; (8006e0c <HAL_RCC_OscConfig+0x578>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d1f0      	bne.n	8006d3a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d58:	4b2c      	ldr	r3, [pc, #176]	; (8006e0c <HAL_RCC_OscConfig+0x578>)
 8006d5a:	68da      	ldr	r2, [r3, #12]
 8006d5c:	4b2d      	ldr	r3, [pc, #180]	; (8006e14 <HAL_RCC_OscConfig+0x580>)
 8006d5e:	4013      	ands	r3, r2
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	6a11      	ldr	r1, [r2, #32]
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006d68:	3a01      	subs	r2, #1
 8006d6a:	0112      	lsls	r2, r2, #4
 8006d6c:	4311      	orrs	r1, r2
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006d72:	0212      	lsls	r2, r2, #8
 8006d74:	4311      	orrs	r1, r2
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006d7a:	0852      	lsrs	r2, r2, #1
 8006d7c:	3a01      	subs	r2, #1
 8006d7e:	0552      	lsls	r2, r2, #21
 8006d80:	4311      	orrs	r1, r2
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006d86:	0852      	lsrs	r2, r2, #1
 8006d88:	3a01      	subs	r2, #1
 8006d8a:	0652      	lsls	r2, r2, #25
 8006d8c:	4311      	orrs	r1, r2
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006d92:	06d2      	lsls	r2, r2, #27
 8006d94:	430a      	orrs	r2, r1
 8006d96:	491d      	ldr	r1, [pc, #116]	; (8006e0c <HAL_RCC_OscConfig+0x578>)
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d9c:	4b1b      	ldr	r3, [pc, #108]	; (8006e0c <HAL_RCC_OscConfig+0x578>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a1a      	ldr	r2, [pc, #104]	; (8006e0c <HAL_RCC_OscConfig+0x578>)
 8006da2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006da6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006da8:	4b18      	ldr	r3, [pc, #96]	; (8006e0c <HAL_RCC_OscConfig+0x578>)
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	4a17      	ldr	r2, [pc, #92]	; (8006e0c <HAL_RCC_OscConfig+0x578>)
 8006dae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006db2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006db4:	f7fb fa6e 	bl	8002294 <HAL_GetTick>
 8006db8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006dba:	e008      	b.n	8006dce <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dbc:	f7fb fa6a 	bl	8002294 <HAL_GetTick>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	1ad3      	subs	r3, r2, r3
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	d901      	bls.n	8006dce <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	e074      	b.n	8006eb8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006dce:	4b0f      	ldr	r3, [pc, #60]	; (8006e0c <HAL_RCC_OscConfig+0x578>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d0f0      	beq.n	8006dbc <HAL_RCC_OscConfig+0x528>
 8006dda:	e06c      	b.n	8006eb6 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ddc:	4b0b      	ldr	r3, [pc, #44]	; (8006e0c <HAL_RCC_OscConfig+0x578>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a0a      	ldr	r2, [pc, #40]	; (8006e0c <HAL_RCC_OscConfig+0x578>)
 8006de2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006de6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006de8:	4b08      	ldr	r3, [pc, #32]	; (8006e0c <HAL_RCC_OscConfig+0x578>)
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	4a07      	ldr	r2, [pc, #28]	; (8006e0c <HAL_RCC_OscConfig+0x578>)
 8006dee:	f023 0303 	bic.w	r3, r3, #3
 8006df2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006df4:	4b05      	ldr	r3, [pc, #20]	; (8006e0c <HAL_RCC_OscConfig+0x578>)
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	4a04      	ldr	r2, [pc, #16]	; (8006e0c <HAL_RCC_OscConfig+0x578>)
 8006dfa:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006dfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e02:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e04:	f7fb fa46 	bl	8002294 <HAL_GetTick>
 8006e08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e0a:	e00e      	b.n	8006e2a <HAL_RCC_OscConfig+0x596>
 8006e0c:	40021000 	.word	0x40021000
 8006e10:	40007000 	.word	0x40007000
 8006e14:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e18:	f7fb fa3c 	bl	8002294 <HAL_GetTick>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	1ad3      	subs	r3, r2, r3
 8006e22:	2b02      	cmp	r3, #2
 8006e24:	d901      	bls.n	8006e2a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8006e26:	2303      	movs	r3, #3
 8006e28:	e046      	b.n	8006eb8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e2a:	4b25      	ldr	r3, [pc, #148]	; (8006ec0 <HAL_RCC_OscConfig+0x62c>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d1f0      	bne.n	8006e18 <HAL_RCC_OscConfig+0x584>
 8006e36:	e03e      	b.n	8006eb6 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	69db      	ldr	r3, [r3, #28]
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d101      	bne.n	8006e44 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	e039      	b.n	8006eb8 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006e44:	4b1e      	ldr	r3, [pc, #120]	; (8006ec0 <HAL_RCC_OscConfig+0x62c>)
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	f003 0203 	and.w	r2, r3, #3
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6a1b      	ldr	r3, [r3, #32]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d12c      	bne.n	8006eb2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e62:	3b01      	subs	r3, #1
 8006e64:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d123      	bne.n	8006eb2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e74:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d11b      	bne.n	8006eb2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e84:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d113      	bne.n	8006eb2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e94:	085b      	lsrs	r3, r3, #1
 8006e96:	3b01      	subs	r3, #1
 8006e98:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d109      	bne.n	8006eb2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ea8:	085b      	lsrs	r3, r3, #1
 8006eaa:	3b01      	subs	r3, #1
 8006eac:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d001      	beq.n	8006eb6 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e000      	b.n	8006eb8 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8006eb6:	2300      	movs	r3, #0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3720      	adds	r7, #32
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	40021000 	.word	0x40021000

08006ec4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b086      	sub	sp, #24
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d101      	bne.n	8006edc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e11e      	b.n	800711a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006edc:	4b91      	ldr	r3, [pc, #580]	; (8007124 <HAL_RCC_ClockConfig+0x260>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 030f 	and.w	r3, r3, #15
 8006ee4:	683a      	ldr	r2, [r7, #0]
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d910      	bls.n	8006f0c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006eea:	4b8e      	ldr	r3, [pc, #568]	; (8007124 <HAL_RCC_ClockConfig+0x260>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f023 020f 	bic.w	r2, r3, #15
 8006ef2:	498c      	ldr	r1, [pc, #560]	; (8007124 <HAL_RCC_ClockConfig+0x260>)
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006efa:	4b8a      	ldr	r3, [pc, #552]	; (8007124 <HAL_RCC_ClockConfig+0x260>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 030f 	and.w	r3, r3, #15
 8006f02:	683a      	ldr	r2, [r7, #0]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d001      	beq.n	8006f0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e106      	b.n	800711a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f003 0301 	and.w	r3, r3, #1
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d073      	beq.n	8007000 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	2b03      	cmp	r3, #3
 8006f1e:	d129      	bne.n	8006f74 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f20:	4b81      	ldr	r3, [pc, #516]	; (8007128 <HAL_RCC_ClockConfig+0x264>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d101      	bne.n	8006f30 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e0f4      	b.n	800711a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006f30:	f000 f99e 	bl	8007270 <RCC_GetSysClockFreqFromPLLSource>
 8006f34:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	4a7c      	ldr	r2, [pc, #496]	; (800712c <HAL_RCC_ClockConfig+0x268>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d93f      	bls.n	8006fbe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006f3e:	4b7a      	ldr	r3, [pc, #488]	; (8007128 <HAL_RCC_ClockConfig+0x264>)
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d009      	beq.n	8006f5e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d033      	beq.n	8006fbe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d12f      	bne.n	8006fbe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006f5e:	4b72      	ldr	r3, [pc, #456]	; (8007128 <HAL_RCC_ClockConfig+0x264>)
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f66:	4a70      	ldr	r2, [pc, #448]	; (8007128 <HAL_RCC_ClockConfig+0x264>)
 8006f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f6c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006f6e:	2380      	movs	r3, #128	; 0x80
 8006f70:	617b      	str	r3, [r7, #20]
 8006f72:	e024      	b.n	8006fbe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	2b02      	cmp	r3, #2
 8006f7a:	d107      	bne.n	8006f8c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f7c:	4b6a      	ldr	r3, [pc, #424]	; (8007128 <HAL_RCC_ClockConfig+0x264>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d109      	bne.n	8006f9c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e0c6      	b.n	800711a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006f8c:	4b66      	ldr	r3, [pc, #408]	; (8007128 <HAL_RCC_ClockConfig+0x264>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d101      	bne.n	8006f9c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e0be      	b.n	800711a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006f9c:	f000 f8ce 	bl	800713c <HAL_RCC_GetSysClockFreq>
 8006fa0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	4a61      	ldr	r2, [pc, #388]	; (800712c <HAL_RCC_ClockConfig+0x268>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d909      	bls.n	8006fbe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006faa:	4b5f      	ldr	r3, [pc, #380]	; (8007128 <HAL_RCC_ClockConfig+0x264>)
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006fb2:	4a5d      	ldr	r2, [pc, #372]	; (8007128 <HAL_RCC_ClockConfig+0x264>)
 8006fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fb8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006fba:	2380      	movs	r3, #128	; 0x80
 8006fbc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006fbe:	4b5a      	ldr	r3, [pc, #360]	; (8007128 <HAL_RCC_ClockConfig+0x264>)
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	f023 0203 	bic.w	r2, r3, #3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	4957      	ldr	r1, [pc, #348]	; (8007128 <HAL_RCC_ClockConfig+0x264>)
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fd0:	f7fb f960 	bl	8002294 <HAL_GetTick>
 8006fd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fd6:	e00a      	b.n	8006fee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fd8:	f7fb f95c 	bl	8002294 <HAL_GetTick>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	1ad3      	subs	r3, r2, r3
 8006fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d901      	bls.n	8006fee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006fea:	2303      	movs	r3, #3
 8006fec:	e095      	b.n	800711a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fee:	4b4e      	ldr	r3, [pc, #312]	; (8007128 <HAL_RCC_ClockConfig+0x264>)
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	f003 020c 	and.w	r2, r3, #12
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d1eb      	bne.n	8006fd8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f003 0302 	and.w	r3, r3, #2
 8007008:	2b00      	cmp	r3, #0
 800700a:	d023      	beq.n	8007054 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 0304 	and.w	r3, r3, #4
 8007014:	2b00      	cmp	r3, #0
 8007016:	d005      	beq.n	8007024 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007018:	4b43      	ldr	r3, [pc, #268]	; (8007128 <HAL_RCC_ClockConfig+0x264>)
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	4a42      	ldr	r2, [pc, #264]	; (8007128 <HAL_RCC_ClockConfig+0x264>)
 800701e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007022:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 0308 	and.w	r3, r3, #8
 800702c:	2b00      	cmp	r3, #0
 800702e:	d007      	beq.n	8007040 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007030:	4b3d      	ldr	r3, [pc, #244]	; (8007128 <HAL_RCC_ClockConfig+0x264>)
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007038:	4a3b      	ldr	r2, [pc, #236]	; (8007128 <HAL_RCC_ClockConfig+0x264>)
 800703a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800703e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007040:	4b39      	ldr	r3, [pc, #228]	; (8007128 <HAL_RCC_ClockConfig+0x264>)
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	4936      	ldr	r1, [pc, #216]	; (8007128 <HAL_RCC_ClockConfig+0x264>)
 800704e:	4313      	orrs	r3, r2
 8007050:	608b      	str	r3, [r1, #8]
 8007052:	e008      	b.n	8007066 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	2b80      	cmp	r3, #128	; 0x80
 8007058:	d105      	bne.n	8007066 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800705a:	4b33      	ldr	r3, [pc, #204]	; (8007128 <HAL_RCC_ClockConfig+0x264>)
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	4a32      	ldr	r2, [pc, #200]	; (8007128 <HAL_RCC_ClockConfig+0x264>)
 8007060:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007064:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007066:	4b2f      	ldr	r3, [pc, #188]	; (8007124 <HAL_RCC_ClockConfig+0x260>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f003 030f 	and.w	r3, r3, #15
 800706e:	683a      	ldr	r2, [r7, #0]
 8007070:	429a      	cmp	r2, r3
 8007072:	d21d      	bcs.n	80070b0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007074:	4b2b      	ldr	r3, [pc, #172]	; (8007124 <HAL_RCC_ClockConfig+0x260>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f023 020f 	bic.w	r2, r3, #15
 800707c:	4929      	ldr	r1, [pc, #164]	; (8007124 <HAL_RCC_ClockConfig+0x260>)
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	4313      	orrs	r3, r2
 8007082:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007084:	f7fb f906 	bl	8002294 <HAL_GetTick>
 8007088:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800708a:	e00a      	b.n	80070a2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800708c:	f7fb f902 	bl	8002294 <HAL_GetTick>
 8007090:	4602      	mov	r2, r0
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	1ad3      	subs	r3, r2, r3
 8007096:	f241 3288 	movw	r2, #5000	; 0x1388
 800709a:	4293      	cmp	r3, r2
 800709c:	d901      	bls.n	80070a2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800709e:	2303      	movs	r3, #3
 80070a0:	e03b      	b.n	800711a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070a2:	4b20      	ldr	r3, [pc, #128]	; (8007124 <HAL_RCC_ClockConfig+0x260>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f003 030f 	and.w	r3, r3, #15
 80070aa:	683a      	ldr	r2, [r7, #0]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d1ed      	bne.n	800708c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 0304 	and.w	r3, r3, #4
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d008      	beq.n	80070ce <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80070bc:	4b1a      	ldr	r3, [pc, #104]	; (8007128 <HAL_RCC_ClockConfig+0x264>)
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	4917      	ldr	r1, [pc, #92]	; (8007128 <HAL_RCC_ClockConfig+0x264>)
 80070ca:	4313      	orrs	r3, r2
 80070cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 0308 	and.w	r3, r3, #8
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d009      	beq.n	80070ee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80070da:	4b13      	ldr	r3, [pc, #76]	; (8007128 <HAL_RCC_ClockConfig+0x264>)
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	691b      	ldr	r3, [r3, #16]
 80070e6:	00db      	lsls	r3, r3, #3
 80070e8:	490f      	ldr	r1, [pc, #60]	; (8007128 <HAL_RCC_ClockConfig+0x264>)
 80070ea:	4313      	orrs	r3, r2
 80070ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80070ee:	f000 f825 	bl	800713c <HAL_RCC_GetSysClockFreq>
 80070f2:	4602      	mov	r2, r0
 80070f4:	4b0c      	ldr	r3, [pc, #48]	; (8007128 <HAL_RCC_ClockConfig+0x264>)
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	091b      	lsrs	r3, r3, #4
 80070fa:	f003 030f 	and.w	r3, r3, #15
 80070fe:	490c      	ldr	r1, [pc, #48]	; (8007130 <HAL_RCC_ClockConfig+0x26c>)
 8007100:	5ccb      	ldrb	r3, [r1, r3]
 8007102:	f003 031f 	and.w	r3, r3, #31
 8007106:	fa22 f303 	lsr.w	r3, r2, r3
 800710a:	4a0a      	ldr	r2, [pc, #40]	; (8007134 <HAL_RCC_ClockConfig+0x270>)
 800710c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800710e:	4b0a      	ldr	r3, [pc, #40]	; (8007138 <HAL_RCC_ClockConfig+0x274>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4618      	mov	r0, r3
 8007114:	f7fb f872 	bl	80021fc <HAL_InitTick>
 8007118:	4603      	mov	r3, r0
}
 800711a:	4618      	mov	r0, r3
 800711c:	3718      	adds	r7, #24
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	40022000 	.word	0x40022000
 8007128:	40021000 	.word	0x40021000
 800712c:	04c4b400 	.word	0x04c4b400
 8007130:	0800c7c4 	.word	0x0800c7c4
 8007134:	20000000 	.word	0x20000000
 8007138:	20000004 	.word	0x20000004

0800713c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800713c:	b480      	push	{r7}
 800713e:	b087      	sub	sp, #28
 8007140:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007142:	4b2c      	ldr	r3, [pc, #176]	; (80071f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	f003 030c 	and.w	r3, r3, #12
 800714a:	2b04      	cmp	r3, #4
 800714c:	d102      	bne.n	8007154 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800714e:	4b2a      	ldr	r3, [pc, #168]	; (80071f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007150:	613b      	str	r3, [r7, #16]
 8007152:	e047      	b.n	80071e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007154:	4b27      	ldr	r3, [pc, #156]	; (80071f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	f003 030c 	and.w	r3, r3, #12
 800715c:	2b08      	cmp	r3, #8
 800715e:	d102      	bne.n	8007166 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007160:	4b26      	ldr	r3, [pc, #152]	; (80071fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8007162:	613b      	str	r3, [r7, #16]
 8007164:	e03e      	b.n	80071e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007166:	4b23      	ldr	r3, [pc, #140]	; (80071f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	f003 030c 	and.w	r3, r3, #12
 800716e:	2b0c      	cmp	r3, #12
 8007170:	d136      	bne.n	80071e0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007172:	4b20      	ldr	r3, [pc, #128]	; (80071f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	f003 0303 	and.w	r3, r3, #3
 800717a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800717c:	4b1d      	ldr	r3, [pc, #116]	; (80071f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	091b      	lsrs	r3, r3, #4
 8007182:	f003 030f 	and.w	r3, r3, #15
 8007186:	3301      	adds	r3, #1
 8007188:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2b03      	cmp	r3, #3
 800718e:	d10c      	bne.n	80071aa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007190:	4a1a      	ldr	r2, [pc, #104]	; (80071fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	fbb2 f3f3 	udiv	r3, r2, r3
 8007198:	4a16      	ldr	r2, [pc, #88]	; (80071f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800719a:	68d2      	ldr	r2, [r2, #12]
 800719c:	0a12      	lsrs	r2, r2, #8
 800719e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80071a2:	fb02 f303 	mul.w	r3, r2, r3
 80071a6:	617b      	str	r3, [r7, #20]
      break;
 80071a8:	e00c      	b.n	80071c4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80071aa:	4a13      	ldr	r2, [pc, #76]	; (80071f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80071b2:	4a10      	ldr	r2, [pc, #64]	; (80071f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071b4:	68d2      	ldr	r2, [r2, #12]
 80071b6:	0a12      	lsrs	r2, r2, #8
 80071b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80071bc:	fb02 f303 	mul.w	r3, r2, r3
 80071c0:	617b      	str	r3, [r7, #20]
      break;
 80071c2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80071c4:	4b0b      	ldr	r3, [pc, #44]	; (80071f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	0e5b      	lsrs	r3, r3, #25
 80071ca:	f003 0303 	and.w	r3, r3, #3
 80071ce:	3301      	adds	r3, #1
 80071d0:	005b      	lsls	r3, r3, #1
 80071d2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80071d4:	697a      	ldr	r2, [r7, #20]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80071dc:	613b      	str	r3, [r7, #16]
 80071de:	e001      	b.n	80071e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80071e0:	2300      	movs	r3, #0
 80071e2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80071e4:	693b      	ldr	r3, [r7, #16]
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	371c      	adds	r7, #28
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	40021000 	.word	0x40021000
 80071f8:	00f42400 	.word	0x00f42400
 80071fc:	007a1200 	.word	0x007a1200

08007200 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007200:	b480      	push	{r7}
 8007202:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007204:	4b03      	ldr	r3, [pc, #12]	; (8007214 <HAL_RCC_GetHCLKFreq+0x14>)
 8007206:	681b      	ldr	r3, [r3, #0]
}
 8007208:	4618      	mov	r0, r3
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr
 8007212:	bf00      	nop
 8007214:	20000000 	.word	0x20000000

08007218 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800721c:	f7ff fff0 	bl	8007200 <HAL_RCC_GetHCLKFreq>
 8007220:	4602      	mov	r2, r0
 8007222:	4b06      	ldr	r3, [pc, #24]	; (800723c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	0a1b      	lsrs	r3, r3, #8
 8007228:	f003 0307 	and.w	r3, r3, #7
 800722c:	4904      	ldr	r1, [pc, #16]	; (8007240 <HAL_RCC_GetPCLK1Freq+0x28>)
 800722e:	5ccb      	ldrb	r3, [r1, r3]
 8007230:	f003 031f 	and.w	r3, r3, #31
 8007234:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007238:	4618      	mov	r0, r3
 800723a:	bd80      	pop	{r7, pc}
 800723c:	40021000 	.word	0x40021000
 8007240:	0800c7d4 	.word	0x0800c7d4

08007244 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007248:	f7ff ffda 	bl	8007200 <HAL_RCC_GetHCLKFreq>
 800724c:	4602      	mov	r2, r0
 800724e:	4b06      	ldr	r3, [pc, #24]	; (8007268 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	0adb      	lsrs	r3, r3, #11
 8007254:	f003 0307 	and.w	r3, r3, #7
 8007258:	4904      	ldr	r1, [pc, #16]	; (800726c <HAL_RCC_GetPCLK2Freq+0x28>)
 800725a:	5ccb      	ldrb	r3, [r1, r3]
 800725c:	f003 031f 	and.w	r3, r3, #31
 8007260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007264:	4618      	mov	r0, r3
 8007266:	bd80      	pop	{r7, pc}
 8007268:	40021000 	.word	0x40021000
 800726c:	0800c7d4 	.word	0x0800c7d4

08007270 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007270:	b480      	push	{r7}
 8007272:	b087      	sub	sp, #28
 8007274:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007276:	4b1e      	ldr	r3, [pc, #120]	; (80072f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	f003 0303 	and.w	r3, r3, #3
 800727e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007280:	4b1b      	ldr	r3, [pc, #108]	; (80072f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	091b      	lsrs	r3, r3, #4
 8007286:	f003 030f 	and.w	r3, r3, #15
 800728a:	3301      	adds	r3, #1
 800728c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	2b03      	cmp	r3, #3
 8007292:	d10c      	bne.n	80072ae <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007294:	4a17      	ldr	r2, [pc, #92]	; (80072f4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	fbb2 f3f3 	udiv	r3, r2, r3
 800729c:	4a14      	ldr	r2, [pc, #80]	; (80072f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800729e:	68d2      	ldr	r2, [r2, #12]
 80072a0:	0a12      	lsrs	r2, r2, #8
 80072a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80072a6:	fb02 f303 	mul.w	r3, r2, r3
 80072aa:	617b      	str	r3, [r7, #20]
    break;
 80072ac:	e00c      	b.n	80072c8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80072ae:	4a12      	ldr	r2, [pc, #72]	; (80072f8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80072b6:	4a0e      	ldr	r2, [pc, #56]	; (80072f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80072b8:	68d2      	ldr	r2, [r2, #12]
 80072ba:	0a12      	lsrs	r2, r2, #8
 80072bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80072c0:	fb02 f303 	mul.w	r3, r2, r3
 80072c4:	617b      	str	r3, [r7, #20]
    break;
 80072c6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80072c8:	4b09      	ldr	r3, [pc, #36]	; (80072f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	0e5b      	lsrs	r3, r3, #25
 80072ce:	f003 0303 	and.w	r3, r3, #3
 80072d2:	3301      	adds	r3, #1
 80072d4:	005b      	lsls	r3, r3, #1
 80072d6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80072d8:	697a      	ldr	r2, [r7, #20]
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80072e0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80072e2:	687b      	ldr	r3, [r7, #4]
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	371c      	adds	r7, #28
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr
 80072f0:	40021000 	.word	0x40021000
 80072f4:	007a1200 	.word	0x007a1200
 80072f8:	00f42400 	.word	0x00f42400

080072fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b086      	sub	sp, #24
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007304:	2300      	movs	r3, #0
 8007306:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007308:	2300      	movs	r3, #0
 800730a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007314:	2b00      	cmp	r3, #0
 8007316:	f000 8098 	beq.w	800744a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800731a:	2300      	movs	r3, #0
 800731c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800731e:	4b43      	ldr	r3, [pc, #268]	; (800742c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007326:	2b00      	cmp	r3, #0
 8007328:	d10d      	bne.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800732a:	4b40      	ldr	r3, [pc, #256]	; (800742c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800732c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800732e:	4a3f      	ldr	r2, [pc, #252]	; (800742c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007334:	6593      	str	r3, [r2, #88]	; 0x58
 8007336:	4b3d      	ldr	r3, [pc, #244]	; (800742c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800733a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800733e:	60bb      	str	r3, [r7, #8]
 8007340:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007342:	2301      	movs	r3, #1
 8007344:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007346:	4b3a      	ldr	r3, [pc, #232]	; (8007430 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a39      	ldr	r2, [pc, #228]	; (8007430 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800734c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007350:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007352:	f7fa ff9f 	bl	8002294 <HAL_GetTick>
 8007356:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007358:	e009      	b.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800735a:	f7fa ff9b 	bl	8002294 <HAL_GetTick>
 800735e:	4602      	mov	r2, r0
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	1ad3      	subs	r3, r2, r3
 8007364:	2b02      	cmp	r3, #2
 8007366:	d902      	bls.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007368:	2303      	movs	r3, #3
 800736a:	74fb      	strb	r3, [r7, #19]
        break;
 800736c:	e005      	b.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800736e:	4b30      	ldr	r3, [pc, #192]	; (8007430 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007376:	2b00      	cmp	r3, #0
 8007378:	d0ef      	beq.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800737a:	7cfb      	ldrb	r3, [r7, #19]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d159      	bne.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007380:	4b2a      	ldr	r3, [pc, #168]	; (800742c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007386:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800738a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d01e      	beq.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007396:	697a      	ldr	r2, [r7, #20]
 8007398:	429a      	cmp	r2, r3
 800739a:	d019      	beq.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800739c:	4b23      	ldr	r3, [pc, #140]	; (800742c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800739e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80073a8:	4b20      	ldr	r3, [pc, #128]	; (800742c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073ae:	4a1f      	ldr	r2, [pc, #124]	; (800742c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80073b8:	4b1c      	ldr	r3, [pc, #112]	; (800742c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073be:	4a1b      	ldr	r2, [pc, #108]	; (800742c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80073c8:	4a18      	ldr	r2, [pc, #96]	; (800742c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	f003 0301 	and.w	r3, r3, #1
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d016      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073da:	f7fa ff5b 	bl	8002294 <HAL_GetTick>
 80073de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80073e0:	e00b      	b.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073e2:	f7fa ff57 	bl	8002294 <HAL_GetTick>
 80073e6:	4602      	mov	r2, r0
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	1ad3      	subs	r3, r2, r3
 80073ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d902      	bls.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80073f4:	2303      	movs	r3, #3
 80073f6:	74fb      	strb	r3, [r7, #19]
            break;
 80073f8:	e006      	b.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80073fa:	4b0c      	ldr	r3, [pc, #48]	; (800742c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007400:	f003 0302 	and.w	r3, r3, #2
 8007404:	2b00      	cmp	r3, #0
 8007406:	d0ec      	beq.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007408:	7cfb      	ldrb	r3, [r7, #19]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d10b      	bne.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800740e:	4b07      	ldr	r3, [pc, #28]	; (800742c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007414:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800741c:	4903      	ldr	r1, [pc, #12]	; (800742c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800741e:	4313      	orrs	r3, r2
 8007420:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007424:	e008      	b.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007426:	7cfb      	ldrb	r3, [r7, #19]
 8007428:	74bb      	strb	r3, [r7, #18]
 800742a:	e005      	b.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800742c:	40021000 	.word	0x40021000
 8007430:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007434:	7cfb      	ldrb	r3, [r7, #19]
 8007436:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007438:	7c7b      	ldrb	r3, [r7, #17]
 800743a:	2b01      	cmp	r3, #1
 800743c:	d105      	bne.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800743e:	4baf      	ldr	r3, [pc, #700]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007442:	4aae      	ldr	r2, [pc, #696]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007444:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007448:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f003 0301 	and.w	r3, r3, #1
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00a      	beq.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007456:	4ba9      	ldr	r3, [pc, #676]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800745c:	f023 0203 	bic.w	r2, r3, #3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	49a5      	ldr	r1, [pc, #660]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007466:	4313      	orrs	r3, r2
 8007468:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 0302 	and.w	r3, r3, #2
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00a      	beq.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007478:	4ba0      	ldr	r3, [pc, #640]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800747a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800747e:	f023 020c 	bic.w	r2, r3, #12
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	499d      	ldr	r1, [pc, #628]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007488:	4313      	orrs	r3, r2
 800748a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 0304 	and.w	r3, r3, #4
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00a      	beq.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800749a:	4b98      	ldr	r3, [pc, #608]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800749c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	4994      	ldr	r1, [pc, #592]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80074aa:	4313      	orrs	r3, r2
 80074ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f003 0308 	and.w	r3, r3, #8
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d00a      	beq.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80074bc:	4b8f      	ldr	r3, [pc, #572]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80074be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	691b      	ldr	r3, [r3, #16]
 80074ca:	498c      	ldr	r1, [pc, #560]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80074cc:	4313      	orrs	r3, r2
 80074ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f003 0310 	and.w	r3, r3, #16
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d00a      	beq.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80074de:	4b87      	ldr	r3, [pc, #540]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80074e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	695b      	ldr	r3, [r3, #20]
 80074ec:	4983      	ldr	r1, [pc, #524]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80074ee:	4313      	orrs	r3, r2
 80074f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f003 0320 	and.w	r3, r3, #32
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d00a      	beq.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007500:	4b7e      	ldr	r3, [pc, #504]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007506:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	699b      	ldr	r3, [r3, #24]
 800750e:	497b      	ldr	r1, [pc, #492]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007510:	4313      	orrs	r3, r2
 8007512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800751e:	2b00      	cmp	r3, #0
 8007520:	d00a      	beq.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007522:	4b76      	ldr	r3, [pc, #472]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007528:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	69db      	ldr	r3, [r3, #28]
 8007530:	4972      	ldr	r1, [pc, #456]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007532:	4313      	orrs	r3, r2
 8007534:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007540:	2b00      	cmp	r3, #0
 8007542:	d00a      	beq.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007544:	4b6d      	ldr	r3, [pc, #436]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800754a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6a1b      	ldr	r3, [r3, #32]
 8007552:	496a      	ldr	r1, [pc, #424]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007554:	4313      	orrs	r3, r2
 8007556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007562:	2b00      	cmp	r3, #0
 8007564:	d00a      	beq.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007566:	4b65      	ldr	r3, [pc, #404]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800756c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007574:	4961      	ldr	r1, [pc, #388]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007576:	4313      	orrs	r3, r2
 8007578:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007584:	2b00      	cmp	r3, #0
 8007586:	d00a      	beq.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007588:	4b5c      	ldr	r3, [pc, #368]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800758a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800758e:	f023 0203 	bic.w	r2, r3, #3
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007596:	4959      	ldr	r1, [pc, #356]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007598:	4313      	orrs	r3, r2
 800759a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d00a      	beq.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80075aa:	4b54      	ldr	r3, [pc, #336]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80075ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b8:	4950      	ldr	r1, [pc, #320]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80075ba:	4313      	orrs	r3, r2
 80075bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d015      	beq.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80075cc:	4b4b      	ldr	r3, [pc, #300]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80075ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075da:	4948      	ldr	r1, [pc, #288]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80075dc:	4313      	orrs	r3, r2
 80075de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075ea:	d105      	bne.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80075ec:	4b43      	ldr	r3, [pc, #268]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	4a42      	ldr	r2, [pc, #264]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80075f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075f6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007600:	2b00      	cmp	r3, #0
 8007602:	d015      	beq.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007604:	4b3d      	ldr	r3, [pc, #244]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800760a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007612:	493a      	ldr	r1, [pc, #232]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007614:	4313      	orrs	r3, r2
 8007616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800761e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007622:	d105      	bne.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007624:	4b35      	ldr	r3, [pc, #212]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	4a34      	ldr	r2, [pc, #208]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800762a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800762e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007638:	2b00      	cmp	r3, #0
 800763a:	d015      	beq.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800763c:	4b2f      	ldr	r3, [pc, #188]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800763e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007642:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800764a:	492c      	ldr	r1, [pc, #176]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800764c:	4313      	orrs	r3, r2
 800764e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007656:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800765a:	d105      	bne.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800765c:	4b27      	ldr	r3, [pc, #156]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	4a26      	ldr	r2, [pc, #152]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007662:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007666:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007670:	2b00      	cmp	r3, #0
 8007672:	d015      	beq.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007674:	4b21      	ldr	r3, [pc, #132]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800767a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007682:	491e      	ldr	r1, [pc, #120]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007684:	4313      	orrs	r3, r2
 8007686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800768e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007692:	d105      	bne.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007694:	4b19      	ldr	r3, [pc, #100]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007696:	68db      	ldr	r3, [r3, #12]
 8007698:	4a18      	ldr	r2, [pc, #96]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800769a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800769e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d015      	beq.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80076ac:	4b13      	ldr	r3, [pc, #76]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80076ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ba:	4910      	ldr	r1, [pc, #64]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80076bc:	4313      	orrs	r3, r2
 80076be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076ca:	d105      	bne.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80076cc:	4b0b      	ldr	r3, [pc, #44]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	4a0a      	ldr	r2, [pc, #40]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80076d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076d6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d018      	beq.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80076e4:	4b05      	ldr	r3, [pc, #20]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80076e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076f2:	4902      	ldr	r1, [pc, #8]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80076f4:	4313      	orrs	r3, r2
 80076f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80076fa:	e001      	b.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80076fc:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007704:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007708:	d105      	bne.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800770a:	4b21      	ldr	r3, [pc, #132]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800770c:	68db      	ldr	r3, [r3, #12]
 800770e:	4a20      	ldr	r2, [pc, #128]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8007710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007714:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800771e:	2b00      	cmp	r3, #0
 8007720:	d015      	beq.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007722:	4b1b      	ldr	r3, [pc, #108]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8007724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007728:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007730:	4917      	ldr	r1, [pc, #92]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8007732:	4313      	orrs	r3, r2
 8007734:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800773c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007740:	d105      	bne.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007742:	4b13      	ldr	r3, [pc, #76]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	4a12      	ldr	r2, [pc, #72]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8007748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800774c:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007756:	2b00      	cmp	r3, #0
 8007758:	d015      	beq.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800775a:	4b0d      	ldr	r3, [pc, #52]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800775c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007760:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007768:	4909      	ldr	r1, [pc, #36]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800776a:	4313      	orrs	r3, r2
 800776c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007774:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007778:	d105      	bne.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800777a:	4b05      	ldr	r3, [pc, #20]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800777c:	68db      	ldr	r3, [r3, #12]
 800777e:	4a04      	ldr	r2, [pc, #16]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8007780:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007784:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007786:	7cbb      	ldrb	r3, [r7, #18]
}
 8007788:	4618      	mov	r0, r3
 800778a:	3718      	adds	r7, #24
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}
 8007790:	40021000 	.word	0x40021000

08007794 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d101      	bne.n	80077a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	e049      	b.n	800783a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d106      	bne.n	80077c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f7fa fbf4 	bl	8001fa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2202      	movs	r2, #2
 80077c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	3304      	adds	r3, #4
 80077d0:	4619      	mov	r1, r3
 80077d2:	4610      	mov	r0, r2
 80077d4:	f000 fb68 	bl	8007ea8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2201      	movs	r2, #1
 80077dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2201      	movs	r2, #1
 80077f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2201      	movs	r2, #1
 8007804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2201      	movs	r2, #1
 8007814:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2201      	movs	r2, #1
 800781c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007838:	2300      	movs	r3, #0
}
 800783a:	4618      	mov	r0, r3
 800783c:	3708      	adds	r7, #8
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
	...

08007844 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007852:	b2db      	uxtb	r3, r3
 8007854:	2b01      	cmp	r3, #1
 8007856:	d001      	beq.n	800785c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	e054      	b.n	8007906 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2202      	movs	r2, #2
 8007860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	68da      	ldr	r2, [r3, #12]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f042 0201 	orr.w	r2, r2, #1
 8007872:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a26      	ldr	r2, [pc, #152]	; (8007914 <HAL_TIM_Base_Start_IT+0xd0>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d022      	beq.n	80078c4 <HAL_TIM_Base_Start_IT+0x80>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007886:	d01d      	beq.n	80078c4 <HAL_TIM_Base_Start_IT+0x80>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a22      	ldr	r2, [pc, #136]	; (8007918 <HAL_TIM_Base_Start_IT+0xd4>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d018      	beq.n	80078c4 <HAL_TIM_Base_Start_IT+0x80>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a21      	ldr	r2, [pc, #132]	; (800791c <HAL_TIM_Base_Start_IT+0xd8>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d013      	beq.n	80078c4 <HAL_TIM_Base_Start_IT+0x80>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a1f      	ldr	r2, [pc, #124]	; (8007920 <HAL_TIM_Base_Start_IT+0xdc>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d00e      	beq.n	80078c4 <HAL_TIM_Base_Start_IT+0x80>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a1e      	ldr	r2, [pc, #120]	; (8007924 <HAL_TIM_Base_Start_IT+0xe0>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d009      	beq.n	80078c4 <HAL_TIM_Base_Start_IT+0x80>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a1c      	ldr	r2, [pc, #112]	; (8007928 <HAL_TIM_Base_Start_IT+0xe4>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d004      	beq.n	80078c4 <HAL_TIM_Base_Start_IT+0x80>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a1b      	ldr	r2, [pc, #108]	; (800792c <HAL_TIM_Base_Start_IT+0xe8>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d115      	bne.n	80078f0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	689a      	ldr	r2, [r3, #8]
 80078ca:	4b19      	ldr	r3, [pc, #100]	; (8007930 <HAL_TIM_Base_Start_IT+0xec>)
 80078cc:	4013      	ands	r3, r2
 80078ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2b06      	cmp	r3, #6
 80078d4:	d015      	beq.n	8007902 <HAL_TIM_Base_Start_IT+0xbe>
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078dc:	d011      	beq.n	8007902 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f042 0201 	orr.w	r2, r2, #1
 80078ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078ee:	e008      	b.n	8007902 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f042 0201 	orr.w	r2, r2, #1
 80078fe:	601a      	str	r2, [r3, #0]
 8007900:	e000      	b.n	8007904 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007902:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007904:	2300      	movs	r3, #0
}
 8007906:	4618      	mov	r0, r3
 8007908:	3714      	adds	r7, #20
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr
 8007912:	bf00      	nop
 8007914:	40012c00 	.word	0x40012c00
 8007918:	40000400 	.word	0x40000400
 800791c:	40000800 	.word	0x40000800
 8007920:	40000c00 	.word	0x40000c00
 8007924:	40013400 	.word	0x40013400
 8007928:	40014000 	.word	0x40014000
 800792c:	40015000 	.word	0x40015000
 8007930:	00010007 	.word	0x00010007

08007934 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	f003 0302 	and.w	r3, r3, #2
 8007946:	2b02      	cmp	r3, #2
 8007948:	d122      	bne.n	8007990 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	68db      	ldr	r3, [r3, #12]
 8007950:	f003 0302 	and.w	r3, r3, #2
 8007954:	2b02      	cmp	r3, #2
 8007956:	d11b      	bne.n	8007990 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f06f 0202 	mvn.w	r2, #2
 8007960:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2201      	movs	r2, #1
 8007966:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	699b      	ldr	r3, [r3, #24]
 800796e:	f003 0303 	and.w	r3, r3, #3
 8007972:	2b00      	cmp	r3, #0
 8007974:	d003      	beq.n	800797e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 fa78 	bl	8007e6c <HAL_TIM_IC_CaptureCallback>
 800797c:	e005      	b.n	800798a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 fa6a 	bl	8007e58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 fa7b 	bl	8007e80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2200      	movs	r2, #0
 800798e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	691b      	ldr	r3, [r3, #16]
 8007996:	f003 0304 	and.w	r3, r3, #4
 800799a:	2b04      	cmp	r3, #4
 800799c:	d122      	bne.n	80079e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	f003 0304 	and.w	r3, r3, #4
 80079a8:	2b04      	cmp	r3, #4
 80079aa:	d11b      	bne.n	80079e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f06f 0204 	mvn.w	r2, #4
 80079b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2202      	movs	r2, #2
 80079ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	699b      	ldr	r3, [r3, #24]
 80079c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d003      	beq.n	80079d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 fa4e 	bl	8007e6c <HAL_TIM_IC_CaptureCallback>
 80079d0:	e005      	b.n	80079de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 fa40 	bl	8007e58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 fa51 	bl	8007e80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	691b      	ldr	r3, [r3, #16]
 80079ea:	f003 0308 	and.w	r3, r3, #8
 80079ee:	2b08      	cmp	r3, #8
 80079f0:	d122      	bne.n	8007a38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	68db      	ldr	r3, [r3, #12]
 80079f8:	f003 0308 	and.w	r3, r3, #8
 80079fc:	2b08      	cmp	r3, #8
 80079fe:	d11b      	bne.n	8007a38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f06f 0208 	mvn.w	r2, #8
 8007a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2204      	movs	r2, #4
 8007a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	69db      	ldr	r3, [r3, #28]
 8007a16:	f003 0303 	and.w	r3, r3, #3
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d003      	beq.n	8007a26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 fa24 	bl	8007e6c <HAL_TIM_IC_CaptureCallback>
 8007a24:	e005      	b.n	8007a32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 fa16 	bl	8007e58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 fa27 	bl	8007e80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	691b      	ldr	r3, [r3, #16]
 8007a3e:	f003 0310 	and.w	r3, r3, #16
 8007a42:	2b10      	cmp	r3, #16
 8007a44:	d122      	bne.n	8007a8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	68db      	ldr	r3, [r3, #12]
 8007a4c:	f003 0310 	and.w	r3, r3, #16
 8007a50:	2b10      	cmp	r3, #16
 8007a52:	d11b      	bne.n	8007a8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f06f 0210 	mvn.w	r2, #16
 8007a5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2208      	movs	r2, #8
 8007a62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	69db      	ldr	r3, [r3, #28]
 8007a6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d003      	beq.n	8007a7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 f9fa 	bl	8007e6c <HAL_TIM_IC_CaptureCallback>
 8007a78:	e005      	b.n	8007a86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 f9ec 	bl	8007e58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 f9fd 	bl	8007e80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	f003 0301 	and.w	r3, r3, #1
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d10e      	bne.n	8007ab8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	f003 0301 	and.w	r3, r3, #1
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d107      	bne.n	8007ab8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f06f 0201 	mvn.w	r2, #1
 8007ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f7fa f8b4 	bl	8001c20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	691b      	ldr	r3, [r3, #16]
 8007abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ac2:	2b80      	cmp	r3, #128	; 0x80
 8007ac4:	d10e      	bne.n	8007ae4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	68db      	ldr	r3, [r3, #12]
 8007acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ad0:	2b80      	cmp	r3, #128	; 0x80
 8007ad2:	d107      	bne.n	8007ae4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 fbc6 	bl	8008270 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	691b      	ldr	r3, [r3, #16]
 8007aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007af2:	d10e      	bne.n	8007b12 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	68db      	ldr	r3, [r3, #12]
 8007afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007afe:	2b80      	cmp	r3, #128	; 0x80
 8007b00:	d107      	bne.n	8007b12 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007b0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 fbb9 	bl	8008284 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	691b      	ldr	r3, [r3, #16]
 8007b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b1c:	2b40      	cmp	r3, #64	; 0x40
 8007b1e:	d10e      	bne.n	8007b3e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	68db      	ldr	r3, [r3, #12]
 8007b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b2a:	2b40      	cmp	r3, #64	; 0x40
 8007b2c:	d107      	bne.n	8007b3e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007b36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f000 f9ab 	bl	8007e94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	691b      	ldr	r3, [r3, #16]
 8007b44:	f003 0320 	and.w	r3, r3, #32
 8007b48:	2b20      	cmp	r3, #32
 8007b4a:	d10e      	bne.n	8007b6a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	f003 0320 	and.w	r3, r3, #32
 8007b56:	2b20      	cmp	r3, #32
 8007b58:	d107      	bne.n	8007b6a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f06f 0220 	mvn.w	r2, #32
 8007b62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 fb79 	bl	800825c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	691b      	ldr	r3, [r3, #16]
 8007b70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b78:	d10f      	bne.n	8007b9a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b88:	d107      	bne.n	8007b9a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8007b92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 fb7f 	bl	8008298 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	691b      	ldr	r3, [r3, #16]
 8007ba0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ba4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ba8:	d10f      	bne.n	8007bca <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007bb4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007bb8:	d107      	bne.n	8007bca <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8007bc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 fb71 	bl	80082ac <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	691b      	ldr	r3, [r3, #16]
 8007bd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bd8:	d10f      	bne.n	8007bfa <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007be4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007be8:	d107      	bne.n	8007bfa <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8007bf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 fb63 	bl	80082c0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	691b      	ldr	r3, [r3, #16]
 8007c00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c04:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007c08:	d10f      	bne.n	8007c2a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c14:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007c18:	d107      	bne.n	8007c2a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8007c22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 fb55 	bl	80082d4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c2a:	bf00      	nop
 8007c2c:	3708      	adds	r7, #8
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
	...

08007c34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b084      	sub	sp, #16
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d101      	bne.n	8007c4c <HAL_TIM_ConfigClockSource+0x18>
 8007c48:	2302      	movs	r3, #2
 8007c4a:	e0f5      	b.n	8007e38 <HAL_TIM_ConfigClockSource+0x204>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2202      	movs	r2, #2
 8007c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	689b      	ldr	r3, [r3, #8]
 8007c62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8007c6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007c6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c76:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	68fa      	ldr	r2, [r7, #12]
 8007c7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a6e      	ldr	r2, [pc, #440]	; (8007e40 <HAL_TIM_ConfigClockSource+0x20c>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	f000 80c1 	beq.w	8007e0e <HAL_TIM_ConfigClockSource+0x1da>
 8007c8c:	4a6c      	ldr	r2, [pc, #432]	; (8007e40 <HAL_TIM_ConfigClockSource+0x20c>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	f200 80c6 	bhi.w	8007e20 <HAL_TIM_ConfigClockSource+0x1ec>
 8007c94:	4a6b      	ldr	r2, [pc, #428]	; (8007e44 <HAL_TIM_ConfigClockSource+0x210>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	f000 80b9 	beq.w	8007e0e <HAL_TIM_ConfigClockSource+0x1da>
 8007c9c:	4a69      	ldr	r2, [pc, #420]	; (8007e44 <HAL_TIM_ConfigClockSource+0x210>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	f200 80be 	bhi.w	8007e20 <HAL_TIM_ConfigClockSource+0x1ec>
 8007ca4:	4a68      	ldr	r2, [pc, #416]	; (8007e48 <HAL_TIM_ConfigClockSource+0x214>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	f000 80b1 	beq.w	8007e0e <HAL_TIM_ConfigClockSource+0x1da>
 8007cac:	4a66      	ldr	r2, [pc, #408]	; (8007e48 <HAL_TIM_ConfigClockSource+0x214>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	f200 80b6 	bhi.w	8007e20 <HAL_TIM_ConfigClockSource+0x1ec>
 8007cb4:	4a65      	ldr	r2, [pc, #404]	; (8007e4c <HAL_TIM_ConfigClockSource+0x218>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	f000 80a9 	beq.w	8007e0e <HAL_TIM_ConfigClockSource+0x1da>
 8007cbc:	4a63      	ldr	r2, [pc, #396]	; (8007e4c <HAL_TIM_ConfigClockSource+0x218>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	f200 80ae 	bhi.w	8007e20 <HAL_TIM_ConfigClockSource+0x1ec>
 8007cc4:	4a62      	ldr	r2, [pc, #392]	; (8007e50 <HAL_TIM_ConfigClockSource+0x21c>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	f000 80a1 	beq.w	8007e0e <HAL_TIM_ConfigClockSource+0x1da>
 8007ccc:	4a60      	ldr	r2, [pc, #384]	; (8007e50 <HAL_TIM_ConfigClockSource+0x21c>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	f200 80a6 	bhi.w	8007e20 <HAL_TIM_ConfigClockSource+0x1ec>
 8007cd4:	4a5f      	ldr	r2, [pc, #380]	; (8007e54 <HAL_TIM_ConfigClockSource+0x220>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	f000 8099 	beq.w	8007e0e <HAL_TIM_ConfigClockSource+0x1da>
 8007cdc:	4a5d      	ldr	r2, [pc, #372]	; (8007e54 <HAL_TIM_ConfigClockSource+0x220>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	f200 809e 	bhi.w	8007e20 <HAL_TIM_ConfigClockSource+0x1ec>
 8007ce4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007ce8:	f000 8091 	beq.w	8007e0e <HAL_TIM_ConfigClockSource+0x1da>
 8007cec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007cf0:	f200 8096 	bhi.w	8007e20 <HAL_TIM_ConfigClockSource+0x1ec>
 8007cf4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007cf8:	f000 8089 	beq.w	8007e0e <HAL_TIM_ConfigClockSource+0x1da>
 8007cfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d00:	f200 808e 	bhi.w	8007e20 <HAL_TIM_ConfigClockSource+0x1ec>
 8007d04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d08:	d03e      	beq.n	8007d88 <HAL_TIM_ConfigClockSource+0x154>
 8007d0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d0e:	f200 8087 	bhi.w	8007e20 <HAL_TIM_ConfigClockSource+0x1ec>
 8007d12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d16:	f000 8085 	beq.w	8007e24 <HAL_TIM_ConfigClockSource+0x1f0>
 8007d1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d1e:	d87f      	bhi.n	8007e20 <HAL_TIM_ConfigClockSource+0x1ec>
 8007d20:	2b70      	cmp	r3, #112	; 0x70
 8007d22:	d01a      	beq.n	8007d5a <HAL_TIM_ConfigClockSource+0x126>
 8007d24:	2b70      	cmp	r3, #112	; 0x70
 8007d26:	d87b      	bhi.n	8007e20 <HAL_TIM_ConfigClockSource+0x1ec>
 8007d28:	2b60      	cmp	r3, #96	; 0x60
 8007d2a:	d050      	beq.n	8007dce <HAL_TIM_ConfigClockSource+0x19a>
 8007d2c:	2b60      	cmp	r3, #96	; 0x60
 8007d2e:	d877      	bhi.n	8007e20 <HAL_TIM_ConfigClockSource+0x1ec>
 8007d30:	2b50      	cmp	r3, #80	; 0x50
 8007d32:	d03c      	beq.n	8007dae <HAL_TIM_ConfigClockSource+0x17a>
 8007d34:	2b50      	cmp	r3, #80	; 0x50
 8007d36:	d873      	bhi.n	8007e20 <HAL_TIM_ConfigClockSource+0x1ec>
 8007d38:	2b40      	cmp	r3, #64	; 0x40
 8007d3a:	d058      	beq.n	8007dee <HAL_TIM_ConfigClockSource+0x1ba>
 8007d3c:	2b40      	cmp	r3, #64	; 0x40
 8007d3e:	d86f      	bhi.n	8007e20 <HAL_TIM_ConfigClockSource+0x1ec>
 8007d40:	2b30      	cmp	r3, #48	; 0x30
 8007d42:	d064      	beq.n	8007e0e <HAL_TIM_ConfigClockSource+0x1da>
 8007d44:	2b30      	cmp	r3, #48	; 0x30
 8007d46:	d86b      	bhi.n	8007e20 <HAL_TIM_ConfigClockSource+0x1ec>
 8007d48:	2b20      	cmp	r3, #32
 8007d4a:	d060      	beq.n	8007e0e <HAL_TIM_ConfigClockSource+0x1da>
 8007d4c:	2b20      	cmp	r3, #32
 8007d4e:	d867      	bhi.n	8007e20 <HAL_TIM_ConfigClockSource+0x1ec>
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d05c      	beq.n	8007e0e <HAL_TIM_ConfigClockSource+0x1da>
 8007d54:	2b10      	cmp	r3, #16
 8007d56:	d05a      	beq.n	8007e0e <HAL_TIM_ConfigClockSource+0x1da>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007d58:	e062      	b.n	8007e20 <HAL_TIM_ConfigClockSource+0x1ec>
      TIM_ETR_SetConfig(htim->Instance,
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6818      	ldr	r0, [r3, #0]
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	6899      	ldr	r1, [r3, #8]
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	685a      	ldr	r2, [r3, #4]
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	f000 f9c1 	bl	80080f0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007d7c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	68fa      	ldr	r2, [r7, #12]
 8007d84:	609a      	str	r2, [r3, #8]
      break;
 8007d86:	e04e      	b.n	8007e26 <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_ETR_SetConfig(htim->Instance,
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6818      	ldr	r0, [r3, #0]
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	6899      	ldr	r1, [r3, #8]
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	685a      	ldr	r2, [r3, #4]
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	f000 f9aa 	bl	80080f0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	689a      	ldr	r2, [r3, #8]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007daa:	609a      	str	r2, [r3, #8]
      break;
 8007dac:	e03b      	b.n	8007e26 <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6818      	ldr	r0, [r3, #0]
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	6859      	ldr	r1, [r3, #4]
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	461a      	mov	r2, r3
 8007dbc:	f000 f91c 	bl	8007ff8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	2150      	movs	r1, #80	; 0x50
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f000 f975 	bl	80080b6 <TIM_ITRx_SetConfig>
      break;
 8007dcc:	e02b      	b.n	8007e26 <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6818      	ldr	r0, [r3, #0]
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	6859      	ldr	r1, [r3, #4]
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	68db      	ldr	r3, [r3, #12]
 8007dda:	461a      	mov	r2, r3
 8007ddc:	f000 f93b 	bl	8008056 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	2160      	movs	r1, #96	; 0x60
 8007de6:	4618      	mov	r0, r3
 8007de8:	f000 f965 	bl	80080b6 <TIM_ITRx_SetConfig>
      break;
 8007dec:	e01b      	b.n	8007e26 <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6818      	ldr	r0, [r3, #0]
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	6859      	ldr	r1, [r3, #4]
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	f000 f8fc 	bl	8007ff8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	2140      	movs	r1, #64	; 0x40
 8007e06:	4618      	mov	r0, r3
 8007e08:	f000 f955 	bl	80080b6 <TIM_ITRx_SetConfig>
      break;
 8007e0c:	e00b      	b.n	8007e26 <HAL_TIM_ConfigClockSource+0x1f2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4619      	mov	r1, r3
 8007e18:	4610      	mov	r0, r2
 8007e1a:	f000 f94c 	bl	80080b6 <TIM_ITRx_SetConfig>
        break;
 8007e1e:	e002      	b.n	8007e26 <HAL_TIM_ConfigClockSource+0x1f2>
      break;
 8007e20:	bf00      	nop
 8007e22:	e000      	b.n	8007e26 <HAL_TIM_ConfigClockSource+0x1f2>
      break;
 8007e24:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2201      	movs	r2, #1
 8007e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e36:	2300      	movs	r3, #0
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3710      	adds	r7, #16
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}
 8007e40:	00100070 	.word	0x00100070
 8007e44:	00100060 	.word	0x00100060
 8007e48:	00100050 	.word	0x00100050
 8007e4c:	00100040 	.word	0x00100040
 8007e50:	00100030 	.word	0x00100030
 8007e54:	00100020 	.word	0x00100020

08007e58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b083      	sub	sp, #12
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007e60:	bf00      	nop
 8007e62:	370c      	adds	r7, #12
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr

08007e6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b083      	sub	sp, #12
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007e74:	bf00      	nop
 8007e76:	370c      	adds	r7, #12
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr

08007e80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b083      	sub	sp, #12
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007e88:	bf00      	nop
 8007e8a:	370c      	adds	r7, #12
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr

08007e94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e9c:	bf00      	nop
 8007e9e:	370c      	adds	r7, #12
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b085      	sub	sp, #20
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	4a46      	ldr	r2, [pc, #280]	; (8007fd4 <TIM_Base_SetConfig+0x12c>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d017      	beq.n	8007ef0 <TIM_Base_SetConfig+0x48>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ec6:	d013      	beq.n	8007ef0 <TIM_Base_SetConfig+0x48>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	4a43      	ldr	r2, [pc, #268]	; (8007fd8 <TIM_Base_SetConfig+0x130>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d00f      	beq.n	8007ef0 <TIM_Base_SetConfig+0x48>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	4a42      	ldr	r2, [pc, #264]	; (8007fdc <TIM_Base_SetConfig+0x134>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d00b      	beq.n	8007ef0 <TIM_Base_SetConfig+0x48>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	4a41      	ldr	r2, [pc, #260]	; (8007fe0 <TIM_Base_SetConfig+0x138>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d007      	beq.n	8007ef0 <TIM_Base_SetConfig+0x48>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	4a40      	ldr	r2, [pc, #256]	; (8007fe4 <TIM_Base_SetConfig+0x13c>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d003      	beq.n	8007ef0 <TIM_Base_SetConfig+0x48>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	4a3f      	ldr	r2, [pc, #252]	; (8007fe8 <TIM_Base_SetConfig+0x140>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d108      	bne.n	8007f02 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ef6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	68fa      	ldr	r2, [r7, #12]
 8007efe:	4313      	orrs	r3, r2
 8007f00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	4a33      	ldr	r2, [pc, #204]	; (8007fd4 <TIM_Base_SetConfig+0x12c>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d023      	beq.n	8007f52 <TIM_Base_SetConfig+0xaa>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f10:	d01f      	beq.n	8007f52 <TIM_Base_SetConfig+0xaa>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	4a30      	ldr	r2, [pc, #192]	; (8007fd8 <TIM_Base_SetConfig+0x130>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d01b      	beq.n	8007f52 <TIM_Base_SetConfig+0xaa>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	4a2f      	ldr	r2, [pc, #188]	; (8007fdc <TIM_Base_SetConfig+0x134>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d017      	beq.n	8007f52 <TIM_Base_SetConfig+0xaa>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	4a2e      	ldr	r2, [pc, #184]	; (8007fe0 <TIM_Base_SetConfig+0x138>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d013      	beq.n	8007f52 <TIM_Base_SetConfig+0xaa>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	4a2d      	ldr	r2, [pc, #180]	; (8007fe4 <TIM_Base_SetConfig+0x13c>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d00f      	beq.n	8007f52 <TIM_Base_SetConfig+0xaa>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	4a2d      	ldr	r2, [pc, #180]	; (8007fec <TIM_Base_SetConfig+0x144>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d00b      	beq.n	8007f52 <TIM_Base_SetConfig+0xaa>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	4a2c      	ldr	r2, [pc, #176]	; (8007ff0 <TIM_Base_SetConfig+0x148>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d007      	beq.n	8007f52 <TIM_Base_SetConfig+0xaa>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	4a2b      	ldr	r2, [pc, #172]	; (8007ff4 <TIM_Base_SetConfig+0x14c>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d003      	beq.n	8007f52 <TIM_Base_SetConfig+0xaa>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	4a26      	ldr	r2, [pc, #152]	; (8007fe8 <TIM_Base_SetConfig+0x140>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d108      	bne.n	8007f64 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	68db      	ldr	r3, [r3, #12]
 8007f5e:	68fa      	ldr	r2, [r7, #12]
 8007f60:	4313      	orrs	r3, r2
 8007f62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	695b      	ldr	r3, [r3, #20]
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	68fa      	ldr	r2, [r7, #12]
 8007f76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	689a      	ldr	r2, [r3, #8]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	4a12      	ldr	r2, [pc, #72]	; (8007fd4 <TIM_Base_SetConfig+0x12c>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d013      	beq.n	8007fb8 <TIM_Base_SetConfig+0x110>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	4a14      	ldr	r2, [pc, #80]	; (8007fe4 <TIM_Base_SetConfig+0x13c>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d00f      	beq.n	8007fb8 <TIM_Base_SetConfig+0x110>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	4a14      	ldr	r2, [pc, #80]	; (8007fec <TIM_Base_SetConfig+0x144>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d00b      	beq.n	8007fb8 <TIM_Base_SetConfig+0x110>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	4a13      	ldr	r2, [pc, #76]	; (8007ff0 <TIM_Base_SetConfig+0x148>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d007      	beq.n	8007fb8 <TIM_Base_SetConfig+0x110>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	4a12      	ldr	r2, [pc, #72]	; (8007ff4 <TIM_Base_SetConfig+0x14c>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d003      	beq.n	8007fb8 <TIM_Base_SetConfig+0x110>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	4a0d      	ldr	r2, [pc, #52]	; (8007fe8 <TIM_Base_SetConfig+0x140>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d103      	bne.n	8007fc0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	691a      	ldr	r2, [r3, #16]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	615a      	str	r2, [r3, #20]
}
 8007fc6:	bf00      	nop
 8007fc8:	3714      	adds	r7, #20
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr
 8007fd2:	bf00      	nop
 8007fd4:	40012c00 	.word	0x40012c00
 8007fd8:	40000400 	.word	0x40000400
 8007fdc:	40000800 	.word	0x40000800
 8007fe0:	40000c00 	.word	0x40000c00
 8007fe4:	40013400 	.word	0x40013400
 8007fe8:	40015000 	.word	0x40015000
 8007fec:	40014000 	.word	0x40014000
 8007ff0:	40014400 	.word	0x40014400
 8007ff4:	40014800 	.word	0x40014800

08007ff8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b087      	sub	sp, #28
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	60b9      	str	r1, [r7, #8]
 8008002:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	6a1b      	ldr	r3, [r3, #32]
 8008008:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	6a1b      	ldr	r3, [r3, #32]
 800800e:	f023 0201 	bic.w	r2, r3, #1
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	699b      	ldr	r3, [r3, #24]
 800801a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008022:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	011b      	lsls	r3, r3, #4
 8008028:	693a      	ldr	r2, [r7, #16]
 800802a:	4313      	orrs	r3, r2
 800802c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	f023 030a 	bic.w	r3, r3, #10
 8008034:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008036:	697a      	ldr	r2, [r7, #20]
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	4313      	orrs	r3, r2
 800803c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	693a      	ldr	r2, [r7, #16]
 8008042:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	697a      	ldr	r2, [r7, #20]
 8008048:	621a      	str	r2, [r3, #32]
}
 800804a:	bf00      	nop
 800804c:	371c      	adds	r7, #28
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr

08008056 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008056:	b480      	push	{r7}
 8008058:	b087      	sub	sp, #28
 800805a:	af00      	add	r7, sp, #0
 800805c:	60f8      	str	r0, [r7, #12]
 800805e:	60b9      	str	r1, [r7, #8]
 8008060:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	6a1b      	ldr	r3, [r3, #32]
 8008066:	f023 0210 	bic.w	r2, r3, #16
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	699b      	ldr	r3, [r3, #24]
 8008072:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6a1b      	ldr	r3, [r3, #32]
 8008078:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008080:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	031b      	lsls	r3, r3, #12
 8008086:	697a      	ldr	r2, [r7, #20]
 8008088:	4313      	orrs	r3, r2
 800808a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008092:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	011b      	lsls	r3, r3, #4
 8008098:	693a      	ldr	r2, [r7, #16]
 800809a:	4313      	orrs	r3, r2
 800809c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	697a      	ldr	r2, [r7, #20]
 80080a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	693a      	ldr	r2, [r7, #16]
 80080a8:	621a      	str	r2, [r3, #32]
}
 80080aa:	bf00      	nop
 80080ac:	371c      	adds	r7, #28
 80080ae:	46bd      	mov	sp, r7
 80080b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b4:	4770      	bx	lr

080080b6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80080b6:	b480      	push	{r7}
 80080b8:	b085      	sub	sp, #20
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
 80080be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80080cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80080d2:	683a      	ldr	r2, [r7, #0]
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	4313      	orrs	r3, r2
 80080d8:	f043 0307 	orr.w	r3, r3, #7
 80080dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	68fa      	ldr	r2, [r7, #12]
 80080e2:	609a      	str	r2, [r3, #8]
}
 80080e4:	bf00      	nop
 80080e6:	3714      	adds	r7, #20
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b087      	sub	sp, #28
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	607a      	str	r2, [r7, #4]
 80080fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800810a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	021a      	lsls	r2, r3, #8
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	431a      	orrs	r2, r3
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	4313      	orrs	r3, r2
 8008118:	697a      	ldr	r2, [r7, #20]
 800811a:	4313      	orrs	r3, r2
 800811c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	697a      	ldr	r2, [r7, #20]
 8008122:	609a      	str	r2, [r3, #8]
}
 8008124:	bf00      	nop
 8008126:	371c      	adds	r7, #28
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr

08008130 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008130:	b480      	push	{r7}
 8008132:	b085      	sub	sp, #20
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008140:	2b01      	cmp	r3, #1
 8008142:	d101      	bne.n	8008148 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008144:	2302      	movs	r3, #2
 8008146:	e074      	b.n	8008232 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2201      	movs	r2, #1
 800814c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2202      	movs	r2, #2
 8008154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a34      	ldr	r2, [pc, #208]	; (8008240 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d009      	beq.n	8008186 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a33      	ldr	r2, [pc, #204]	; (8008244 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d004      	beq.n	8008186 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a31      	ldr	r2, [pc, #196]	; (8008248 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d108      	bne.n	8008198 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800818c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	68fa      	ldr	r2, [r7, #12]
 8008194:	4313      	orrs	r3, r2
 8008196:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800819e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	68fa      	ldr	r2, [r7, #12]
 80081aa:	4313      	orrs	r3, r2
 80081ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	68fa      	ldr	r2, [r7, #12]
 80081b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a21      	ldr	r2, [pc, #132]	; (8008240 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d022      	beq.n	8008206 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081c8:	d01d      	beq.n	8008206 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a1f      	ldr	r2, [pc, #124]	; (800824c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d018      	beq.n	8008206 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a1d      	ldr	r2, [pc, #116]	; (8008250 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d013      	beq.n	8008206 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a1c      	ldr	r2, [pc, #112]	; (8008254 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d00e      	beq.n	8008206 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a15      	ldr	r2, [pc, #84]	; (8008244 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d009      	beq.n	8008206 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a18      	ldr	r2, [pc, #96]	; (8008258 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d004      	beq.n	8008206 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a11      	ldr	r2, [pc, #68]	; (8008248 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d10c      	bne.n	8008220 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800820c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	68ba      	ldr	r2, [r7, #8]
 8008214:	4313      	orrs	r3, r2
 8008216:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	68ba      	ldr	r2, [r7, #8]
 800821e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2201      	movs	r2, #1
 8008224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008230:	2300      	movs	r3, #0
}
 8008232:	4618      	mov	r0, r3
 8008234:	3714      	adds	r7, #20
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr
 800823e:	bf00      	nop
 8008240:	40012c00 	.word	0x40012c00
 8008244:	40013400 	.word	0x40013400
 8008248:	40015000 	.word	0x40015000
 800824c:	40000400 	.word	0x40000400
 8008250:	40000800 	.word	0x40000800
 8008254:	40000c00 	.word	0x40000c00
 8008258:	40014000 	.word	0x40014000

0800825c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008264:	bf00      	nop
 8008266:	370c      	adds	r7, #12
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr

08008270 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008270:	b480      	push	{r7}
 8008272:	b083      	sub	sp, #12
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008278:	bf00      	nop
 800827a:	370c      	adds	r7, #12
 800827c:	46bd      	mov	sp, r7
 800827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008282:	4770      	bx	lr

08008284 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008284:	b480      	push	{r7}
 8008286:	b083      	sub	sp, #12
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800828c:	bf00      	nop
 800828e:	370c      	adds	r7, #12
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr

08008298 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008298:	b480      	push	{r7}
 800829a:	b083      	sub	sp, #12
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80082a0:	bf00      	nop
 80082a2:	370c      	adds	r7, #12
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr

080082ac <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b083      	sub	sp, #12
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80082b4:	bf00      	nop
 80082b6:	370c      	adds	r7, #12
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr

080082c0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b083      	sub	sp, #12
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80082c8:	bf00      	nop
 80082ca:	370c      	adds	r7, #12
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr

080082d4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80082dc:	bf00      	nop
 80082de:	370c      	adds	r7, #12
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d101      	bne.n	80082fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80082f6:	2301      	movs	r3, #1
 80082f8:	e042      	b.n	8008380 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008300:	2b00      	cmp	r3, #0
 8008302:	d106      	bne.n	8008312 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2200      	movs	r2, #0
 8008308:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f7f9 febb 	bl	8002088 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2224      	movs	r2, #36	; 0x24
 8008316:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f022 0201 	bic.w	r2, r2, #1
 8008328:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 fb0a 	bl	8008944 <UART_SetConfig>
 8008330:	4603      	mov	r3, r0
 8008332:	2b01      	cmp	r3, #1
 8008334:	d101      	bne.n	800833a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008336:	2301      	movs	r3, #1
 8008338:	e022      	b.n	8008380 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800833e:	2b00      	cmp	r3, #0
 8008340:	d002      	beq.n	8008348 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 fdc8 	bl	8008ed8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	685a      	ldr	r2, [r3, #4]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008356:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	689a      	ldr	r2, [r3, #8]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008366:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f042 0201 	orr.w	r2, r2, #1
 8008376:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f000 fe4f 	bl	800901c <UART_CheckIdleState>
 800837e:	4603      	mov	r3, r0
}
 8008380:	4618      	mov	r0, r3
 8008382:	3708      	adds	r7, #8
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	4613      	mov	r3, r2
 8008394:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800839c:	2b20      	cmp	r3, #32
 800839e:	d168      	bne.n	8008472 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d002      	beq.n	80083ac <HAL_UART_Transmit_DMA+0x24>
 80083a6:	88fb      	ldrh	r3, [r7, #6]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d101      	bne.n	80083b0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80083ac:	2301      	movs	r3, #1
 80083ae:	e061      	b.n	8008474 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	d101      	bne.n	80083be <HAL_UART_Transmit_DMA+0x36>
 80083ba:	2302      	movs	r3, #2
 80083bc:	e05a      	b.n	8008474 <HAL_UART_Transmit_DMA+0xec>
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2201      	movs	r2, #1
 80083c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	68ba      	ldr	r2, [r7, #8]
 80083ca:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	88fa      	ldrh	r2, [r7, #6]
 80083d0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	88fa      	ldrh	r2, [r7, #6]
 80083d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2200      	movs	r2, #0
 80083e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2221      	movs	r2, #33	; 0x21
 80083e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d02c      	beq.n	800844e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083f8:	4a20      	ldr	r2, [pc, #128]	; (800847c <HAL_UART_Transmit_DMA+0xf4>)
 80083fa:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008400:	4a1f      	ldr	r2, [pc, #124]	; (8008480 <HAL_UART_Transmit_DMA+0xf8>)
 8008402:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008408:	4a1e      	ldr	r2, [pc, #120]	; (8008484 <HAL_UART_Transmit_DMA+0xfc>)
 800840a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008410:	2200      	movs	r2, #0
 8008412:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800841c:	4619      	mov	r1, r3
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	3328      	adds	r3, #40	; 0x28
 8008424:	461a      	mov	r2, r3
 8008426:	88fb      	ldrh	r3, [r7, #6]
 8008428:	f7fc f906 	bl	8004638 <HAL_DMA_Start_IT>
 800842c:	4603      	mov	r3, r0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d00d      	beq.n	800844e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2210      	movs	r2, #16
 8008436:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2200      	movs	r2, #0
 800843e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2220      	movs	r2, #32
 8008446:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800844a:	2301      	movs	r3, #1
 800844c:	e012      	b.n	8008474 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	2240      	movs	r2, #64	; 0x40
 8008454:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2200      	movs	r2, #0
 800845a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	689a      	ldr	r2, [r3, #8]
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800846c:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800846e:	2300      	movs	r3, #0
 8008470:	e000      	b.n	8008474 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 8008472:	2302      	movs	r3, #2
  }
}
 8008474:	4618      	mov	r0, r3
 8008476:	3710      	adds	r7, #16
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}
 800847c:	08009253 	.word	0x08009253
 8008480:	080092a7 	.word	0x080092a7
 8008484:	080092c3 	.word	0x080092c3

08008488 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b088      	sub	sp, #32
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	69db      	ldr	r3, [r3, #28]
 8008496:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	689b      	ldr	r3, [r3, #8]
 80084a6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80084a8:	69fa      	ldr	r2, [r7, #28]
 80084aa:	f640 030f 	movw	r3, #2063	; 0x80f
 80084ae:	4013      	ands	r3, r2
 80084b0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d118      	bne.n	80084ea <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80084b8:	69fb      	ldr	r3, [r7, #28]
 80084ba:	f003 0320 	and.w	r3, r3, #32
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d013      	beq.n	80084ea <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80084c2:	69bb      	ldr	r3, [r7, #24]
 80084c4:	f003 0320 	and.w	r3, r3, #32
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d104      	bne.n	80084d6 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d009      	beq.n	80084ea <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084da:	2b00      	cmp	r3, #0
 80084dc:	f000 81fb 	beq.w	80088d6 <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	4798      	blx	r3
      }
      return;
 80084e8:	e1f5      	b.n	80088d6 <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	f000 80ef 	beq.w	80086d0 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80084f2:	697a      	ldr	r2, [r7, #20]
 80084f4:	4b73      	ldr	r3, [pc, #460]	; (80086c4 <HAL_UART_IRQHandler+0x23c>)
 80084f6:	4013      	ands	r3, r2
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d105      	bne.n	8008508 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80084fc:	69ba      	ldr	r2, [r7, #24]
 80084fe:	4b72      	ldr	r3, [pc, #456]	; (80086c8 <HAL_UART_IRQHandler+0x240>)
 8008500:	4013      	ands	r3, r2
 8008502:	2b00      	cmp	r3, #0
 8008504:	f000 80e4 	beq.w	80086d0 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008508:	69fb      	ldr	r3, [r7, #28]
 800850a:	f003 0301 	and.w	r3, r3, #1
 800850e:	2b00      	cmp	r3, #0
 8008510:	d010      	beq.n	8008534 <HAL_UART_IRQHandler+0xac>
 8008512:	69bb      	ldr	r3, [r7, #24]
 8008514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008518:	2b00      	cmp	r3, #0
 800851a:	d00b      	beq.n	8008534 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	2201      	movs	r2, #1
 8008522:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800852a:	f043 0201 	orr.w	r2, r3, #1
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008534:	69fb      	ldr	r3, [r7, #28]
 8008536:	f003 0302 	and.w	r3, r3, #2
 800853a:	2b00      	cmp	r3, #0
 800853c:	d010      	beq.n	8008560 <HAL_UART_IRQHandler+0xd8>
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	f003 0301 	and.w	r3, r3, #1
 8008544:	2b00      	cmp	r3, #0
 8008546:	d00b      	beq.n	8008560 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	2202      	movs	r2, #2
 800854e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008556:	f043 0204 	orr.w	r2, r3, #4
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008560:	69fb      	ldr	r3, [r7, #28]
 8008562:	f003 0304 	and.w	r3, r3, #4
 8008566:	2b00      	cmp	r3, #0
 8008568:	d010      	beq.n	800858c <HAL_UART_IRQHandler+0x104>
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	f003 0301 	and.w	r3, r3, #1
 8008570:	2b00      	cmp	r3, #0
 8008572:	d00b      	beq.n	800858c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2204      	movs	r2, #4
 800857a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008582:	f043 0202 	orr.w	r2, r3, #2
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800858c:	69fb      	ldr	r3, [r7, #28]
 800858e:	f003 0308 	and.w	r3, r3, #8
 8008592:	2b00      	cmp	r3, #0
 8008594:	d015      	beq.n	80085c2 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008596:	69bb      	ldr	r3, [r7, #24]
 8008598:	f003 0320 	and.w	r3, r3, #32
 800859c:	2b00      	cmp	r3, #0
 800859e:	d104      	bne.n	80085aa <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80085a0:	697a      	ldr	r2, [r7, #20]
 80085a2:	4b48      	ldr	r3, [pc, #288]	; (80086c4 <HAL_UART_IRQHandler+0x23c>)
 80085a4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d00b      	beq.n	80085c2 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	2208      	movs	r2, #8
 80085b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085b8:	f043 0208 	orr.w	r2, r3, #8
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80085c2:	69fb      	ldr	r3, [r7, #28]
 80085c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d011      	beq.n	80085f0 <HAL_UART_IRQHandler+0x168>
 80085cc:	69bb      	ldr	r3, [r7, #24]
 80085ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d00c      	beq.n	80085f0 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80085de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085e6:	f043 0220 	orr.w	r2, r3, #32
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	f000 816f 	beq.w	80088da <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80085fc:	69fb      	ldr	r3, [r7, #28]
 80085fe:	f003 0320 	and.w	r3, r3, #32
 8008602:	2b00      	cmp	r3, #0
 8008604:	d011      	beq.n	800862a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008606:	69bb      	ldr	r3, [r7, #24]
 8008608:	f003 0320 	and.w	r3, r3, #32
 800860c:	2b00      	cmp	r3, #0
 800860e:	d104      	bne.n	800861a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008616:	2b00      	cmp	r3, #0
 8008618:	d007      	beq.n	800862a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800861e:	2b00      	cmp	r3, #0
 8008620:	d003      	beq.n	800862a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008630:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800863c:	2b40      	cmp	r3, #64	; 0x40
 800863e:	d004      	beq.n	800864a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008646:	2b00      	cmp	r3, #0
 8008648:	d031      	beq.n	80086ae <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 fdcf 	bl	80091ee <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800865a:	2b40      	cmp	r3, #64	; 0x40
 800865c:	d123      	bne.n	80086a6 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	689a      	ldr	r2, [r3, #8]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800866c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008672:	2b00      	cmp	r3, #0
 8008674:	d013      	beq.n	800869e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800867a:	4a14      	ldr	r2, [pc, #80]	; (80086cc <HAL_UART_IRQHandler+0x244>)
 800867c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008682:	4618      	mov	r0, r3
 8008684:	f7fc f8ac 	bl	80047e0 <HAL_DMA_Abort_IT>
 8008688:	4603      	mov	r3, r0
 800868a:	2b00      	cmp	r3, #0
 800868c:	d017      	beq.n	80086be <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8008698:	4610      	mov	r0, r2
 800869a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800869c:	e00f      	b.n	80086be <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 f93a 	bl	8008918 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086a4:	e00b      	b.n	80086be <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 f936 	bl	8008918 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086ac:	e007      	b.n	80086be <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 f932 	bl	8008918 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2200      	movs	r2, #0
 80086b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80086bc:	e10d      	b.n	80088da <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086be:	bf00      	nop
    return;
 80086c0:	e10b      	b.n	80088da <HAL_UART_IRQHandler+0x452>
 80086c2:	bf00      	nop
 80086c4:	10000001 	.word	0x10000001
 80086c8:	04000120 	.word	0x04000120
 80086cc:	08009343 	.word	0x08009343

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	f040 80ab 	bne.w	8008830 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80086da:	69fb      	ldr	r3, [r7, #28]
 80086dc:	f003 0310 	and.w	r3, r3, #16
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	f000 80a5 	beq.w	8008830 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80086e6:	69bb      	ldr	r3, [r7, #24]
 80086e8:	f003 0310 	and.w	r3, r3, #16
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	f000 809f 	beq.w	8008830 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	2210      	movs	r2, #16
 80086f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008704:	2b40      	cmp	r3, #64	; 0x40
 8008706:	d155      	bne.n	80087b4 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8008712:	893b      	ldrh	r3, [r7, #8]
 8008714:	2b00      	cmp	r3, #0
 8008716:	f000 80e2 	beq.w	80088de <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008720:	893a      	ldrh	r2, [r7, #8]
 8008722:	429a      	cmp	r2, r3
 8008724:	f080 80db 	bcs.w	80088de <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	893a      	ldrh	r2, [r7, #8]
 800872c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f003 0320 	and.w	r3, r3, #32
 800873c:	2b00      	cmp	r3, #0
 800873e:	d12b      	bne.n	8008798 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800874e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	689a      	ldr	r2, [r3, #8]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f022 0201 	bic.w	r2, r2, #1
 800875e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	689a      	ldr	r2, [r3, #8]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800876e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2220      	movs	r2, #32
 8008774:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2200      	movs	r2, #0
 800877c:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	681a      	ldr	r2, [r3, #0]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f022 0210 	bic.w	r2, r2, #16
 800878c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008792:	4618      	mov	r0, r3
 8008794:	f7fb ffcb 	bl	800472e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	1ad3      	subs	r3, r2, r3
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	4619      	mov	r1, r3
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 f8bd 	bl	800892c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80087b2:	e094      	b.n	80088de <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	1ad3      	subs	r3, r2, r3
 80087c4:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	f000 8087 	beq.w	80088e2 <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 80087d4:	897b      	ldrh	r3, [r7, #10]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	f000 8083 	beq.w	80088e2 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80087ea:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	687a      	ldr	r2, [r7, #4]
 80087f4:	6812      	ldr	r2, [r2, #0]
 80087f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80087fa:	f023 0301 	bic.w	r3, r3, #1
 80087fe:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2220      	movs	r2, #32
 8008804:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2200      	movs	r2, #0
 800880c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2200      	movs	r2, #0
 8008812:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f022 0210 	bic.w	r2, r2, #16
 8008822:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008824:	897b      	ldrh	r3, [r7, #10]
 8008826:	4619      	mov	r1, r3
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f000 f87f 	bl	800892c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800882e:	e058      	b.n	80088e2 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008830:	69fb      	ldr	r3, [r7, #28]
 8008832:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008836:	2b00      	cmp	r3, #0
 8008838:	d00d      	beq.n	8008856 <HAL_UART_IRQHandler+0x3ce>
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008840:	2b00      	cmp	r3, #0
 8008842:	d008      	beq.n	8008856 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800884c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 fda7 	bl	80093a2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008854:	e048      	b.n	80088e8 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008856:	69fb      	ldr	r3, [r7, #28]
 8008858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800885c:	2b00      	cmp	r3, #0
 800885e:	d012      	beq.n	8008886 <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008860:	69bb      	ldr	r3, [r7, #24]
 8008862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008866:	2b00      	cmp	r3, #0
 8008868:	d104      	bne.n	8008874 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008870:	2b00      	cmp	r3, #0
 8008872:	d008      	beq.n	8008886 <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008878:	2b00      	cmp	r3, #0
 800887a:	d034      	beq.n	80088e6 <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	4798      	blx	r3
    }
    return;
 8008884:	e02f      	b.n	80088e6 <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008886:	69fb      	ldr	r3, [r7, #28]
 8008888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800888c:	2b00      	cmp	r3, #0
 800888e:	d008      	beq.n	80088a2 <HAL_UART_IRQHandler+0x41a>
 8008890:	69bb      	ldr	r3, [r7, #24]
 8008892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008896:	2b00      	cmp	r3, #0
 8008898:	d003      	beq.n	80088a2 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 fd67 	bl	800936e <UART_EndTransmit_IT>
    return;
 80088a0:	e022      	b.n	80088e8 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80088a2:	69fb      	ldr	r3, [r7, #28]
 80088a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d008      	beq.n	80088be <HAL_UART_IRQHandler+0x436>
 80088ac:	69bb      	ldr	r3, [r7, #24]
 80088ae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d003      	beq.n	80088be <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f000 fd87 	bl	80093ca <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80088bc:	e014      	b.n	80088e8 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80088be:	69fb      	ldr	r3, [r7, #28]
 80088c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d00f      	beq.n	80088e8 <HAL_UART_IRQHandler+0x460>
 80088c8:	69bb      	ldr	r3, [r7, #24]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	da0c      	bge.n	80088e8 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f000 fd71 	bl	80093b6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80088d4:	e008      	b.n	80088e8 <HAL_UART_IRQHandler+0x460>
      return;
 80088d6:	bf00      	nop
 80088d8:	e006      	b.n	80088e8 <HAL_UART_IRQHandler+0x460>
    return;
 80088da:	bf00      	nop
 80088dc:	e004      	b.n	80088e8 <HAL_UART_IRQHandler+0x460>
      return;
 80088de:	bf00      	nop
 80088e0:	e002      	b.n	80088e8 <HAL_UART_IRQHandler+0x460>
      return;
 80088e2:	bf00      	nop
 80088e4:	e000      	b.n	80088e8 <HAL_UART_IRQHandler+0x460>
    return;
 80088e6:	bf00      	nop
  }
}
 80088e8:	3720      	adds	r7, #32
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
 80088ee:	bf00      	nop

080088f0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b083      	sub	sp, #12
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80088f8:	bf00      	nop
 80088fa:	370c      	adds	r7, #12
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr

08008904 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008904:	b480      	push	{r7}
 8008906:	b083      	sub	sp, #12
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800890c:	bf00      	nop
 800890e:	370c      	adds	r7, #12
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr

08008918 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008918:	b480      	push	{r7}
 800891a:	b083      	sub	sp, #12
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008920:	bf00      	nop
 8008922:	370c      	adds	r7, #12
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr

0800892c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800892c:	b480      	push	{r7}
 800892e:	b083      	sub	sp, #12
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	460b      	mov	r3, r1
 8008936:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008938:	bf00      	nop
 800893a:	370c      	adds	r7, #12
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr

08008944 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008944:	b5b0      	push	{r4, r5, r7, lr}
 8008946:	b088      	sub	sp, #32
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800894c:	2300      	movs	r3, #0
 800894e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	689a      	ldr	r2, [r3, #8]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	691b      	ldr	r3, [r3, #16]
 8008958:	431a      	orrs	r2, r3
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	695b      	ldr	r3, [r3, #20]
 800895e:	431a      	orrs	r2, r3
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	69db      	ldr	r3, [r3, #28]
 8008964:	4313      	orrs	r3, r2
 8008966:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	681a      	ldr	r2, [r3, #0]
 800896e:	4bb1      	ldr	r3, [pc, #708]	; (8008c34 <UART_SetConfig+0x2f0>)
 8008970:	4013      	ands	r3, r2
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	6812      	ldr	r2, [r2, #0]
 8008976:	69f9      	ldr	r1, [r7, #28]
 8008978:	430b      	orrs	r3, r1
 800897a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	68da      	ldr	r2, [r3, #12]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	430a      	orrs	r2, r1
 8008990:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	699b      	ldr	r3, [r3, #24]
 8008996:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4aa6      	ldr	r2, [pc, #664]	; (8008c38 <UART_SetConfig+0x2f4>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d004      	beq.n	80089ac <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6a1b      	ldr	r3, [r3, #32]
 80089a6:	69fa      	ldr	r2, [r7, #28]
 80089a8:	4313      	orrs	r3, r2
 80089aa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80089b6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80089ba:	687a      	ldr	r2, [r7, #4]
 80089bc:	6812      	ldr	r2, [r2, #0]
 80089be:	69f9      	ldr	r1, [r7, #28]
 80089c0:	430b      	orrs	r3, r1
 80089c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ca:	f023 010f 	bic.w	r1, r3, #15
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	430a      	orrs	r2, r1
 80089d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a97      	ldr	r2, [pc, #604]	; (8008c3c <UART_SetConfig+0x2f8>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d120      	bne.n	8008a26 <UART_SetConfig+0xe2>
 80089e4:	4b96      	ldr	r3, [pc, #600]	; (8008c40 <UART_SetConfig+0x2fc>)
 80089e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089ea:	f003 0303 	and.w	r3, r3, #3
 80089ee:	2b03      	cmp	r3, #3
 80089f0:	d816      	bhi.n	8008a20 <UART_SetConfig+0xdc>
 80089f2:	a201      	add	r2, pc, #4	; (adr r2, 80089f8 <UART_SetConfig+0xb4>)
 80089f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089f8:	08008a09 	.word	0x08008a09
 80089fc:	08008a15 	.word	0x08008a15
 8008a00:	08008a0f 	.word	0x08008a0f
 8008a04:	08008a1b 	.word	0x08008a1b
 8008a08:	2301      	movs	r3, #1
 8008a0a:	76fb      	strb	r3, [r7, #27]
 8008a0c:	e0e7      	b.n	8008bde <UART_SetConfig+0x29a>
 8008a0e:	2302      	movs	r3, #2
 8008a10:	76fb      	strb	r3, [r7, #27]
 8008a12:	e0e4      	b.n	8008bde <UART_SetConfig+0x29a>
 8008a14:	2304      	movs	r3, #4
 8008a16:	76fb      	strb	r3, [r7, #27]
 8008a18:	e0e1      	b.n	8008bde <UART_SetConfig+0x29a>
 8008a1a:	2308      	movs	r3, #8
 8008a1c:	76fb      	strb	r3, [r7, #27]
 8008a1e:	e0de      	b.n	8008bde <UART_SetConfig+0x29a>
 8008a20:	2310      	movs	r3, #16
 8008a22:	76fb      	strb	r3, [r7, #27]
 8008a24:	e0db      	b.n	8008bde <UART_SetConfig+0x29a>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a86      	ldr	r2, [pc, #536]	; (8008c44 <UART_SetConfig+0x300>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d132      	bne.n	8008a96 <UART_SetConfig+0x152>
 8008a30:	4b83      	ldr	r3, [pc, #524]	; (8008c40 <UART_SetConfig+0x2fc>)
 8008a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a36:	f003 030c 	and.w	r3, r3, #12
 8008a3a:	2b0c      	cmp	r3, #12
 8008a3c:	d828      	bhi.n	8008a90 <UART_SetConfig+0x14c>
 8008a3e:	a201      	add	r2, pc, #4	; (adr r2, 8008a44 <UART_SetConfig+0x100>)
 8008a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a44:	08008a79 	.word	0x08008a79
 8008a48:	08008a91 	.word	0x08008a91
 8008a4c:	08008a91 	.word	0x08008a91
 8008a50:	08008a91 	.word	0x08008a91
 8008a54:	08008a85 	.word	0x08008a85
 8008a58:	08008a91 	.word	0x08008a91
 8008a5c:	08008a91 	.word	0x08008a91
 8008a60:	08008a91 	.word	0x08008a91
 8008a64:	08008a7f 	.word	0x08008a7f
 8008a68:	08008a91 	.word	0x08008a91
 8008a6c:	08008a91 	.word	0x08008a91
 8008a70:	08008a91 	.word	0x08008a91
 8008a74:	08008a8b 	.word	0x08008a8b
 8008a78:	2300      	movs	r3, #0
 8008a7a:	76fb      	strb	r3, [r7, #27]
 8008a7c:	e0af      	b.n	8008bde <UART_SetConfig+0x29a>
 8008a7e:	2302      	movs	r3, #2
 8008a80:	76fb      	strb	r3, [r7, #27]
 8008a82:	e0ac      	b.n	8008bde <UART_SetConfig+0x29a>
 8008a84:	2304      	movs	r3, #4
 8008a86:	76fb      	strb	r3, [r7, #27]
 8008a88:	e0a9      	b.n	8008bde <UART_SetConfig+0x29a>
 8008a8a:	2308      	movs	r3, #8
 8008a8c:	76fb      	strb	r3, [r7, #27]
 8008a8e:	e0a6      	b.n	8008bde <UART_SetConfig+0x29a>
 8008a90:	2310      	movs	r3, #16
 8008a92:	76fb      	strb	r3, [r7, #27]
 8008a94:	e0a3      	b.n	8008bde <UART_SetConfig+0x29a>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a6b      	ldr	r2, [pc, #428]	; (8008c48 <UART_SetConfig+0x304>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d120      	bne.n	8008ae2 <UART_SetConfig+0x19e>
 8008aa0:	4b67      	ldr	r3, [pc, #412]	; (8008c40 <UART_SetConfig+0x2fc>)
 8008aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008aa6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008aaa:	2b30      	cmp	r3, #48	; 0x30
 8008aac:	d013      	beq.n	8008ad6 <UART_SetConfig+0x192>
 8008aae:	2b30      	cmp	r3, #48	; 0x30
 8008ab0:	d814      	bhi.n	8008adc <UART_SetConfig+0x198>
 8008ab2:	2b20      	cmp	r3, #32
 8008ab4:	d009      	beq.n	8008aca <UART_SetConfig+0x186>
 8008ab6:	2b20      	cmp	r3, #32
 8008ab8:	d810      	bhi.n	8008adc <UART_SetConfig+0x198>
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d002      	beq.n	8008ac4 <UART_SetConfig+0x180>
 8008abe:	2b10      	cmp	r3, #16
 8008ac0:	d006      	beq.n	8008ad0 <UART_SetConfig+0x18c>
 8008ac2:	e00b      	b.n	8008adc <UART_SetConfig+0x198>
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	76fb      	strb	r3, [r7, #27]
 8008ac8:	e089      	b.n	8008bde <UART_SetConfig+0x29a>
 8008aca:	2302      	movs	r3, #2
 8008acc:	76fb      	strb	r3, [r7, #27]
 8008ace:	e086      	b.n	8008bde <UART_SetConfig+0x29a>
 8008ad0:	2304      	movs	r3, #4
 8008ad2:	76fb      	strb	r3, [r7, #27]
 8008ad4:	e083      	b.n	8008bde <UART_SetConfig+0x29a>
 8008ad6:	2308      	movs	r3, #8
 8008ad8:	76fb      	strb	r3, [r7, #27]
 8008ada:	e080      	b.n	8008bde <UART_SetConfig+0x29a>
 8008adc:	2310      	movs	r3, #16
 8008ade:	76fb      	strb	r3, [r7, #27]
 8008ae0:	e07d      	b.n	8008bde <UART_SetConfig+0x29a>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4a59      	ldr	r2, [pc, #356]	; (8008c4c <UART_SetConfig+0x308>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d120      	bne.n	8008b2e <UART_SetConfig+0x1ea>
 8008aec:	4b54      	ldr	r3, [pc, #336]	; (8008c40 <UART_SetConfig+0x2fc>)
 8008aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008af2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008af6:	2bc0      	cmp	r3, #192	; 0xc0
 8008af8:	d013      	beq.n	8008b22 <UART_SetConfig+0x1de>
 8008afa:	2bc0      	cmp	r3, #192	; 0xc0
 8008afc:	d814      	bhi.n	8008b28 <UART_SetConfig+0x1e4>
 8008afe:	2b80      	cmp	r3, #128	; 0x80
 8008b00:	d009      	beq.n	8008b16 <UART_SetConfig+0x1d2>
 8008b02:	2b80      	cmp	r3, #128	; 0x80
 8008b04:	d810      	bhi.n	8008b28 <UART_SetConfig+0x1e4>
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d002      	beq.n	8008b10 <UART_SetConfig+0x1cc>
 8008b0a:	2b40      	cmp	r3, #64	; 0x40
 8008b0c:	d006      	beq.n	8008b1c <UART_SetConfig+0x1d8>
 8008b0e:	e00b      	b.n	8008b28 <UART_SetConfig+0x1e4>
 8008b10:	2300      	movs	r3, #0
 8008b12:	76fb      	strb	r3, [r7, #27]
 8008b14:	e063      	b.n	8008bde <UART_SetConfig+0x29a>
 8008b16:	2302      	movs	r3, #2
 8008b18:	76fb      	strb	r3, [r7, #27]
 8008b1a:	e060      	b.n	8008bde <UART_SetConfig+0x29a>
 8008b1c:	2304      	movs	r3, #4
 8008b1e:	76fb      	strb	r3, [r7, #27]
 8008b20:	e05d      	b.n	8008bde <UART_SetConfig+0x29a>
 8008b22:	2308      	movs	r3, #8
 8008b24:	76fb      	strb	r3, [r7, #27]
 8008b26:	e05a      	b.n	8008bde <UART_SetConfig+0x29a>
 8008b28:	2310      	movs	r3, #16
 8008b2a:	76fb      	strb	r3, [r7, #27]
 8008b2c:	e057      	b.n	8008bde <UART_SetConfig+0x29a>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4a47      	ldr	r2, [pc, #284]	; (8008c50 <UART_SetConfig+0x30c>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d125      	bne.n	8008b84 <UART_SetConfig+0x240>
 8008b38:	4b41      	ldr	r3, [pc, #260]	; (8008c40 <UART_SetConfig+0x2fc>)
 8008b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b46:	d017      	beq.n	8008b78 <UART_SetConfig+0x234>
 8008b48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b4c:	d817      	bhi.n	8008b7e <UART_SetConfig+0x23a>
 8008b4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b52:	d00b      	beq.n	8008b6c <UART_SetConfig+0x228>
 8008b54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b58:	d811      	bhi.n	8008b7e <UART_SetConfig+0x23a>
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d003      	beq.n	8008b66 <UART_SetConfig+0x222>
 8008b5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b62:	d006      	beq.n	8008b72 <UART_SetConfig+0x22e>
 8008b64:	e00b      	b.n	8008b7e <UART_SetConfig+0x23a>
 8008b66:	2300      	movs	r3, #0
 8008b68:	76fb      	strb	r3, [r7, #27]
 8008b6a:	e038      	b.n	8008bde <UART_SetConfig+0x29a>
 8008b6c:	2302      	movs	r3, #2
 8008b6e:	76fb      	strb	r3, [r7, #27]
 8008b70:	e035      	b.n	8008bde <UART_SetConfig+0x29a>
 8008b72:	2304      	movs	r3, #4
 8008b74:	76fb      	strb	r3, [r7, #27]
 8008b76:	e032      	b.n	8008bde <UART_SetConfig+0x29a>
 8008b78:	2308      	movs	r3, #8
 8008b7a:	76fb      	strb	r3, [r7, #27]
 8008b7c:	e02f      	b.n	8008bde <UART_SetConfig+0x29a>
 8008b7e:	2310      	movs	r3, #16
 8008b80:	76fb      	strb	r3, [r7, #27]
 8008b82:	e02c      	b.n	8008bde <UART_SetConfig+0x29a>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4a2b      	ldr	r2, [pc, #172]	; (8008c38 <UART_SetConfig+0x2f4>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d125      	bne.n	8008bda <UART_SetConfig+0x296>
 8008b8e:	4b2c      	ldr	r3, [pc, #176]	; (8008c40 <UART_SetConfig+0x2fc>)
 8008b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008b98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008b9c:	d017      	beq.n	8008bce <UART_SetConfig+0x28a>
 8008b9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008ba2:	d817      	bhi.n	8008bd4 <UART_SetConfig+0x290>
 8008ba4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ba8:	d00b      	beq.n	8008bc2 <UART_SetConfig+0x27e>
 8008baa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bae:	d811      	bhi.n	8008bd4 <UART_SetConfig+0x290>
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d003      	beq.n	8008bbc <UART_SetConfig+0x278>
 8008bb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bb8:	d006      	beq.n	8008bc8 <UART_SetConfig+0x284>
 8008bba:	e00b      	b.n	8008bd4 <UART_SetConfig+0x290>
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	76fb      	strb	r3, [r7, #27]
 8008bc0:	e00d      	b.n	8008bde <UART_SetConfig+0x29a>
 8008bc2:	2302      	movs	r3, #2
 8008bc4:	76fb      	strb	r3, [r7, #27]
 8008bc6:	e00a      	b.n	8008bde <UART_SetConfig+0x29a>
 8008bc8:	2304      	movs	r3, #4
 8008bca:	76fb      	strb	r3, [r7, #27]
 8008bcc:	e007      	b.n	8008bde <UART_SetConfig+0x29a>
 8008bce:	2308      	movs	r3, #8
 8008bd0:	76fb      	strb	r3, [r7, #27]
 8008bd2:	e004      	b.n	8008bde <UART_SetConfig+0x29a>
 8008bd4:	2310      	movs	r3, #16
 8008bd6:	76fb      	strb	r3, [r7, #27]
 8008bd8:	e001      	b.n	8008bde <UART_SetConfig+0x29a>
 8008bda:	2310      	movs	r3, #16
 8008bdc:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4a15      	ldr	r2, [pc, #84]	; (8008c38 <UART_SetConfig+0x2f4>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	f040 809f 	bne.w	8008d28 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008bea:	7efb      	ldrb	r3, [r7, #27]
 8008bec:	2b08      	cmp	r3, #8
 8008bee:	d837      	bhi.n	8008c60 <UART_SetConfig+0x31c>
 8008bf0:	a201      	add	r2, pc, #4	; (adr r2, 8008bf8 <UART_SetConfig+0x2b4>)
 8008bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bf6:	bf00      	nop
 8008bf8:	08008c1d 	.word	0x08008c1d
 8008bfc:	08008c61 	.word	0x08008c61
 8008c00:	08008c25 	.word	0x08008c25
 8008c04:	08008c61 	.word	0x08008c61
 8008c08:	08008c2b 	.word	0x08008c2b
 8008c0c:	08008c61 	.word	0x08008c61
 8008c10:	08008c61 	.word	0x08008c61
 8008c14:	08008c61 	.word	0x08008c61
 8008c18:	08008c59 	.word	0x08008c59
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c1c:	f7fe fafc 	bl	8007218 <HAL_RCC_GetPCLK1Freq>
 8008c20:	6178      	str	r0, [r7, #20]
        break;
 8008c22:	e022      	b.n	8008c6a <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c24:	4b0b      	ldr	r3, [pc, #44]	; (8008c54 <UART_SetConfig+0x310>)
 8008c26:	617b      	str	r3, [r7, #20]
        break;
 8008c28:	e01f      	b.n	8008c6a <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c2a:	f7fe fa87 	bl	800713c <HAL_RCC_GetSysClockFreq>
 8008c2e:	6178      	str	r0, [r7, #20]
        break;
 8008c30:	e01b      	b.n	8008c6a <UART_SetConfig+0x326>
 8008c32:	bf00      	nop
 8008c34:	cfff69f3 	.word	0xcfff69f3
 8008c38:	40008000 	.word	0x40008000
 8008c3c:	40013800 	.word	0x40013800
 8008c40:	40021000 	.word	0x40021000
 8008c44:	40004400 	.word	0x40004400
 8008c48:	40004800 	.word	0x40004800
 8008c4c:	40004c00 	.word	0x40004c00
 8008c50:	40005000 	.word	0x40005000
 8008c54:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c5c:	617b      	str	r3, [r7, #20]
        break;
 8008c5e:	e004      	b.n	8008c6a <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8008c60:	2300      	movs	r3, #0
 8008c62:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008c64:	2301      	movs	r3, #1
 8008c66:	76bb      	strb	r3, [r7, #26]
        break;
 8008c68:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	f000 811b 	beq.w	8008ea8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c76:	4a96      	ldr	r2, [pc, #600]	; (8008ed0 <UART_SetConfig+0x58c>)
 8008c78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c7c:	461a      	mov	r2, r3
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c84:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	685a      	ldr	r2, [r3, #4]
 8008c8a:	4613      	mov	r3, r2
 8008c8c:	005b      	lsls	r3, r3, #1
 8008c8e:	4413      	add	r3, r2
 8008c90:	68ba      	ldr	r2, [r7, #8]
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d305      	bcc.n	8008ca2 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008c9c:	68ba      	ldr	r2, [r7, #8]
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d902      	bls.n	8008ca8 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	76bb      	strb	r3, [r7, #26]
 8008ca6:	e0ff      	b.n	8008ea8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	4618      	mov	r0, r3
 8008cac:	f04f 0100 	mov.w	r1, #0
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb4:	4a86      	ldr	r2, [pc, #536]	; (8008ed0 <UART_SetConfig+0x58c>)
 8008cb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cba:	b29a      	uxth	r2, r3
 8008cbc:	f04f 0300 	mov.w	r3, #0
 8008cc0:	f7f7 ffea 	bl	8000c98 <__aeabi_uldivmod>
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	460b      	mov	r3, r1
 8008cc8:	4610      	mov	r0, r2
 8008cca:	4619      	mov	r1, r3
 8008ccc:	f04f 0200 	mov.w	r2, #0
 8008cd0:	f04f 0300 	mov.w	r3, #0
 8008cd4:	020b      	lsls	r3, r1, #8
 8008cd6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008cda:	0202      	lsls	r2, r0, #8
 8008cdc:	6879      	ldr	r1, [r7, #4]
 8008cde:	6849      	ldr	r1, [r1, #4]
 8008ce0:	0849      	lsrs	r1, r1, #1
 8008ce2:	4608      	mov	r0, r1
 8008ce4:	f04f 0100 	mov.w	r1, #0
 8008ce8:	1814      	adds	r4, r2, r0
 8008cea:	eb43 0501 	adc.w	r5, r3, r1
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	f04f 0300 	mov.w	r3, #0
 8008cf8:	4620      	mov	r0, r4
 8008cfa:	4629      	mov	r1, r5
 8008cfc:	f7f7 ffcc 	bl	8000c98 <__aeabi_uldivmod>
 8008d00:	4602      	mov	r2, r0
 8008d02:	460b      	mov	r3, r1
 8008d04:	4613      	mov	r3, r2
 8008d06:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d0e:	d308      	bcc.n	8008d22 <UART_SetConfig+0x3de>
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d16:	d204      	bcs.n	8008d22 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	693a      	ldr	r2, [r7, #16]
 8008d1e:	60da      	str	r2, [r3, #12]
 8008d20:	e0c2      	b.n	8008ea8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8008d22:	2301      	movs	r3, #1
 8008d24:	76bb      	strb	r3, [r7, #26]
 8008d26:	e0bf      	b.n	8008ea8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	69db      	ldr	r3, [r3, #28]
 8008d2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d30:	d165      	bne.n	8008dfe <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 8008d32:	7efb      	ldrb	r3, [r7, #27]
 8008d34:	2b08      	cmp	r3, #8
 8008d36:	d828      	bhi.n	8008d8a <UART_SetConfig+0x446>
 8008d38:	a201      	add	r2, pc, #4	; (adr r2, 8008d40 <UART_SetConfig+0x3fc>)
 8008d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d3e:	bf00      	nop
 8008d40:	08008d65 	.word	0x08008d65
 8008d44:	08008d6d 	.word	0x08008d6d
 8008d48:	08008d75 	.word	0x08008d75
 8008d4c:	08008d8b 	.word	0x08008d8b
 8008d50:	08008d7b 	.word	0x08008d7b
 8008d54:	08008d8b 	.word	0x08008d8b
 8008d58:	08008d8b 	.word	0x08008d8b
 8008d5c:	08008d8b 	.word	0x08008d8b
 8008d60:	08008d83 	.word	0x08008d83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d64:	f7fe fa58 	bl	8007218 <HAL_RCC_GetPCLK1Freq>
 8008d68:	6178      	str	r0, [r7, #20]
        break;
 8008d6a:	e013      	b.n	8008d94 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d6c:	f7fe fa6a 	bl	8007244 <HAL_RCC_GetPCLK2Freq>
 8008d70:	6178      	str	r0, [r7, #20]
        break;
 8008d72:	e00f      	b.n	8008d94 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d74:	4b57      	ldr	r3, [pc, #348]	; (8008ed4 <UART_SetConfig+0x590>)
 8008d76:	617b      	str	r3, [r7, #20]
        break;
 8008d78:	e00c      	b.n	8008d94 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d7a:	f7fe f9df 	bl	800713c <HAL_RCC_GetSysClockFreq>
 8008d7e:	6178      	str	r0, [r7, #20]
        break;
 8008d80:	e008      	b.n	8008d94 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d86:	617b      	str	r3, [r7, #20]
        break;
 8008d88:	e004      	b.n	8008d94 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	76bb      	strb	r3, [r7, #26]
        break;
 8008d92:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	f000 8086 	beq.w	8008ea8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da0:	4a4b      	ldr	r2, [pc, #300]	; (8008ed0 <UART_SetConfig+0x58c>)
 8008da2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008da6:	461a      	mov	r2, r3
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	fbb3 f3f2 	udiv	r3, r3, r2
 8008dae:	005a      	lsls	r2, r3, #1
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	085b      	lsrs	r3, r3, #1
 8008db6:	441a      	add	r2, r3
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dc0:	b29b      	uxth	r3, r3
 8008dc2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	2b0f      	cmp	r3, #15
 8008dc8:	d916      	bls.n	8008df8 <UART_SetConfig+0x4b4>
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dd0:	d212      	bcs.n	8008df8 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008dd2:	693b      	ldr	r3, [r7, #16]
 8008dd4:	b29b      	uxth	r3, r3
 8008dd6:	f023 030f 	bic.w	r3, r3, #15
 8008dda:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	085b      	lsrs	r3, r3, #1
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	f003 0307 	and.w	r3, r3, #7
 8008de6:	b29a      	uxth	r2, r3
 8008de8:	89fb      	ldrh	r3, [r7, #14]
 8008dea:	4313      	orrs	r3, r2
 8008dec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	89fa      	ldrh	r2, [r7, #14]
 8008df4:	60da      	str	r2, [r3, #12]
 8008df6:	e057      	b.n	8008ea8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	76bb      	strb	r3, [r7, #26]
 8008dfc:	e054      	b.n	8008ea8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008dfe:	7efb      	ldrb	r3, [r7, #27]
 8008e00:	2b08      	cmp	r3, #8
 8008e02:	d828      	bhi.n	8008e56 <UART_SetConfig+0x512>
 8008e04:	a201      	add	r2, pc, #4	; (adr r2, 8008e0c <UART_SetConfig+0x4c8>)
 8008e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e0a:	bf00      	nop
 8008e0c:	08008e31 	.word	0x08008e31
 8008e10:	08008e39 	.word	0x08008e39
 8008e14:	08008e41 	.word	0x08008e41
 8008e18:	08008e57 	.word	0x08008e57
 8008e1c:	08008e47 	.word	0x08008e47
 8008e20:	08008e57 	.word	0x08008e57
 8008e24:	08008e57 	.word	0x08008e57
 8008e28:	08008e57 	.word	0x08008e57
 8008e2c:	08008e4f 	.word	0x08008e4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e30:	f7fe f9f2 	bl	8007218 <HAL_RCC_GetPCLK1Freq>
 8008e34:	6178      	str	r0, [r7, #20]
        break;
 8008e36:	e013      	b.n	8008e60 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e38:	f7fe fa04 	bl	8007244 <HAL_RCC_GetPCLK2Freq>
 8008e3c:	6178      	str	r0, [r7, #20]
        break;
 8008e3e:	e00f      	b.n	8008e60 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e40:	4b24      	ldr	r3, [pc, #144]	; (8008ed4 <UART_SetConfig+0x590>)
 8008e42:	617b      	str	r3, [r7, #20]
        break;
 8008e44:	e00c      	b.n	8008e60 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e46:	f7fe f979 	bl	800713c <HAL_RCC_GetSysClockFreq>
 8008e4a:	6178      	str	r0, [r7, #20]
        break;
 8008e4c:	e008      	b.n	8008e60 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e52:	617b      	str	r3, [r7, #20]
        break;
 8008e54:	e004      	b.n	8008e60 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 8008e56:	2300      	movs	r3, #0
 8008e58:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	76bb      	strb	r3, [r7, #26]
        break;
 8008e5e:	bf00      	nop
    }

    if (pclk != 0U)
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d020      	beq.n	8008ea8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e6a:	4a19      	ldr	r2, [pc, #100]	; (8008ed0 <UART_SetConfig+0x58c>)
 8008e6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e70:	461a      	mov	r2, r3
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	fbb3 f2f2 	udiv	r2, r3, r2
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	685b      	ldr	r3, [r3, #4]
 8008e7c:	085b      	lsrs	r3, r3, #1
 8008e7e:	441a      	add	r2, r3
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e88:	b29b      	uxth	r3, r3
 8008e8a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	2b0f      	cmp	r3, #15
 8008e90:	d908      	bls.n	8008ea4 <UART_SetConfig+0x560>
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e98:	d204      	bcs.n	8008ea4 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	693a      	ldr	r2, [r7, #16]
 8008ea0:	60da      	str	r2, [r3, #12]
 8008ea2:	e001      	b.n	8008ea8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2201      	movs	r2, #1
 8008eac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008ec4:	7ebb      	ldrb	r3, [r7, #26]
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3720      	adds	r7, #32
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bdb0      	pop	{r4, r5, r7, pc}
 8008ece:	bf00      	nop
 8008ed0:	0800c7dc 	.word	0x0800c7dc
 8008ed4:	00f42400 	.word	0x00f42400

08008ed8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b083      	sub	sp, #12
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ee4:	f003 0301 	and.w	r3, r3, #1
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d00a      	beq.n	8008f02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	430a      	orrs	r2, r1
 8008f00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f06:	f003 0302 	and.w	r3, r3, #2
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d00a      	beq.n	8008f24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	430a      	orrs	r2, r1
 8008f22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f28:	f003 0304 	and.w	r3, r3, #4
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d00a      	beq.n	8008f46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	430a      	orrs	r2, r1
 8008f44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f4a:	f003 0308 	and.w	r3, r3, #8
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d00a      	beq.n	8008f68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	430a      	orrs	r2, r1
 8008f66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f6c:	f003 0310 	and.w	r3, r3, #16
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d00a      	beq.n	8008f8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	689b      	ldr	r3, [r3, #8]
 8008f7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	430a      	orrs	r2, r1
 8008f88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f8e:	f003 0320 	and.w	r3, r3, #32
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d00a      	beq.n	8008fac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	689b      	ldr	r3, [r3, #8]
 8008f9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	430a      	orrs	r2, r1
 8008faa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d01a      	beq.n	8008fee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	430a      	orrs	r2, r1
 8008fcc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008fd6:	d10a      	bne.n	8008fee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	430a      	orrs	r2, r1
 8008fec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d00a      	beq.n	8009010 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	430a      	orrs	r2, r1
 800900e:	605a      	str	r2, [r3, #4]
  }
}
 8009010:	bf00      	nop
 8009012:	370c      	adds	r7, #12
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr

0800901c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b086      	sub	sp, #24
 8009020:	af02      	add	r7, sp, #8
 8009022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2200      	movs	r2, #0
 8009028:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800902c:	f7f9 f932 	bl	8002294 <HAL_GetTick>
 8009030:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f003 0308 	and.w	r3, r3, #8
 800903c:	2b08      	cmp	r3, #8
 800903e:	d10e      	bne.n	800905e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009040:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009044:	9300      	str	r3, [sp, #0]
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	2200      	movs	r2, #0
 800904a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 f82f 	bl	80090b2 <UART_WaitOnFlagUntilTimeout>
 8009054:	4603      	mov	r3, r0
 8009056:	2b00      	cmp	r3, #0
 8009058:	d001      	beq.n	800905e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800905a:	2303      	movs	r3, #3
 800905c:	e025      	b.n	80090aa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f003 0304 	and.w	r3, r3, #4
 8009068:	2b04      	cmp	r3, #4
 800906a:	d10e      	bne.n	800908a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800906c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009070:	9300      	str	r3, [sp, #0]
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	2200      	movs	r2, #0
 8009076:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 f819 	bl	80090b2 <UART_WaitOnFlagUntilTimeout>
 8009080:	4603      	mov	r3, r0
 8009082:	2b00      	cmp	r3, #0
 8009084:	d001      	beq.n	800908a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009086:	2303      	movs	r3, #3
 8009088:	e00f      	b.n	80090aa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2220      	movs	r2, #32
 800908e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2220      	movs	r2, #32
 8009096:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2200      	movs	r2, #0
 800909e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2200      	movs	r2, #0
 80090a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80090a8:	2300      	movs	r3, #0
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3710      	adds	r7, #16
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}

080090b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80090b2:	b580      	push	{r7, lr}
 80090b4:	b084      	sub	sp, #16
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	60f8      	str	r0, [r7, #12]
 80090ba:	60b9      	str	r1, [r7, #8]
 80090bc:	603b      	str	r3, [r7, #0]
 80090be:	4613      	mov	r3, r2
 80090c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090c2:	e062      	b.n	800918a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090c4:	69bb      	ldr	r3, [r7, #24]
 80090c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090ca:	d05e      	beq.n	800918a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090cc:	f7f9 f8e2 	bl	8002294 <HAL_GetTick>
 80090d0:	4602      	mov	r2, r0
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	1ad3      	subs	r3, r2, r3
 80090d6:	69ba      	ldr	r2, [r7, #24]
 80090d8:	429a      	cmp	r2, r3
 80090da:	d302      	bcc.n	80090e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80090dc:	69bb      	ldr	r3, [r7, #24]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d11d      	bne.n	800911e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	681a      	ldr	r2, [r3, #0]
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80090f0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	689a      	ldr	r2, [r3, #8]
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f022 0201 	bic.w	r2, r2, #1
 8009100:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2220      	movs	r2, #32
 8009106:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2220      	movs	r2, #32
 800910e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2200      	movs	r2, #0
 8009116:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800911a:	2303      	movs	r3, #3
 800911c:	e045      	b.n	80091aa <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f003 0304 	and.w	r3, r3, #4
 8009128:	2b00      	cmp	r3, #0
 800912a:	d02e      	beq.n	800918a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	69db      	ldr	r3, [r3, #28]
 8009132:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009136:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800913a:	d126      	bne.n	800918a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009144:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	681a      	ldr	r2, [r3, #0]
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009154:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	689a      	ldr	r2, [r3, #8]
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f022 0201 	bic.w	r2, r2, #1
 8009164:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	2220      	movs	r2, #32
 800916a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2220      	movs	r2, #32
 8009172:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2220      	movs	r2, #32
 800917a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	2200      	movs	r2, #0
 8009182:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009186:	2303      	movs	r3, #3
 8009188:	e00f      	b.n	80091aa <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	69da      	ldr	r2, [r3, #28]
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	4013      	ands	r3, r2
 8009194:	68ba      	ldr	r2, [r7, #8]
 8009196:	429a      	cmp	r2, r3
 8009198:	bf0c      	ite	eq
 800919a:	2301      	moveq	r3, #1
 800919c:	2300      	movne	r3, #0
 800919e:	b2db      	uxtb	r3, r3
 80091a0:	461a      	mov	r2, r3
 80091a2:	79fb      	ldrb	r3, [r7, #7]
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d08d      	beq.n	80090c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80091a8:	2300      	movs	r3, #0
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3710      	adds	r7, #16
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}

080091b2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80091b2:	b480      	push	{r7}
 80091b4:	b083      	sub	sp, #12
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80091c8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	689a      	ldr	r2, [r3, #8]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80091d8:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2220      	movs	r2, #32
 80091de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80091e2:	bf00      	nop
 80091e4:	370c      	adds	r7, #12
 80091e6:	46bd      	mov	sp, r7
 80091e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ec:	4770      	bx	lr

080091ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80091ee:	b480      	push	{r7}
 80091f0:	b083      	sub	sp, #12
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	681a      	ldr	r2, [r3, #0]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009204:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	689b      	ldr	r3, [r3, #8]
 800920c:	687a      	ldr	r2, [r7, #4]
 800920e:	6812      	ldr	r2, [r2, #0]
 8009210:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009214:	f023 0301 	bic.w	r3, r3, #1
 8009218:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800921e:	2b01      	cmp	r3, #1
 8009220:	d107      	bne.n	8009232 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	681a      	ldr	r2, [r3, #0]
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f022 0210 	bic.w	r2, r2, #16
 8009230:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2220      	movs	r2, #32
 8009236:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2200      	movs	r2, #0
 800923e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2200      	movs	r2, #0
 8009244:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009246:	bf00      	nop
 8009248:	370c      	adds	r7, #12
 800924a:	46bd      	mov	sp, r7
 800924c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009250:	4770      	bx	lr

08009252 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009252:	b580      	push	{r7, lr}
 8009254:	b084      	sub	sp, #16
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800925e:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f003 0320 	and.w	r3, r3, #32
 800926a:	2b00      	cmp	r3, #0
 800926c:	d114      	bne.n	8009298 <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	2200      	movs	r2, #0
 8009272:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	689a      	ldr	r2, [r3, #8]
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009284:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	681a      	ldr	r2, [r3, #0]
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009294:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009296:	e002      	b.n	800929e <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8009298:	68f8      	ldr	r0, [r7, #12]
 800929a:	f7ff fb29 	bl	80088f0 <HAL_UART_TxCpltCallback>
}
 800929e:	bf00      	nop
 80092a0:	3710      	adds	r7, #16
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}

080092a6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80092a6:	b580      	push	{r7, lr}
 80092a8:	b084      	sub	sp, #16
 80092aa:	af00      	add	r7, sp, #0
 80092ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092b2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80092b4:	68f8      	ldr	r0, [r7, #12]
 80092b6:	f7ff fb25 	bl	8008904 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092ba:	bf00      	nop
 80092bc:	3710      	adds	r7, #16
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}

080092c2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80092c2:	b580      	push	{r7, lr}
 80092c4:	b086      	sub	sp, #24
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ce:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092d6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092de:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	689b      	ldr	r3, [r3, #8]
 80092e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092ea:	2b80      	cmp	r3, #128	; 0x80
 80092ec:	d109      	bne.n	8009302 <UART_DMAError+0x40>
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	2b21      	cmp	r3, #33	; 0x21
 80092f2:	d106      	bne.n	8009302 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	2200      	movs	r2, #0
 80092f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80092fc:	6978      	ldr	r0, [r7, #20]
 80092fe:	f7ff ff58 	bl	80091b2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	689b      	ldr	r3, [r3, #8]
 8009308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800930c:	2b40      	cmp	r3, #64	; 0x40
 800930e:	d109      	bne.n	8009324 <UART_DMAError+0x62>
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2b22      	cmp	r3, #34	; 0x22
 8009314:	d106      	bne.n	8009324 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	2200      	movs	r2, #0
 800931a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800931e:	6978      	ldr	r0, [r7, #20]
 8009320:	f7ff ff65 	bl	80091ee <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800932a:	f043 0210 	orr.w	r2, r3, #16
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009334:	6978      	ldr	r0, [r7, #20]
 8009336:	f7ff faef 	bl	8008918 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800933a:	bf00      	nop
 800933c:	3718      	adds	r7, #24
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}

08009342 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009342:	b580      	push	{r7, lr}
 8009344:	b084      	sub	sp, #16
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800934e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2200      	movs	r2, #0
 8009354:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2200      	movs	r2, #0
 800935c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009360:	68f8      	ldr	r0, [r7, #12]
 8009362:	f7ff fad9 	bl	8008918 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009366:	bf00      	nop
 8009368:	3710      	adds	r7, #16
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}

0800936e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800936e:	b580      	push	{r7, lr}
 8009370:	b082      	sub	sp, #8
 8009372:	af00      	add	r7, sp, #0
 8009374:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	681a      	ldr	r2, [r3, #0]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009384:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2220      	movs	r2, #32
 800938a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2200      	movs	r2, #0
 8009392:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f7ff faab 	bl	80088f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800939a:	bf00      	nop
 800939c:	3708      	adds	r7, #8
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}

080093a2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80093a2:	b480      	push	{r7}
 80093a4:	b083      	sub	sp, #12
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80093aa:	bf00      	nop
 80093ac:	370c      	adds	r7, #12
 80093ae:	46bd      	mov	sp, r7
 80093b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b4:	4770      	bx	lr

080093b6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80093b6:	b480      	push	{r7}
 80093b8:	b083      	sub	sp, #12
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80093be:	bf00      	nop
 80093c0:	370c      	adds	r7, #12
 80093c2:	46bd      	mov	sp, r7
 80093c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c8:	4770      	bx	lr

080093ca <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80093ca:	b480      	push	{r7}
 80093cc:	b083      	sub	sp, #12
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80093d2:	bf00      	nop
 80093d4:	370c      	adds	r7, #12
 80093d6:	46bd      	mov	sp, r7
 80093d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093dc:	4770      	bx	lr

080093de <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80093de:	b480      	push	{r7}
 80093e0:	b085      	sub	sp, #20
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	d101      	bne.n	80093f4 <HAL_UARTEx_DisableFifoMode+0x16>
 80093f0:	2302      	movs	r3, #2
 80093f2:	e027      	b.n	8009444 <HAL_UARTEx_DisableFifoMode+0x66>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2201      	movs	r2, #1
 80093f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2224      	movs	r2, #36	; 0x24
 8009400:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	681a      	ldr	r2, [r3, #0]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f022 0201 	bic.w	r2, r2, #1
 800941a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009422:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2200      	movs	r2, #0
 8009428:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	68fa      	ldr	r2, [r7, #12]
 8009430:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2220      	movs	r2, #32
 8009436:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2200      	movs	r2, #0
 800943e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009442:	2300      	movs	r3, #0
}
 8009444:	4618      	mov	r0, r3
 8009446:	3714      	adds	r7, #20
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr

08009450 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b084      	sub	sp, #16
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009460:	2b01      	cmp	r3, #1
 8009462:	d101      	bne.n	8009468 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009464:	2302      	movs	r3, #2
 8009466:	e02d      	b.n	80094c4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2201      	movs	r2, #1
 800946c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2224      	movs	r2, #36	; 0x24
 8009474:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	681a      	ldr	r2, [r3, #0]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f022 0201 	bic.w	r2, r2, #1
 800948e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	689b      	ldr	r3, [r3, #8]
 8009496:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	683a      	ldr	r2, [r7, #0]
 80094a0:	430a      	orrs	r2, r1
 80094a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f000 f84f 	bl	8009548 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	68fa      	ldr	r2, [r7, #12]
 80094b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2220      	movs	r2, #32
 80094b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2200      	movs	r2, #0
 80094be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80094c2:	2300      	movs	r3, #0
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3710      	adds	r7, #16
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b084      	sub	sp, #16
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80094dc:	2b01      	cmp	r3, #1
 80094de:	d101      	bne.n	80094e4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80094e0:	2302      	movs	r3, #2
 80094e2:	e02d      	b.n	8009540 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2201      	movs	r2, #1
 80094e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2224      	movs	r2, #36	; 0x24
 80094f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	681a      	ldr	r2, [r3, #0]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f022 0201 	bic.w	r2, r2, #1
 800950a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	689b      	ldr	r3, [r3, #8]
 8009512:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	683a      	ldr	r2, [r7, #0]
 800951c:	430a      	orrs	r2, r1
 800951e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f000 f811 	bl	8009548 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	68fa      	ldr	r2, [r7, #12]
 800952c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2220      	movs	r2, #32
 8009532:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2200      	movs	r2, #0
 800953a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800953e:	2300      	movs	r3, #0
}
 8009540:	4618      	mov	r0, r3
 8009542:	3710      	adds	r7, #16
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}

08009548 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009548:	b480      	push	{r7}
 800954a:	b085      	sub	sp, #20
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009554:	2b00      	cmp	r3, #0
 8009556:	d108      	bne.n	800956a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2201      	movs	r2, #1
 800955c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2201      	movs	r2, #1
 8009564:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009568:	e031      	b.n	80095ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800956a:	2308      	movs	r3, #8
 800956c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800956e:	2308      	movs	r3, #8
 8009570:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	689b      	ldr	r3, [r3, #8]
 8009578:	0e5b      	lsrs	r3, r3, #25
 800957a:	b2db      	uxtb	r3, r3
 800957c:	f003 0307 	and.w	r3, r3, #7
 8009580:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	689b      	ldr	r3, [r3, #8]
 8009588:	0f5b      	lsrs	r3, r3, #29
 800958a:	b2db      	uxtb	r3, r3
 800958c:	f003 0307 	and.w	r3, r3, #7
 8009590:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009592:	7bbb      	ldrb	r3, [r7, #14]
 8009594:	7b3a      	ldrb	r2, [r7, #12]
 8009596:	4911      	ldr	r1, [pc, #68]	; (80095dc <UARTEx_SetNbDataToProcess+0x94>)
 8009598:	5c8a      	ldrb	r2, [r1, r2]
 800959a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800959e:	7b3a      	ldrb	r2, [r7, #12]
 80095a0:	490f      	ldr	r1, [pc, #60]	; (80095e0 <UARTEx_SetNbDataToProcess+0x98>)
 80095a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80095a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80095a8:	b29a      	uxth	r2, r3
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80095b0:	7bfb      	ldrb	r3, [r7, #15]
 80095b2:	7b7a      	ldrb	r2, [r7, #13]
 80095b4:	4909      	ldr	r1, [pc, #36]	; (80095dc <UARTEx_SetNbDataToProcess+0x94>)
 80095b6:	5c8a      	ldrb	r2, [r1, r2]
 80095b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80095bc:	7b7a      	ldrb	r2, [r7, #13]
 80095be:	4908      	ldr	r1, [pc, #32]	; (80095e0 <UARTEx_SetNbDataToProcess+0x98>)
 80095c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80095c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80095c6:	b29a      	uxth	r2, r3
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80095ce:	bf00      	nop
 80095d0:	3714      	adds	r7, #20
 80095d2:	46bd      	mov	sp, r7
 80095d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d8:	4770      	bx	lr
 80095da:	bf00      	nop
 80095dc:	0800c7f4 	.word	0x0800c7f4
 80095e0:	0800c7fc 	.word	0x0800c7fc

080095e4 <__errno>:
 80095e4:	4b01      	ldr	r3, [pc, #4]	; (80095ec <__errno+0x8>)
 80095e6:	6818      	ldr	r0, [r3, #0]
 80095e8:	4770      	bx	lr
 80095ea:	bf00      	nop
 80095ec:	2000000c 	.word	0x2000000c

080095f0 <__libc_init_array>:
 80095f0:	b570      	push	{r4, r5, r6, lr}
 80095f2:	4d0d      	ldr	r5, [pc, #52]	; (8009628 <__libc_init_array+0x38>)
 80095f4:	4c0d      	ldr	r4, [pc, #52]	; (800962c <__libc_init_array+0x3c>)
 80095f6:	1b64      	subs	r4, r4, r5
 80095f8:	10a4      	asrs	r4, r4, #2
 80095fa:	2600      	movs	r6, #0
 80095fc:	42a6      	cmp	r6, r4
 80095fe:	d109      	bne.n	8009614 <__libc_init_array+0x24>
 8009600:	4d0b      	ldr	r5, [pc, #44]	; (8009630 <__libc_init_array+0x40>)
 8009602:	4c0c      	ldr	r4, [pc, #48]	; (8009634 <__libc_init_array+0x44>)
 8009604:	f003 f8c4 	bl	800c790 <_init>
 8009608:	1b64      	subs	r4, r4, r5
 800960a:	10a4      	asrs	r4, r4, #2
 800960c:	2600      	movs	r6, #0
 800960e:	42a6      	cmp	r6, r4
 8009610:	d105      	bne.n	800961e <__libc_init_array+0x2e>
 8009612:	bd70      	pop	{r4, r5, r6, pc}
 8009614:	f855 3b04 	ldr.w	r3, [r5], #4
 8009618:	4798      	blx	r3
 800961a:	3601      	adds	r6, #1
 800961c:	e7ee      	b.n	80095fc <__libc_init_array+0xc>
 800961e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009622:	4798      	blx	r3
 8009624:	3601      	adds	r6, #1
 8009626:	e7f2      	b.n	800960e <__libc_init_array+0x1e>
 8009628:	0800cbec 	.word	0x0800cbec
 800962c:	0800cbec 	.word	0x0800cbec
 8009630:	0800cbec 	.word	0x0800cbec
 8009634:	0800cbf0 	.word	0x0800cbf0

08009638 <memset>:
 8009638:	4402      	add	r2, r0
 800963a:	4603      	mov	r3, r0
 800963c:	4293      	cmp	r3, r2
 800963e:	d100      	bne.n	8009642 <memset+0xa>
 8009640:	4770      	bx	lr
 8009642:	f803 1b01 	strb.w	r1, [r3], #1
 8009646:	e7f9      	b.n	800963c <memset+0x4>

08009648 <__cvt>:
 8009648:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800964c:	ec55 4b10 	vmov	r4, r5, d0
 8009650:	2d00      	cmp	r5, #0
 8009652:	460e      	mov	r6, r1
 8009654:	4619      	mov	r1, r3
 8009656:	462b      	mov	r3, r5
 8009658:	bfbb      	ittet	lt
 800965a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800965e:	461d      	movlt	r5, r3
 8009660:	2300      	movge	r3, #0
 8009662:	232d      	movlt	r3, #45	; 0x2d
 8009664:	700b      	strb	r3, [r1, #0]
 8009666:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009668:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800966c:	4691      	mov	r9, r2
 800966e:	f023 0820 	bic.w	r8, r3, #32
 8009672:	bfbc      	itt	lt
 8009674:	4622      	movlt	r2, r4
 8009676:	4614      	movlt	r4, r2
 8009678:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800967c:	d005      	beq.n	800968a <__cvt+0x42>
 800967e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009682:	d100      	bne.n	8009686 <__cvt+0x3e>
 8009684:	3601      	adds	r6, #1
 8009686:	2102      	movs	r1, #2
 8009688:	e000      	b.n	800968c <__cvt+0x44>
 800968a:	2103      	movs	r1, #3
 800968c:	ab03      	add	r3, sp, #12
 800968e:	9301      	str	r3, [sp, #4]
 8009690:	ab02      	add	r3, sp, #8
 8009692:	9300      	str	r3, [sp, #0]
 8009694:	ec45 4b10 	vmov	d0, r4, r5
 8009698:	4653      	mov	r3, sl
 800969a:	4632      	mov	r2, r6
 800969c:	f000 fcec 	bl	800a078 <_dtoa_r>
 80096a0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80096a4:	4607      	mov	r7, r0
 80096a6:	d102      	bne.n	80096ae <__cvt+0x66>
 80096a8:	f019 0f01 	tst.w	r9, #1
 80096ac:	d022      	beq.n	80096f4 <__cvt+0xac>
 80096ae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80096b2:	eb07 0906 	add.w	r9, r7, r6
 80096b6:	d110      	bne.n	80096da <__cvt+0x92>
 80096b8:	783b      	ldrb	r3, [r7, #0]
 80096ba:	2b30      	cmp	r3, #48	; 0x30
 80096bc:	d10a      	bne.n	80096d4 <__cvt+0x8c>
 80096be:	2200      	movs	r2, #0
 80096c0:	2300      	movs	r3, #0
 80096c2:	4620      	mov	r0, r4
 80096c4:	4629      	mov	r1, r5
 80096c6:	f7f7 fa27 	bl	8000b18 <__aeabi_dcmpeq>
 80096ca:	b918      	cbnz	r0, 80096d4 <__cvt+0x8c>
 80096cc:	f1c6 0601 	rsb	r6, r6, #1
 80096d0:	f8ca 6000 	str.w	r6, [sl]
 80096d4:	f8da 3000 	ldr.w	r3, [sl]
 80096d8:	4499      	add	r9, r3
 80096da:	2200      	movs	r2, #0
 80096dc:	2300      	movs	r3, #0
 80096de:	4620      	mov	r0, r4
 80096e0:	4629      	mov	r1, r5
 80096e2:	f7f7 fa19 	bl	8000b18 <__aeabi_dcmpeq>
 80096e6:	b108      	cbz	r0, 80096ec <__cvt+0xa4>
 80096e8:	f8cd 900c 	str.w	r9, [sp, #12]
 80096ec:	2230      	movs	r2, #48	; 0x30
 80096ee:	9b03      	ldr	r3, [sp, #12]
 80096f0:	454b      	cmp	r3, r9
 80096f2:	d307      	bcc.n	8009704 <__cvt+0xbc>
 80096f4:	9b03      	ldr	r3, [sp, #12]
 80096f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80096f8:	1bdb      	subs	r3, r3, r7
 80096fa:	4638      	mov	r0, r7
 80096fc:	6013      	str	r3, [r2, #0]
 80096fe:	b004      	add	sp, #16
 8009700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009704:	1c59      	adds	r1, r3, #1
 8009706:	9103      	str	r1, [sp, #12]
 8009708:	701a      	strb	r2, [r3, #0]
 800970a:	e7f0      	b.n	80096ee <__cvt+0xa6>

0800970c <__exponent>:
 800970c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800970e:	4603      	mov	r3, r0
 8009710:	2900      	cmp	r1, #0
 8009712:	bfb8      	it	lt
 8009714:	4249      	neglt	r1, r1
 8009716:	f803 2b02 	strb.w	r2, [r3], #2
 800971a:	bfb4      	ite	lt
 800971c:	222d      	movlt	r2, #45	; 0x2d
 800971e:	222b      	movge	r2, #43	; 0x2b
 8009720:	2909      	cmp	r1, #9
 8009722:	7042      	strb	r2, [r0, #1]
 8009724:	dd2a      	ble.n	800977c <__exponent+0x70>
 8009726:	f10d 0407 	add.w	r4, sp, #7
 800972a:	46a4      	mov	ip, r4
 800972c:	270a      	movs	r7, #10
 800972e:	46a6      	mov	lr, r4
 8009730:	460a      	mov	r2, r1
 8009732:	fb91 f6f7 	sdiv	r6, r1, r7
 8009736:	fb07 1516 	mls	r5, r7, r6, r1
 800973a:	3530      	adds	r5, #48	; 0x30
 800973c:	2a63      	cmp	r2, #99	; 0x63
 800973e:	f104 34ff 	add.w	r4, r4, #4294967295
 8009742:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009746:	4631      	mov	r1, r6
 8009748:	dcf1      	bgt.n	800972e <__exponent+0x22>
 800974a:	3130      	adds	r1, #48	; 0x30
 800974c:	f1ae 0502 	sub.w	r5, lr, #2
 8009750:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009754:	1c44      	adds	r4, r0, #1
 8009756:	4629      	mov	r1, r5
 8009758:	4561      	cmp	r1, ip
 800975a:	d30a      	bcc.n	8009772 <__exponent+0x66>
 800975c:	f10d 0209 	add.w	r2, sp, #9
 8009760:	eba2 020e 	sub.w	r2, r2, lr
 8009764:	4565      	cmp	r5, ip
 8009766:	bf88      	it	hi
 8009768:	2200      	movhi	r2, #0
 800976a:	4413      	add	r3, r2
 800976c:	1a18      	subs	r0, r3, r0
 800976e:	b003      	add	sp, #12
 8009770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009772:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009776:	f804 2f01 	strb.w	r2, [r4, #1]!
 800977a:	e7ed      	b.n	8009758 <__exponent+0x4c>
 800977c:	2330      	movs	r3, #48	; 0x30
 800977e:	3130      	adds	r1, #48	; 0x30
 8009780:	7083      	strb	r3, [r0, #2]
 8009782:	70c1      	strb	r1, [r0, #3]
 8009784:	1d03      	adds	r3, r0, #4
 8009786:	e7f1      	b.n	800976c <__exponent+0x60>

08009788 <_printf_float>:
 8009788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800978c:	ed2d 8b02 	vpush	{d8}
 8009790:	b08d      	sub	sp, #52	; 0x34
 8009792:	460c      	mov	r4, r1
 8009794:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009798:	4616      	mov	r6, r2
 800979a:	461f      	mov	r7, r3
 800979c:	4605      	mov	r5, r0
 800979e:	f001 fa57 	bl	800ac50 <_localeconv_r>
 80097a2:	f8d0 a000 	ldr.w	sl, [r0]
 80097a6:	4650      	mov	r0, sl
 80097a8:	f7f6 fd3a 	bl	8000220 <strlen>
 80097ac:	2300      	movs	r3, #0
 80097ae:	930a      	str	r3, [sp, #40]	; 0x28
 80097b0:	6823      	ldr	r3, [r4, #0]
 80097b2:	9305      	str	r3, [sp, #20]
 80097b4:	f8d8 3000 	ldr.w	r3, [r8]
 80097b8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80097bc:	3307      	adds	r3, #7
 80097be:	f023 0307 	bic.w	r3, r3, #7
 80097c2:	f103 0208 	add.w	r2, r3, #8
 80097c6:	f8c8 2000 	str.w	r2, [r8]
 80097ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80097d2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80097d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80097da:	9307      	str	r3, [sp, #28]
 80097dc:	f8cd 8018 	str.w	r8, [sp, #24]
 80097e0:	ee08 0a10 	vmov	s16, r0
 80097e4:	4b9f      	ldr	r3, [pc, #636]	; (8009a64 <_printf_float+0x2dc>)
 80097e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80097ea:	f04f 32ff 	mov.w	r2, #4294967295
 80097ee:	f7f7 f9c5 	bl	8000b7c <__aeabi_dcmpun>
 80097f2:	bb88      	cbnz	r0, 8009858 <_printf_float+0xd0>
 80097f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80097f8:	4b9a      	ldr	r3, [pc, #616]	; (8009a64 <_printf_float+0x2dc>)
 80097fa:	f04f 32ff 	mov.w	r2, #4294967295
 80097fe:	f7f7 f99f 	bl	8000b40 <__aeabi_dcmple>
 8009802:	bb48      	cbnz	r0, 8009858 <_printf_float+0xd0>
 8009804:	2200      	movs	r2, #0
 8009806:	2300      	movs	r3, #0
 8009808:	4640      	mov	r0, r8
 800980a:	4649      	mov	r1, r9
 800980c:	f7f7 f98e 	bl	8000b2c <__aeabi_dcmplt>
 8009810:	b110      	cbz	r0, 8009818 <_printf_float+0x90>
 8009812:	232d      	movs	r3, #45	; 0x2d
 8009814:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009818:	4b93      	ldr	r3, [pc, #588]	; (8009a68 <_printf_float+0x2e0>)
 800981a:	4894      	ldr	r0, [pc, #592]	; (8009a6c <_printf_float+0x2e4>)
 800981c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009820:	bf94      	ite	ls
 8009822:	4698      	movls	r8, r3
 8009824:	4680      	movhi	r8, r0
 8009826:	2303      	movs	r3, #3
 8009828:	6123      	str	r3, [r4, #16]
 800982a:	9b05      	ldr	r3, [sp, #20]
 800982c:	f023 0204 	bic.w	r2, r3, #4
 8009830:	6022      	str	r2, [r4, #0]
 8009832:	f04f 0900 	mov.w	r9, #0
 8009836:	9700      	str	r7, [sp, #0]
 8009838:	4633      	mov	r3, r6
 800983a:	aa0b      	add	r2, sp, #44	; 0x2c
 800983c:	4621      	mov	r1, r4
 800983e:	4628      	mov	r0, r5
 8009840:	f000 f9d8 	bl	8009bf4 <_printf_common>
 8009844:	3001      	adds	r0, #1
 8009846:	f040 8090 	bne.w	800996a <_printf_float+0x1e2>
 800984a:	f04f 30ff 	mov.w	r0, #4294967295
 800984e:	b00d      	add	sp, #52	; 0x34
 8009850:	ecbd 8b02 	vpop	{d8}
 8009854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009858:	4642      	mov	r2, r8
 800985a:	464b      	mov	r3, r9
 800985c:	4640      	mov	r0, r8
 800985e:	4649      	mov	r1, r9
 8009860:	f7f7 f98c 	bl	8000b7c <__aeabi_dcmpun>
 8009864:	b140      	cbz	r0, 8009878 <_printf_float+0xf0>
 8009866:	464b      	mov	r3, r9
 8009868:	2b00      	cmp	r3, #0
 800986a:	bfbc      	itt	lt
 800986c:	232d      	movlt	r3, #45	; 0x2d
 800986e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009872:	487f      	ldr	r0, [pc, #508]	; (8009a70 <_printf_float+0x2e8>)
 8009874:	4b7f      	ldr	r3, [pc, #508]	; (8009a74 <_printf_float+0x2ec>)
 8009876:	e7d1      	b.n	800981c <_printf_float+0x94>
 8009878:	6863      	ldr	r3, [r4, #4]
 800987a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800987e:	9206      	str	r2, [sp, #24]
 8009880:	1c5a      	adds	r2, r3, #1
 8009882:	d13f      	bne.n	8009904 <_printf_float+0x17c>
 8009884:	2306      	movs	r3, #6
 8009886:	6063      	str	r3, [r4, #4]
 8009888:	9b05      	ldr	r3, [sp, #20]
 800988a:	6861      	ldr	r1, [r4, #4]
 800988c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009890:	2300      	movs	r3, #0
 8009892:	9303      	str	r3, [sp, #12]
 8009894:	ab0a      	add	r3, sp, #40	; 0x28
 8009896:	e9cd b301 	strd	fp, r3, [sp, #4]
 800989a:	ab09      	add	r3, sp, #36	; 0x24
 800989c:	ec49 8b10 	vmov	d0, r8, r9
 80098a0:	9300      	str	r3, [sp, #0]
 80098a2:	6022      	str	r2, [r4, #0]
 80098a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80098a8:	4628      	mov	r0, r5
 80098aa:	f7ff fecd 	bl	8009648 <__cvt>
 80098ae:	9b06      	ldr	r3, [sp, #24]
 80098b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80098b2:	2b47      	cmp	r3, #71	; 0x47
 80098b4:	4680      	mov	r8, r0
 80098b6:	d108      	bne.n	80098ca <_printf_float+0x142>
 80098b8:	1cc8      	adds	r0, r1, #3
 80098ba:	db02      	blt.n	80098c2 <_printf_float+0x13a>
 80098bc:	6863      	ldr	r3, [r4, #4]
 80098be:	4299      	cmp	r1, r3
 80098c0:	dd41      	ble.n	8009946 <_printf_float+0x1be>
 80098c2:	f1ab 0b02 	sub.w	fp, fp, #2
 80098c6:	fa5f fb8b 	uxtb.w	fp, fp
 80098ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80098ce:	d820      	bhi.n	8009912 <_printf_float+0x18a>
 80098d0:	3901      	subs	r1, #1
 80098d2:	465a      	mov	r2, fp
 80098d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80098d8:	9109      	str	r1, [sp, #36]	; 0x24
 80098da:	f7ff ff17 	bl	800970c <__exponent>
 80098de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80098e0:	1813      	adds	r3, r2, r0
 80098e2:	2a01      	cmp	r2, #1
 80098e4:	4681      	mov	r9, r0
 80098e6:	6123      	str	r3, [r4, #16]
 80098e8:	dc02      	bgt.n	80098f0 <_printf_float+0x168>
 80098ea:	6822      	ldr	r2, [r4, #0]
 80098ec:	07d2      	lsls	r2, r2, #31
 80098ee:	d501      	bpl.n	80098f4 <_printf_float+0x16c>
 80098f0:	3301      	adds	r3, #1
 80098f2:	6123      	str	r3, [r4, #16]
 80098f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d09c      	beq.n	8009836 <_printf_float+0xae>
 80098fc:	232d      	movs	r3, #45	; 0x2d
 80098fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009902:	e798      	b.n	8009836 <_printf_float+0xae>
 8009904:	9a06      	ldr	r2, [sp, #24]
 8009906:	2a47      	cmp	r2, #71	; 0x47
 8009908:	d1be      	bne.n	8009888 <_printf_float+0x100>
 800990a:	2b00      	cmp	r3, #0
 800990c:	d1bc      	bne.n	8009888 <_printf_float+0x100>
 800990e:	2301      	movs	r3, #1
 8009910:	e7b9      	b.n	8009886 <_printf_float+0xfe>
 8009912:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009916:	d118      	bne.n	800994a <_printf_float+0x1c2>
 8009918:	2900      	cmp	r1, #0
 800991a:	6863      	ldr	r3, [r4, #4]
 800991c:	dd0b      	ble.n	8009936 <_printf_float+0x1ae>
 800991e:	6121      	str	r1, [r4, #16]
 8009920:	b913      	cbnz	r3, 8009928 <_printf_float+0x1a0>
 8009922:	6822      	ldr	r2, [r4, #0]
 8009924:	07d0      	lsls	r0, r2, #31
 8009926:	d502      	bpl.n	800992e <_printf_float+0x1a6>
 8009928:	3301      	adds	r3, #1
 800992a:	440b      	add	r3, r1
 800992c:	6123      	str	r3, [r4, #16]
 800992e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009930:	f04f 0900 	mov.w	r9, #0
 8009934:	e7de      	b.n	80098f4 <_printf_float+0x16c>
 8009936:	b913      	cbnz	r3, 800993e <_printf_float+0x1b6>
 8009938:	6822      	ldr	r2, [r4, #0]
 800993a:	07d2      	lsls	r2, r2, #31
 800993c:	d501      	bpl.n	8009942 <_printf_float+0x1ba>
 800993e:	3302      	adds	r3, #2
 8009940:	e7f4      	b.n	800992c <_printf_float+0x1a4>
 8009942:	2301      	movs	r3, #1
 8009944:	e7f2      	b.n	800992c <_printf_float+0x1a4>
 8009946:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800994a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800994c:	4299      	cmp	r1, r3
 800994e:	db05      	blt.n	800995c <_printf_float+0x1d4>
 8009950:	6823      	ldr	r3, [r4, #0]
 8009952:	6121      	str	r1, [r4, #16]
 8009954:	07d8      	lsls	r0, r3, #31
 8009956:	d5ea      	bpl.n	800992e <_printf_float+0x1a6>
 8009958:	1c4b      	adds	r3, r1, #1
 800995a:	e7e7      	b.n	800992c <_printf_float+0x1a4>
 800995c:	2900      	cmp	r1, #0
 800995e:	bfd4      	ite	le
 8009960:	f1c1 0202 	rsble	r2, r1, #2
 8009964:	2201      	movgt	r2, #1
 8009966:	4413      	add	r3, r2
 8009968:	e7e0      	b.n	800992c <_printf_float+0x1a4>
 800996a:	6823      	ldr	r3, [r4, #0]
 800996c:	055a      	lsls	r2, r3, #21
 800996e:	d407      	bmi.n	8009980 <_printf_float+0x1f8>
 8009970:	6923      	ldr	r3, [r4, #16]
 8009972:	4642      	mov	r2, r8
 8009974:	4631      	mov	r1, r6
 8009976:	4628      	mov	r0, r5
 8009978:	47b8      	blx	r7
 800997a:	3001      	adds	r0, #1
 800997c:	d12c      	bne.n	80099d8 <_printf_float+0x250>
 800997e:	e764      	b.n	800984a <_printf_float+0xc2>
 8009980:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009984:	f240 80e0 	bls.w	8009b48 <_printf_float+0x3c0>
 8009988:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800998c:	2200      	movs	r2, #0
 800998e:	2300      	movs	r3, #0
 8009990:	f7f7 f8c2 	bl	8000b18 <__aeabi_dcmpeq>
 8009994:	2800      	cmp	r0, #0
 8009996:	d034      	beq.n	8009a02 <_printf_float+0x27a>
 8009998:	4a37      	ldr	r2, [pc, #220]	; (8009a78 <_printf_float+0x2f0>)
 800999a:	2301      	movs	r3, #1
 800999c:	4631      	mov	r1, r6
 800999e:	4628      	mov	r0, r5
 80099a0:	47b8      	blx	r7
 80099a2:	3001      	adds	r0, #1
 80099a4:	f43f af51 	beq.w	800984a <_printf_float+0xc2>
 80099a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099ac:	429a      	cmp	r2, r3
 80099ae:	db02      	blt.n	80099b6 <_printf_float+0x22e>
 80099b0:	6823      	ldr	r3, [r4, #0]
 80099b2:	07d8      	lsls	r0, r3, #31
 80099b4:	d510      	bpl.n	80099d8 <_printf_float+0x250>
 80099b6:	ee18 3a10 	vmov	r3, s16
 80099ba:	4652      	mov	r2, sl
 80099bc:	4631      	mov	r1, r6
 80099be:	4628      	mov	r0, r5
 80099c0:	47b8      	blx	r7
 80099c2:	3001      	adds	r0, #1
 80099c4:	f43f af41 	beq.w	800984a <_printf_float+0xc2>
 80099c8:	f04f 0800 	mov.w	r8, #0
 80099cc:	f104 091a 	add.w	r9, r4, #26
 80099d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099d2:	3b01      	subs	r3, #1
 80099d4:	4543      	cmp	r3, r8
 80099d6:	dc09      	bgt.n	80099ec <_printf_float+0x264>
 80099d8:	6823      	ldr	r3, [r4, #0]
 80099da:	079b      	lsls	r3, r3, #30
 80099dc:	f100 8105 	bmi.w	8009bea <_printf_float+0x462>
 80099e0:	68e0      	ldr	r0, [r4, #12]
 80099e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099e4:	4298      	cmp	r0, r3
 80099e6:	bfb8      	it	lt
 80099e8:	4618      	movlt	r0, r3
 80099ea:	e730      	b.n	800984e <_printf_float+0xc6>
 80099ec:	2301      	movs	r3, #1
 80099ee:	464a      	mov	r2, r9
 80099f0:	4631      	mov	r1, r6
 80099f2:	4628      	mov	r0, r5
 80099f4:	47b8      	blx	r7
 80099f6:	3001      	adds	r0, #1
 80099f8:	f43f af27 	beq.w	800984a <_printf_float+0xc2>
 80099fc:	f108 0801 	add.w	r8, r8, #1
 8009a00:	e7e6      	b.n	80099d0 <_printf_float+0x248>
 8009a02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	dc39      	bgt.n	8009a7c <_printf_float+0x2f4>
 8009a08:	4a1b      	ldr	r2, [pc, #108]	; (8009a78 <_printf_float+0x2f0>)
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	4631      	mov	r1, r6
 8009a0e:	4628      	mov	r0, r5
 8009a10:	47b8      	blx	r7
 8009a12:	3001      	adds	r0, #1
 8009a14:	f43f af19 	beq.w	800984a <_printf_float+0xc2>
 8009a18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a1c:	4313      	orrs	r3, r2
 8009a1e:	d102      	bne.n	8009a26 <_printf_float+0x29e>
 8009a20:	6823      	ldr	r3, [r4, #0]
 8009a22:	07d9      	lsls	r1, r3, #31
 8009a24:	d5d8      	bpl.n	80099d8 <_printf_float+0x250>
 8009a26:	ee18 3a10 	vmov	r3, s16
 8009a2a:	4652      	mov	r2, sl
 8009a2c:	4631      	mov	r1, r6
 8009a2e:	4628      	mov	r0, r5
 8009a30:	47b8      	blx	r7
 8009a32:	3001      	adds	r0, #1
 8009a34:	f43f af09 	beq.w	800984a <_printf_float+0xc2>
 8009a38:	f04f 0900 	mov.w	r9, #0
 8009a3c:	f104 0a1a 	add.w	sl, r4, #26
 8009a40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a42:	425b      	negs	r3, r3
 8009a44:	454b      	cmp	r3, r9
 8009a46:	dc01      	bgt.n	8009a4c <_printf_float+0x2c4>
 8009a48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a4a:	e792      	b.n	8009972 <_printf_float+0x1ea>
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	4652      	mov	r2, sl
 8009a50:	4631      	mov	r1, r6
 8009a52:	4628      	mov	r0, r5
 8009a54:	47b8      	blx	r7
 8009a56:	3001      	adds	r0, #1
 8009a58:	f43f aef7 	beq.w	800984a <_printf_float+0xc2>
 8009a5c:	f109 0901 	add.w	r9, r9, #1
 8009a60:	e7ee      	b.n	8009a40 <_printf_float+0x2b8>
 8009a62:	bf00      	nop
 8009a64:	7fefffff 	.word	0x7fefffff
 8009a68:	0800c808 	.word	0x0800c808
 8009a6c:	0800c80c 	.word	0x0800c80c
 8009a70:	0800c814 	.word	0x0800c814
 8009a74:	0800c810 	.word	0x0800c810
 8009a78:	0800c818 	.word	0x0800c818
 8009a7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009a80:	429a      	cmp	r2, r3
 8009a82:	bfa8      	it	ge
 8009a84:	461a      	movge	r2, r3
 8009a86:	2a00      	cmp	r2, #0
 8009a88:	4691      	mov	r9, r2
 8009a8a:	dc37      	bgt.n	8009afc <_printf_float+0x374>
 8009a8c:	f04f 0b00 	mov.w	fp, #0
 8009a90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a94:	f104 021a 	add.w	r2, r4, #26
 8009a98:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009a9a:	9305      	str	r3, [sp, #20]
 8009a9c:	eba3 0309 	sub.w	r3, r3, r9
 8009aa0:	455b      	cmp	r3, fp
 8009aa2:	dc33      	bgt.n	8009b0c <_printf_float+0x384>
 8009aa4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009aa8:	429a      	cmp	r2, r3
 8009aaa:	db3b      	blt.n	8009b24 <_printf_float+0x39c>
 8009aac:	6823      	ldr	r3, [r4, #0]
 8009aae:	07da      	lsls	r2, r3, #31
 8009ab0:	d438      	bmi.n	8009b24 <_printf_float+0x39c>
 8009ab2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ab4:	9b05      	ldr	r3, [sp, #20]
 8009ab6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ab8:	1ad3      	subs	r3, r2, r3
 8009aba:	eba2 0901 	sub.w	r9, r2, r1
 8009abe:	4599      	cmp	r9, r3
 8009ac0:	bfa8      	it	ge
 8009ac2:	4699      	movge	r9, r3
 8009ac4:	f1b9 0f00 	cmp.w	r9, #0
 8009ac8:	dc35      	bgt.n	8009b36 <_printf_float+0x3ae>
 8009aca:	f04f 0800 	mov.w	r8, #0
 8009ace:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ad2:	f104 0a1a 	add.w	sl, r4, #26
 8009ad6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ada:	1a9b      	subs	r3, r3, r2
 8009adc:	eba3 0309 	sub.w	r3, r3, r9
 8009ae0:	4543      	cmp	r3, r8
 8009ae2:	f77f af79 	ble.w	80099d8 <_printf_float+0x250>
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	4652      	mov	r2, sl
 8009aea:	4631      	mov	r1, r6
 8009aec:	4628      	mov	r0, r5
 8009aee:	47b8      	blx	r7
 8009af0:	3001      	adds	r0, #1
 8009af2:	f43f aeaa 	beq.w	800984a <_printf_float+0xc2>
 8009af6:	f108 0801 	add.w	r8, r8, #1
 8009afa:	e7ec      	b.n	8009ad6 <_printf_float+0x34e>
 8009afc:	4613      	mov	r3, r2
 8009afe:	4631      	mov	r1, r6
 8009b00:	4642      	mov	r2, r8
 8009b02:	4628      	mov	r0, r5
 8009b04:	47b8      	blx	r7
 8009b06:	3001      	adds	r0, #1
 8009b08:	d1c0      	bne.n	8009a8c <_printf_float+0x304>
 8009b0a:	e69e      	b.n	800984a <_printf_float+0xc2>
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	4631      	mov	r1, r6
 8009b10:	4628      	mov	r0, r5
 8009b12:	9205      	str	r2, [sp, #20]
 8009b14:	47b8      	blx	r7
 8009b16:	3001      	adds	r0, #1
 8009b18:	f43f ae97 	beq.w	800984a <_printf_float+0xc2>
 8009b1c:	9a05      	ldr	r2, [sp, #20]
 8009b1e:	f10b 0b01 	add.w	fp, fp, #1
 8009b22:	e7b9      	b.n	8009a98 <_printf_float+0x310>
 8009b24:	ee18 3a10 	vmov	r3, s16
 8009b28:	4652      	mov	r2, sl
 8009b2a:	4631      	mov	r1, r6
 8009b2c:	4628      	mov	r0, r5
 8009b2e:	47b8      	blx	r7
 8009b30:	3001      	adds	r0, #1
 8009b32:	d1be      	bne.n	8009ab2 <_printf_float+0x32a>
 8009b34:	e689      	b.n	800984a <_printf_float+0xc2>
 8009b36:	9a05      	ldr	r2, [sp, #20]
 8009b38:	464b      	mov	r3, r9
 8009b3a:	4442      	add	r2, r8
 8009b3c:	4631      	mov	r1, r6
 8009b3e:	4628      	mov	r0, r5
 8009b40:	47b8      	blx	r7
 8009b42:	3001      	adds	r0, #1
 8009b44:	d1c1      	bne.n	8009aca <_printf_float+0x342>
 8009b46:	e680      	b.n	800984a <_printf_float+0xc2>
 8009b48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b4a:	2a01      	cmp	r2, #1
 8009b4c:	dc01      	bgt.n	8009b52 <_printf_float+0x3ca>
 8009b4e:	07db      	lsls	r3, r3, #31
 8009b50:	d538      	bpl.n	8009bc4 <_printf_float+0x43c>
 8009b52:	2301      	movs	r3, #1
 8009b54:	4642      	mov	r2, r8
 8009b56:	4631      	mov	r1, r6
 8009b58:	4628      	mov	r0, r5
 8009b5a:	47b8      	blx	r7
 8009b5c:	3001      	adds	r0, #1
 8009b5e:	f43f ae74 	beq.w	800984a <_printf_float+0xc2>
 8009b62:	ee18 3a10 	vmov	r3, s16
 8009b66:	4652      	mov	r2, sl
 8009b68:	4631      	mov	r1, r6
 8009b6a:	4628      	mov	r0, r5
 8009b6c:	47b8      	blx	r7
 8009b6e:	3001      	adds	r0, #1
 8009b70:	f43f ae6b 	beq.w	800984a <_printf_float+0xc2>
 8009b74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009b78:	2200      	movs	r2, #0
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	f7f6 ffcc 	bl	8000b18 <__aeabi_dcmpeq>
 8009b80:	b9d8      	cbnz	r0, 8009bba <_printf_float+0x432>
 8009b82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b84:	f108 0201 	add.w	r2, r8, #1
 8009b88:	3b01      	subs	r3, #1
 8009b8a:	4631      	mov	r1, r6
 8009b8c:	4628      	mov	r0, r5
 8009b8e:	47b8      	blx	r7
 8009b90:	3001      	adds	r0, #1
 8009b92:	d10e      	bne.n	8009bb2 <_printf_float+0x42a>
 8009b94:	e659      	b.n	800984a <_printf_float+0xc2>
 8009b96:	2301      	movs	r3, #1
 8009b98:	4652      	mov	r2, sl
 8009b9a:	4631      	mov	r1, r6
 8009b9c:	4628      	mov	r0, r5
 8009b9e:	47b8      	blx	r7
 8009ba0:	3001      	adds	r0, #1
 8009ba2:	f43f ae52 	beq.w	800984a <_printf_float+0xc2>
 8009ba6:	f108 0801 	add.w	r8, r8, #1
 8009baa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bac:	3b01      	subs	r3, #1
 8009bae:	4543      	cmp	r3, r8
 8009bb0:	dcf1      	bgt.n	8009b96 <_printf_float+0x40e>
 8009bb2:	464b      	mov	r3, r9
 8009bb4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009bb8:	e6dc      	b.n	8009974 <_printf_float+0x1ec>
 8009bba:	f04f 0800 	mov.w	r8, #0
 8009bbe:	f104 0a1a 	add.w	sl, r4, #26
 8009bc2:	e7f2      	b.n	8009baa <_printf_float+0x422>
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	4642      	mov	r2, r8
 8009bc8:	e7df      	b.n	8009b8a <_printf_float+0x402>
 8009bca:	2301      	movs	r3, #1
 8009bcc:	464a      	mov	r2, r9
 8009bce:	4631      	mov	r1, r6
 8009bd0:	4628      	mov	r0, r5
 8009bd2:	47b8      	blx	r7
 8009bd4:	3001      	adds	r0, #1
 8009bd6:	f43f ae38 	beq.w	800984a <_printf_float+0xc2>
 8009bda:	f108 0801 	add.w	r8, r8, #1
 8009bde:	68e3      	ldr	r3, [r4, #12]
 8009be0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009be2:	1a5b      	subs	r3, r3, r1
 8009be4:	4543      	cmp	r3, r8
 8009be6:	dcf0      	bgt.n	8009bca <_printf_float+0x442>
 8009be8:	e6fa      	b.n	80099e0 <_printf_float+0x258>
 8009bea:	f04f 0800 	mov.w	r8, #0
 8009bee:	f104 0919 	add.w	r9, r4, #25
 8009bf2:	e7f4      	b.n	8009bde <_printf_float+0x456>

08009bf4 <_printf_common>:
 8009bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bf8:	4616      	mov	r6, r2
 8009bfa:	4699      	mov	r9, r3
 8009bfc:	688a      	ldr	r2, [r1, #8]
 8009bfe:	690b      	ldr	r3, [r1, #16]
 8009c00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009c04:	4293      	cmp	r3, r2
 8009c06:	bfb8      	it	lt
 8009c08:	4613      	movlt	r3, r2
 8009c0a:	6033      	str	r3, [r6, #0]
 8009c0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009c10:	4607      	mov	r7, r0
 8009c12:	460c      	mov	r4, r1
 8009c14:	b10a      	cbz	r2, 8009c1a <_printf_common+0x26>
 8009c16:	3301      	adds	r3, #1
 8009c18:	6033      	str	r3, [r6, #0]
 8009c1a:	6823      	ldr	r3, [r4, #0]
 8009c1c:	0699      	lsls	r1, r3, #26
 8009c1e:	bf42      	ittt	mi
 8009c20:	6833      	ldrmi	r3, [r6, #0]
 8009c22:	3302      	addmi	r3, #2
 8009c24:	6033      	strmi	r3, [r6, #0]
 8009c26:	6825      	ldr	r5, [r4, #0]
 8009c28:	f015 0506 	ands.w	r5, r5, #6
 8009c2c:	d106      	bne.n	8009c3c <_printf_common+0x48>
 8009c2e:	f104 0a19 	add.w	sl, r4, #25
 8009c32:	68e3      	ldr	r3, [r4, #12]
 8009c34:	6832      	ldr	r2, [r6, #0]
 8009c36:	1a9b      	subs	r3, r3, r2
 8009c38:	42ab      	cmp	r3, r5
 8009c3a:	dc26      	bgt.n	8009c8a <_printf_common+0x96>
 8009c3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009c40:	1e13      	subs	r3, r2, #0
 8009c42:	6822      	ldr	r2, [r4, #0]
 8009c44:	bf18      	it	ne
 8009c46:	2301      	movne	r3, #1
 8009c48:	0692      	lsls	r2, r2, #26
 8009c4a:	d42b      	bmi.n	8009ca4 <_printf_common+0xb0>
 8009c4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c50:	4649      	mov	r1, r9
 8009c52:	4638      	mov	r0, r7
 8009c54:	47c0      	blx	r8
 8009c56:	3001      	adds	r0, #1
 8009c58:	d01e      	beq.n	8009c98 <_printf_common+0xa4>
 8009c5a:	6823      	ldr	r3, [r4, #0]
 8009c5c:	68e5      	ldr	r5, [r4, #12]
 8009c5e:	6832      	ldr	r2, [r6, #0]
 8009c60:	f003 0306 	and.w	r3, r3, #6
 8009c64:	2b04      	cmp	r3, #4
 8009c66:	bf08      	it	eq
 8009c68:	1aad      	subeq	r5, r5, r2
 8009c6a:	68a3      	ldr	r3, [r4, #8]
 8009c6c:	6922      	ldr	r2, [r4, #16]
 8009c6e:	bf0c      	ite	eq
 8009c70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c74:	2500      	movne	r5, #0
 8009c76:	4293      	cmp	r3, r2
 8009c78:	bfc4      	itt	gt
 8009c7a:	1a9b      	subgt	r3, r3, r2
 8009c7c:	18ed      	addgt	r5, r5, r3
 8009c7e:	2600      	movs	r6, #0
 8009c80:	341a      	adds	r4, #26
 8009c82:	42b5      	cmp	r5, r6
 8009c84:	d11a      	bne.n	8009cbc <_printf_common+0xc8>
 8009c86:	2000      	movs	r0, #0
 8009c88:	e008      	b.n	8009c9c <_printf_common+0xa8>
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	4652      	mov	r2, sl
 8009c8e:	4649      	mov	r1, r9
 8009c90:	4638      	mov	r0, r7
 8009c92:	47c0      	blx	r8
 8009c94:	3001      	adds	r0, #1
 8009c96:	d103      	bne.n	8009ca0 <_printf_common+0xac>
 8009c98:	f04f 30ff 	mov.w	r0, #4294967295
 8009c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ca0:	3501      	adds	r5, #1
 8009ca2:	e7c6      	b.n	8009c32 <_printf_common+0x3e>
 8009ca4:	18e1      	adds	r1, r4, r3
 8009ca6:	1c5a      	adds	r2, r3, #1
 8009ca8:	2030      	movs	r0, #48	; 0x30
 8009caa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009cae:	4422      	add	r2, r4
 8009cb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009cb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009cb8:	3302      	adds	r3, #2
 8009cba:	e7c7      	b.n	8009c4c <_printf_common+0x58>
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	4622      	mov	r2, r4
 8009cc0:	4649      	mov	r1, r9
 8009cc2:	4638      	mov	r0, r7
 8009cc4:	47c0      	blx	r8
 8009cc6:	3001      	adds	r0, #1
 8009cc8:	d0e6      	beq.n	8009c98 <_printf_common+0xa4>
 8009cca:	3601      	adds	r6, #1
 8009ccc:	e7d9      	b.n	8009c82 <_printf_common+0x8e>
	...

08009cd0 <_printf_i>:
 8009cd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009cd4:	460c      	mov	r4, r1
 8009cd6:	4691      	mov	r9, r2
 8009cd8:	7e27      	ldrb	r7, [r4, #24]
 8009cda:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009cdc:	2f78      	cmp	r7, #120	; 0x78
 8009cde:	4680      	mov	r8, r0
 8009ce0:	469a      	mov	sl, r3
 8009ce2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ce6:	d807      	bhi.n	8009cf8 <_printf_i+0x28>
 8009ce8:	2f62      	cmp	r7, #98	; 0x62
 8009cea:	d80a      	bhi.n	8009d02 <_printf_i+0x32>
 8009cec:	2f00      	cmp	r7, #0
 8009cee:	f000 80d8 	beq.w	8009ea2 <_printf_i+0x1d2>
 8009cf2:	2f58      	cmp	r7, #88	; 0x58
 8009cf4:	f000 80a3 	beq.w	8009e3e <_printf_i+0x16e>
 8009cf8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009cfc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009d00:	e03a      	b.n	8009d78 <_printf_i+0xa8>
 8009d02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009d06:	2b15      	cmp	r3, #21
 8009d08:	d8f6      	bhi.n	8009cf8 <_printf_i+0x28>
 8009d0a:	a001      	add	r0, pc, #4	; (adr r0, 8009d10 <_printf_i+0x40>)
 8009d0c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009d10:	08009d69 	.word	0x08009d69
 8009d14:	08009d7d 	.word	0x08009d7d
 8009d18:	08009cf9 	.word	0x08009cf9
 8009d1c:	08009cf9 	.word	0x08009cf9
 8009d20:	08009cf9 	.word	0x08009cf9
 8009d24:	08009cf9 	.word	0x08009cf9
 8009d28:	08009d7d 	.word	0x08009d7d
 8009d2c:	08009cf9 	.word	0x08009cf9
 8009d30:	08009cf9 	.word	0x08009cf9
 8009d34:	08009cf9 	.word	0x08009cf9
 8009d38:	08009cf9 	.word	0x08009cf9
 8009d3c:	08009e89 	.word	0x08009e89
 8009d40:	08009dad 	.word	0x08009dad
 8009d44:	08009e6b 	.word	0x08009e6b
 8009d48:	08009cf9 	.word	0x08009cf9
 8009d4c:	08009cf9 	.word	0x08009cf9
 8009d50:	08009eab 	.word	0x08009eab
 8009d54:	08009cf9 	.word	0x08009cf9
 8009d58:	08009dad 	.word	0x08009dad
 8009d5c:	08009cf9 	.word	0x08009cf9
 8009d60:	08009cf9 	.word	0x08009cf9
 8009d64:	08009e73 	.word	0x08009e73
 8009d68:	680b      	ldr	r3, [r1, #0]
 8009d6a:	1d1a      	adds	r2, r3, #4
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	600a      	str	r2, [r1, #0]
 8009d70:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009d74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d78:	2301      	movs	r3, #1
 8009d7a:	e0a3      	b.n	8009ec4 <_printf_i+0x1f4>
 8009d7c:	6825      	ldr	r5, [r4, #0]
 8009d7e:	6808      	ldr	r0, [r1, #0]
 8009d80:	062e      	lsls	r6, r5, #24
 8009d82:	f100 0304 	add.w	r3, r0, #4
 8009d86:	d50a      	bpl.n	8009d9e <_printf_i+0xce>
 8009d88:	6805      	ldr	r5, [r0, #0]
 8009d8a:	600b      	str	r3, [r1, #0]
 8009d8c:	2d00      	cmp	r5, #0
 8009d8e:	da03      	bge.n	8009d98 <_printf_i+0xc8>
 8009d90:	232d      	movs	r3, #45	; 0x2d
 8009d92:	426d      	negs	r5, r5
 8009d94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d98:	485e      	ldr	r0, [pc, #376]	; (8009f14 <_printf_i+0x244>)
 8009d9a:	230a      	movs	r3, #10
 8009d9c:	e019      	b.n	8009dd2 <_printf_i+0x102>
 8009d9e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009da2:	6805      	ldr	r5, [r0, #0]
 8009da4:	600b      	str	r3, [r1, #0]
 8009da6:	bf18      	it	ne
 8009da8:	b22d      	sxthne	r5, r5
 8009daa:	e7ef      	b.n	8009d8c <_printf_i+0xbc>
 8009dac:	680b      	ldr	r3, [r1, #0]
 8009dae:	6825      	ldr	r5, [r4, #0]
 8009db0:	1d18      	adds	r0, r3, #4
 8009db2:	6008      	str	r0, [r1, #0]
 8009db4:	0628      	lsls	r0, r5, #24
 8009db6:	d501      	bpl.n	8009dbc <_printf_i+0xec>
 8009db8:	681d      	ldr	r5, [r3, #0]
 8009dba:	e002      	b.n	8009dc2 <_printf_i+0xf2>
 8009dbc:	0669      	lsls	r1, r5, #25
 8009dbe:	d5fb      	bpl.n	8009db8 <_printf_i+0xe8>
 8009dc0:	881d      	ldrh	r5, [r3, #0]
 8009dc2:	4854      	ldr	r0, [pc, #336]	; (8009f14 <_printf_i+0x244>)
 8009dc4:	2f6f      	cmp	r7, #111	; 0x6f
 8009dc6:	bf0c      	ite	eq
 8009dc8:	2308      	moveq	r3, #8
 8009dca:	230a      	movne	r3, #10
 8009dcc:	2100      	movs	r1, #0
 8009dce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009dd2:	6866      	ldr	r6, [r4, #4]
 8009dd4:	60a6      	str	r6, [r4, #8]
 8009dd6:	2e00      	cmp	r6, #0
 8009dd8:	bfa2      	ittt	ge
 8009dda:	6821      	ldrge	r1, [r4, #0]
 8009ddc:	f021 0104 	bicge.w	r1, r1, #4
 8009de0:	6021      	strge	r1, [r4, #0]
 8009de2:	b90d      	cbnz	r5, 8009de8 <_printf_i+0x118>
 8009de4:	2e00      	cmp	r6, #0
 8009de6:	d04d      	beq.n	8009e84 <_printf_i+0x1b4>
 8009de8:	4616      	mov	r6, r2
 8009dea:	fbb5 f1f3 	udiv	r1, r5, r3
 8009dee:	fb03 5711 	mls	r7, r3, r1, r5
 8009df2:	5dc7      	ldrb	r7, [r0, r7]
 8009df4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009df8:	462f      	mov	r7, r5
 8009dfa:	42bb      	cmp	r3, r7
 8009dfc:	460d      	mov	r5, r1
 8009dfe:	d9f4      	bls.n	8009dea <_printf_i+0x11a>
 8009e00:	2b08      	cmp	r3, #8
 8009e02:	d10b      	bne.n	8009e1c <_printf_i+0x14c>
 8009e04:	6823      	ldr	r3, [r4, #0]
 8009e06:	07df      	lsls	r7, r3, #31
 8009e08:	d508      	bpl.n	8009e1c <_printf_i+0x14c>
 8009e0a:	6923      	ldr	r3, [r4, #16]
 8009e0c:	6861      	ldr	r1, [r4, #4]
 8009e0e:	4299      	cmp	r1, r3
 8009e10:	bfde      	ittt	le
 8009e12:	2330      	movle	r3, #48	; 0x30
 8009e14:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009e18:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009e1c:	1b92      	subs	r2, r2, r6
 8009e1e:	6122      	str	r2, [r4, #16]
 8009e20:	f8cd a000 	str.w	sl, [sp]
 8009e24:	464b      	mov	r3, r9
 8009e26:	aa03      	add	r2, sp, #12
 8009e28:	4621      	mov	r1, r4
 8009e2a:	4640      	mov	r0, r8
 8009e2c:	f7ff fee2 	bl	8009bf4 <_printf_common>
 8009e30:	3001      	adds	r0, #1
 8009e32:	d14c      	bne.n	8009ece <_printf_i+0x1fe>
 8009e34:	f04f 30ff 	mov.w	r0, #4294967295
 8009e38:	b004      	add	sp, #16
 8009e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e3e:	4835      	ldr	r0, [pc, #212]	; (8009f14 <_printf_i+0x244>)
 8009e40:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009e44:	6823      	ldr	r3, [r4, #0]
 8009e46:	680e      	ldr	r6, [r1, #0]
 8009e48:	061f      	lsls	r7, r3, #24
 8009e4a:	f856 5b04 	ldr.w	r5, [r6], #4
 8009e4e:	600e      	str	r6, [r1, #0]
 8009e50:	d514      	bpl.n	8009e7c <_printf_i+0x1ac>
 8009e52:	07d9      	lsls	r1, r3, #31
 8009e54:	bf44      	itt	mi
 8009e56:	f043 0320 	orrmi.w	r3, r3, #32
 8009e5a:	6023      	strmi	r3, [r4, #0]
 8009e5c:	b91d      	cbnz	r5, 8009e66 <_printf_i+0x196>
 8009e5e:	6823      	ldr	r3, [r4, #0]
 8009e60:	f023 0320 	bic.w	r3, r3, #32
 8009e64:	6023      	str	r3, [r4, #0]
 8009e66:	2310      	movs	r3, #16
 8009e68:	e7b0      	b.n	8009dcc <_printf_i+0xfc>
 8009e6a:	6823      	ldr	r3, [r4, #0]
 8009e6c:	f043 0320 	orr.w	r3, r3, #32
 8009e70:	6023      	str	r3, [r4, #0]
 8009e72:	2378      	movs	r3, #120	; 0x78
 8009e74:	4828      	ldr	r0, [pc, #160]	; (8009f18 <_printf_i+0x248>)
 8009e76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009e7a:	e7e3      	b.n	8009e44 <_printf_i+0x174>
 8009e7c:	065e      	lsls	r6, r3, #25
 8009e7e:	bf48      	it	mi
 8009e80:	b2ad      	uxthmi	r5, r5
 8009e82:	e7e6      	b.n	8009e52 <_printf_i+0x182>
 8009e84:	4616      	mov	r6, r2
 8009e86:	e7bb      	b.n	8009e00 <_printf_i+0x130>
 8009e88:	680b      	ldr	r3, [r1, #0]
 8009e8a:	6826      	ldr	r6, [r4, #0]
 8009e8c:	6960      	ldr	r0, [r4, #20]
 8009e8e:	1d1d      	adds	r5, r3, #4
 8009e90:	600d      	str	r5, [r1, #0]
 8009e92:	0635      	lsls	r5, r6, #24
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	d501      	bpl.n	8009e9c <_printf_i+0x1cc>
 8009e98:	6018      	str	r0, [r3, #0]
 8009e9a:	e002      	b.n	8009ea2 <_printf_i+0x1d2>
 8009e9c:	0671      	lsls	r1, r6, #25
 8009e9e:	d5fb      	bpl.n	8009e98 <_printf_i+0x1c8>
 8009ea0:	8018      	strh	r0, [r3, #0]
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	6123      	str	r3, [r4, #16]
 8009ea6:	4616      	mov	r6, r2
 8009ea8:	e7ba      	b.n	8009e20 <_printf_i+0x150>
 8009eaa:	680b      	ldr	r3, [r1, #0]
 8009eac:	1d1a      	adds	r2, r3, #4
 8009eae:	600a      	str	r2, [r1, #0]
 8009eb0:	681e      	ldr	r6, [r3, #0]
 8009eb2:	6862      	ldr	r2, [r4, #4]
 8009eb4:	2100      	movs	r1, #0
 8009eb6:	4630      	mov	r0, r6
 8009eb8:	f7f6 f9ba 	bl	8000230 <memchr>
 8009ebc:	b108      	cbz	r0, 8009ec2 <_printf_i+0x1f2>
 8009ebe:	1b80      	subs	r0, r0, r6
 8009ec0:	6060      	str	r0, [r4, #4]
 8009ec2:	6863      	ldr	r3, [r4, #4]
 8009ec4:	6123      	str	r3, [r4, #16]
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ecc:	e7a8      	b.n	8009e20 <_printf_i+0x150>
 8009ece:	6923      	ldr	r3, [r4, #16]
 8009ed0:	4632      	mov	r2, r6
 8009ed2:	4649      	mov	r1, r9
 8009ed4:	4640      	mov	r0, r8
 8009ed6:	47d0      	blx	sl
 8009ed8:	3001      	adds	r0, #1
 8009eda:	d0ab      	beq.n	8009e34 <_printf_i+0x164>
 8009edc:	6823      	ldr	r3, [r4, #0]
 8009ede:	079b      	lsls	r3, r3, #30
 8009ee0:	d413      	bmi.n	8009f0a <_printf_i+0x23a>
 8009ee2:	68e0      	ldr	r0, [r4, #12]
 8009ee4:	9b03      	ldr	r3, [sp, #12]
 8009ee6:	4298      	cmp	r0, r3
 8009ee8:	bfb8      	it	lt
 8009eea:	4618      	movlt	r0, r3
 8009eec:	e7a4      	b.n	8009e38 <_printf_i+0x168>
 8009eee:	2301      	movs	r3, #1
 8009ef0:	4632      	mov	r2, r6
 8009ef2:	4649      	mov	r1, r9
 8009ef4:	4640      	mov	r0, r8
 8009ef6:	47d0      	blx	sl
 8009ef8:	3001      	adds	r0, #1
 8009efa:	d09b      	beq.n	8009e34 <_printf_i+0x164>
 8009efc:	3501      	adds	r5, #1
 8009efe:	68e3      	ldr	r3, [r4, #12]
 8009f00:	9903      	ldr	r1, [sp, #12]
 8009f02:	1a5b      	subs	r3, r3, r1
 8009f04:	42ab      	cmp	r3, r5
 8009f06:	dcf2      	bgt.n	8009eee <_printf_i+0x21e>
 8009f08:	e7eb      	b.n	8009ee2 <_printf_i+0x212>
 8009f0a:	2500      	movs	r5, #0
 8009f0c:	f104 0619 	add.w	r6, r4, #25
 8009f10:	e7f5      	b.n	8009efe <_printf_i+0x22e>
 8009f12:	bf00      	nop
 8009f14:	0800c81a 	.word	0x0800c81a
 8009f18:	0800c82b 	.word	0x0800c82b

08009f1c <siprintf>:
 8009f1c:	b40e      	push	{r1, r2, r3}
 8009f1e:	b500      	push	{lr}
 8009f20:	b09c      	sub	sp, #112	; 0x70
 8009f22:	ab1d      	add	r3, sp, #116	; 0x74
 8009f24:	9002      	str	r0, [sp, #8]
 8009f26:	9006      	str	r0, [sp, #24]
 8009f28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009f2c:	4809      	ldr	r0, [pc, #36]	; (8009f54 <siprintf+0x38>)
 8009f2e:	9107      	str	r1, [sp, #28]
 8009f30:	9104      	str	r1, [sp, #16]
 8009f32:	4909      	ldr	r1, [pc, #36]	; (8009f58 <siprintf+0x3c>)
 8009f34:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f38:	9105      	str	r1, [sp, #20]
 8009f3a:	6800      	ldr	r0, [r0, #0]
 8009f3c:	9301      	str	r3, [sp, #4]
 8009f3e:	a902      	add	r1, sp, #8
 8009f40:	f001 fb34 	bl	800b5ac <_svfiprintf_r>
 8009f44:	9b02      	ldr	r3, [sp, #8]
 8009f46:	2200      	movs	r2, #0
 8009f48:	701a      	strb	r2, [r3, #0]
 8009f4a:	b01c      	add	sp, #112	; 0x70
 8009f4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f50:	b003      	add	sp, #12
 8009f52:	4770      	bx	lr
 8009f54:	2000000c 	.word	0x2000000c
 8009f58:	ffff0208 	.word	0xffff0208

08009f5c <quorem>:
 8009f5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f60:	6903      	ldr	r3, [r0, #16]
 8009f62:	690c      	ldr	r4, [r1, #16]
 8009f64:	42a3      	cmp	r3, r4
 8009f66:	4607      	mov	r7, r0
 8009f68:	f2c0 8081 	blt.w	800a06e <quorem+0x112>
 8009f6c:	3c01      	subs	r4, #1
 8009f6e:	f101 0814 	add.w	r8, r1, #20
 8009f72:	f100 0514 	add.w	r5, r0, #20
 8009f76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f7a:	9301      	str	r3, [sp, #4]
 8009f7c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009f80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f84:	3301      	adds	r3, #1
 8009f86:	429a      	cmp	r2, r3
 8009f88:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009f8c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009f90:	fbb2 f6f3 	udiv	r6, r2, r3
 8009f94:	d331      	bcc.n	8009ffa <quorem+0x9e>
 8009f96:	f04f 0e00 	mov.w	lr, #0
 8009f9a:	4640      	mov	r0, r8
 8009f9c:	46ac      	mov	ip, r5
 8009f9e:	46f2      	mov	sl, lr
 8009fa0:	f850 2b04 	ldr.w	r2, [r0], #4
 8009fa4:	b293      	uxth	r3, r2
 8009fa6:	fb06 e303 	mla	r3, r6, r3, lr
 8009faa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009fae:	b29b      	uxth	r3, r3
 8009fb0:	ebaa 0303 	sub.w	r3, sl, r3
 8009fb4:	0c12      	lsrs	r2, r2, #16
 8009fb6:	f8dc a000 	ldr.w	sl, [ip]
 8009fba:	fb06 e202 	mla	r2, r6, r2, lr
 8009fbe:	fa13 f38a 	uxtah	r3, r3, sl
 8009fc2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009fc6:	fa1f fa82 	uxth.w	sl, r2
 8009fca:	f8dc 2000 	ldr.w	r2, [ip]
 8009fce:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009fd2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009fd6:	b29b      	uxth	r3, r3
 8009fd8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009fdc:	4581      	cmp	r9, r0
 8009fde:	f84c 3b04 	str.w	r3, [ip], #4
 8009fe2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009fe6:	d2db      	bcs.n	8009fa0 <quorem+0x44>
 8009fe8:	f855 300b 	ldr.w	r3, [r5, fp]
 8009fec:	b92b      	cbnz	r3, 8009ffa <quorem+0x9e>
 8009fee:	9b01      	ldr	r3, [sp, #4]
 8009ff0:	3b04      	subs	r3, #4
 8009ff2:	429d      	cmp	r5, r3
 8009ff4:	461a      	mov	r2, r3
 8009ff6:	d32e      	bcc.n	800a056 <quorem+0xfa>
 8009ff8:	613c      	str	r4, [r7, #16]
 8009ffa:	4638      	mov	r0, r7
 8009ffc:	f001 f8c0 	bl	800b180 <__mcmp>
 800a000:	2800      	cmp	r0, #0
 800a002:	db24      	blt.n	800a04e <quorem+0xf2>
 800a004:	3601      	adds	r6, #1
 800a006:	4628      	mov	r0, r5
 800a008:	f04f 0c00 	mov.w	ip, #0
 800a00c:	f858 2b04 	ldr.w	r2, [r8], #4
 800a010:	f8d0 e000 	ldr.w	lr, [r0]
 800a014:	b293      	uxth	r3, r2
 800a016:	ebac 0303 	sub.w	r3, ip, r3
 800a01a:	0c12      	lsrs	r2, r2, #16
 800a01c:	fa13 f38e 	uxtah	r3, r3, lr
 800a020:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a024:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a028:	b29b      	uxth	r3, r3
 800a02a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a02e:	45c1      	cmp	r9, r8
 800a030:	f840 3b04 	str.w	r3, [r0], #4
 800a034:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a038:	d2e8      	bcs.n	800a00c <quorem+0xb0>
 800a03a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a03e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a042:	b922      	cbnz	r2, 800a04e <quorem+0xf2>
 800a044:	3b04      	subs	r3, #4
 800a046:	429d      	cmp	r5, r3
 800a048:	461a      	mov	r2, r3
 800a04a:	d30a      	bcc.n	800a062 <quorem+0x106>
 800a04c:	613c      	str	r4, [r7, #16]
 800a04e:	4630      	mov	r0, r6
 800a050:	b003      	add	sp, #12
 800a052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a056:	6812      	ldr	r2, [r2, #0]
 800a058:	3b04      	subs	r3, #4
 800a05a:	2a00      	cmp	r2, #0
 800a05c:	d1cc      	bne.n	8009ff8 <quorem+0x9c>
 800a05e:	3c01      	subs	r4, #1
 800a060:	e7c7      	b.n	8009ff2 <quorem+0x96>
 800a062:	6812      	ldr	r2, [r2, #0]
 800a064:	3b04      	subs	r3, #4
 800a066:	2a00      	cmp	r2, #0
 800a068:	d1f0      	bne.n	800a04c <quorem+0xf0>
 800a06a:	3c01      	subs	r4, #1
 800a06c:	e7eb      	b.n	800a046 <quorem+0xea>
 800a06e:	2000      	movs	r0, #0
 800a070:	e7ee      	b.n	800a050 <quorem+0xf4>
 800a072:	0000      	movs	r0, r0
 800a074:	0000      	movs	r0, r0
	...

0800a078 <_dtoa_r>:
 800a078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a07c:	ed2d 8b02 	vpush	{d8}
 800a080:	ec57 6b10 	vmov	r6, r7, d0
 800a084:	b095      	sub	sp, #84	; 0x54
 800a086:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a088:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a08c:	9105      	str	r1, [sp, #20]
 800a08e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a092:	4604      	mov	r4, r0
 800a094:	9209      	str	r2, [sp, #36]	; 0x24
 800a096:	930f      	str	r3, [sp, #60]	; 0x3c
 800a098:	b975      	cbnz	r5, 800a0b8 <_dtoa_r+0x40>
 800a09a:	2010      	movs	r0, #16
 800a09c:	f000 fddc 	bl	800ac58 <malloc>
 800a0a0:	4602      	mov	r2, r0
 800a0a2:	6260      	str	r0, [r4, #36]	; 0x24
 800a0a4:	b920      	cbnz	r0, 800a0b0 <_dtoa_r+0x38>
 800a0a6:	4bb2      	ldr	r3, [pc, #712]	; (800a370 <_dtoa_r+0x2f8>)
 800a0a8:	21ea      	movs	r1, #234	; 0xea
 800a0aa:	48b2      	ldr	r0, [pc, #712]	; (800a374 <_dtoa_r+0x2fc>)
 800a0ac:	f001 fb8e 	bl	800b7cc <__assert_func>
 800a0b0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a0b4:	6005      	str	r5, [r0, #0]
 800a0b6:	60c5      	str	r5, [r0, #12]
 800a0b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0ba:	6819      	ldr	r1, [r3, #0]
 800a0bc:	b151      	cbz	r1, 800a0d4 <_dtoa_r+0x5c>
 800a0be:	685a      	ldr	r2, [r3, #4]
 800a0c0:	604a      	str	r2, [r1, #4]
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	4093      	lsls	r3, r2
 800a0c6:	608b      	str	r3, [r1, #8]
 800a0c8:	4620      	mov	r0, r4
 800a0ca:	f000 fe1b 	bl	800ad04 <_Bfree>
 800a0ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	601a      	str	r2, [r3, #0]
 800a0d4:	1e3b      	subs	r3, r7, #0
 800a0d6:	bfb9      	ittee	lt
 800a0d8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a0dc:	9303      	strlt	r3, [sp, #12]
 800a0de:	2300      	movge	r3, #0
 800a0e0:	f8c8 3000 	strge.w	r3, [r8]
 800a0e4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a0e8:	4ba3      	ldr	r3, [pc, #652]	; (800a378 <_dtoa_r+0x300>)
 800a0ea:	bfbc      	itt	lt
 800a0ec:	2201      	movlt	r2, #1
 800a0ee:	f8c8 2000 	strlt.w	r2, [r8]
 800a0f2:	ea33 0309 	bics.w	r3, r3, r9
 800a0f6:	d11b      	bne.n	800a130 <_dtoa_r+0xb8>
 800a0f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a0fa:	f242 730f 	movw	r3, #9999	; 0x270f
 800a0fe:	6013      	str	r3, [r2, #0]
 800a100:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a104:	4333      	orrs	r3, r6
 800a106:	f000 857a 	beq.w	800abfe <_dtoa_r+0xb86>
 800a10a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a10c:	b963      	cbnz	r3, 800a128 <_dtoa_r+0xb0>
 800a10e:	4b9b      	ldr	r3, [pc, #620]	; (800a37c <_dtoa_r+0x304>)
 800a110:	e024      	b.n	800a15c <_dtoa_r+0xe4>
 800a112:	4b9b      	ldr	r3, [pc, #620]	; (800a380 <_dtoa_r+0x308>)
 800a114:	9300      	str	r3, [sp, #0]
 800a116:	3308      	adds	r3, #8
 800a118:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a11a:	6013      	str	r3, [r2, #0]
 800a11c:	9800      	ldr	r0, [sp, #0]
 800a11e:	b015      	add	sp, #84	; 0x54
 800a120:	ecbd 8b02 	vpop	{d8}
 800a124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a128:	4b94      	ldr	r3, [pc, #592]	; (800a37c <_dtoa_r+0x304>)
 800a12a:	9300      	str	r3, [sp, #0]
 800a12c:	3303      	adds	r3, #3
 800a12e:	e7f3      	b.n	800a118 <_dtoa_r+0xa0>
 800a130:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a134:	2200      	movs	r2, #0
 800a136:	ec51 0b17 	vmov	r0, r1, d7
 800a13a:	2300      	movs	r3, #0
 800a13c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a140:	f7f6 fcea 	bl	8000b18 <__aeabi_dcmpeq>
 800a144:	4680      	mov	r8, r0
 800a146:	b158      	cbz	r0, 800a160 <_dtoa_r+0xe8>
 800a148:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a14a:	2301      	movs	r3, #1
 800a14c:	6013      	str	r3, [r2, #0]
 800a14e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a150:	2b00      	cmp	r3, #0
 800a152:	f000 8551 	beq.w	800abf8 <_dtoa_r+0xb80>
 800a156:	488b      	ldr	r0, [pc, #556]	; (800a384 <_dtoa_r+0x30c>)
 800a158:	6018      	str	r0, [r3, #0]
 800a15a:	1e43      	subs	r3, r0, #1
 800a15c:	9300      	str	r3, [sp, #0]
 800a15e:	e7dd      	b.n	800a11c <_dtoa_r+0xa4>
 800a160:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a164:	aa12      	add	r2, sp, #72	; 0x48
 800a166:	a913      	add	r1, sp, #76	; 0x4c
 800a168:	4620      	mov	r0, r4
 800a16a:	f001 f8ad 	bl	800b2c8 <__d2b>
 800a16e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a172:	4683      	mov	fp, r0
 800a174:	2d00      	cmp	r5, #0
 800a176:	d07c      	beq.n	800a272 <_dtoa_r+0x1fa>
 800a178:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a17a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a17e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a182:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a186:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a18a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a18e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a192:	4b7d      	ldr	r3, [pc, #500]	; (800a388 <_dtoa_r+0x310>)
 800a194:	2200      	movs	r2, #0
 800a196:	4630      	mov	r0, r6
 800a198:	4639      	mov	r1, r7
 800a19a:	f7f6 f89d 	bl	80002d8 <__aeabi_dsub>
 800a19e:	a36e      	add	r3, pc, #440	; (adr r3, 800a358 <_dtoa_r+0x2e0>)
 800a1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a4:	f7f6 fa50 	bl	8000648 <__aeabi_dmul>
 800a1a8:	a36d      	add	r3, pc, #436	; (adr r3, 800a360 <_dtoa_r+0x2e8>)
 800a1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ae:	f7f6 f895 	bl	80002dc <__adddf3>
 800a1b2:	4606      	mov	r6, r0
 800a1b4:	4628      	mov	r0, r5
 800a1b6:	460f      	mov	r7, r1
 800a1b8:	f7f6 f9dc 	bl	8000574 <__aeabi_i2d>
 800a1bc:	a36a      	add	r3, pc, #424	; (adr r3, 800a368 <_dtoa_r+0x2f0>)
 800a1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c2:	f7f6 fa41 	bl	8000648 <__aeabi_dmul>
 800a1c6:	4602      	mov	r2, r0
 800a1c8:	460b      	mov	r3, r1
 800a1ca:	4630      	mov	r0, r6
 800a1cc:	4639      	mov	r1, r7
 800a1ce:	f7f6 f885 	bl	80002dc <__adddf3>
 800a1d2:	4606      	mov	r6, r0
 800a1d4:	460f      	mov	r7, r1
 800a1d6:	f7f6 fce7 	bl	8000ba8 <__aeabi_d2iz>
 800a1da:	2200      	movs	r2, #0
 800a1dc:	4682      	mov	sl, r0
 800a1de:	2300      	movs	r3, #0
 800a1e0:	4630      	mov	r0, r6
 800a1e2:	4639      	mov	r1, r7
 800a1e4:	f7f6 fca2 	bl	8000b2c <__aeabi_dcmplt>
 800a1e8:	b148      	cbz	r0, 800a1fe <_dtoa_r+0x186>
 800a1ea:	4650      	mov	r0, sl
 800a1ec:	f7f6 f9c2 	bl	8000574 <__aeabi_i2d>
 800a1f0:	4632      	mov	r2, r6
 800a1f2:	463b      	mov	r3, r7
 800a1f4:	f7f6 fc90 	bl	8000b18 <__aeabi_dcmpeq>
 800a1f8:	b908      	cbnz	r0, 800a1fe <_dtoa_r+0x186>
 800a1fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a1fe:	f1ba 0f16 	cmp.w	sl, #22
 800a202:	d854      	bhi.n	800a2ae <_dtoa_r+0x236>
 800a204:	4b61      	ldr	r3, [pc, #388]	; (800a38c <_dtoa_r+0x314>)
 800a206:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a20e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a212:	f7f6 fc8b 	bl	8000b2c <__aeabi_dcmplt>
 800a216:	2800      	cmp	r0, #0
 800a218:	d04b      	beq.n	800a2b2 <_dtoa_r+0x23a>
 800a21a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a21e:	2300      	movs	r3, #0
 800a220:	930e      	str	r3, [sp, #56]	; 0x38
 800a222:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a224:	1b5d      	subs	r5, r3, r5
 800a226:	1e6b      	subs	r3, r5, #1
 800a228:	9304      	str	r3, [sp, #16]
 800a22a:	bf43      	ittte	mi
 800a22c:	2300      	movmi	r3, #0
 800a22e:	f1c5 0801 	rsbmi	r8, r5, #1
 800a232:	9304      	strmi	r3, [sp, #16]
 800a234:	f04f 0800 	movpl.w	r8, #0
 800a238:	f1ba 0f00 	cmp.w	sl, #0
 800a23c:	db3b      	blt.n	800a2b6 <_dtoa_r+0x23e>
 800a23e:	9b04      	ldr	r3, [sp, #16]
 800a240:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a244:	4453      	add	r3, sl
 800a246:	9304      	str	r3, [sp, #16]
 800a248:	2300      	movs	r3, #0
 800a24a:	9306      	str	r3, [sp, #24]
 800a24c:	9b05      	ldr	r3, [sp, #20]
 800a24e:	2b09      	cmp	r3, #9
 800a250:	d869      	bhi.n	800a326 <_dtoa_r+0x2ae>
 800a252:	2b05      	cmp	r3, #5
 800a254:	bfc4      	itt	gt
 800a256:	3b04      	subgt	r3, #4
 800a258:	9305      	strgt	r3, [sp, #20]
 800a25a:	9b05      	ldr	r3, [sp, #20]
 800a25c:	f1a3 0302 	sub.w	r3, r3, #2
 800a260:	bfcc      	ite	gt
 800a262:	2500      	movgt	r5, #0
 800a264:	2501      	movle	r5, #1
 800a266:	2b03      	cmp	r3, #3
 800a268:	d869      	bhi.n	800a33e <_dtoa_r+0x2c6>
 800a26a:	e8df f003 	tbb	[pc, r3]
 800a26e:	4e2c      	.short	0x4e2c
 800a270:	5a4c      	.short	0x5a4c
 800a272:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a276:	441d      	add	r5, r3
 800a278:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a27c:	2b20      	cmp	r3, #32
 800a27e:	bfc1      	itttt	gt
 800a280:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a284:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a288:	fa09 f303 	lslgt.w	r3, r9, r3
 800a28c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a290:	bfda      	itte	le
 800a292:	f1c3 0320 	rsble	r3, r3, #32
 800a296:	fa06 f003 	lslle.w	r0, r6, r3
 800a29a:	4318      	orrgt	r0, r3
 800a29c:	f7f6 f95a 	bl	8000554 <__aeabi_ui2d>
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	4606      	mov	r6, r0
 800a2a4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a2a8:	3d01      	subs	r5, #1
 800a2aa:	9310      	str	r3, [sp, #64]	; 0x40
 800a2ac:	e771      	b.n	800a192 <_dtoa_r+0x11a>
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	e7b6      	b.n	800a220 <_dtoa_r+0x1a8>
 800a2b2:	900e      	str	r0, [sp, #56]	; 0x38
 800a2b4:	e7b5      	b.n	800a222 <_dtoa_r+0x1aa>
 800a2b6:	f1ca 0300 	rsb	r3, sl, #0
 800a2ba:	9306      	str	r3, [sp, #24]
 800a2bc:	2300      	movs	r3, #0
 800a2be:	eba8 080a 	sub.w	r8, r8, sl
 800a2c2:	930d      	str	r3, [sp, #52]	; 0x34
 800a2c4:	e7c2      	b.n	800a24c <_dtoa_r+0x1d4>
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	9308      	str	r3, [sp, #32]
 800a2ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	dc39      	bgt.n	800a344 <_dtoa_r+0x2cc>
 800a2d0:	f04f 0901 	mov.w	r9, #1
 800a2d4:	f8cd 9004 	str.w	r9, [sp, #4]
 800a2d8:	464b      	mov	r3, r9
 800a2da:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a2de:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	6042      	str	r2, [r0, #4]
 800a2e4:	2204      	movs	r2, #4
 800a2e6:	f102 0614 	add.w	r6, r2, #20
 800a2ea:	429e      	cmp	r6, r3
 800a2ec:	6841      	ldr	r1, [r0, #4]
 800a2ee:	d92f      	bls.n	800a350 <_dtoa_r+0x2d8>
 800a2f0:	4620      	mov	r0, r4
 800a2f2:	f000 fcc7 	bl	800ac84 <_Balloc>
 800a2f6:	9000      	str	r0, [sp, #0]
 800a2f8:	2800      	cmp	r0, #0
 800a2fa:	d14b      	bne.n	800a394 <_dtoa_r+0x31c>
 800a2fc:	4b24      	ldr	r3, [pc, #144]	; (800a390 <_dtoa_r+0x318>)
 800a2fe:	4602      	mov	r2, r0
 800a300:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a304:	e6d1      	b.n	800a0aa <_dtoa_r+0x32>
 800a306:	2301      	movs	r3, #1
 800a308:	e7de      	b.n	800a2c8 <_dtoa_r+0x250>
 800a30a:	2300      	movs	r3, #0
 800a30c:	9308      	str	r3, [sp, #32]
 800a30e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a310:	eb0a 0903 	add.w	r9, sl, r3
 800a314:	f109 0301 	add.w	r3, r9, #1
 800a318:	2b01      	cmp	r3, #1
 800a31a:	9301      	str	r3, [sp, #4]
 800a31c:	bfb8      	it	lt
 800a31e:	2301      	movlt	r3, #1
 800a320:	e7dd      	b.n	800a2de <_dtoa_r+0x266>
 800a322:	2301      	movs	r3, #1
 800a324:	e7f2      	b.n	800a30c <_dtoa_r+0x294>
 800a326:	2501      	movs	r5, #1
 800a328:	2300      	movs	r3, #0
 800a32a:	9305      	str	r3, [sp, #20]
 800a32c:	9508      	str	r5, [sp, #32]
 800a32e:	f04f 39ff 	mov.w	r9, #4294967295
 800a332:	2200      	movs	r2, #0
 800a334:	f8cd 9004 	str.w	r9, [sp, #4]
 800a338:	2312      	movs	r3, #18
 800a33a:	9209      	str	r2, [sp, #36]	; 0x24
 800a33c:	e7cf      	b.n	800a2de <_dtoa_r+0x266>
 800a33e:	2301      	movs	r3, #1
 800a340:	9308      	str	r3, [sp, #32]
 800a342:	e7f4      	b.n	800a32e <_dtoa_r+0x2b6>
 800a344:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a348:	f8cd 9004 	str.w	r9, [sp, #4]
 800a34c:	464b      	mov	r3, r9
 800a34e:	e7c6      	b.n	800a2de <_dtoa_r+0x266>
 800a350:	3101      	adds	r1, #1
 800a352:	6041      	str	r1, [r0, #4]
 800a354:	0052      	lsls	r2, r2, #1
 800a356:	e7c6      	b.n	800a2e6 <_dtoa_r+0x26e>
 800a358:	636f4361 	.word	0x636f4361
 800a35c:	3fd287a7 	.word	0x3fd287a7
 800a360:	8b60c8b3 	.word	0x8b60c8b3
 800a364:	3fc68a28 	.word	0x3fc68a28
 800a368:	509f79fb 	.word	0x509f79fb
 800a36c:	3fd34413 	.word	0x3fd34413
 800a370:	0800c849 	.word	0x0800c849
 800a374:	0800c860 	.word	0x0800c860
 800a378:	7ff00000 	.word	0x7ff00000
 800a37c:	0800c845 	.word	0x0800c845
 800a380:	0800c83c 	.word	0x0800c83c
 800a384:	0800c819 	.word	0x0800c819
 800a388:	3ff80000 	.word	0x3ff80000
 800a38c:	0800c958 	.word	0x0800c958
 800a390:	0800c8bf 	.word	0x0800c8bf
 800a394:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a396:	9a00      	ldr	r2, [sp, #0]
 800a398:	601a      	str	r2, [r3, #0]
 800a39a:	9b01      	ldr	r3, [sp, #4]
 800a39c:	2b0e      	cmp	r3, #14
 800a39e:	f200 80ad 	bhi.w	800a4fc <_dtoa_r+0x484>
 800a3a2:	2d00      	cmp	r5, #0
 800a3a4:	f000 80aa 	beq.w	800a4fc <_dtoa_r+0x484>
 800a3a8:	f1ba 0f00 	cmp.w	sl, #0
 800a3ac:	dd36      	ble.n	800a41c <_dtoa_r+0x3a4>
 800a3ae:	4ac3      	ldr	r2, [pc, #780]	; (800a6bc <_dtoa_r+0x644>)
 800a3b0:	f00a 030f 	and.w	r3, sl, #15
 800a3b4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a3b8:	ed93 7b00 	vldr	d7, [r3]
 800a3bc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a3c0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a3c4:	eeb0 8a47 	vmov.f32	s16, s14
 800a3c8:	eef0 8a67 	vmov.f32	s17, s15
 800a3cc:	d016      	beq.n	800a3fc <_dtoa_r+0x384>
 800a3ce:	4bbc      	ldr	r3, [pc, #752]	; (800a6c0 <_dtoa_r+0x648>)
 800a3d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a3d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a3d8:	f7f6 fa60 	bl	800089c <__aeabi_ddiv>
 800a3dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3e0:	f007 070f 	and.w	r7, r7, #15
 800a3e4:	2503      	movs	r5, #3
 800a3e6:	4eb6      	ldr	r6, [pc, #728]	; (800a6c0 <_dtoa_r+0x648>)
 800a3e8:	b957      	cbnz	r7, 800a400 <_dtoa_r+0x388>
 800a3ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3ee:	ec53 2b18 	vmov	r2, r3, d8
 800a3f2:	f7f6 fa53 	bl	800089c <__aeabi_ddiv>
 800a3f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3fa:	e029      	b.n	800a450 <_dtoa_r+0x3d8>
 800a3fc:	2502      	movs	r5, #2
 800a3fe:	e7f2      	b.n	800a3e6 <_dtoa_r+0x36e>
 800a400:	07f9      	lsls	r1, r7, #31
 800a402:	d508      	bpl.n	800a416 <_dtoa_r+0x39e>
 800a404:	ec51 0b18 	vmov	r0, r1, d8
 800a408:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a40c:	f7f6 f91c 	bl	8000648 <__aeabi_dmul>
 800a410:	ec41 0b18 	vmov	d8, r0, r1
 800a414:	3501      	adds	r5, #1
 800a416:	107f      	asrs	r7, r7, #1
 800a418:	3608      	adds	r6, #8
 800a41a:	e7e5      	b.n	800a3e8 <_dtoa_r+0x370>
 800a41c:	f000 80a6 	beq.w	800a56c <_dtoa_r+0x4f4>
 800a420:	f1ca 0600 	rsb	r6, sl, #0
 800a424:	4ba5      	ldr	r3, [pc, #660]	; (800a6bc <_dtoa_r+0x644>)
 800a426:	4fa6      	ldr	r7, [pc, #664]	; (800a6c0 <_dtoa_r+0x648>)
 800a428:	f006 020f 	and.w	r2, r6, #15
 800a42c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a430:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a434:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a438:	f7f6 f906 	bl	8000648 <__aeabi_dmul>
 800a43c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a440:	1136      	asrs	r6, r6, #4
 800a442:	2300      	movs	r3, #0
 800a444:	2502      	movs	r5, #2
 800a446:	2e00      	cmp	r6, #0
 800a448:	f040 8085 	bne.w	800a556 <_dtoa_r+0x4de>
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d1d2      	bne.n	800a3f6 <_dtoa_r+0x37e>
 800a450:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a452:	2b00      	cmp	r3, #0
 800a454:	f000 808c 	beq.w	800a570 <_dtoa_r+0x4f8>
 800a458:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a45c:	4b99      	ldr	r3, [pc, #612]	; (800a6c4 <_dtoa_r+0x64c>)
 800a45e:	2200      	movs	r2, #0
 800a460:	4630      	mov	r0, r6
 800a462:	4639      	mov	r1, r7
 800a464:	f7f6 fb62 	bl	8000b2c <__aeabi_dcmplt>
 800a468:	2800      	cmp	r0, #0
 800a46a:	f000 8081 	beq.w	800a570 <_dtoa_r+0x4f8>
 800a46e:	9b01      	ldr	r3, [sp, #4]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d07d      	beq.n	800a570 <_dtoa_r+0x4f8>
 800a474:	f1b9 0f00 	cmp.w	r9, #0
 800a478:	dd3c      	ble.n	800a4f4 <_dtoa_r+0x47c>
 800a47a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a47e:	9307      	str	r3, [sp, #28]
 800a480:	2200      	movs	r2, #0
 800a482:	4b91      	ldr	r3, [pc, #580]	; (800a6c8 <_dtoa_r+0x650>)
 800a484:	4630      	mov	r0, r6
 800a486:	4639      	mov	r1, r7
 800a488:	f7f6 f8de 	bl	8000648 <__aeabi_dmul>
 800a48c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a490:	3501      	adds	r5, #1
 800a492:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a496:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a49a:	4628      	mov	r0, r5
 800a49c:	f7f6 f86a 	bl	8000574 <__aeabi_i2d>
 800a4a0:	4632      	mov	r2, r6
 800a4a2:	463b      	mov	r3, r7
 800a4a4:	f7f6 f8d0 	bl	8000648 <__aeabi_dmul>
 800a4a8:	4b88      	ldr	r3, [pc, #544]	; (800a6cc <_dtoa_r+0x654>)
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	f7f5 ff16 	bl	80002dc <__adddf3>
 800a4b0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a4b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4b8:	9303      	str	r3, [sp, #12]
 800a4ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d15c      	bne.n	800a57a <_dtoa_r+0x502>
 800a4c0:	4b83      	ldr	r3, [pc, #524]	; (800a6d0 <_dtoa_r+0x658>)
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	4630      	mov	r0, r6
 800a4c6:	4639      	mov	r1, r7
 800a4c8:	f7f5 ff06 	bl	80002d8 <__aeabi_dsub>
 800a4cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a4d0:	4606      	mov	r6, r0
 800a4d2:	460f      	mov	r7, r1
 800a4d4:	f7f6 fb48 	bl	8000b68 <__aeabi_dcmpgt>
 800a4d8:	2800      	cmp	r0, #0
 800a4da:	f040 8296 	bne.w	800aa0a <_dtoa_r+0x992>
 800a4de:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a4e2:	4630      	mov	r0, r6
 800a4e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a4e8:	4639      	mov	r1, r7
 800a4ea:	f7f6 fb1f 	bl	8000b2c <__aeabi_dcmplt>
 800a4ee:	2800      	cmp	r0, #0
 800a4f0:	f040 8288 	bne.w	800aa04 <_dtoa_r+0x98c>
 800a4f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a4f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a4fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	f2c0 8158 	blt.w	800a7b4 <_dtoa_r+0x73c>
 800a504:	f1ba 0f0e 	cmp.w	sl, #14
 800a508:	f300 8154 	bgt.w	800a7b4 <_dtoa_r+0x73c>
 800a50c:	4b6b      	ldr	r3, [pc, #428]	; (800a6bc <_dtoa_r+0x644>)
 800a50e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a512:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a516:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a518:	2b00      	cmp	r3, #0
 800a51a:	f280 80e3 	bge.w	800a6e4 <_dtoa_r+0x66c>
 800a51e:	9b01      	ldr	r3, [sp, #4]
 800a520:	2b00      	cmp	r3, #0
 800a522:	f300 80df 	bgt.w	800a6e4 <_dtoa_r+0x66c>
 800a526:	f040 826d 	bne.w	800aa04 <_dtoa_r+0x98c>
 800a52a:	4b69      	ldr	r3, [pc, #420]	; (800a6d0 <_dtoa_r+0x658>)
 800a52c:	2200      	movs	r2, #0
 800a52e:	4640      	mov	r0, r8
 800a530:	4649      	mov	r1, r9
 800a532:	f7f6 f889 	bl	8000648 <__aeabi_dmul>
 800a536:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a53a:	f7f6 fb0b 	bl	8000b54 <__aeabi_dcmpge>
 800a53e:	9e01      	ldr	r6, [sp, #4]
 800a540:	4637      	mov	r7, r6
 800a542:	2800      	cmp	r0, #0
 800a544:	f040 8243 	bne.w	800a9ce <_dtoa_r+0x956>
 800a548:	9d00      	ldr	r5, [sp, #0]
 800a54a:	2331      	movs	r3, #49	; 0x31
 800a54c:	f805 3b01 	strb.w	r3, [r5], #1
 800a550:	f10a 0a01 	add.w	sl, sl, #1
 800a554:	e23f      	b.n	800a9d6 <_dtoa_r+0x95e>
 800a556:	07f2      	lsls	r2, r6, #31
 800a558:	d505      	bpl.n	800a566 <_dtoa_r+0x4ee>
 800a55a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a55e:	f7f6 f873 	bl	8000648 <__aeabi_dmul>
 800a562:	3501      	adds	r5, #1
 800a564:	2301      	movs	r3, #1
 800a566:	1076      	asrs	r6, r6, #1
 800a568:	3708      	adds	r7, #8
 800a56a:	e76c      	b.n	800a446 <_dtoa_r+0x3ce>
 800a56c:	2502      	movs	r5, #2
 800a56e:	e76f      	b.n	800a450 <_dtoa_r+0x3d8>
 800a570:	9b01      	ldr	r3, [sp, #4]
 800a572:	f8cd a01c 	str.w	sl, [sp, #28]
 800a576:	930c      	str	r3, [sp, #48]	; 0x30
 800a578:	e78d      	b.n	800a496 <_dtoa_r+0x41e>
 800a57a:	9900      	ldr	r1, [sp, #0]
 800a57c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a57e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a580:	4b4e      	ldr	r3, [pc, #312]	; (800a6bc <_dtoa_r+0x644>)
 800a582:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a586:	4401      	add	r1, r0
 800a588:	9102      	str	r1, [sp, #8]
 800a58a:	9908      	ldr	r1, [sp, #32]
 800a58c:	eeb0 8a47 	vmov.f32	s16, s14
 800a590:	eef0 8a67 	vmov.f32	s17, s15
 800a594:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a598:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a59c:	2900      	cmp	r1, #0
 800a59e:	d045      	beq.n	800a62c <_dtoa_r+0x5b4>
 800a5a0:	494c      	ldr	r1, [pc, #304]	; (800a6d4 <_dtoa_r+0x65c>)
 800a5a2:	2000      	movs	r0, #0
 800a5a4:	f7f6 f97a 	bl	800089c <__aeabi_ddiv>
 800a5a8:	ec53 2b18 	vmov	r2, r3, d8
 800a5ac:	f7f5 fe94 	bl	80002d8 <__aeabi_dsub>
 800a5b0:	9d00      	ldr	r5, [sp, #0]
 800a5b2:	ec41 0b18 	vmov	d8, r0, r1
 800a5b6:	4639      	mov	r1, r7
 800a5b8:	4630      	mov	r0, r6
 800a5ba:	f7f6 faf5 	bl	8000ba8 <__aeabi_d2iz>
 800a5be:	900c      	str	r0, [sp, #48]	; 0x30
 800a5c0:	f7f5 ffd8 	bl	8000574 <__aeabi_i2d>
 800a5c4:	4602      	mov	r2, r0
 800a5c6:	460b      	mov	r3, r1
 800a5c8:	4630      	mov	r0, r6
 800a5ca:	4639      	mov	r1, r7
 800a5cc:	f7f5 fe84 	bl	80002d8 <__aeabi_dsub>
 800a5d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a5d2:	3330      	adds	r3, #48	; 0x30
 800a5d4:	f805 3b01 	strb.w	r3, [r5], #1
 800a5d8:	ec53 2b18 	vmov	r2, r3, d8
 800a5dc:	4606      	mov	r6, r0
 800a5de:	460f      	mov	r7, r1
 800a5e0:	f7f6 faa4 	bl	8000b2c <__aeabi_dcmplt>
 800a5e4:	2800      	cmp	r0, #0
 800a5e6:	d165      	bne.n	800a6b4 <_dtoa_r+0x63c>
 800a5e8:	4632      	mov	r2, r6
 800a5ea:	463b      	mov	r3, r7
 800a5ec:	4935      	ldr	r1, [pc, #212]	; (800a6c4 <_dtoa_r+0x64c>)
 800a5ee:	2000      	movs	r0, #0
 800a5f0:	f7f5 fe72 	bl	80002d8 <__aeabi_dsub>
 800a5f4:	ec53 2b18 	vmov	r2, r3, d8
 800a5f8:	f7f6 fa98 	bl	8000b2c <__aeabi_dcmplt>
 800a5fc:	2800      	cmp	r0, #0
 800a5fe:	f040 80b9 	bne.w	800a774 <_dtoa_r+0x6fc>
 800a602:	9b02      	ldr	r3, [sp, #8]
 800a604:	429d      	cmp	r5, r3
 800a606:	f43f af75 	beq.w	800a4f4 <_dtoa_r+0x47c>
 800a60a:	4b2f      	ldr	r3, [pc, #188]	; (800a6c8 <_dtoa_r+0x650>)
 800a60c:	ec51 0b18 	vmov	r0, r1, d8
 800a610:	2200      	movs	r2, #0
 800a612:	f7f6 f819 	bl	8000648 <__aeabi_dmul>
 800a616:	4b2c      	ldr	r3, [pc, #176]	; (800a6c8 <_dtoa_r+0x650>)
 800a618:	ec41 0b18 	vmov	d8, r0, r1
 800a61c:	2200      	movs	r2, #0
 800a61e:	4630      	mov	r0, r6
 800a620:	4639      	mov	r1, r7
 800a622:	f7f6 f811 	bl	8000648 <__aeabi_dmul>
 800a626:	4606      	mov	r6, r0
 800a628:	460f      	mov	r7, r1
 800a62a:	e7c4      	b.n	800a5b6 <_dtoa_r+0x53e>
 800a62c:	ec51 0b17 	vmov	r0, r1, d7
 800a630:	f7f6 f80a 	bl	8000648 <__aeabi_dmul>
 800a634:	9b02      	ldr	r3, [sp, #8]
 800a636:	9d00      	ldr	r5, [sp, #0]
 800a638:	930c      	str	r3, [sp, #48]	; 0x30
 800a63a:	ec41 0b18 	vmov	d8, r0, r1
 800a63e:	4639      	mov	r1, r7
 800a640:	4630      	mov	r0, r6
 800a642:	f7f6 fab1 	bl	8000ba8 <__aeabi_d2iz>
 800a646:	9011      	str	r0, [sp, #68]	; 0x44
 800a648:	f7f5 ff94 	bl	8000574 <__aeabi_i2d>
 800a64c:	4602      	mov	r2, r0
 800a64e:	460b      	mov	r3, r1
 800a650:	4630      	mov	r0, r6
 800a652:	4639      	mov	r1, r7
 800a654:	f7f5 fe40 	bl	80002d8 <__aeabi_dsub>
 800a658:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a65a:	3330      	adds	r3, #48	; 0x30
 800a65c:	f805 3b01 	strb.w	r3, [r5], #1
 800a660:	9b02      	ldr	r3, [sp, #8]
 800a662:	429d      	cmp	r5, r3
 800a664:	4606      	mov	r6, r0
 800a666:	460f      	mov	r7, r1
 800a668:	f04f 0200 	mov.w	r2, #0
 800a66c:	d134      	bne.n	800a6d8 <_dtoa_r+0x660>
 800a66e:	4b19      	ldr	r3, [pc, #100]	; (800a6d4 <_dtoa_r+0x65c>)
 800a670:	ec51 0b18 	vmov	r0, r1, d8
 800a674:	f7f5 fe32 	bl	80002dc <__adddf3>
 800a678:	4602      	mov	r2, r0
 800a67a:	460b      	mov	r3, r1
 800a67c:	4630      	mov	r0, r6
 800a67e:	4639      	mov	r1, r7
 800a680:	f7f6 fa72 	bl	8000b68 <__aeabi_dcmpgt>
 800a684:	2800      	cmp	r0, #0
 800a686:	d175      	bne.n	800a774 <_dtoa_r+0x6fc>
 800a688:	ec53 2b18 	vmov	r2, r3, d8
 800a68c:	4911      	ldr	r1, [pc, #68]	; (800a6d4 <_dtoa_r+0x65c>)
 800a68e:	2000      	movs	r0, #0
 800a690:	f7f5 fe22 	bl	80002d8 <__aeabi_dsub>
 800a694:	4602      	mov	r2, r0
 800a696:	460b      	mov	r3, r1
 800a698:	4630      	mov	r0, r6
 800a69a:	4639      	mov	r1, r7
 800a69c:	f7f6 fa46 	bl	8000b2c <__aeabi_dcmplt>
 800a6a0:	2800      	cmp	r0, #0
 800a6a2:	f43f af27 	beq.w	800a4f4 <_dtoa_r+0x47c>
 800a6a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a6a8:	1e6b      	subs	r3, r5, #1
 800a6aa:	930c      	str	r3, [sp, #48]	; 0x30
 800a6ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a6b0:	2b30      	cmp	r3, #48	; 0x30
 800a6b2:	d0f8      	beq.n	800a6a6 <_dtoa_r+0x62e>
 800a6b4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a6b8:	e04a      	b.n	800a750 <_dtoa_r+0x6d8>
 800a6ba:	bf00      	nop
 800a6bc:	0800c958 	.word	0x0800c958
 800a6c0:	0800c930 	.word	0x0800c930
 800a6c4:	3ff00000 	.word	0x3ff00000
 800a6c8:	40240000 	.word	0x40240000
 800a6cc:	401c0000 	.word	0x401c0000
 800a6d0:	40140000 	.word	0x40140000
 800a6d4:	3fe00000 	.word	0x3fe00000
 800a6d8:	4baf      	ldr	r3, [pc, #700]	; (800a998 <_dtoa_r+0x920>)
 800a6da:	f7f5 ffb5 	bl	8000648 <__aeabi_dmul>
 800a6de:	4606      	mov	r6, r0
 800a6e0:	460f      	mov	r7, r1
 800a6e2:	e7ac      	b.n	800a63e <_dtoa_r+0x5c6>
 800a6e4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a6e8:	9d00      	ldr	r5, [sp, #0]
 800a6ea:	4642      	mov	r2, r8
 800a6ec:	464b      	mov	r3, r9
 800a6ee:	4630      	mov	r0, r6
 800a6f0:	4639      	mov	r1, r7
 800a6f2:	f7f6 f8d3 	bl	800089c <__aeabi_ddiv>
 800a6f6:	f7f6 fa57 	bl	8000ba8 <__aeabi_d2iz>
 800a6fa:	9002      	str	r0, [sp, #8]
 800a6fc:	f7f5 ff3a 	bl	8000574 <__aeabi_i2d>
 800a700:	4642      	mov	r2, r8
 800a702:	464b      	mov	r3, r9
 800a704:	f7f5 ffa0 	bl	8000648 <__aeabi_dmul>
 800a708:	4602      	mov	r2, r0
 800a70a:	460b      	mov	r3, r1
 800a70c:	4630      	mov	r0, r6
 800a70e:	4639      	mov	r1, r7
 800a710:	f7f5 fde2 	bl	80002d8 <__aeabi_dsub>
 800a714:	9e02      	ldr	r6, [sp, #8]
 800a716:	9f01      	ldr	r7, [sp, #4]
 800a718:	3630      	adds	r6, #48	; 0x30
 800a71a:	f805 6b01 	strb.w	r6, [r5], #1
 800a71e:	9e00      	ldr	r6, [sp, #0]
 800a720:	1bae      	subs	r6, r5, r6
 800a722:	42b7      	cmp	r7, r6
 800a724:	4602      	mov	r2, r0
 800a726:	460b      	mov	r3, r1
 800a728:	d137      	bne.n	800a79a <_dtoa_r+0x722>
 800a72a:	f7f5 fdd7 	bl	80002dc <__adddf3>
 800a72e:	4642      	mov	r2, r8
 800a730:	464b      	mov	r3, r9
 800a732:	4606      	mov	r6, r0
 800a734:	460f      	mov	r7, r1
 800a736:	f7f6 fa17 	bl	8000b68 <__aeabi_dcmpgt>
 800a73a:	b9c8      	cbnz	r0, 800a770 <_dtoa_r+0x6f8>
 800a73c:	4642      	mov	r2, r8
 800a73e:	464b      	mov	r3, r9
 800a740:	4630      	mov	r0, r6
 800a742:	4639      	mov	r1, r7
 800a744:	f7f6 f9e8 	bl	8000b18 <__aeabi_dcmpeq>
 800a748:	b110      	cbz	r0, 800a750 <_dtoa_r+0x6d8>
 800a74a:	9b02      	ldr	r3, [sp, #8]
 800a74c:	07d9      	lsls	r1, r3, #31
 800a74e:	d40f      	bmi.n	800a770 <_dtoa_r+0x6f8>
 800a750:	4620      	mov	r0, r4
 800a752:	4659      	mov	r1, fp
 800a754:	f000 fad6 	bl	800ad04 <_Bfree>
 800a758:	2300      	movs	r3, #0
 800a75a:	702b      	strb	r3, [r5, #0]
 800a75c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a75e:	f10a 0001 	add.w	r0, sl, #1
 800a762:	6018      	str	r0, [r3, #0]
 800a764:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a766:	2b00      	cmp	r3, #0
 800a768:	f43f acd8 	beq.w	800a11c <_dtoa_r+0xa4>
 800a76c:	601d      	str	r5, [r3, #0]
 800a76e:	e4d5      	b.n	800a11c <_dtoa_r+0xa4>
 800a770:	f8cd a01c 	str.w	sl, [sp, #28]
 800a774:	462b      	mov	r3, r5
 800a776:	461d      	mov	r5, r3
 800a778:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a77c:	2a39      	cmp	r2, #57	; 0x39
 800a77e:	d108      	bne.n	800a792 <_dtoa_r+0x71a>
 800a780:	9a00      	ldr	r2, [sp, #0]
 800a782:	429a      	cmp	r2, r3
 800a784:	d1f7      	bne.n	800a776 <_dtoa_r+0x6fe>
 800a786:	9a07      	ldr	r2, [sp, #28]
 800a788:	9900      	ldr	r1, [sp, #0]
 800a78a:	3201      	adds	r2, #1
 800a78c:	9207      	str	r2, [sp, #28]
 800a78e:	2230      	movs	r2, #48	; 0x30
 800a790:	700a      	strb	r2, [r1, #0]
 800a792:	781a      	ldrb	r2, [r3, #0]
 800a794:	3201      	adds	r2, #1
 800a796:	701a      	strb	r2, [r3, #0]
 800a798:	e78c      	b.n	800a6b4 <_dtoa_r+0x63c>
 800a79a:	4b7f      	ldr	r3, [pc, #508]	; (800a998 <_dtoa_r+0x920>)
 800a79c:	2200      	movs	r2, #0
 800a79e:	f7f5 ff53 	bl	8000648 <__aeabi_dmul>
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	4606      	mov	r6, r0
 800a7a8:	460f      	mov	r7, r1
 800a7aa:	f7f6 f9b5 	bl	8000b18 <__aeabi_dcmpeq>
 800a7ae:	2800      	cmp	r0, #0
 800a7b0:	d09b      	beq.n	800a6ea <_dtoa_r+0x672>
 800a7b2:	e7cd      	b.n	800a750 <_dtoa_r+0x6d8>
 800a7b4:	9a08      	ldr	r2, [sp, #32]
 800a7b6:	2a00      	cmp	r2, #0
 800a7b8:	f000 80c4 	beq.w	800a944 <_dtoa_r+0x8cc>
 800a7bc:	9a05      	ldr	r2, [sp, #20]
 800a7be:	2a01      	cmp	r2, #1
 800a7c0:	f300 80a8 	bgt.w	800a914 <_dtoa_r+0x89c>
 800a7c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a7c6:	2a00      	cmp	r2, #0
 800a7c8:	f000 80a0 	beq.w	800a90c <_dtoa_r+0x894>
 800a7cc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a7d0:	9e06      	ldr	r6, [sp, #24]
 800a7d2:	4645      	mov	r5, r8
 800a7d4:	9a04      	ldr	r2, [sp, #16]
 800a7d6:	2101      	movs	r1, #1
 800a7d8:	441a      	add	r2, r3
 800a7da:	4620      	mov	r0, r4
 800a7dc:	4498      	add	r8, r3
 800a7de:	9204      	str	r2, [sp, #16]
 800a7e0:	f000 fb4c 	bl	800ae7c <__i2b>
 800a7e4:	4607      	mov	r7, r0
 800a7e6:	2d00      	cmp	r5, #0
 800a7e8:	dd0b      	ble.n	800a802 <_dtoa_r+0x78a>
 800a7ea:	9b04      	ldr	r3, [sp, #16]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	dd08      	ble.n	800a802 <_dtoa_r+0x78a>
 800a7f0:	42ab      	cmp	r3, r5
 800a7f2:	9a04      	ldr	r2, [sp, #16]
 800a7f4:	bfa8      	it	ge
 800a7f6:	462b      	movge	r3, r5
 800a7f8:	eba8 0803 	sub.w	r8, r8, r3
 800a7fc:	1aed      	subs	r5, r5, r3
 800a7fe:	1ad3      	subs	r3, r2, r3
 800a800:	9304      	str	r3, [sp, #16]
 800a802:	9b06      	ldr	r3, [sp, #24]
 800a804:	b1fb      	cbz	r3, 800a846 <_dtoa_r+0x7ce>
 800a806:	9b08      	ldr	r3, [sp, #32]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	f000 809f 	beq.w	800a94c <_dtoa_r+0x8d4>
 800a80e:	2e00      	cmp	r6, #0
 800a810:	dd11      	ble.n	800a836 <_dtoa_r+0x7be>
 800a812:	4639      	mov	r1, r7
 800a814:	4632      	mov	r2, r6
 800a816:	4620      	mov	r0, r4
 800a818:	f000 fbec 	bl	800aff4 <__pow5mult>
 800a81c:	465a      	mov	r2, fp
 800a81e:	4601      	mov	r1, r0
 800a820:	4607      	mov	r7, r0
 800a822:	4620      	mov	r0, r4
 800a824:	f000 fb40 	bl	800aea8 <__multiply>
 800a828:	4659      	mov	r1, fp
 800a82a:	9007      	str	r0, [sp, #28]
 800a82c:	4620      	mov	r0, r4
 800a82e:	f000 fa69 	bl	800ad04 <_Bfree>
 800a832:	9b07      	ldr	r3, [sp, #28]
 800a834:	469b      	mov	fp, r3
 800a836:	9b06      	ldr	r3, [sp, #24]
 800a838:	1b9a      	subs	r2, r3, r6
 800a83a:	d004      	beq.n	800a846 <_dtoa_r+0x7ce>
 800a83c:	4659      	mov	r1, fp
 800a83e:	4620      	mov	r0, r4
 800a840:	f000 fbd8 	bl	800aff4 <__pow5mult>
 800a844:	4683      	mov	fp, r0
 800a846:	2101      	movs	r1, #1
 800a848:	4620      	mov	r0, r4
 800a84a:	f000 fb17 	bl	800ae7c <__i2b>
 800a84e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a850:	2b00      	cmp	r3, #0
 800a852:	4606      	mov	r6, r0
 800a854:	dd7c      	ble.n	800a950 <_dtoa_r+0x8d8>
 800a856:	461a      	mov	r2, r3
 800a858:	4601      	mov	r1, r0
 800a85a:	4620      	mov	r0, r4
 800a85c:	f000 fbca 	bl	800aff4 <__pow5mult>
 800a860:	9b05      	ldr	r3, [sp, #20]
 800a862:	2b01      	cmp	r3, #1
 800a864:	4606      	mov	r6, r0
 800a866:	dd76      	ble.n	800a956 <_dtoa_r+0x8de>
 800a868:	2300      	movs	r3, #0
 800a86a:	9306      	str	r3, [sp, #24]
 800a86c:	6933      	ldr	r3, [r6, #16]
 800a86e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a872:	6918      	ldr	r0, [r3, #16]
 800a874:	f000 fab2 	bl	800addc <__hi0bits>
 800a878:	f1c0 0020 	rsb	r0, r0, #32
 800a87c:	9b04      	ldr	r3, [sp, #16]
 800a87e:	4418      	add	r0, r3
 800a880:	f010 001f 	ands.w	r0, r0, #31
 800a884:	f000 8086 	beq.w	800a994 <_dtoa_r+0x91c>
 800a888:	f1c0 0320 	rsb	r3, r0, #32
 800a88c:	2b04      	cmp	r3, #4
 800a88e:	dd7f      	ble.n	800a990 <_dtoa_r+0x918>
 800a890:	f1c0 001c 	rsb	r0, r0, #28
 800a894:	9b04      	ldr	r3, [sp, #16]
 800a896:	4403      	add	r3, r0
 800a898:	4480      	add	r8, r0
 800a89a:	4405      	add	r5, r0
 800a89c:	9304      	str	r3, [sp, #16]
 800a89e:	f1b8 0f00 	cmp.w	r8, #0
 800a8a2:	dd05      	ble.n	800a8b0 <_dtoa_r+0x838>
 800a8a4:	4659      	mov	r1, fp
 800a8a6:	4642      	mov	r2, r8
 800a8a8:	4620      	mov	r0, r4
 800a8aa:	f000 fbfd 	bl	800b0a8 <__lshift>
 800a8ae:	4683      	mov	fp, r0
 800a8b0:	9b04      	ldr	r3, [sp, #16]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	dd05      	ble.n	800a8c2 <_dtoa_r+0x84a>
 800a8b6:	4631      	mov	r1, r6
 800a8b8:	461a      	mov	r2, r3
 800a8ba:	4620      	mov	r0, r4
 800a8bc:	f000 fbf4 	bl	800b0a8 <__lshift>
 800a8c0:	4606      	mov	r6, r0
 800a8c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d069      	beq.n	800a99c <_dtoa_r+0x924>
 800a8c8:	4631      	mov	r1, r6
 800a8ca:	4658      	mov	r0, fp
 800a8cc:	f000 fc58 	bl	800b180 <__mcmp>
 800a8d0:	2800      	cmp	r0, #0
 800a8d2:	da63      	bge.n	800a99c <_dtoa_r+0x924>
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	4659      	mov	r1, fp
 800a8d8:	220a      	movs	r2, #10
 800a8da:	4620      	mov	r0, r4
 800a8dc:	f000 fa34 	bl	800ad48 <__multadd>
 800a8e0:	9b08      	ldr	r3, [sp, #32]
 800a8e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a8e6:	4683      	mov	fp, r0
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	f000 818f 	beq.w	800ac0c <_dtoa_r+0xb94>
 800a8ee:	4639      	mov	r1, r7
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	220a      	movs	r2, #10
 800a8f4:	4620      	mov	r0, r4
 800a8f6:	f000 fa27 	bl	800ad48 <__multadd>
 800a8fa:	f1b9 0f00 	cmp.w	r9, #0
 800a8fe:	4607      	mov	r7, r0
 800a900:	f300 808e 	bgt.w	800aa20 <_dtoa_r+0x9a8>
 800a904:	9b05      	ldr	r3, [sp, #20]
 800a906:	2b02      	cmp	r3, #2
 800a908:	dc50      	bgt.n	800a9ac <_dtoa_r+0x934>
 800a90a:	e089      	b.n	800aa20 <_dtoa_r+0x9a8>
 800a90c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a90e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a912:	e75d      	b.n	800a7d0 <_dtoa_r+0x758>
 800a914:	9b01      	ldr	r3, [sp, #4]
 800a916:	1e5e      	subs	r6, r3, #1
 800a918:	9b06      	ldr	r3, [sp, #24]
 800a91a:	42b3      	cmp	r3, r6
 800a91c:	bfbf      	itttt	lt
 800a91e:	9b06      	ldrlt	r3, [sp, #24]
 800a920:	9606      	strlt	r6, [sp, #24]
 800a922:	1af2      	sublt	r2, r6, r3
 800a924:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a926:	bfb6      	itet	lt
 800a928:	189b      	addlt	r3, r3, r2
 800a92a:	1b9e      	subge	r6, r3, r6
 800a92c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a92e:	9b01      	ldr	r3, [sp, #4]
 800a930:	bfb8      	it	lt
 800a932:	2600      	movlt	r6, #0
 800a934:	2b00      	cmp	r3, #0
 800a936:	bfb5      	itete	lt
 800a938:	eba8 0503 	sublt.w	r5, r8, r3
 800a93c:	9b01      	ldrge	r3, [sp, #4]
 800a93e:	2300      	movlt	r3, #0
 800a940:	4645      	movge	r5, r8
 800a942:	e747      	b.n	800a7d4 <_dtoa_r+0x75c>
 800a944:	9e06      	ldr	r6, [sp, #24]
 800a946:	9f08      	ldr	r7, [sp, #32]
 800a948:	4645      	mov	r5, r8
 800a94a:	e74c      	b.n	800a7e6 <_dtoa_r+0x76e>
 800a94c:	9a06      	ldr	r2, [sp, #24]
 800a94e:	e775      	b.n	800a83c <_dtoa_r+0x7c4>
 800a950:	9b05      	ldr	r3, [sp, #20]
 800a952:	2b01      	cmp	r3, #1
 800a954:	dc18      	bgt.n	800a988 <_dtoa_r+0x910>
 800a956:	9b02      	ldr	r3, [sp, #8]
 800a958:	b9b3      	cbnz	r3, 800a988 <_dtoa_r+0x910>
 800a95a:	9b03      	ldr	r3, [sp, #12]
 800a95c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a960:	b9a3      	cbnz	r3, 800a98c <_dtoa_r+0x914>
 800a962:	9b03      	ldr	r3, [sp, #12]
 800a964:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a968:	0d1b      	lsrs	r3, r3, #20
 800a96a:	051b      	lsls	r3, r3, #20
 800a96c:	b12b      	cbz	r3, 800a97a <_dtoa_r+0x902>
 800a96e:	9b04      	ldr	r3, [sp, #16]
 800a970:	3301      	adds	r3, #1
 800a972:	9304      	str	r3, [sp, #16]
 800a974:	f108 0801 	add.w	r8, r8, #1
 800a978:	2301      	movs	r3, #1
 800a97a:	9306      	str	r3, [sp, #24]
 800a97c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a97e:	2b00      	cmp	r3, #0
 800a980:	f47f af74 	bne.w	800a86c <_dtoa_r+0x7f4>
 800a984:	2001      	movs	r0, #1
 800a986:	e779      	b.n	800a87c <_dtoa_r+0x804>
 800a988:	2300      	movs	r3, #0
 800a98a:	e7f6      	b.n	800a97a <_dtoa_r+0x902>
 800a98c:	9b02      	ldr	r3, [sp, #8]
 800a98e:	e7f4      	b.n	800a97a <_dtoa_r+0x902>
 800a990:	d085      	beq.n	800a89e <_dtoa_r+0x826>
 800a992:	4618      	mov	r0, r3
 800a994:	301c      	adds	r0, #28
 800a996:	e77d      	b.n	800a894 <_dtoa_r+0x81c>
 800a998:	40240000 	.word	0x40240000
 800a99c:	9b01      	ldr	r3, [sp, #4]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	dc38      	bgt.n	800aa14 <_dtoa_r+0x99c>
 800a9a2:	9b05      	ldr	r3, [sp, #20]
 800a9a4:	2b02      	cmp	r3, #2
 800a9a6:	dd35      	ble.n	800aa14 <_dtoa_r+0x99c>
 800a9a8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a9ac:	f1b9 0f00 	cmp.w	r9, #0
 800a9b0:	d10d      	bne.n	800a9ce <_dtoa_r+0x956>
 800a9b2:	4631      	mov	r1, r6
 800a9b4:	464b      	mov	r3, r9
 800a9b6:	2205      	movs	r2, #5
 800a9b8:	4620      	mov	r0, r4
 800a9ba:	f000 f9c5 	bl	800ad48 <__multadd>
 800a9be:	4601      	mov	r1, r0
 800a9c0:	4606      	mov	r6, r0
 800a9c2:	4658      	mov	r0, fp
 800a9c4:	f000 fbdc 	bl	800b180 <__mcmp>
 800a9c8:	2800      	cmp	r0, #0
 800a9ca:	f73f adbd 	bgt.w	800a548 <_dtoa_r+0x4d0>
 800a9ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9d0:	9d00      	ldr	r5, [sp, #0]
 800a9d2:	ea6f 0a03 	mvn.w	sl, r3
 800a9d6:	f04f 0800 	mov.w	r8, #0
 800a9da:	4631      	mov	r1, r6
 800a9dc:	4620      	mov	r0, r4
 800a9de:	f000 f991 	bl	800ad04 <_Bfree>
 800a9e2:	2f00      	cmp	r7, #0
 800a9e4:	f43f aeb4 	beq.w	800a750 <_dtoa_r+0x6d8>
 800a9e8:	f1b8 0f00 	cmp.w	r8, #0
 800a9ec:	d005      	beq.n	800a9fa <_dtoa_r+0x982>
 800a9ee:	45b8      	cmp	r8, r7
 800a9f0:	d003      	beq.n	800a9fa <_dtoa_r+0x982>
 800a9f2:	4641      	mov	r1, r8
 800a9f4:	4620      	mov	r0, r4
 800a9f6:	f000 f985 	bl	800ad04 <_Bfree>
 800a9fa:	4639      	mov	r1, r7
 800a9fc:	4620      	mov	r0, r4
 800a9fe:	f000 f981 	bl	800ad04 <_Bfree>
 800aa02:	e6a5      	b.n	800a750 <_dtoa_r+0x6d8>
 800aa04:	2600      	movs	r6, #0
 800aa06:	4637      	mov	r7, r6
 800aa08:	e7e1      	b.n	800a9ce <_dtoa_r+0x956>
 800aa0a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800aa0c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800aa10:	4637      	mov	r7, r6
 800aa12:	e599      	b.n	800a548 <_dtoa_r+0x4d0>
 800aa14:	9b08      	ldr	r3, [sp, #32]
 800aa16:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	f000 80fd 	beq.w	800ac1a <_dtoa_r+0xba2>
 800aa20:	2d00      	cmp	r5, #0
 800aa22:	dd05      	ble.n	800aa30 <_dtoa_r+0x9b8>
 800aa24:	4639      	mov	r1, r7
 800aa26:	462a      	mov	r2, r5
 800aa28:	4620      	mov	r0, r4
 800aa2a:	f000 fb3d 	bl	800b0a8 <__lshift>
 800aa2e:	4607      	mov	r7, r0
 800aa30:	9b06      	ldr	r3, [sp, #24]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d05c      	beq.n	800aaf0 <_dtoa_r+0xa78>
 800aa36:	6879      	ldr	r1, [r7, #4]
 800aa38:	4620      	mov	r0, r4
 800aa3a:	f000 f923 	bl	800ac84 <_Balloc>
 800aa3e:	4605      	mov	r5, r0
 800aa40:	b928      	cbnz	r0, 800aa4e <_dtoa_r+0x9d6>
 800aa42:	4b80      	ldr	r3, [pc, #512]	; (800ac44 <_dtoa_r+0xbcc>)
 800aa44:	4602      	mov	r2, r0
 800aa46:	f240 21ea 	movw	r1, #746	; 0x2ea
 800aa4a:	f7ff bb2e 	b.w	800a0aa <_dtoa_r+0x32>
 800aa4e:	693a      	ldr	r2, [r7, #16]
 800aa50:	3202      	adds	r2, #2
 800aa52:	0092      	lsls	r2, r2, #2
 800aa54:	f107 010c 	add.w	r1, r7, #12
 800aa58:	300c      	adds	r0, #12
 800aa5a:	f000 f905 	bl	800ac68 <memcpy>
 800aa5e:	2201      	movs	r2, #1
 800aa60:	4629      	mov	r1, r5
 800aa62:	4620      	mov	r0, r4
 800aa64:	f000 fb20 	bl	800b0a8 <__lshift>
 800aa68:	9b00      	ldr	r3, [sp, #0]
 800aa6a:	3301      	adds	r3, #1
 800aa6c:	9301      	str	r3, [sp, #4]
 800aa6e:	9b00      	ldr	r3, [sp, #0]
 800aa70:	444b      	add	r3, r9
 800aa72:	9307      	str	r3, [sp, #28]
 800aa74:	9b02      	ldr	r3, [sp, #8]
 800aa76:	f003 0301 	and.w	r3, r3, #1
 800aa7a:	46b8      	mov	r8, r7
 800aa7c:	9306      	str	r3, [sp, #24]
 800aa7e:	4607      	mov	r7, r0
 800aa80:	9b01      	ldr	r3, [sp, #4]
 800aa82:	4631      	mov	r1, r6
 800aa84:	3b01      	subs	r3, #1
 800aa86:	4658      	mov	r0, fp
 800aa88:	9302      	str	r3, [sp, #8]
 800aa8a:	f7ff fa67 	bl	8009f5c <quorem>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	3330      	adds	r3, #48	; 0x30
 800aa92:	9004      	str	r0, [sp, #16]
 800aa94:	4641      	mov	r1, r8
 800aa96:	4658      	mov	r0, fp
 800aa98:	9308      	str	r3, [sp, #32]
 800aa9a:	f000 fb71 	bl	800b180 <__mcmp>
 800aa9e:	463a      	mov	r2, r7
 800aaa0:	4681      	mov	r9, r0
 800aaa2:	4631      	mov	r1, r6
 800aaa4:	4620      	mov	r0, r4
 800aaa6:	f000 fb87 	bl	800b1b8 <__mdiff>
 800aaaa:	68c2      	ldr	r2, [r0, #12]
 800aaac:	9b08      	ldr	r3, [sp, #32]
 800aaae:	4605      	mov	r5, r0
 800aab0:	bb02      	cbnz	r2, 800aaf4 <_dtoa_r+0xa7c>
 800aab2:	4601      	mov	r1, r0
 800aab4:	4658      	mov	r0, fp
 800aab6:	f000 fb63 	bl	800b180 <__mcmp>
 800aaba:	9b08      	ldr	r3, [sp, #32]
 800aabc:	4602      	mov	r2, r0
 800aabe:	4629      	mov	r1, r5
 800aac0:	4620      	mov	r0, r4
 800aac2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800aac6:	f000 f91d 	bl	800ad04 <_Bfree>
 800aaca:	9b05      	ldr	r3, [sp, #20]
 800aacc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aace:	9d01      	ldr	r5, [sp, #4]
 800aad0:	ea43 0102 	orr.w	r1, r3, r2
 800aad4:	9b06      	ldr	r3, [sp, #24]
 800aad6:	430b      	orrs	r3, r1
 800aad8:	9b08      	ldr	r3, [sp, #32]
 800aada:	d10d      	bne.n	800aaf8 <_dtoa_r+0xa80>
 800aadc:	2b39      	cmp	r3, #57	; 0x39
 800aade:	d029      	beq.n	800ab34 <_dtoa_r+0xabc>
 800aae0:	f1b9 0f00 	cmp.w	r9, #0
 800aae4:	dd01      	ble.n	800aaea <_dtoa_r+0xa72>
 800aae6:	9b04      	ldr	r3, [sp, #16]
 800aae8:	3331      	adds	r3, #49	; 0x31
 800aaea:	9a02      	ldr	r2, [sp, #8]
 800aaec:	7013      	strb	r3, [r2, #0]
 800aaee:	e774      	b.n	800a9da <_dtoa_r+0x962>
 800aaf0:	4638      	mov	r0, r7
 800aaf2:	e7b9      	b.n	800aa68 <_dtoa_r+0x9f0>
 800aaf4:	2201      	movs	r2, #1
 800aaf6:	e7e2      	b.n	800aabe <_dtoa_r+0xa46>
 800aaf8:	f1b9 0f00 	cmp.w	r9, #0
 800aafc:	db06      	blt.n	800ab0c <_dtoa_r+0xa94>
 800aafe:	9905      	ldr	r1, [sp, #20]
 800ab00:	ea41 0909 	orr.w	r9, r1, r9
 800ab04:	9906      	ldr	r1, [sp, #24]
 800ab06:	ea59 0101 	orrs.w	r1, r9, r1
 800ab0a:	d120      	bne.n	800ab4e <_dtoa_r+0xad6>
 800ab0c:	2a00      	cmp	r2, #0
 800ab0e:	ddec      	ble.n	800aaea <_dtoa_r+0xa72>
 800ab10:	4659      	mov	r1, fp
 800ab12:	2201      	movs	r2, #1
 800ab14:	4620      	mov	r0, r4
 800ab16:	9301      	str	r3, [sp, #4]
 800ab18:	f000 fac6 	bl	800b0a8 <__lshift>
 800ab1c:	4631      	mov	r1, r6
 800ab1e:	4683      	mov	fp, r0
 800ab20:	f000 fb2e 	bl	800b180 <__mcmp>
 800ab24:	2800      	cmp	r0, #0
 800ab26:	9b01      	ldr	r3, [sp, #4]
 800ab28:	dc02      	bgt.n	800ab30 <_dtoa_r+0xab8>
 800ab2a:	d1de      	bne.n	800aaea <_dtoa_r+0xa72>
 800ab2c:	07da      	lsls	r2, r3, #31
 800ab2e:	d5dc      	bpl.n	800aaea <_dtoa_r+0xa72>
 800ab30:	2b39      	cmp	r3, #57	; 0x39
 800ab32:	d1d8      	bne.n	800aae6 <_dtoa_r+0xa6e>
 800ab34:	9a02      	ldr	r2, [sp, #8]
 800ab36:	2339      	movs	r3, #57	; 0x39
 800ab38:	7013      	strb	r3, [r2, #0]
 800ab3a:	462b      	mov	r3, r5
 800ab3c:	461d      	mov	r5, r3
 800ab3e:	3b01      	subs	r3, #1
 800ab40:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ab44:	2a39      	cmp	r2, #57	; 0x39
 800ab46:	d050      	beq.n	800abea <_dtoa_r+0xb72>
 800ab48:	3201      	adds	r2, #1
 800ab4a:	701a      	strb	r2, [r3, #0]
 800ab4c:	e745      	b.n	800a9da <_dtoa_r+0x962>
 800ab4e:	2a00      	cmp	r2, #0
 800ab50:	dd03      	ble.n	800ab5a <_dtoa_r+0xae2>
 800ab52:	2b39      	cmp	r3, #57	; 0x39
 800ab54:	d0ee      	beq.n	800ab34 <_dtoa_r+0xabc>
 800ab56:	3301      	adds	r3, #1
 800ab58:	e7c7      	b.n	800aaea <_dtoa_r+0xa72>
 800ab5a:	9a01      	ldr	r2, [sp, #4]
 800ab5c:	9907      	ldr	r1, [sp, #28]
 800ab5e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ab62:	428a      	cmp	r2, r1
 800ab64:	d02a      	beq.n	800abbc <_dtoa_r+0xb44>
 800ab66:	4659      	mov	r1, fp
 800ab68:	2300      	movs	r3, #0
 800ab6a:	220a      	movs	r2, #10
 800ab6c:	4620      	mov	r0, r4
 800ab6e:	f000 f8eb 	bl	800ad48 <__multadd>
 800ab72:	45b8      	cmp	r8, r7
 800ab74:	4683      	mov	fp, r0
 800ab76:	f04f 0300 	mov.w	r3, #0
 800ab7a:	f04f 020a 	mov.w	r2, #10
 800ab7e:	4641      	mov	r1, r8
 800ab80:	4620      	mov	r0, r4
 800ab82:	d107      	bne.n	800ab94 <_dtoa_r+0xb1c>
 800ab84:	f000 f8e0 	bl	800ad48 <__multadd>
 800ab88:	4680      	mov	r8, r0
 800ab8a:	4607      	mov	r7, r0
 800ab8c:	9b01      	ldr	r3, [sp, #4]
 800ab8e:	3301      	adds	r3, #1
 800ab90:	9301      	str	r3, [sp, #4]
 800ab92:	e775      	b.n	800aa80 <_dtoa_r+0xa08>
 800ab94:	f000 f8d8 	bl	800ad48 <__multadd>
 800ab98:	4639      	mov	r1, r7
 800ab9a:	4680      	mov	r8, r0
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	220a      	movs	r2, #10
 800aba0:	4620      	mov	r0, r4
 800aba2:	f000 f8d1 	bl	800ad48 <__multadd>
 800aba6:	4607      	mov	r7, r0
 800aba8:	e7f0      	b.n	800ab8c <_dtoa_r+0xb14>
 800abaa:	f1b9 0f00 	cmp.w	r9, #0
 800abae:	9a00      	ldr	r2, [sp, #0]
 800abb0:	bfcc      	ite	gt
 800abb2:	464d      	movgt	r5, r9
 800abb4:	2501      	movle	r5, #1
 800abb6:	4415      	add	r5, r2
 800abb8:	f04f 0800 	mov.w	r8, #0
 800abbc:	4659      	mov	r1, fp
 800abbe:	2201      	movs	r2, #1
 800abc0:	4620      	mov	r0, r4
 800abc2:	9301      	str	r3, [sp, #4]
 800abc4:	f000 fa70 	bl	800b0a8 <__lshift>
 800abc8:	4631      	mov	r1, r6
 800abca:	4683      	mov	fp, r0
 800abcc:	f000 fad8 	bl	800b180 <__mcmp>
 800abd0:	2800      	cmp	r0, #0
 800abd2:	dcb2      	bgt.n	800ab3a <_dtoa_r+0xac2>
 800abd4:	d102      	bne.n	800abdc <_dtoa_r+0xb64>
 800abd6:	9b01      	ldr	r3, [sp, #4]
 800abd8:	07db      	lsls	r3, r3, #31
 800abda:	d4ae      	bmi.n	800ab3a <_dtoa_r+0xac2>
 800abdc:	462b      	mov	r3, r5
 800abde:	461d      	mov	r5, r3
 800abe0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800abe4:	2a30      	cmp	r2, #48	; 0x30
 800abe6:	d0fa      	beq.n	800abde <_dtoa_r+0xb66>
 800abe8:	e6f7      	b.n	800a9da <_dtoa_r+0x962>
 800abea:	9a00      	ldr	r2, [sp, #0]
 800abec:	429a      	cmp	r2, r3
 800abee:	d1a5      	bne.n	800ab3c <_dtoa_r+0xac4>
 800abf0:	f10a 0a01 	add.w	sl, sl, #1
 800abf4:	2331      	movs	r3, #49	; 0x31
 800abf6:	e779      	b.n	800aaec <_dtoa_r+0xa74>
 800abf8:	4b13      	ldr	r3, [pc, #76]	; (800ac48 <_dtoa_r+0xbd0>)
 800abfa:	f7ff baaf 	b.w	800a15c <_dtoa_r+0xe4>
 800abfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	f47f aa86 	bne.w	800a112 <_dtoa_r+0x9a>
 800ac06:	4b11      	ldr	r3, [pc, #68]	; (800ac4c <_dtoa_r+0xbd4>)
 800ac08:	f7ff baa8 	b.w	800a15c <_dtoa_r+0xe4>
 800ac0c:	f1b9 0f00 	cmp.w	r9, #0
 800ac10:	dc03      	bgt.n	800ac1a <_dtoa_r+0xba2>
 800ac12:	9b05      	ldr	r3, [sp, #20]
 800ac14:	2b02      	cmp	r3, #2
 800ac16:	f73f aec9 	bgt.w	800a9ac <_dtoa_r+0x934>
 800ac1a:	9d00      	ldr	r5, [sp, #0]
 800ac1c:	4631      	mov	r1, r6
 800ac1e:	4658      	mov	r0, fp
 800ac20:	f7ff f99c 	bl	8009f5c <quorem>
 800ac24:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ac28:	f805 3b01 	strb.w	r3, [r5], #1
 800ac2c:	9a00      	ldr	r2, [sp, #0]
 800ac2e:	1aaa      	subs	r2, r5, r2
 800ac30:	4591      	cmp	r9, r2
 800ac32:	ddba      	ble.n	800abaa <_dtoa_r+0xb32>
 800ac34:	4659      	mov	r1, fp
 800ac36:	2300      	movs	r3, #0
 800ac38:	220a      	movs	r2, #10
 800ac3a:	4620      	mov	r0, r4
 800ac3c:	f000 f884 	bl	800ad48 <__multadd>
 800ac40:	4683      	mov	fp, r0
 800ac42:	e7eb      	b.n	800ac1c <_dtoa_r+0xba4>
 800ac44:	0800c8bf 	.word	0x0800c8bf
 800ac48:	0800c818 	.word	0x0800c818
 800ac4c:	0800c83c 	.word	0x0800c83c

0800ac50 <_localeconv_r>:
 800ac50:	4800      	ldr	r0, [pc, #0]	; (800ac54 <_localeconv_r+0x4>)
 800ac52:	4770      	bx	lr
 800ac54:	20000160 	.word	0x20000160

0800ac58 <malloc>:
 800ac58:	4b02      	ldr	r3, [pc, #8]	; (800ac64 <malloc+0xc>)
 800ac5a:	4601      	mov	r1, r0
 800ac5c:	6818      	ldr	r0, [r3, #0]
 800ac5e:	f000 bbef 	b.w	800b440 <_malloc_r>
 800ac62:	bf00      	nop
 800ac64:	2000000c 	.word	0x2000000c

0800ac68 <memcpy>:
 800ac68:	440a      	add	r2, r1
 800ac6a:	4291      	cmp	r1, r2
 800ac6c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac70:	d100      	bne.n	800ac74 <memcpy+0xc>
 800ac72:	4770      	bx	lr
 800ac74:	b510      	push	{r4, lr}
 800ac76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac7e:	4291      	cmp	r1, r2
 800ac80:	d1f9      	bne.n	800ac76 <memcpy+0xe>
 800ac82:	bd10      	pop	{r4, pc}

0800ac84 <_Balloc>:
 800ac84:	b570      	push	{r4, r5, r6, lr}
 800ac86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ac88:	4604      	mov	r4, r0
 800ac8a:	460d      	mov	r5, r1
 800ac8c:	b976      	cbnz	r6, 800acac <_Balloc+0x28>
 800ac8e:	2010      	movs	r0, #16
 800ac90:	f7ff ffe2 	bl	800ac58 <malloc>
 800ac94:	4602      	mov	r2, r0
 800ac96:	6260      	str	r0, [r4, #36]	; 0x24
 800ac98:	b920      	cbnz	r0, 800aca4 <_Balloc+0x20>
 800ac9a:	4b18      	ldr	r3, [pc, #96]	; (800acfc <_Balloc+0x78>)
 800ac9c:	4818      	ldr	r0, [pc, #96]	; (800ad00 <_Balloc+0x7c>)
 800ac9e:	2166      	movs	r1, #102	; 0x66
 800aca0:	f000 fd94 	bl	800b7cc <__assert_func>
 800aca4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aca8:	6006      	str	r6, [r0, #0]
 800acaa:	60c6      	str	r6, [r0, #12]
 800acac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800acae:	68f3      	ldr	r3, [r6, #12]
 800acb0:	b183      	cbz	r3, 800acd4 <_Balloc+0x50>
 800acb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800acb4:	68db      	ldr	r3, [r3, #12]
 800acb6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800acba:	b9b8      	cbnz	r0, 800acec <_Balloc+0x68>
 800acbc:	2101      	movs	r1, #1
 800acbe:	fa01 f605 	lsl.w	r6, r1, r5
 800acc2:	1d72      	adds	r2, r6, #5
 800acc4:	0092      	lsls	r2, r2, #2
 800acc6:	4620      	mov	r0, r4
 800acc8:	f000 fb5a 	bl	800b380 <_calloc_r>
 800accc:	b160      	cbz	r0, 800ace8 <_Balloc+0x64>
 800acce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800acd2:	e00e      	b.n	800acf2 <_Balloc+0x6e>
 800acd4:	2221      	movs	r2, #33	; 0x21
 800acd6:	2104      	movs	r1, #4
 800acd8:	4620      	mov	r0, r4
 800acda:	f000 fb51 	bl	800b380 <_calloc_r>
 800acde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ace0:	60f0      	str	r0, [r6, #12]
 800ace2:	68db      	ldr	r3, [r3, #12]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d1e4      	bne.n	800acb2 <_Balloc+0x2e>
 800ace8:	2000      	movs	r0, #0
 800acea:	bd70      	pop	{r4, r5, r6, pc}
 800acec:	6802      	ldr	r2, [r0, #0]
 800acee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800acf2:	2300      	movs	r3, #0
 800acf4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800acf8:	e7f7      	b.n	800acea <_Balloc+0x66>
 800acfa:	bf00      	nop
 800acfc:	0800c849 	.word	0x0800c849
 800ad00:	0800c8d0 	.word	0x0800c8d0

0800ad04 <_Bfree>:
 800ad04:	b570      	push	{r4, r5, r6, lr}
 800ad06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ad08:	4605      	mov	r5, r0
 800ad0a:	460c      	mov	r4, r1
 800ad0c:	b976      	cbnz	r6, 800ad2c <_Bfree+0x28>
 800ad0e:	2010      	movs	r0, #16
 800ad10:	f7ff ffa2 	bl	800ac58 <malloc>
 800ad14:	4602      	mov	r2, r0
 800ad16:	6268      	str	r0, [r5, #36]	; 0x24
 800ad18:	b920      	cbnz	r0, 800ad24 <_Bfree+0x20>
 800ad1a:	4b09      	ldr	r3, [pc, #36]	; (800ad40 <_Bfree+0x3c>)
 800ad1c:	4809      	ldr	r0, [pc, #36]	; (800ad44 <_Bfree+0x40>)
 800ad1e:	218a      	movs	r1, #138	; 0x8a
 800ad20:	f000 fd54 	bl	800b7cc <__assert_func>
 800ad24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ad28:	6006      	str	r6, [r0, #0]
 800ad2a:	60c6      	str	r6, [r0, #12]
 800ad2c:	b13c      	cbz	r4, 800ad3e <_Bfree+0x3a>
 800ad2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ad30:	6862      	ldr	r2, [r4, #4]
 800ad32:	68db      	ldr	r3, [r3, #12]
 800ad34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ad38:	6021      	str	r1, [r4, #0]
 800ad3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ad3e:	bd70      	pop	{r4, r5, r6, pc}
 800ad40:	0800c849 	.word	0x0800c849
 800ad44:	0800c8d0 	.word	0x0800c8d0

0800ad48 <__multadd>:
 800ad48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad4c:	690e      	ldr	r6, [r1, #16]
 800ad4e:	4607      	mov	r7, r0
 800ad50:	4698      	mov	r8, r3
 800ad52:	460c      	mov	r4, r1
 800ad54:	f101 0014 	add.w	r0, r1, #20
 800ad58:	2300      	movs	r3, #0
 800ad5a:	6805      	ldr	r5, [r0, #0]
 800ad5c:	b2a9      	uxth	r1, r5
 800ad5e:	fb02 8101 	mla	r1, r2, r1, r8
 800ad62:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800ad66:	0c2d      	lsrs	r5, r5, #16
 800ad68:	fb02 c505 	mla	r5, r2, r5, ip
 800ad6c:	b289      	uxth	r1, r1
 800ad6e:	3301      	adds	r3, #1
 800ad70:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800ad74:	429e      	cmp	r6, r3
 800ad76:	f840 1b04 	str.w	r1, [r0], #4
 800ad7a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800ad7e:	dcec      	bgt.n	800ad5a <__multadd+0x12>
 800ad80:	f1b8 0f00 	cmp.w	r8, #0
 800ad84:	d022      	beq.n	800adcc <__multadd+0x84>
 800ad86:	68a3      	ldr	r3, [r4, #8]
 800ad88:	42b3      	cmp	r3, r6
 800ad8a:	dc19      	bgt.n	800adc0 <__multadd+0x78>
 800ad8c:	6861      	ldr	r1, [r4, #4]
 800ad8e:	4638      	mov	r0, r7
 800ad90:	3101      	adds	r1, #1
 800ad92:	f7ff ff77 	bl	800ac84 <_Balloc>
 800ad96:	4605      	mov	r5, r0
 800ad98:	b928      	cbnz	r0, 800ada6 <__multadd+0x5e>
 800ad9a:	4602      	mov	r2, r0
 800ad9c:	4b0d      	ldr	r3, [pc, #52]	; (800add4 <__multadd+0x8c>)
 800ad9e:	480e      	ldr	r0, [pc, #56]	; (800add8 <__multadd+0x90>)
 800ada0:	21b5      	movs	r1, #181	; 0xb5
 800ada2:	f000 fd13 	bl	800b7cc <__assert_func>
 800ada6:	6922      	ldr	r2, [r4, #16]
 800ada8:	3202      	adds	r2, #2
 800adaa:	f104 010c 	add.w	r1, r4, #12
 800adae:	0092      	lsls	r2, r2, #2
 800adb0:	300c      	adds	r0, #12
 800adb2:	f7ff ff59 	bl	800ac68 <memcpy>
 800adb6:	4621      	mov	r1, r4
 800adb8:	4638      	mov	r0, r7
 800adba:	f7ff ffa3 	bl	800ad04 <_Bfree>
 800adbe:	462c      	mov	r4, r5
 800adc0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800adc4:	3601      	adds	r6, #1
 800adc6:	f8c3 8014 	str.w	r8, [r3, #20]
 800adca:	6126      	str	r6, [r4, #16]
 800adcc:	4620      	mov	r0, r4
 800adce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800add2:	bf00      	nop
 800add4:	0800c8bf 	.word	0x0800c8bf
 800add8:	0800c8d0 	.word	0x0800c8d0

0800addc <__hi0bits>:
 800addc:	0c03      	lsrs	r3, r0, #16
 800adde:	041b      	lsls	r3, r3, #16
 800ade0:	b9d3      	cbnz	r3, 800ae18 <__hi0bits+0x3c>
 800ade2:	0400      	lsls	r0, r0, #16
 800ade4:	2310      	movs	r3, #16
 800ade6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800adea:	bf04      	itt	eq
 800adec:	0200      	lsleq	r0, r0, #8
 800adee:	3308      	addeq	r3, #8
 800adf0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800adf4:	bf04      	itt	eq
 800adf6:	0100      	lsleq	r0, r0, #4
 800adf8:	3304      	addeq	r3, #4
 800adfa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800adfe:	bf04      	itt	eq
 800ae00:	0080      	lsleq	r0, r0, #2
 800ae02:	3302      	addeq	r3, #2
 800ae04:	2800      	cmp	r0, #0
 800ae06:	db05      	blt.n	800ae14 <__hi0bits+0x38>
 800ae08:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ae0c:	f103 0301 	add.w	r3, r3, #1
 800ae10:	bf08      	it	eq
 800ae12:	2320      	moveq	r3, #32
 800ae14:	4618      	mov	r0, r3
 800ae16:	4770      	bx	lr
 800ae18:	2300      	movs	r3, #0
 800ae1a:	e7e4      	b.n	800ade6 <__hi0bits+0xa>

0800ae1c <__lo0bits>:
 800ae1c:	6803      	ldr	r3, [r0, #0]
 800ae1e:	f013 0207 	ands.w	r2, r3, #7
 800ae22:	4601      	mov	r1, r0
 800ae24:	d00b      	beq.n	800ae3e <__lo0bits+0x22>
 800ae26:	07da      	lsls	r2, r3, #31
 800ae28:	d424      	bmi.n	800ae74 <__lo0bits+0x58>
 800ae2a:	0798      	lsls	r0, r3, #30
 800ae2c:	bf49      	itett	mi
 800ae2e:	085b      	lsrmi	r3, r3, #1
 800ae30:	089b      	lsrpl	r3, r3, #2
 800ae32:	2001      	movmi	r0, #1
 800ae34:	600b      	strmi	r3, [r1, #0]
 800ae36:	bf5c      	itt	pl
 800ae38:	600b      	strpl	r3, [r1, #0]
 800ae3a:	2002      	movpl	r0, #2
 800ae3c:	4770      	bx	lr
 800ae3e:	b298      	uxth	r0, r3
 800ae40:	b9b0      	cbnz	r0, 800ae70 <__lo0bits+0x54>
 800ae42:	0c1b      	lsrs	r3, r3, #16
 800ae44:	2010      	movs	r0, #16
 800ae46:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ae4a:	bf04      	itt	eq
 800ae4c:	0a1b      	lsreq	r3, r3, #8
 800ae4e:	3008      	addeq	r0, #8
 800ae50:	071a      	lsls	r2, r3, #28
 800ae52:	bf04      	itt	eq
 800ae54:	091b      	lsreq	r3, r3, #4
 800ae56:	3004      	addeq	r0, #4
 800ae58:	079a      	lsls	r2, r3, #30
 800ae5a:	bf04      	itt	eq
 800ae5c:	089b      	lsreq	r3, r3, #2
 800ae5e:	3002      	addeq	r0, #2
 800ae60:	07da      	lsls	r2, r3, #31
 800ae62:	d403      	bmi.n	800ae6c <__lo0bits+0x50>
 800ae64:	085b      	lsrs	r3, r3, #1
 800ae66:	f100 0001 	add.w	r0, r0, #1
 800ae6a:	d005      	beq.n	800ae78 <__lo0bits+0x5c>
 800ae6c:	600b      	str	r3, [r1, #0]
 800ae6e:	4770      	bx	lr
 800ae70:	4610      	mov	r0, r2
 800ae72:	e7e8      	b.n	800ae46 <__lo0bits+0x2a>
 800ae74:	2000      	movs	r0, #0
 800ae76:	4770      	bx	lr
 800ae78:	2020      	movs	r0, #32
 800ae7a:	4770      	bx	lr

0800ae7c <__i2b>:
 800ae7c:	b510      	push	{r4, lr}
 800ae7e:	460c      	mov	r4, r1
 800ae80:	2101      	movs	r1, #1
 800ae82:	f7ff feff 	bl	800ac84 <_Balloc>
 800ae86:	4602      	mov	r2, r0
 800ae88:	b928      	cbnz	r0, 800ae96 <__i2b+0x1a>
 800ae8a:	4b05      	ldr	r3, [pc, #20]	; (800aea0 <__i2b+0x24>)
 800ae8c:	4805      	ldr	r0, [pc, #20]	; (800aea4 <__i2b+0x28>)
 800ae8e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ae92:	f000 fc9b 	bl	800b7cc <__assert_func>
 800ae96:	2301      	movs	r3, #1
 800ae98:	6144      	str	r4, [r0, #20]
 800ae9a:	6103      	str	r3, [r0, #16]
 800ae9c:	bd10      	pop	{r4, pc}
 800ae9e:	bf00      	nop
 800aea0:	0800c8bf 	.word	0x0800c8bf
 800aea4:	0800c8d0 	.word	0x0800c8d0

0800aea8 <__multiply>:
 800aea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeac:	4614      	mov	r4, r2
 800aeae:	690a      	ldr	r2, [r1, #16]
 800aeb0:	6923      	ldr	r3, [r4, #16]
 800aeb2:	429a      	cmp	r2, r3
 800aeb4:	bfb8      	it	lt
 800aeb6:	460b      	movlt	r3, r1
 800aeb8:	460d      	mov	r5, r1
 800aeba:	bfbc      	itt	lt
 800aebc:	4625      	movlt	r5, r4
 800aebe:	461c      	movlt	r4, r3
 800aec0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800aec4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800aec8:	68ab      	ldr	r3, [r5, #8]
 800aeca:	6869      	ldr	r1, [r5, #4]
 800aecc:	eb0a 0709 	add.w	r7, sl, r9
 800aed0:	42bb      	cmp	r3, r7
 800aed2:	b085      	sub	sp, #20
 800aed4:	bfb8      	it	lt
 800aed6:	3101      	addlt	r1, #1
 800aed8:	f7ff fed4 	bl	800ac84 <_Balloc>
 800aedc:	b930      	cbnz	r0, 800aeec <__multiply+0x44>
 800aede:	4602      	mov	r2, r0
 800aee0:	4b42      	ldr	r3, [pc, #264]	; (800afec <__multiply+0x144>)
 800aee2:	4843      	ldr	r0, [pc, #268]	; (800aff0 <__multiply+0x148>)
 800aee4:	f240 115d 	movw	r1, #349	; 0x15d
 800aee8:	f000 fc70 	bl	800b7cc <__assert_func>
 800aeec:	f100 0614 	add.w	r6, r0, #20
 800aef0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800aef4:	4633      	mov	r3, r6
 800aef6:	2200      	movs	r2, #0
 800aef8:	4543      	cmp	r3, r8
 800aefa:	d31e      	bcc.n	800af3a <__multiply+0x92>
 800aefc:	f105 0c14 	add.w	ip, r5, #20
 800af00:	f104 0314 	add.w	r3, r4, #20
 800af04:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800af08:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800af0c:	9202      	str	r2, [sp, #8]
 800af0e:	ebac 0205 	sub.w	r2, ip, r5
 800af12:	3a15      	subs	r2, #21
 800af14:	f022 0203 	bic.w	r2, r2, #3
 800af18:	3204      	adds	r2, #4
 800af1a:	f105 0115 	add.w	r1, r5, #21
 800af1e:	458c      	cmp	ip, r1
 800af20:	bf38      	it	cc
 800af22:	2204      	movcc	r2, #4
 800af24:	9201      	str	r2, [sp, #4]
 800af26:	9a02      	ldr	r2, [sp, #8]
 800af28:	9303      	str	r3, [sp, #12]
 800af2a:	429a      	cmp	r2, r3
 800af2c:	d808      	bhi.n	800af40 <__multiply+0x98>
 800af2e:	2f00      	cmp	r7, #0
 800af30:	dc55      	bgt.n	800afde <__multiply+0x136>
 800af32:	6107      	str	r7, [r0, #16]
 800af34:	b005      	add	sp, #20
 800af36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af3a:	f843 2b04 	str.w	r2, [r3], #4
 800af3e:	e7db      	b.n	800aef8 <__multiply+0x50>
 800af40:	f8b3 a000 	ldrh.w	sl, [r3]
 800af44:	f1ba 0f00 	cmp.w	sl, #0
 800af48:	d020      	beq.n	800af8c <__multiply+0xe4>
 800af4a:	f105 0e14 	add.w	lr, r5, #20
 800af4e:	46b1      	mov	r9, r6
 800af50:	2200      	movs	r2, #0
 800af52:	f85e 4b04 	ldr.w	r4, [lr], #4
 800af56:	f8d9 b000 	ldr.w	fp, [r9]
 800af5a:	b2a1      	uxth	r1, r4
 800af5c:	fa1f fb8b 	uxth.w	fp, fp
 800af60:	fb0a b101 	mla	r1, sl, r1, fp
 800af64:	4411      	add	r1, r2
 800af66:	f8d9 2000 	ldr.w	r2, [r9]
 800af6a:	0c24      	lsrs	r4, r4, #16
 800af6c:	0c12      	lsrs	r2, r2, #16
 800af6e:	fb0a 2404 	mla	r4, sl, r4, r2
 800af72:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800af76:	b289      	uxth	r1, r1
 800af78:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800af7c:	45f4      	cmp	ip, lr
 800af7e:	f849 1b04 	str.w	r1, [r9], #4
 800af82:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800af86:	d8e4      	bhi.n	800af52 <__multiply+0xaa>
 800af88:	9901      	ldr	r1, [sp, #4]
 800af8a:	5072      	str	r2, [r6, r1]
 800af8c:	9a03      	ldr	r2, [sp, #12]
 800af8e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800af92:	3304      	adds	r3, #4
 800af94:	f1b9 0f00 	cmp.w	r9, #0
 800af98:	d01f      	beq.n	800afda <__multiply+0x132>
 800af9a:	6834      	ldr	r4, [r6, #0]
 800af9c:	f105 0114 	add.w	r1, r5, #20
 800afa0:	46b6      	mov	lr, r6
 800afa2:	f04f 0a00 	mov.w	sl, #0
 800afa6:	880a      	ldrh	r2, [r1, #0]
 800afa8:	f8be b002 	ldrh.w	fp, [lr, #2]
 800afac:	fb09 b202 	mla	r2, r9, r2, fp
 800afb0:	4492      	add	sl, r2
 800afb2:	b2a4      	uxth	r4, r4
 800afb4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800afb8:	f84e 4b04 	str.w	r4, [lr], #4
 800afbc:	f851 4b04 	ldr.w	r4, [r1], #4
 800afc0:	f8be 2000 	ldrh.w	r2, [lr]
 800afc4:	0c24      	lsrs	r4, r4, #16
 800afc6:	fb09 2404 	mla	r4, r9, r4, r2
 800afca:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800afce:	458c      	cmp	ip, r1
 800afd0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800afd4:	d8e7      	bhi.n	800afa6 <__multiply+0xfe>
 800afd6:	9a01      	ldr	r2, [sp, #4]
 800afd8:	50b4      	str	r4, [r6, r2]
 800afda:	3604      	adds	r6, #4
 800afdc:	e7a3      	b.n	800af26 <__multiply+0x7e>
 800afde:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d1a5      	bne.n	800af32 <__multiply+0x8a>
 800afe6:	3f01      	subs	r7, #1
 800afe8:	e7a1      	b.n	800af2e <__multiply+0x86>
 800afea:	bf00      	nop
 800afec:	0800c8bf 	.word	0x0800c8bf
 800aff0:	0800c8d0 	.word	0x0800c8d0

0800aff4 <__pow5mult>:
 800aff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aff8:	4615      	mov	r5, r2
 800affa:	f012 0203 	ands.w	r2, r2, #3
 800affe:	4606      	mov	r6, r0
 800b000:	460f      	mov	r7, r1
 800b002:	d007      	beq.n	800b014 <__pow5mult+0x20>
 800b004:	4c25      	ldr	r4, [pc, #148]	; (800b09c <__pow5mult+0xa8>)
 800b006:	3a01      	subs	r2, #1
 800b008:	2300      	movs	r3, #0
 800b00a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b00e:	f7ff fe9b 	bl	800ad48 <__multadd>
 800b012:	4607      	mov	r7, r0
 800b014:	10ad      	asrs	r5, r5, #2
 800b016:	d03d      	beq.n	800b094 <__pow5mult+0xa0>
 800b018:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b01a:	b97c      	cbnz	r4, 800b03c <__pow5mult+0x48>
 800b01c:	2010      	movs	r0, #16
 800b01e:	f7ff fe1b 	bl	800ac58 <malloc>
 800b022:	4602      	mov	r2, r0
 800b024:	6270      	str	r0, [r6, #36]	; 0x24
 800b026:	b928      	cbnz	r0, 800b034 <__pow5mult+0x40>
 800b028:	4b1d      	ldr	r3, [pc, #116]	; (800b0a0 <__pow5mult+0xac>)
 800b02a:	481e      	ldr	r0, [pc, #120]	; (800b0a4 <__pow5mult+0xb0>)
 800b02c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b030:	f000 fbcc 	bl	800b7cc <__assert_func>
 800b034:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b038:	6004      	str	r4, [r0, #0]
 800b03a:	60c4      	str	r4, [r0, #12]
 800b03c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b040:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b044:	b94c      	cbnz	r4, 800b05a <__pow5mult+0x66>
 800b046:	f240 2171 	movw	r1, #625	; 0x271
 800b04a:	4630      	mov	r0, r6
 800b04c:	f7ff ff16 	bl	800ae7c <__i2b>
 800b050:	2300      	movs	r3, #0
 800b052:	f8c8 0008 	str.w	r0, [r8, #8]
 800b056:	4604      	mov	r4, r0
 800b058:	6003      	str	r3, [r0, #0]
 800b05a:	f04f 0900 	mov.w	r9, #0
 800b05e:	07eb      	lsls	r3, r5, #31
 800b060:	d50a      	bpl.n	800b078 <__pow5mult+0x84>
 800b062:	4639      	mov	r1, r7
 800b064:	4622      	mov	r2, r4
 800b066:	4630      	mov	r0, r6
 800b068:	f7ff ff1e 	bl	800aea8 <__multiply>
 800b06c:	4639      	mov	r1, r7
 800b06e:	4680      	mov	r8, r0
 800b070:	4630      	mov	r0, r6
 800b072:	f7ff fe47 	bl	800ad04 <_Bfree>
 800b076:	4647      	mov	r7, r8
 800b078:	106d      	asrs	r5, r5, #1
 800b07a:	d00b      	beq.n	800b094 <__pow5mult+0xa0>
 800b07c:	6820      	ldr	r0, [r4, #0]
 800b07e:	b938      	cbnz	r0, 800b090 <__pow5mult+0x9c>
 800b080:	4622      	mov	r2, r4
 800b082:	4621      	mov	r1, r4
 800b084:	4630      	mov	r0, r6
 800b086:	f7ff ff0f 	bl	800aea8 <__multiply>
 800b08a:	6020      	str	r0, [r4, #0]
 800b08c:	f8c0 9000 	str.w	r9, [r0]
 800b090:	4604      	mov	r4, r0
 800b092:	e7e4      	b.n	800b05e <__pow5mult+0x6a>
 800b094:	4638      	mov	r0, r7
 800b096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b09a:	bf00      	nop
 800b09c:	0800ca20 	.word	0x0800ca20
 800b0a0:	0800c849 	.word	0x0800c849
 800b0a4:	0800c8d0 	.word	0x0800c8d0

0800b0a8 <__lshift>:
 800b0a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0ac:	460c      	mov	r4, r1
 800b0ae:	6849      	ldr	r1, [r1, #4]
 800b0b0:	6923      	ldr	r3, [r4, #16]
 800b0b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b0b6:	68a3      	ldr	r3, [r4, #8]
 800b0b8:	4607      	mov	r7, r0
 800b0ba:	4691      	mov	r9, r2
 800b0bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b0c0:	f108 0601 	add.w	r6, r8, #1
 800b0c4:	42b3      	cmp	r3, r6
 800b0c6:	db0b      	blt.n	800b0e0 <__lshift+0x38>
 800b0c8:	4638      	mov	r0, r7
 800b0ca:	f7ff fddb 	bl	800ac84 <_Balloc>
 800b0ce:	4605      	mov	r5, r0
 800b0d0:	b948      	cbnz	r0, 800b0e6 <__lshift+0x3e>
 800b0d2:	4602      	mov	r2, r0
 800b0d4:	4b28      	ldr	r3, [pc, #160]	; (800b178 <__lshift+0xd0>)
 800b0d6:	4829      	ldr	r0, [pc, #164]	; (800b17c <__lshift+0xd4>)
 800b0d8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b0dc:	f000 fb76 	bl	800b7cc <__assert_func>
 800b0e0:	3101      	adds	r1, #1
 800b0e2:	005b      	lsls	r3, r3, #1
 800b0e4:	e7ee      	b.n	800b0c4 <__lshift+0x1c>
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	f100 0114 	add.w	r1, r0, #20
 800b0ec:	f100 0210 	add.w	r2, r0, #16
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	4553      	cmp	r3, sl
 800b0f4:	db33      	blt.n	800b15e <__lshift+0xb6>
 800b0f6:	6920      	ldr	r0, [r4, #16]
 800b0f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b0fc:	f104 0314 	add.w	r3, r4, #20
 800b100:	f019 091f 	ands.w	r9, r9, #31
 800b104:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b108:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b10c:	d02b      	beq.n	800b166 <__lshift+0xbe>
 800b10e:	f1c9 0e20 	rsb	lr, r9, #32
 800b112:	468a      	mov	sl, r1
 800b114:	2200      	movs	r2, #0
 800b116:	6818      	ldr	r0, [r3, #0]
 800b118:	fa00 f009 	lsl.w	r0, r0, r9
 800b11c:	4302      	orrs	r2, r0
 800b11e:	f84a 2b04 	str.w	r2, [sl], #4
 800b122:	f853 2b04 	ldr.w	r2, [r3], #4
 800b126:	459c      	cmp	ip, r3
 800b128:	fa22 f20e 	lsr.w	r2, r2, lr
 800b12c:	d8f3      	bhi.n	800b116 <__lshift+0x6e>
 800b12e:	ebac 0304 	sub.w	r3, ip, r4
 800b132:	3b15      	subs	r3, #21
 800b134:	f023 0303 	bic.w	r3, r3, #3
 800b138:	3304      	adds	r3, #4
 800b13a:	f104 0015 	add.w	r0, r4, #21
 800b13e:	4584      	cmp	ip, r0
 800b140:	bf38      	it	cc
 800b142:	2304      	movcc	r3, #4
 800b144:	50ca      	str	r2, [r1, r3]
 800b146:	b10a      	cbz	r2, 800b14c <__lshift+0xa4>
 800b148:	f108 0602 	add.w	r6, r8, #2
 800b14c:	3e01      	subs	r6, #1
 800b14e:	4638      	mov	r0, r7
 800b150:	612e      	str	r6, [r5, #16]
 800b152:	4621      	mov	r1, r4
 800b154:	f7ff fdd6 	bl	800ad04 <_Bfree>
 800b158:	4628      	mov	r0, r5
 800b15a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b15e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b162:	3301      	adds	r3, #1
 800b164:	e7c5      	b.n	800b0f2 <__lshift+0x4a>
 800b166:	3904      	subs	r1, #4
 800b168:	f853 2b04 	ldr.w	r2, [r3], #4
 800b16c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b170:	459c      	cmp	ip, r3
 800b172:	d8f9      	bhi.n	800b168 <__lshift+0xc0>
 800b174:	e7ea      	b.n	800b14c <__lshift+0xa4>
 800b176:	bf00      	nop
 800b178:	0800c8bf 	.word	0x0800c8bf
 800b17c:	0800c8d0 	.word	0x0800c8d0

0800b180 <__mcmp>:
 800b180:	b530      	push	{r4, r5, lr}
 800b182:	6902      	ldr	r2, [r0, #16]
 800b184:	690c      	ldr	r4, [r1, #16]
 800b186:	1b12      	subs	r2, r2, r4
 800b188:	d10e      	bne.n	800b1a8 <__mcmp+0x28>
 800b18a:	f100 0314 	add.w	r3, r0, #20
 800b18e:	3114      	adds	r1, #20
 800b190:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b194:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b198:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b19c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b1a0:	42a5      	cmp	r5, r4
 800b1a2:	d003      	beq.n	800b1ac <__mcmp+0x2c>
 800b1a4:	d305      	bcc.n	800b1b2 <__mcmp+0x32>
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	4610      	mov	r0, r2
 800b1aa:	bd30      	pop	{r4, r5, pc}
 800b1ac:	4283      	cmp	r3, r0
 800b1ae:	d3f3      	bcc.n	800b198 <__mcmp+0x18>
 800b1b0:	e7fa      	b.n	800b1a8 <__mcmp+0x28>
 800b1b2:	f04f 32ff 	mov.w	r2, #4294967295
 800b1b6:	e7f7      	b.n	800b1a8 <__mcmp+0x28>

0800b1b8 <__mdiff>:
 800b1b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1bc:	460c      	mov	r4, r1
 800b1be:	4606      	mov	r6, r0
 800b1c0:	4611      	mov	r1, r2
 800b1c2:	4620      	mov	r0, r4
 800b1c4:	4617      	mov	r7, r2
 800b1c6:	f7ff ffdb 	bl	800b180 <__mcmp>
 800b1ca:	1e05      	subs	r5, r0, #0
 800b1cc:	d110      	bne.n	800b1f0 <__mdiff+0x38>
 800b1ce:	4629      	mov	r1, r5
 800b1d0:	4630      	mov	r0, r6
 800b1d2:	f7ff fd57 	bl	800ac84 <_Balloc>
 800b1d6:	b930      	cbnz	r0, 800b1e6 <__mdiff+0x2e>
 800b1d8:	4b39      	ldr	r3, [pc, #228]	; (800b2c0 <__mdiff+0x108>)
 800b1da:	4602      	mov	r2, r0
 800b1dc:	f240 2132 	movw	r1, #562	; 0x232
 800b1e0:	4838      	ldr	r0, [pc, #224]	; (800b2c4 <__mdiff+0x10c>)
 800b1e2:	f000 faf3 	bl	800b7cc <__assert_func>
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b1ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1f0:	bfa4      	itt	ge
 800b1f2:	463b      	movge	r3, r7
 800b1f4:	4627      	movge	r7, r4
 800b1f6:	4630      	mov	r0, r6
 800b1f8:	6879      	ldr	r1, [r7, #4]
 800b1fa:	bfa6      	itte	ge
 800b1fc:	461c      	movge	r4, r3
 800b1fe:	2500      	movge	r5, #0
 800b200:	2501      	movlt	r5, #1
 800b202:	f7ff fd3f 	bl	800ac84 <_Balloc>
 800b206:	b920      	cbnz	r0, 800b212 <__mdiff+0x5a>
 800b208:	4b2d      	ldr	r3, [pc, #180]	; (800b2c0 <__mdiff+0x108>)
 800b20a:	4602      	mov	r2, r0
 800b20c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b210:	e7e6      	b.n	800b1e0 <__mdiff+0x28>
 800b212:	693e      	ldr	r6, [r7, #16]
 800b214:	60c5      	str	r5, [r0, #12]
 800b216:	6925      	ldr	r5, [r4, #16]
 800b218:	f107 0114 	add.w	r1, r7, #20
 800b21c:	f104 0914 	add.w	r9, r4, #20
 800b220:	f100 0e14 	add.w	lr, r0, #20
 800b224:	f107 0210 	add.w	r2, r7, #16
 800b228:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b22c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b230:	46f2      	mov	sl, lr
 800b232:	2700      	movs	r7, #0
 800b234:	f859 3b04 	ldr.w	r3, [r9], #4
 800b238:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b23c:	fa1f f883 	uxth.w	r8, r3
 800b240:	fa17 f78b 	uxtah	r7, r7, fp
 800b244:	0c1b      	lsrs	r3, r3, #16
 800b246:	eba7 0808 	sub.w	r8, r7, r8
 800b24a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b24e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b252:	fa1f f888 	uxth.w	r8, r8
 800b256:	141f      	asrs	r7, r3, #16
 800b258:	454d      	cmp	r5, r9
 800b25a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b25e:	f84a 3b04 	str.w	r3, [sl], #4
 800b262:	d8e7      	bhi.n	800b234 <__mdiff+0x7c>
 800b264:	1b2b      	subs	r3, r5, r4
 800b266:	3b15      	subs	r3, #21
 800b268:	f023 0303 	bic.w	r3, r3, #3
 800b26c:	3304      	adds	r3, #4
 800b26e:	3415      	adds	r4, #21
 800b270:	42a5      	cmp	r5, r4
 800b272:	bf38      	it	cc
 800b274:	2304      	movcc	r3, #4
 800b276:	4419      	add	r1, r3
 800b278:	4473      	add	r3, lr
 800b27a:	469e      	mov	lr, r3
 800b27c:	460d      	mov	r5, r1
 800b27e:	4565      	cmp	r5, ip
 800b280:	d30e      	bcc.n	800b2a0 <__mdiff+0xe8>
 800b282:	f10c 0203 	add.w	r2, ip, #3
 800b286:	1a52      	subs	r2, r2, r1
 800b288:	f022 0203 	bic.w	r2, r2, #3
 800b28c:	3903      	subs	r1, #3
 800b28e:	458c      	cmp	ip, r1
 800b290:	bf38      	it	cc
 800b292:	2200      	movcc	r2, #0
 800b294:	441a      	add	r2, r3
 800b296:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b29a:	b17b      	cbz	r3, 800b2bc <__mdiff+0x104>
 800b29c:	6106      	str	r6, [r0, #16]
 800b29e:	e7a5      	b.n	800b1ec <__mdiff+0x34>
 800b2a0:	f855 8b04 	ldr.w	r8, [r5], #4
 800b2a4:	fa17 f488 	uxtah	r4, r7, r8
 800b2a8:	1422      	asrs	r2, r4, #16
 800b2aa:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b2ae:	b2a4      	uxth	r4, r4
 800b2b0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b2b4:	f84e 4b04 	str.w	r4, [lr], #4
 800b2b8:	1417      	asrs	r7, r2, #16
 800b2ba:	e7e0      	b.n	800b27e <__mdiff+0xc6>
 800b2bc:	3e01      	subs	r6, #1
 800b2be:	e7ea      	b.n	800b296 <__mdiff+0xde>
 800b2c0:	0800c8bf 	.word	0x0800c8bf
 800b2c4:	0800c8d0 	.word	0x0800c8d0

0800b2c8 <__d2b>:
 800b2c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b2cc:	4689      	mov	r9, r1
 800b2ce:	2101      	movs	r1, #1
 800b2d0:	ec57 6b10 	vmov	r6, r7, d0
 800b2d4:	4690      	mov	r8, r2
 800b2d6:	f7ff fcd5 	bl	800ac84 <_Balloc>
 800b2da:	4604      	mov	r4, r0
 800b2dc:	b930      	cbnz	r0, 800b2ec <__d2b+0x24>
 800b2de:	4602      	mov	r2, r0
 800b2e0:	4b25      	ldr	r3, [pc, #148]	; (800b378 <__d2b+0xb0>)
 800b2e2:	4826      	ldr	r0, [pc, #152]	; (800b37c <__d2b+0xb4>)
 800b2e4:	f240 310a 	movw	r1, #778	; 0x30a
 800b2e8:	f000 fa70 	bl	800b7cc <__assert_func>
 800b2ec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b2f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b2f4:	bb35      	cbnz	r5, 800b344 <__d2b+0x7c>
 800b2f6:	2e00      	cmp	r6, #0
 800b2f8:	9301      	str	r3, [sp, #4]
 800b2fa:	d028      	beq.n	800b34e <__d2b+0x86>
 800b2fc:	4668      	mov	r0, sp
 800b2fe:	9600      	str	r6, [sp, #0]
 800b300:	f7ff fd8c 	bl	800ae1c <__lo0bits>
 800b304:	9900      	ldr	r1, [sp, #0]
 800b306:	b300      	cbz	r0, 800b34a <__d2b+0x82>
 800b308:	9a01      	ldr	r2, [sp, #4]
 800b30a:	f1c0 0320 	rsb	r3, r0, #32
 800b30e:	fa02 f303 	lsl.w	r3, r2, r3
 800b312:	430b      	orrs	r3, r1
 800b314:	40c2      	lsrs	r2, r0
 800b316:	6163      	str	r3, [r4, #20]
 800b318:	9201      	str	r2, [sp, #4]
 800b31a:	9b01      	ldr	r3, [sp, #4]
 800b31c:	61a3      	str	r3, [r4, #24]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	bf14      	ite	ne
 800b322:	2202      	movne	r2, #2
 800b324:	2201      	moveq	r2, #1
 800b326:	6122      	str	r2, [r4, #16]
 800b328:	b1d5      	cbz	r5, 800b360 <__d2b+0x98>
 800b32a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b32e:	4405      	add	r5, r0
 800b330:	f8c9 5000 	str.w	r5, [r9]
 800b334:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b338:	f8c8 0000 	str.w	r0, [r8]
 800b33c:	4620      	mov	r0, r4
 800b33e:	b003      	add	sp, #12
 800b340:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b344:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b348:	e7d5      	b.n	800b2f6 <__d2b+0x2e>
 800b34a:	6161      	str	r1, [r4, #20]
 800b34c:	e7e5      	b.n	800b31a <__d2b+0x52>
 800b34e:	a801      	add	r0, sp, #4
 800b350:	f7ff fd64 	bl	800ae1c <__lo0bits>
 800b354:	9b01      	ldr	r3, [sp, #4]
 800b356:	6163      	str	r3, [r4, #20]
 800b358:	2201      	movs	r2, #1
 800b35a:	6122      	str	r2, [r4, #16]
 800b35c:	3020      	adds	r0, #32
 800b35e:	e7e3      	b.n	800b328 <__d2b+0x60>
 800b360:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b364:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b368:	f8c9 0000 	str.w	r0, [r9]
 800b36c:	6918      	ldr	r0, [r3, #16]
 800b36e:	f7ff fd35 	bl	800addc <__hi0bits>
 800b372:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b376:	e7df      	b.n	800b338 <__d2b+0x70>
 800b378:	0800c8bf 	.word	0x0800c8bf
 800b37c:	0800c8d0 	.word	0x0800c8d0

0800b380 <_calloc_r>:
 800b380:	b513      	push	{r0, r1, r4, lr}
 800b382:	434a      	muls	r2, r1
 800b384:	4611      	mov	r1, r2
 800b386:	9201      	str	r2, [sp, #4]
 800b388:	f000 f85a 	bl	800b440 <_malloc_r>
 800b38c:	4604      	mov	r4, r0
 800b38e:	b118      	cbz	r0, 800b398 <_calloc_r+0x18>
 800b390:	9a01      	ldr	r2, [sp, #4]
 800b392:	2100      	movs	r1, #0
 800b394:	f7fe f950 	bl	8009638 <memset>
 800b398:	4620      	mov	r0, r4
 800b39a:	b002      	add	sp, #8
 800b39c:	bd10      	pop	{r4, pc}
	...

0800b3a0 <_free_r>:
 800b3a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b3a2:	2900      	cmp	r1, #0
 800b3a4:	d048      	beq.n	800b438 <_free_r+0x98>
 800b3a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3aa:	9001      	str	r0, [sp, #4]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	f1a1 0404 	sub.w	r4, r1, #4
 800b3b2:	bfb8      	it	lt
 800b3b4:	18e4      	addlt	r4, r4, r3
 800b3b6:	f000 fa65 	bl	800b884 <__malloc_lock>
 800b3ba:	4a20      	ldr	r2, [pc, #128]	; (800b43c <_free_r+0x9c>)
 800b3bc:	9801      	ldr	r0, [sp, #4]
 800b3be:	6813      	ldr	r3, [r2, #0]
 800b3c0:	4615      	mov	r5, r2
 800b3c2:	b933      	cbnz	r3, 800b3d2 <_free_r+0x32>
 800b3c4:	6063      	str	r3, [r4, #4]
 800b3c6:	6014      	str	r4, [r2, #0]
 800b3c8:	b003      	add	sp, #12
 800b3ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b3ce:	f000 ba5f 	b.w	800b890 <__malloc_unlock>
 800b3d2:	42a3      	cmp	r3, r4
 800b3d4:	d90b      	bls.n	800b3ee <_free_r+0x4e>
 800b3d6:	6821      	ldr	r1, [r4, #0]
 800b3d8:	1862      	adds	r2, r4, r1
 800b3da:	4293      	cmp	r3, r2
 800b3dc:	bf04      	itt	eq
 800b3de:	681a      	ldreq	r2, [r3, #0]
 800b3e0:	685b      	ldreq	r3, [r3, #4]
 800b3e2:	6063      	str	r3, [r4, #4]
 800b3e4:	bf04      	itt	eq
 800b3e6:	1852      	addeq	r2, r2, r1
 800b3e8:	6022      	streq	r2, [r4, #0]
 800b3ea:	602c      	str	r4, [r5, #0]
 800b3ec:	e7ec      	b.n	800b3c8 <_free_r+0x28>
 800b3ee:	461a      	mov	r2, r3
 800b3f0:	685b      	ldr	r3, [r3, #4]
 800b3f2:	b10b      	cbz	r3, 800b3f8 <_free_r+0x58>
 800b3f4:	42a3      	cmp	r3, r4
 800b3f6:	d9fa      	bls.n	800b3ee <_free_r+0x4e>
 800b3f8:	6811      	ldr	r1, [r2, #0]
 800b3fa:	1855      	adds	r5, r2, r1
 800b3fc:	42a5      	cmp	r5, r4
 800b3fe:	d10b      	bne.n	800b418 <_free_r+0x78>
 800b400:	6824      	ldr	r4, [r4, #0]
 800b402:	4421      	add	r1, r4
 800b404:	1854      	adds	r4, r2, r1
 800b406:	42a3      	cmp	r3, r4
 800b408:	6011      	str	r1, [r2, #0]
 800b40a:	d1dd      	bne.n	800b3c8 <_free_r+0x28>
 800b40c:	681c      	ldr	r4, [r3, #0]
 800b40e:	685b      	ldr	r3, [r3, #4]
 800b410:	6053      	str	r3, [r2, #4]
 800b412:	4421      	add	r1, r4
 800b414:	6011      	str	r1, [r2, #0]
 800b416:	e7d7      	b.n	800b3c8 <_free_r+0x28>
 800b418:	d902      	bls.n	800b420 <_free_r+0x80>
 800b41a:	230c      	movs	r3, #12
 800b41c:	6003      	str	r3, [r0, #0]
 800b41e:	e7d3      	b.n	800b3c8 <_free_r+0x28>
 800b420:	6825      	ldr	r5, [r4, #0]
 800b422:	1961      	adds	r1, r4, r5
 800b424:	428b      	cmp	r3, r1
 800b426:	bf04      	itt	eq
 800b428:	6819      	ldreq	r1, [r3, #0]
 800b42a:	685b      	ldreq	r3, [r3, #4]
 800b42c:	6063      	str	r3, [r4, #4]
 800b42e:	bf04      	itt	eq
 800b430:	1949      	addeq	r1, r1, r5
 800b432:	6021      	streq	r1, [r4, #0]
 800b434:	6054      	str	r4, [r2, #4]
 800b436:	e7c7      	b.n	800b3c8 <_free_r+0x28>
 800b438:	b003      	add	sp, #12
 800b43a:	bd30      	pop	{r4, r5, pc}
 800b43c:	2000020c 	.word	0x2000020c

0800b440 <_malloc_r>:
 800b440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b442:	1ccd      	adds	r5, r1, #3
 800b444:	f025 0503 	bic.w	r5, r5, #3
 800b448:	3508      	adds	r5, #8
 800b44a:	2d0c      	cmp	r5, #12
 800b44c:	bf38      	it	cc
 800b44e:	250c      	movcc	r5, #12
 800b450:	2d00      	cmp	r5, #0
 800b452:	4606      	mov	r6, r0
 800b454:	db01      	blt.n	800b45a <_malloc_r+0x1a>
 800b456:	42a9      	cmp	r1, r5
 800b458:	d903      	bls.n	800b462 <_malloc_r+0x22>
 800b45a:	230c      	movs	r3, #12
 800b45c:	6033      	str	r3, [r6, #0]
 800b45e:	2000      	movs	r0, #0
 800b460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b462:	f000 fa0f 	bl	800b884 <__malloc_lock>
 800b466:	4921      	ldr	r1, [pc, #132]	; (800b4ec <_malloc_r+0xac>)
 800b468:	680a      	ldr	r2, [r1, #0]
 800b46a:	4614      	mov	r4, r2
 800b46c:	b99c      	cbnz	r4, 800b496 <_malloc_r+0x56>
 800b46e:	4f20      	ldr	r7, [pc, #128]	; (800b4f0 <_malloc_r+0xb0>)
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	b923      	cbnz	r3, 800b47e <_malloc_r+0x3e>
 800b474:	4621      	mov	r1, r4
 800b476:	4630      	mov	r0, r6
 800b478:	f000 f998 	bl	800b7ac <_sbrk_r>
 800b47c:	6038      	str	r0, [r7, #0]
 800b47e:	4629      	mov	r1, r5
 800b480:	4630      	mov	r0, r6
 800b482:	f000 f993 	bl	800b7ac <_sbrk_r>
 800b486:	1c43      	adds	r3, r0, #1
 800b488:	d123      	bne.n	800b4d2 <_malloc_r+0x92>
 800b48a:	230c      	movs	r3, #12
 800b48c:	6033      	str	r3, [r6, #0]
 800b48e:	4630      	mov	r0, r6
 800b490:	f000 f9fe 	bl	800b890 <__malloc_unlock>
 800b494:	e7e3      	b.n	800b45e <_malloc_r+0x1e>
 800b496:	6823      	ldr	r3, [r4, #0]
 800b498:	1b5b      	subs	r3, r3, r5
 800b49a:	d417      	bmi.n	800b4cc <_malloc_r+0x8c>
 800b49c:	2b0b      	cmp	r3, #11
 800b49e:	d903      	bls.n	800b4a8 <_malloc_r+0x68>
 800b4a0:	6023      	str	r3, [r4, #0]
 800b4a2:	441c      	add	r4, r3
 800b4a4:	6025      	str	r5, [r4, #0]
 800b4a6:	e004      	b.n	800b4b2 <_malloc_r+0x72>
 800b4a8:	6863      	ldr	r3, [r4, #4]
 800b4aa:	42a2      	cmp	r2, r4
 800b4ac:	bf0c      	ite	eq
 800b4ae:	600b      	streq	r3, [r1, #0]
 800b4b0:	6053      	strne	r3, [r2, #4]
 800b4b2:	4630      	mov	r0, r6
 800b4b4:	f000 f9ec 	bl	800b890 <__malloc_unlock>
 800b4b8:	f104 000b 	add.w	r0, r4, #11
 800b4bc:	1d23      	adds	r3, r4, #4
 800b4be:	f020 0007 	bic.w	r0, r0, #7
 800b4c2:	1ac2      	subs	r2, r0, r3
 800b4c4:	d0cc      	beq.n	800b460 <_malloc_r+0x20>
 800b4c6:	1a1b      	subs	r3, r3, r0
 800b4c8:	50a3      	str	r3, [r4, r2]
 800b4ca:	e7c9      	b.n	800b460 <_malloc_r+0x20>
 800b4cc:	4622      	mov	r2, r4
 800b4ce:	6864      	ldr	r4, [r4, #4]
 800b4d0:	e7cc      	b.n	800b46c <_malloc_r+0x2c>
 800b4d2:	1cc4      	adds	r4, r0, #3
 800b4d4:	f024 0403 	bic.w	r4, r4, #3
 800b4d8:	42a0      	cmp	r0, r4
 800b4da:	d0e3      	beq.n	800b4a4 <_malloc_r+0x64>
 800b4dc:	1a21      	subs	r1, r4, r0
 800b4de:	4630      	mov	r0, r6
 800b4e0:	f000 f964 	bl	800b7ac <_sbrk_r>
 800b4e4:	3001      	adds	r0, #1
 800b4e6:	d1dd      	bne.n	800b4a4 <_malloc_r+0x64>
 800b4e8:	e7cf      	b.n	800b48a <_malloc_r+0x4a>
 800b4ea:	bf00      	nop
 800b4ec:	2000020c 	.word	0x2000020c
 800b4f0:	20000210 	.word	0x20000210

0800b4f4 <__ssputs_r>:
 800b4f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4f8:	688e      	ldr	r6, [r1, #8]
 800b4fa:	429e      	cmp	r6, r3
 800b4fc:	4682      	mov	sl, r0
 800b4fe:	460c      	mov	r4, r1
 800b500:	4690      	mov	r8, r2
 800b502:	461f      	mov	r7, r3
 800b504:	d838      	bhi.n	800b578 <__ssputs_r+0x84>
 800b506:	898a      	ldrh	r2, [r1, #12]
 800b508:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b50c:	d032      	beq.n	800b574 <__ssputs_r+0x80>
 800b50e:	6825      	ldr	r5, [r4, #0]
 800b510:	6909      	ldr	r1, [r1, #16]
 800b512:	eba5 0901 	sub.w	r9, r5, r1
 800b516:	6965      	ldr	r5, [r4, #20]
 800b518:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b51c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b520:	3301      	adds	r3, #1
 800b522:	444b      	add	r3, r9
 800b524:	106d      	asrs	r5, r5, #1
 800b526:	429d      	cmp	r5, r3
 800b528:	bf38      	it	cc
 800b52a:	461d      	movcc	r5, r3
 800b52c:	0553      	lsls	r3, r2, #21
 800b52e:	d531      	bpl.n	800b594 <__ssputs_r+0xa0>
 800b530:	4629      	mov	r1, r5
 800b532:	f7ff ff85 	bl	800b440 <_malloc_r>
 800b536:	4606      	mov	r6, r0
 800b538:	b950      	cbnz	r0, 800b550 <__ssputs_r+0x5c>
 800b53a:	230c      	movs	r3, #12
 800b53c:	f8ca 3000 	str.w	r3, [sl]
 800b540:	89a3      	ldrh	r3, [r4, #12]
 800b542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b546:	81a3      	strh	r3, [r4, #12]
 800b548:	f04f 30ff 	mov.w	r0, #4294967295
 800b54c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b550:	6921      	ldr	r1, [r4, #16]
 800b552:	464a      	mov	r2, r9
 800b554:	f7ff fb88 	bl	800ac68 <memcpy>
 800b558:	89a3      	ldrh	r3, [r4, #12]
 800b55a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b55e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b562:	81a3      	strh	r3, [r4, #12]
 800b564:	6126      	str	r6, [r4, #16]
 800b566:	6165      	str	r5, [r4, #20]
 800b568:	444e      	add	r6, r9
 800b56a:	eba5 0509 	sub.w	r5, r5, r9
 800b56e:	6026      	str	r6, [r4, #0]
 800b570:	60a5      	str	r5, [r4, #8]
 800b572:	463e      	mov	r6, r7
 800b574:	42be      	cmp	r6, r7
 800b576:	d900      	bls.n	800b57a <__ssputs_r+0x86>
 800b578:	463e      	mov	r6, r7
 800b57a:	4632      	mov	r2, r6
 800b57c:	6820      	ldr	r0, [r4, #0]
 800b57e:	4641      	mov	r1, r8
 800b580:	f000 f966 	bl	800b850 <memmove>
 800b584:	68a3      	ldr	r3, [r4, #8]
 800b586:	6822      	ldr	r2, [r4, #0]
 800b588:	1b9b      	subs	r3, r3, r6
 800b58a:	4432      	add	r2, r6
 800b58c:	60a3      	str	r3, [r4, #8]
 800b58e:	6022      	str	r2, [r4, #0]
 800b590:	2000      	movs	r0, #0
 800b592:	e7db      	b.n	800b54c <__ssputs_r+0x58>
 800b594:	462a      	mov	r2, r5
 800b596:	f000 f981 	bl	800b89c <_realloc_r>
 800b59a:	4606      	mov	r6, r0
 800b59c:	2800      	cmp	r0, #0
 800b59e:	d1e1      	bne.n	800b564 <__ssputs_r+0x70>
 800b5a0:	6921      	ldr	r1, [r4, #16]
 800b5a2:	4650      	mov	r0, sl
 800b5a4:	f7ff fefc 	bl	800b3a0 <_free_r>
 800b5a8:	e7c7      	b.n	800b53a <__ssputs_r+0x46>
	...

0800b5ac <_svfiprintf_r>:
 800b5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5b0:	4698      	mov	r8, r3
 800b5b2:	898b      	ldrh	r3, [r1, #12]
 800b5b4:	061b      	lsls	r3, r3, #24
 800b5b6:	b09d      	sub	sp, #116	; 0x74
 800b5b8:	4607      	mov	r7, r0
 800b5ba:	460d      	mov	r5, r1
 800b5bc:	4614      	mov	r4, r2
 800b5be:	d50e      	bpl.n	800b5de <_svfiprintf_r+0x32>
 800b5c0:	690b      	ldr	r3, [r1, #16]
 800b5c2:	b963      	cbnz	r3, 800b5de <_svfiprintf_r+0x32>
 800b5c4:	2140      	movs	r1, #64	; 0x40
 800b5c6:	f7ff ff3b 	bl	800b440 <_malloc_r>
 800b5ca:	6028      	str	r0, [r5, #0]
 800b5cc:	6128      	str	r0, [r5, #16]
 800b5ce:	b920      	cbnz	r0, 800b5da <_svfiprintf_r+0x2e>
 800b5d0:	230c      	movs	r3, #12
 800b5d2:	603b      	str	r3, [r7, #0]
 800b5d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b5d8:	e0d1      	b.n	800b77e <_svfiprintf_r+0x1d2>
 800b5da:	2340      	movs	r3, #64	; 0x40
 800b5dc:	616b      	str	r3, [r5, #20]
 800b5de:	2300      	movs	r3, #0
 800b5e0:	9309      	str	r3, [sp, #36]	; 0x24
 800b5e2:	2320      	movs	r3, #32
 800b5e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b5e8:	f8cd 800c 	str.w	r8, [sp, #12]
 800b5ec:	2330      	movs	r3, #48	; 0x30
 800b5ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b798 <_svfiprintf_r+0x1ec>
 800b5f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b5f6:	f04f 0901 	mov.w	r9, #1
 800b5fa:	4623      	mov	r3, r4
 800b5fc:	469a      	mov	sl, r3
 800b5fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b602:	b10a      	cbz	r2, 800b608 <_svfiprintf_r+0x5c>
 800b604:	2a25      	cmp	r2, #37	; 0x25
 800b606:	d1f9      	bne.n	800b5fc <_svfiprintf_r+0x50>
 800b608:	ebba 0b04 	subs.w	fp, sl, r4
 800b60c:	d00b      	beq.n	800b626 <_svfiprintf_r+0x7a>
 800b60e:	465b      	mov	r3, fp
 800b610:	4622      	mov	r2, r4
 800b612:	4629      	mov	r1, r5
 800b614:	4638      	mov	r0, r7
 800b616:	f7ff ff6d 	bl	800b4f4 <__ssputs_r>
 800b61a:	3001      	adds	r0, #1
 800b61c:	f000 80aa 	beq.w	800b774 <_svfiprintf_r+0x1c8>
 800b620:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b622:	445a      	add	r2, fp
 800b624:	9209      	str	r2, [sp, #36]	; 0x24
 800b626:	f89a 3000 	ldrb.w	r3, [sl]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	f000 80a2 	beq.w	800b774 <_svfiprintf_r+0x1c8>
 800b630:	2300      	movs	r3, #0
 800b632:	f04f 32ff 	mov.w	r2, #4294967295
 800b636:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b63a:	f10a 0a01 	add.w	sl, sl, #1
 800b63e:	9304      	str	r3, [sp, #16]
 800b640:	9307      	str	r3, [sp, #28]
 800b642:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b646:	931a      	str	r3, [sp, #104]	; 0x68
 800b648:	4654      	mov	r4, sl
 800b64a:	2205      	movs	r2, #5
 800b64c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b650:	4851      	ldr	r0, [pc, #324]	; (800b798 <_svfiprintf_r+0x1ec>)
 800b652:	f7f4 fded 	bl	8000230 <memchr>
 800b656:	9a04      	ldr	r2, [sp, #16]
 800b658:	b9d8      	cbnz	r0, 800b692 <_svfiprintf_r+0xe6>
 800b65a:	06d0      	lsls	r0, r2, #27
 800b65c:	bf44      	itt	mi
 800b65e:	2320      	movmi	r3, #32
 800b660:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b664:	0711      	lsls	r1, r2, #28
 800b666:	bf44      	itt	mi
 800b668:	232b      	movmi	r3, #43	; 0x2b
 800b66a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b66e:	f89a 3000 	ldrb.w	r3, [sl]
 800b672:	2b2a      	cmp	r3, #42	; 0x2a
 800b674:	d015      	beq.n	800b6a2 <_svfiprintf_r+0xf6>
 800b676:	9a07      	ldr	r2, [sp, #28]
 800b678:	4654      	mov	r4, sl
 800b67a:	2000      	movs	r0, #0
 800b67c:	f04f 0c0a 	mov.w	ip, #10
 800b680:	4621      	mov	r1, r4
 800b682:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b686:	3b30      	subs	r3, #48	; 0x30
 800b688:	2b09      	cmp	r3, #9
 800b68a:	d94e      	bls.n	800b72a <_svfiprintf_r+0x17e>
 800b68c:	b1b0      	cbz	r0, 800b6bc <_svfiprintf_r+0x110>
 800b68e:	9207      	str	r2, [sp, #28]
 800b690:	e014      	b.n	800b6bc <_svfiprintf_r+0x110>
 800b692:	eba0 0308 	sub.w	r3, r0, r8
 800b696:	fa09 f303 	lsl.w	r3, r9, r3
 800b69a:	4313      	orrs	r3, r2
 800b69c:	9304      	str	r3, [sp, #16]
 800b69e:	46a2      	mov	sl, r4
 800b6a0:	e7d2      	b.n	800b648 <_svfiprintf_r+0x9c>
 800b6a2:	9b03      	ldr	r3, [sp, #12]
 800b6a4:	1d19      	adds	r1, r3, #4
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	9103      	str	r1, [sp, #12]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	bfbb      	ittet	lt
 800b6ae:	425b      	neglt	r3, r3
 800b6b0:	f042 0202 	orrlt.w	r2, r2, #2
 800b6b4:	9307      	strge	r3, [sp, #28]
 800b6b6:	9307      	strlt	r3, [sp, #28]
 800b6b8:	bfb8      	it	lt
 800b6ba:	9204      	strlt	r2, [sp, #16]
 800b6bc:	7823      	ldrb	r3, [r4, #0]
 800b6be:	2b2e      	cmp	r3, #46	; 0x2e
 800b6c0:	d10c      	bne.n	800b6dc <_svfiprintf_r+0x130>
 800b6c2:	7863      	ldrb	r3, [r4, #1]
 800b6c4:	2b2a      	cmp	r3, #42	; 0x2a
 800b6c6:	d135      	bne.n	800b734 <_svfiprintf_r+0x188>
 800b6c8:	9b03      	ldr	r3, [sp, #12]
 800b6ca:	1d1a      	adds	r2, r3, #4
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	9203      	str	r2, [sp, #12]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	bfb8      	it	lt
 800b6d4:	f04f 33ff 	movlt.w	r3, #4294967295
 800b6d8:	3402      	adds	r4, #2
 800b6da:	9305      	str	r3, [sp, #20]
 800b6dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b7a8 <_svfiprintf_r+0x1fc>
 800b6e0:	7821      	ldrb	r1, [r4, #0]
 800b6e2:	2203      	movs	r2, #3
 800b6e4:	4650      	mov	r0, sl
 800b6e6:	f7f4 fda3 	bl	8000230 <memchr>
 800b6ea:	b140      	cbz	r0, 800b6fe <_svfiprintf_r+0x152>
 800b6ec:	2340      	movs	r3, #64	; 0x40
 800b6ee:	eba0 000a 	sub.w	r0, r0, sl
 800b6f2:	fa03 f000 	lsl.w	r0, r3, r0
 800b6f6:	9b04      	ldr	r3, [sp, #16]
 800b6f8:	4303      	orrs	r3, r0
 800b6fa:	3401      	adds	r4, #1
 800b6fc:	9304      	str	r3, [sp, #16]
 800b6fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b702:	4826      	ldr	r0, [pc, #152]	; (800b79c <_svfiprintf_r+0x1f0>)
 800b704:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b708:	2206      	movs	r2, #6
 800b70a:	f7f4 fd91 	bl	8000230 <memchr>
 800b70e:	2800      	cmp	r0, #0
 800b710:	d038      	beq.n	800b784 <_svfiprintf_r+0x1d8>
 800b712:	4b23      	ldr	r3, [pc, #140]	; (800b7a0 <_svfiprintf_r+0x1f4>)
 800b714:	bb1b      	cbnz	r3, 800b75e <_svfiprintf_r+0x1b2>
 800b716:	9b03      	ldr	r3, [sp, #12]
 800b718:	3307      	adds	r3, #7
 800b71a:	f023 0307 	bic.w	r3, r3, #7
 800b71e:	3308      	adds	r3, #8
 800b720:	9303      	str	r3, [sp, #12]
 800b722:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b724:	4433      	add	r3, r6
 800b726:	9309      	str	r3, [sp, #36]	; 0x24
 800b728:	e767      	b.n	800b5fa <_svfiprintf_r+0x4e>
 800b72a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b72e:	460c      	mov	r4, r1
 800b730:	2001      	movs	r0, #1
 800b732:	e7a5      	b.n	800b680 <_svfiprintf_r+0xd4>
 800b734:	2300      	movs	r3, #0
 800b736:	3401      	adds	r4, #1
 800b738:	9305      	str	r3, [sp, #20]
 800b73a:	4619      	mov	r1, r3
 800b73c:	f04f 0c0a 	mov.w	ip, #10
 800b740:	4620      	mov	r0, r4
 800b742:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b746:	3a30      	subs	r2, #48	; 0x30
 800b748:	2a09      	cmp	r2, #9
 800b74a:	d903      	bls.n	800b754 <_svfiprintf_r+0x1a8>
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d0c5      	beq.n	800b6dc <_svfiprintf_r+0x130>
 800b750:	9105      	str	r1, [sp, #20]
 800b752:	e7c3      	b.n	800b6dc <_svfiprintf_r+0x130>
 800b754:	fb0c 2101 	mla	r1, ip, r1, r2
 800b758:	4604      	mov	r4, r0
 800b75a:	2301      	movs	r3, #1
 800b75c:	e7f0      	b.n	800b740 <_svfiprintf_r+0x194>
 800b75e:	ab03      	add	r3, sp, #12
 800b760:	9300      	str	r3, [sp, #0]
 800b762:	462a      	mov	r2, r5
 800b764:	4b0f      	ldr	r3, [pc, #60]	; (800b7a4 <_svfiprintf_r+0x1f8>)
 800b766:	a904      	add	r1, sp, #16
 800b768:	4638      	mov	r0, r7
 800b76a:	f7fe f80d 	bl	8009788 <_printf_float>
 800b76e:	1c42      	adds	r2, r0, #1
 800b770:	4606      	mov	r6, r0
 800b772:	d1d6      	bne.n	800b722 <_svfiprintf_r+0x176>
 800b774:	89ab      	ldrh	r3, [r5, #12]
 800b776:	065b      	lsls	r3, r3, #25
 800b778:	f53f af2c 	bmi.w	800b5d4 <_svfiprintf_r+0x28>
 800b77c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b77e:	b01d      	add	sp, #116	; 0x74
 800b780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b784:	ab03      	add	r3, sp, #12
 800b786:	9300      	str	r3, [sp, #0]
 800b788:	462a      	mov	r2, r5
 800b78a:	4b06      	ldr	r3, [pc, #24]	; (800b7a4 <_svfiprintf_r+0x1f8>)
 800b78c:	a904      	add	r1, sp, #16
 800b78e:	4638      	mov	r0, r7
 800b790:	f7fe fa9e 	bl	8009cd0 <_printf_i>
 800b794:	e7eb      	b.n	800b76e <_svfiprintf_r+0x1c2>
 800b796:	bf00      	nop
 800b798:	0800ca2c 	.word	0x0800ca2c
 800b79c:	0800ca36 	.word	0x0800ca36
 800b7a0:	08009789 	.word	0x08009789
 800b7a4:	0800b4f5 	.word	0x0800b4f5
 800b7a8:	0800ca32 	.word	0x0800ca32

0800b7ac <_sbrk_r>:
 800b7ac:	b538      	push	{r3, r4, r5, lr}
 800b7ae:	4d06      	ldr	r5, [pc, #24]	; (800b7c8 <_sbrk_r+0x1c>)
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	4604      	mov	r4, r0
 800b7b4:	4608      	mov	r0, r1
 800b7b6:	602b      	str	r3, [r5, #0]
 800b7b8:	f7f6 fb5e 	bl	8001e78 <_sbrk>
 800b7bc:	1c43      	adds	r3, r0, #1
 800b7be:	d102      	bne.n	800b7c6 <_sbrk_r+0x1a>
 800b7c0:	682b      	ldr	r3, [r5, #0]
 800b7c2:	b103      	cbz	r3, 800b7c6 <_sbrk_r+0x1a>
 800b7c4:	6023      	str	r3, [r4, #0]
 800b7c6:	bd38      	pop	{r3, r4, r5, pc}
 800b7c8:	2000058c 	.word	0x2000058c

0800b7cc <__assert_func>:
 800b7cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b7ce:	4614      	mov	r4, r2
 800b7d0:	461a      	mov	r2, r3
 800b7d2:	4b09      	ldr	r3, [pc, #36]	; (800b7f8 <__assert_func+0x2c>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	4605      	mov	r5, r0
 800b7d8:	68d8      	ldr	r0, [r3, #12]
 800b7da:	b14c      	cbz	r4, 800b7f0 <__assert_func+0x24>
 800b7dc:	4b07      	ldr	r3, [pc, #28]	; (800b7fc <__assert_func+0x30>)
 800b7de:	9100      	str	r1, [sp, #0]
 800b7e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b7e4:	4906      	ldr	r1, [pc, #24]	; (800b800 <__assert_func+0x34>)
 800b7e6:	462b      	mov	r3, r5
 800b7e8:	f000 f80e 	bl	800b808 <fiprintf>
 800b7ec:	f000 faa4 	bl	800bd38 <abort>
 800b7f0:	4b04      	ldr	r3, [pc, #16]	; (800b804 <__assert_func+0x38>)
 800b7f2:	461c      	mov	r4, r3
 800b7f4:	e7f3      	b.n	800b7de <__assert_func+0x12>
 800b7f6:	bf00      	nop
 800b7f8:	2000000c 	.word	0x2000000c
 800b7fc:	0800ca3d 	.word	0x0800ca3d
 800b800:	0800ca4a 	.word	0x0800ca4a
 800b804:	0800ca78 	.word	0x0800ca78

0800b808 <fiprintf>:
 800b808:	b40e      	push	{r1, r2, r3}
 800b80a:	b503      	push	{r0, r1, lr}
 800b80c:	4601      	mov	r1, r0
 800b80e:	ab03      	add	r3, sp, #12
 800b810:	4805      	ldr	r0, [pc, #20]	; (800b828 <fiprintf+0x20>)
 800b812:	f853 2b04 	ldr.w	r2, [r3], #4
 800b816:	6800      	ldr	r0, [r0, #0]
 800b818:	9301      	str	r3, [sp, #4]
 800b81a:	f000 f88f 	bl	800b93c <_vfiprintf_r>
 800b81e:	b002      	add	sp, #8
 800b820:	f85d eb04 	ldr.w	lr, [sp], #4
 800b824:	b003      	add	sp, #12
 800b826:	4770      	bx	lr
 800b828:	2000000c 	.word	0x2000000c

0800b82c <__ascii_mbtowc>:
 800b82c:	b082      	sub	sp, #8
 800b82e:	b901      	cbnz	r1, 800b832 <__ascii_mbtowc+0x6>
 800b830:	a901      	add	r1, sp, #4
 800b832:	b142      	cbz	r2, 800b846 <__ascii_mbtowc+0x1a>
 800b834:	b14b      	cbz	r3, 800b84a <__ascii_mbtowc+0x1e>
 800b836:	7813      	ldrb	r3, [r2, #0]
 800b838:	600b      	str	r3, [r1, #0]
 800b83a:	7812      	ldrb	r2, [r2, #0]
 800b83c:	1e10      	subs	r0, r2, #0
 800b83e:	bf18      	it	ne
 800b840:	2001      	movne	r0, #1
 800b842:	b002      	add	sp, #8
 800b844:	4770      	bx	lr
 800b846:	4610      	mov	r0, r2
 800b848:	e7fb      	b.n	800b842 <__ascii_mbtowc+0x16>
 800b84a:	f06f 0001 	mvn.w	r0, #1
 800b84e:	e7f8      	b.n	800b842 <__ascii_mbtowc+0x16>

0800b850 <memmove>:
 800b850:	4288      	cmp	r0, r1
 800b852:	b510      	push	{r4, lr}
 800b854:	eb01 0402 	add.w	r4, r1, r2
 800b858:	d902      	bls.n	800b860 <memmove+0x10>
 800b85a:	4284      	cmp	r4, r0
 800b85c:	4623      	mov	r3, r4
 800b85e:	d807      	bhi.n	800b870 <memmove+0x20>
 800b860:	1e43      	subs	r3, r0, #1
 800b862:	42a1      	cmp	r1, r4
 800b864:	d008      	beq.n	800b878 <memmove+0x28>
 800b866:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b86a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b86e:	e7f8      	b.n	800b862 <memmove+0x12>
 800b870:	4402      	add	r2, r0
 800b872:	4601      	mov	r1, r0
 800b874:	428a      	cmp	r2, r1
 800b876:	d100      	bne.n	800b87a <memmove+0x2a>
 800b878:	bd10      	pop	{r4, pc}
 800b87a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b87e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b882:	e7f7      	b.n	800b874 <memmove+0x24>

0800b884 <__malloc_lock>:
 800b884:	4801      	ldr	r0, [pc, #4]	; (800b88c <__malloc_lock+0x8>)
 800b886:	f000 bc17 	b.w	800c0b8 <__retarget_lock_acquire_recursive>
 800b88a:	bf00      	nop
 800b88c:	20000594 	.word	0x20000594

0800b890 <__malloc_unlock>:
 800b890:	4801      	ldr	r0, [pc, #4]	; (800b898 <__malloc_unlock+0x8>)
 800b892:	f000 bc12 	b.w	800c0ba <__retarget_lock_release_recursive>
 800b896:	bf00      	nop
 800b898:	20000594 	.word	0x20000594

0800b89c <_realloc_r>:
 800b89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b89e:	4607      	mov	r7, r0
 800b8a0:	4614      	mov	r4, r2
 800b8a2:	460e      	mov	r6, r1
 800b8a4:	b921      	cbnz	r1, 800b8b0 <_realloc_r+0x14>
 800b8a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b8aa:	4611      	mov	r1, r2
 800b8ac:	f7ff bdc8 	b.w	800b440 <_malloc_r>
 800b8b0:	b922      	cbnz	r2, 800b8bc <_realloc_r+0x20>
 800b8b2:	f7ff fd75 	bl	800b3a0 <_free_r>
 800b8b6:	4625      	mov	r5, r4
 800b8b8:	4628      	mov	r0, r5
 800b8ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8bc:	f000 fc62 	bl	800c184 <_malloc_usable_size_r>
 800b8c0:	42a0      	cmp	r0, r4
 800b8c2:	d20f      	bcs.n	800b8e4 <_realloc_r+0x48>
 800b8c4:	4621      	mov	r1, r4
 800b8c6:	4638      	mov	r0, r7
 800b8c8:	f7ff fdba 	bl	800b440 <_malloc_r>
 800b8cc:	4605      	mov	r5, r0
 800b8ce:	2800      	cmp	r0, #0
 800b8d0:	d0f2      	beq.n	800b8b8 <_realloc_r+0x1c>
 800b8d2:	4631      	mov	r1, r6
 800b8d4:	4622      	mov	r2, r4
 800b8d6:	f7ff f9c7 	bl	800ac68 <memcpy>
 800b8da:	4631      	mov	r1, r6
 800b8dc:	4638      	mov	r0, r7
 800b8de:	f7ff fd5f 	bl	800b3a0 <_free_r>
 800b8e2:	e7e9      	b.n	800b8b8 <_realloc_r+0x1c>
 800b8e4:	4635      	mov	r5, r6
 800b8e6:	e7e7      	b.n	800b8b8 <_realloc_r+0x1c>

0800b8e8 <__sfputc_r>:
 800b8e8:	6893      	ldr	r3, [r2, #8]
 800b8ea:	3b01      	subs	r3, #1
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	b410      	push	{r4}
 800b8f0:	6093      	str	r3, [r2, #8]
 800b8f2:	da08      	bge.n	800b906 <__sfputc_r+0x1e>
 800b8f4:	6994      	ldr	r4, [r2, #24]
 800b8f6:	42a3      	cmp	r3, r4
 800b8f8:	db01      	blt.n	800b8fe <__sfputc_r+0x16>
 800b8fa:	290a      	cmp	r1, #10
 800b8fc:	d103      	bne.n	800b906 <__sfputc_r+0x1e>
 800b8fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b902:	f000 b94b 	b.w	800bb9c <__swbuf_r>
 800b906:	6813      	ldr	r3, [r2, #0]
 800b908:	1c58      	adds	r0, r3, #1
 800b90a:	6010      	str	r0, [r2, #0]
 800b90c:	7019      	strb	r1, [r3, #0]
 800b90e:	4608      	mov	r0, r1
 800b910:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b914:	4770      	bx	lr

0800b916 <__sfputs_r>:
 800b916:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b918:	4606      	mov	r6, r0
 800b91a:	460f      	mov	r7, r1
 800b91c:	4614      	mov	r4, r2
 800b91e:	18d5      	adds	r5, r2, r3
 800b920:	42ac      	cmp	r4, r5
 800b922:	d101      	bne.n	800b928 <__sfputs_r+0x12>
 800b924:	2000      	movs	r0, #0
 800b926:	e007      	b.n	800b938 <__sfputs_r+0x22>
 800b928:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b92c:	463a      	mov	r2, r7
 800b92e:	4630      	mov	r0, r6
 800b930:	f7ff ffda 	bl	800b8e8 <__sfputc_r>
 800b934:	1c43      	adds	r3, r0, #1
 800b936:	d1f3      	bne.n	800b920 <__sfputs_r+0xa>
 800b938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b93c <_vfiprintf_r>:
 800b93c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b940:	460d      	mov	r5, r1
 800b942:	b09d      	sub	sp, #116	; 0x74
 800b944:	4614      	mov	r4, r2
 800b946:	4698      	mov	r8, r3
 800b948:	4606      	mov	r6, r0
 800b94a:	b118      	cbz	r0, 800b954 <_vfiprintf_r+0x18>
 800b94c:	6983      	ldr	r3, [r0, #24]
 800b94e:	b90b      	cbnz	r3, 800b954 <_vfiprintf_r+0x18>
 800b950:	f000 fb14 	bl	800bf7c <__sinit>
 800b954:	4b89      	ldr	r3, [pc, #548]	; (800bb7c <_vfiprintf_r+0x240>)
 800b956:	429d      	cmp	r5, r3
 800b958:	d11b      	bne.n	800b992 <_vfiprintf_r+0x56>
 800b95a:	6875      	ldr	r5, [r6, #4]
 800b95c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b95e:	07d9      	lsls	r1, r3, #31
 800b960:	d405      	bmi.n	800b96e <_vfiprintf_r+0x32>
 800b962:	89ab      	ldrh	r3, [r5, #12]
 800b964:	059a      	lsls	r2, r3, #22
 800b966:	d402      	bmi.n	800b96e <_vfiprintf_r+0x32>
 800b968:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b96a:	f000 fba5 	bl	800c0b8 <__retarget_lock_acquire_recursive>
 800b96e:	89ab      	ldrh	r3, [r5, #12]
 800b970:	071b      	lsls	r3, r3, #28
 800b972:	d501      	bpl.n	800b978 <_vfiprintf_r+0x3c>
 800b974:	692b      	ldr	r3, [r5, #16]
 800b976:	b9eb      	cbnz	r3, 800b9b4 <_vfiprintf_r+0x78>
 800b978:	4629      	mov	r1, r5
 800b97a:	4630      	mov	r0, r6
 800b97c:	f000 f96e 	bl	800bc5c <__swsetup_r>
 800b980:	b1c0      	cbz	r0, 800b9b4 <_vfiprintf_r+0x78>
 800b982:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b984:	07dc      	lsls	r4, r3, #31
 800b986:	d50e      	bpl.n	800b9a6 <_vfiprintf_r+0x6a>
 800b988:	f04f 30ff 	mov.w	r0, #4294967295
 800b98c:	b01d      	add	sp, #116	; 0x74
 800b98e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b992:	4b7b      	ldr	r3, [pc, #492]	; (800bb80 <_vfiprintf_r+0x244>)
 800b994:	429d      	cmp	r5, r3
 800b996:	d101      	bne.n	800b99c <_vfiprintf_r+0x60>
 800b998:	68b5      	ldr	r5, [r6, #8]
 800b99a:	e7df      	b.n	800b95c <_vfiprintf_r+0x20>
 800b99c:	4b79      	ldr	r3, [pc, #484]	; (800bb84 <_vfiprintf_r+0x248>)
 800b99e:	429d      	cmp	r5, r3
 800b9a0:	bf08      	it	eq
 800b9a2:	68f5      	ldreq	r5, [r6, #12]
 800b9a4:	e7da      	b.n	800b95c <_vfiprintf_r+0x20>
 800b9a6:	89ab      	ldrh	r3, [r5, #12]
 800b9a8:	0598      	lsls	r0, r3, #22
 800b9aa:	d4ed      	bmi.n	800b988 <_vfiprintf_r+0x4c>
 800b9ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b9ae:	f000 fb84 	bl	800c0ba <__retarget_lock_release_recursive>
 800b9b2:	e7e9      	b.n	800b988 <_vfiprintf_r+0x4c>
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	9309      	str	r3, [sp, #36]	; 0x24
 800b9b8:	2320      	movs	r3, #32
 800b9ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b9be:	f8cd 800c 	str.w	r8, [sp, #12]
 800b9c2:	2330      	movs	r3, #48	; 0x30
 800b9c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bb88 <_vfiprintf_r+0x24c>
 800b9c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b9cc:	f04f 0901 	mov.w	r9, #1
 800b9d0:	4623      	mov	r3, r4
 800b9d2:	469a      	mov	sl, r3
 800b9d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9d8:	b10a      	cbz	r2, 800b9de <_vfiprintf_r+0xa2>
 800b9da:	2a25      	cmp	r2, #37	; 0x25
 800b9dc:	d1f9      	bne.n	800b9d2 <_vfiprintf_r+0x96>
 800b9de:	ebba 0b04 	subs.w	fp, sl, r4
 800b9e2:	d00b      	beq.n	800b9fc <_vfiprintf_r+0xc0>
 800b9e4:	465b      	mov	r3, fp
 800b9e6:	4622      	mov	r2, r4
 800b9e8:	4629      	mov	r1, r5
 800b9ea:	4630      	mov	r0, r6
 800b9ec:	f7ff ff93 	bl	800b916 <__sfputs_r>
 800b9f0:	3001      	adds	r0, #1
 800b9f2:	f000 80aa 	beq.w	800bb4a <_vfiprintf_r+0x20e>
 800b9f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9f8:	445a      	add	r2, fp
 800b9fa:	9209      	str	r2, [sp, #36]	; 0x24
 800b9fc:	f89a 3000 	ldrb.w	r3, [sl]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	f000 80a2 	beq.w	800bb4a <_vfiprintf_r+0x20e>
 800ba06:	2300      	movs	r3, #0
 800ba08:	f04f 32ff 	mov.w	r2, #4294967295
 800ba0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba10:	f10a 0a01 	add.w	sl, sl, #1
 800ba14:	9304      	str	r3, [sp, #16]
 800ba16:	9307      	str	r3, [sp, #28]
 800ba18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba1c:	931a      	str	r3, [sp, #104]	; 0x68
 800ba1e:	4654      	mov	r4, sl
 800ba20:	2205      	movs	r2, #5
 800ba22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba26:	4858      	ldr	r0, [pc, #352]	; (800bb88 <_vfiprintf_r+0x24c>)
 800ba28:	f7f4 fc02 	bl	8000230 <memchr>
 800ba2c:	9a04      	ldr	r2, [sp, #16]
 800ba2e:	b9d8      	cbnz	r0, 800ba68 <_vfiprintf_r+0x12c>
 800ba30:	06d1      	lsls	r1, r2, #27
 800ba32:	bf44      	itt	mi
 800ba34:	2320      	movmi	r3, #32
 800ba36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba3a:	0713      	lsls	r3, r2, #28
 800ba3c:	bf44      	itt	mi
 800ba3e:	232b      	movmi	r3, #43	; 0x2b
 800ba40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba44:	f89a 3000 	ldrb.w	r3, [sl]
 800ba48:	2b2a      	cmp	r3, #42	; 0x2a
 800ba4a:	d015      	beq.n	800ba78 <_vfiprintf_r+0x13c>
 800ba4c:	9a07      	ldr	r2, [sp, #28]
 800ba4e:	4654      	mov	r4, sl
 800ba50:	2000      	movs	r0, #0
 800ba52:	f04f 0c0a 	mov.w	ip, #10
 800ba56:	4621      	mov	r1, r4
 800ba58:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba5c:	3b30      	subs	r3, #48	; 0x30
 800ba5e:	2b09      	cmp	r3, #9
 800ba60:	d94e      	bls.n	800bb00 <_vfiprintf_r+0x1c4>
 800ba62:	b1b0      	cbz	r0, 800ba92 <_vfiprintf_r+0x156>
 800ba64:	9207      	str	r2, [sp, #28]
 800ba66:	e014      	b.n	800ba92 <_vfiprintf_r+0x156>
 800ba68:	eba0 0308 	sub.w	r3, r0, r8
 800ba6c:	fa09 f303 	lsl.w	r3, r9, r3
 800ba70:	4313      	orrs	r3, r2
 800ba72:	9304      	str	r3, [sp, #16]
 800ba74:	46a2      	mov	sl, r4
 800ba76:	e7d2      	b.n	800ba1e <_vfiprintf_r+0xe2>
 800ba78:	9b03      	ldr	r3, [sp, #12]
 800ba7a:	1d19      	adds	r1, r3, #4
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	9103      	str	r1, [sp, #12]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	bfbb      	ittet	lt
 800ba84:	425b      	neglt	r3, r3
 800ba86:	f042 0202 	orrlt.w	r2, r2, #2
 800ba8a:	9307      	strge	r3, [sp, #28]
 800ba8c:	9307      	strlt	r3, [sp, #28]
 800ba8e:	bfb8      	it	lt
 800ba90:	9204      	strlt	r2, [sp, #16]
 800ba92:	7823      	ldrb	r3, [r4, #0]
 800ba94:	2b2e      	cmp	r3, #46	; 0x2e
 800ba96:	d10c      	bne.n	800bab2 <_vfiprintf_r+0x176>
 800ba98:	7863      	ldrb	r3, [r4, #1]
 800ba9a:	2b2a      	cmp	r3, #42	; 0x2a
 800ba9c:	d135      	bne.n	800bb0a <_vfiprintf_r+0x1ce>
 800ba9e:	9b03      	ldr	r3, [sp, #12]
 800baa0:	1d1a      	adds	r2, r3, #4
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	9203      	str	r2, [sp, #12]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	bfb8      	it	lt
 800baaa:	f04f 33ff 	movlt.w	r3, #4294967295
 800baae:	3402      	adds	r4, #2
 800bab0:	9305      	str	r3, [sp, #20]
 800bab2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bb98 <_vfiprintf_r+0x25c>
 800bab6:	7821      	ldrb	r1, [r4, #0]
 800bab8:	2203      	movs	r2, #3
 800baba:	4650      	mov	r0, sl
 800babc:	f7f4 fbb8 	bl	8000230 <memchr>
 800bac0:	b140      	cbz	r0, 800bad4 <_vfiprintf_r+0x198>
 800bac2:	2340      	movs	r3, #64	; 0x40
 800bac4:	eba0 000a 	sub.w	r0, r0, sl
 800bac8:	fa03 f000 	lsl.w	r0, r3, r0
 800bacc:	9b04      	ldr	r3, [sp, #16]
 800bace:	4303      	orrs	r3, r0
 800bad0:	3401      	adds	r4, #1
 800bad2:	9304      	str	r3, [sp, #16]
 800bad4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bad8:	482c      	ldr	r0, [pc, #176]	; (800bb8c <_vfiprintf_r+0x250>)
 800bada:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bade:	2206      	movs	r2, #6
 800bae0:	f7f4 fba6 	bl	8000230 <memchr>
 800bae4:	2800      	cmp	r0, #0
 800bae6:	d03f      	beq.n	800bb68 <_vfiprintf_r+0x22c>
 800bae8:	4b29      	ldr	r3, [pc, #164]	; (800bb90 <_vfiprintf_r+0x254>)
 800baea:	bb1b      	cbnz	r3, 800bb34 <_vfiprintf_r+0x1f8>
 800baec:	9b03      	ldr	r3, [sp, #12]
 800baee:	3307      	adds	r3, #7
 800baf0:	f023 0307 	bic.w	r3, r3, #7
 800baf4:	3308      	adds	r3, #8
 800baf6:	9303      	str	r3, [sp, #12]
 800baf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bafa:	443b      	add	r3, r7
 800bafc:	9309      	str	r3, [sp, #36]	; 0x24
 800bafe:	e767      	b.n	800b9d0 <_vfiprintf_r+0x94>
 800bb00:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb04:	460c      	mov	r4, r1
 800bb06:	2001      	movs	r0, #1
 800bb08:	e7a5      	b.n	800ba56 <_vfiprintf_r+0x11a>
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	3401      	adds	r4, #1
 800bb0e:	9305      	str	r3, [sp, #20]
 800bb10:	4619      	mov	r1, r3
 800bb12:	f04f 0c0a 	mov.w	ip, #10
 800bb16:	4620      	mov	r0, r4
 800bb18:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb1c:	3a30      	subs	r2, #48	; 0x30
 800bb1e:	2a09      	cmp	r2, #9
 800bb20:	d903      	bls.n	800bb2a <_vfiprintf_r+0x1ee>
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d0c5      	beq.n	800bab2 <_vfiprintf_r+0x176>
 800bb26:	9105      	str	r1, [sp, #20]
 800bb28:	e7c3      	b.n	800bab2 <_vfiprintf_r+0x176>
 800bb2a:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb2e:	4604      	mov	r4, r0
 800bb30:	2301      	movs	r3, #1
 800bb32:	e7f0      	b.n	800bb16 <_vfiprintf_r+0x1da>
 800bb34:	ab03      	add	r3, sp, #12
 800bb36:	9300      	str	r3, [sp, #0]
 800bb38:	462a      	mov	r2, r5
 800bb3a:	4b16      	ldr	r3, [pc, #88]	; (800bb94 <_vfiprintf_r+0x258>)
 800bb3c:	a904      	add	r1, sp, #16
 800bb3e:	4630      	mov	r0, r6
 800bb40:	f7fd fe22 	bl	8009788 <_printf_float>
 800bb44:	4607      	mov	r7, r0
 800bb46:	1c78      	adds	r0, r7, #1
 800bb48:	d1d6      	bne.n	800baf8 <_vfiprintf_r+0x1bc>
 800bb4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb4c:	07d9      	lsls	r1, r3, #31
 800bb4e:	d405      	bmi.n	800bb5c <_vfiprintf_r+0x220>
 800bb50:	89ab      	ldrh	r3, [r5, #12]
 800bb52:	059a      	lsls	r2, r3, #22
 800bb54:	d402      	bmi.n	800bb5c <_vfiprintf_r+0x220>
 800bb56:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb58:	f000 faaf 	bl	800c0ba <__retarget_lock_release_recursive>
 800bb5c:	89ab      	ldrh	r3, [r5, #12]
 800bb5e:	065b      	lsls	r3, r3, #25
 800bb60:	f53f af12 	bmi.w	800b988 <_vfiprintf_r+0x4c>
 800bb64:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb66:	e711      	b.n	800b98c <_vfiprintf_r+0x50>
 800bb68:	ab03      	add	r3, sp, #12
 800bb6a:	9300      	str	r3, [sp, #0]
 800bb6c:	462a      	mov	r2, r5
 800bb6e:	4b09      	ldr	r3, [pc, #36]	; (800bb94 <_vfiprintf_r+0x258>)
 800bb70:	a904      	add	r1, sp, #16
 800bb72:	4630      	mov	r0, r6
 800bb74:	f7fe f8ac 	bl	8009cd0 <_printf_i>
 800bb78:	e7e4      	b.n	800bb44 <_vfiprintf_r+0x208>
 800bb7a:	bf00      	nop
 800bb7c:	0800cba4 	.word	0x0800cba4
 800bb80:	0800cbc4 	.word	0x0800cbc4
 800bb84:	0800cb84 	.word	0x0800cb84
 800bb88:	0800ca2c 	.word	0x0800ca2c
 800bb8c:	0800ca36 	.word	0x0800ca36
 800bb90:	08009789 	.word	0x08009789
 800bb94:	0800b917 	.word	0x0800b917
 800bb98:	0800ca32 	.word	0x0800ca32

0800bb9c <__swbuf_r>:
 800bb9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb9e:	460e      	mov	r6, r1
 800bba0:	4614      	mov	r4, r2
 800bba2:	4605      	mov	r5, r0
 800bba4:	b118      	cbz	r0, 800bbae <__swbuf_r+0x12>
 800bba6:	6983      	ldr	r3, [r0, #24]
 800bba8:	b90b      	cbnz	r3, 800bbae <__swbuf_r+0x12>
 800bbaa:	f000 f9e7 	bl	800bf7c <__sinit>
 800bbae:	4b21      	ldr	r3, [pc, #132]	; (800bc34 <__swbuf_r+0x98>)
 800bbb0:	429c      	cmp	r4, r3
 800bbb2:	d12b      	bne.n	800bc0c <__swbuf_r+0x70>
 800bbb4:	686c      	ldr	r4, [r5, #4]
 800bbb6:	69a3      	ldr	r3, [r4, #24]
 800bbb8:	60a3      	str	r3, [r4, #8]
 800bbba:	89a3      	ldrh	r3, [r4, #12]
 800bbbc:	071a      	lsls	r2, r3, #28
 800bbbe:	d52f      	bpl.n	800bc20 <__swbuf_r+0x84>
 800bbc0:	6923      	ldr	r3, [r4, #16]
 800bbc2:	b36b      	cbz	r3, 800bc20 <__swbuf_r+0x84>
 800bbc4:	6923      	ldr	r3, [r4, #16]
 800bbc6:	6820      	ldr	r0, [r4, #0]
 800bbc8:	1ac0      	subs	r0, r0, r3
 800bbca:	6963      	ldr	r3, [r4, #20]
 800bbcc:	b2f6      	uxtb	r6, r6
 800bbce:	4283      	cmp	r3, r0
 800bbd0:	4637      	mov	r7, r6
 800bbd2:	dc04      	bgt.n	800bbde <__swbuf_r+0x42>
 800bbd4:	4621      	mov	r1, r4
 800bbd6:	4628      	mov	r0, r5
 800bbd8:	f000 f93c 	bl	800be54 <_fflush_r>
 800bbdc:	bb30      	cbnz	r0, 800bc2c <__swbuf_r+0x90>
 800bbde:	68a3      	ldr	r3, [r4, #8]
 800bbe0:	3b01      	subs	r3, #1
 800bbe2:	60a3      	str	r3, [r4, #8]
 800bbe4:	6823      	ldr	r3, [r4, #0]
 800bbe6:	1c5a      	adds	r2, r3, #1
 800bbe8:	6022      	str	r2, [r4, #0]
 800bbea:	701e      	strb	r6, [r3, #0]
 800bbec:	6963      	ldr	r3, [r4, #20]
 800bbee:	3001      	adds	r0, #1
 800bbf0:	4283      	cmp	r3, r0
 800bbf2:	d004      	beq.n	800bbfe <__swbuf_r+0x62>
 800bbf4:	89a3      	ldrh	r3, [r4, #12]
 800bbf6:	07db      	lsls	r3, r3, #31
 800bbf8:	d506      	bpl.n	800bc08 <__swbuf_r+0x6c>
 800bbfa:	2e0a      	cmp	r6, #10
 800bbfc:	d104      	bne.n	800bc08 <__swbuf_r+0x6c>
 800bbfe:	4621      	mov	r1, r4
 800bc00:	4628      	mov	r0, r5
 800bc02:	f000 f927 	bl	800be54 <_fflush_r>
 800bc06:	b988      	cbnz	r0, 800bc2c <__swbuf_r+0x90>
 800bc08:	4638      	mov	r0, r7
 800bc0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc0c:	4b0a      	ldr	r3, [pc, #40]	; (800bc38 <__swbuf_r+0x9c>)
 800bc0e:	429c      	cmp	r4, r3
 800bc10:	d101      	bne.n	800bc16 <__swbuf_r+0x7a>
 800bc12:	68ac      	ldr	r4, [r5, #8]
 800bc14:	e7cf      	b.n	800bbb6 <__swbuf_r+0x1a>
 800bc16:	4b09      	ldr	r3, [pc, #36]	; (800bc3c <__swbuf_r+0xa0>)
 800bc18:	429c      	cmp	r4, r3
 800bc1a:	bf08      	it	eq
 800bc1c:	68ec      	ldreq	r4, [r5, #12]
 800bc1e:	e7ca      	b.n	800bbb6 <__swbuf_r+0x1a>
 800bc20:	4621      	mov	r1, r4
 800bc22:	4628      	mov	r0, r5
 800bc24:	f000 f81a 	bl	800bc5c <__swsetup_r>
 800bc28:	2800      	cmp	r0, #0
 800bc2a:	d0cb      	beq.n	800bbc4 <__swbuf_r+0x28>
 800bc2c:	f04f 37ff 	mov.w	r7, #4294967295
 800bc30:	e7ea      	b.n	800bc08 <__swbuf_r+0x6c>
 800bc32:	bf00      	nop
 800bc34:	0800cba4 	.word	0x0800cba4
 800bc38:	0800cbc4 	.word	0x0800cbc4
 800bc3c:	0800cb84 	.word	0x0800cb84

0800bc40 <__ascii_wctomb>:
 800bc40:	b149      	cbz	r1, 800bc56 <__ascii_wctomb+0x16>
 800bc42:	2aff      	cmp	r2, #255	; 0xff
 800bc44:	bf85      	ittet	hi
 800bc46:	238a      	movhi	r3, #138	; 0x8a
 800bc48:	6003      	strhi	r3, [r0, #0]
 800bc4a:	700a      	strbls	r2, [r1, #0]
 800bc4c:	f04f 30ff 	movhi.w	r0, #4294967295
 800bc50:	bf98      	it	ls
 800bc52:	2001      	movls	r0, #1
 800bc54:	4770      	bx	lr
 800bc56:	4608      	mov	r0, r1
 800bc58:	4770      	bx	lr
	...

0800bc5c <__swsetup_r>:
 800bc5c:	4b32      	ldr	r3, [pc, #200]	; (800bd28 <__swsetup_r+0xcc>)
 800bc5e:	b570      	push	{r4, r5, r6, lr}
 800bc60:	681d      	ldr	r5, [r3, #0]
 800bc62:	4606      	mov	r6, r0
 800bc64:	460c      	mov	r4, r1
 800bc66:	b125      	cbz	r5, 800bc72 <__swsetup_r+0x16>
 800bc68:	69ab      	ldr	r3, [r5, #24]
 800bc6a:	b913      	cbnz	r3, 800bc72 <__swsetup_r+0x16>
 800bc6c:	4628      	mov	r0, r5
 800bc6e:	f000 f985 	bl	800bf7c <__sinit>
 800bc72:	4b2e      	ldr	r3, [pc, #184]	; (800bd2c <__swsetup_r+0xd0>)
 800bc74:	429c      	cmp	r4, r3
 800bc76:	d10f      	bne.n	800bc98 <__swsetup_r+0x3c>
 800bc78:	686c      	ldr	r4, [r5, #4]
 800bc7a:	89a3      	ldrh	r3, [r4, #12]
 800bc7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc80:	0719      	lsls	r1, r3, #28
 800bc82:	d42c      	bmi.n	800bcde <__swsetup_r+0x82>
 800bc84:	06dd      	lsls	r5, r3, #27
 800bc86:	d411      	bmi.n	800bcac <__swsetup_r+0x50>
 800bc88:	2309      	movs	r3, #9
 800bc8a:	6033      	str	r3, [r6, #0]
 800bc8c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bc90:	81a3      	strh	r3, [r4, #12]
 800bc92:	f04f 30ff 	mov.w	r0, #4294967295
 800bc96:	e03e      	b.n	800bd16 <__swsetup_r+0xba>
 800bc98:	4b25      	ldr	r3, [pc, #148]	; (800bd30 <__swsetup_r+0xd4>)
 800bc9a:	429c      	cmp	r4, r3
 800bc9c:	d101      	bne.n	800bca2 <__swsetup_r+0x46>
 800bc9e:	68ac      	ldr	r4, [r5, #8]
 800bca0:	e7eb      	b.n	800bc7a <__swsetup_r+0x1e>
 800bca2:	4b24      	ldr	r3, [pc, #144]	; (800bd34 <__swsetup_r+0xd8>)
 800bca4:	429c      	cmp	r4, r3
 800bca6:	bf08      	it	eq
 800bca8:	68ec      	ldreq	r4, [r5, #12]
 800bcaa:	e7e6      	b.n	800bc7a <__swsetup_r+0x1e>
 800bcac:	0758      	lsls	r0, r3, #29
 800bcae:	d512      	bpl.n	800bcd6 <__swsetup_r+0x7a>
 800bcb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bcb2:	b141      	cbz	r1, 800bcc6 <__swsetup_r+0x6a>
 800bcb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bcb8:	4299      	cmp	r1, r3
 800bcba:	d002      	beq.n	800bcc2 <__swsetup_r+0x66>
 800bcbc:	4630      	mov	r0, r6
 800bcbe:	f7ff fb6f 	bl	800b3a0 <_free_r>
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	6363      	str	r3, [r4, #52]	; 0x34
 800bcc6:	89a3      	ldrh	r3, [r4, #12]
 800bcc8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bccc:	81a3      	strh	r3, [r4, #12]
 800bcce:	2300      	movs	r3, #0
 800bcd0:	6063      	str	r3, [r4, #4]
 800bcd2:	6923      	ldr	r3, [r4, #16]
 800bcd4:	6023      	str	r3, [r4, #0]
 800bcd6:	89a3      	ldrh	r3, [r4, #12]
 800bcd8:	f043 0308 	orr.w	r3, r3, #8
 800bcdc:	81a3      	strh	r3, [r4, #12]
 800bcde:	6923      	ldr	r3, [r4, #16]
 800bce0:	b94b      	cbnz	r3, 800bcf6 <__swsetup_r+0x9a>
 800bce2:	89a3      	ldrh	r3, [r4, #12]
 800bce4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bce8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bcec:	d003      	beq.n	800bcf6 <__swsetup_r+0x9a>
 800bcee:	4621      	mov	r1, r4
 800bcf0:	4630      	mov	r0, r6
 800bcf2:	f000 fa07 	bl	800c104 <__smakebuf_r>
 800bcf6:	89a0      	ldrh	r0, [r4, #12]
 800bcf8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bcfc:	f010 0301 	ands.w	r3, r0, #1
 800bd00:	d00a      	beq.n	800bd18 <__swsetup_r+0xbc>
 800bd02:	2300      	movs	r3, #0
 800bd04:	60a3      	str	r3, [r4, #8]
 800bd06:	6963      	ldr	r3, [r4, #20]
 800bd08:	425b      	negs	r3, r3
 800bd0a:	61a3      	str	r3, [r4, #24]
 800bd0c:	6923      	ldr	r3, [r4, #16]
 800bd0e:	b943      	cbnz	r3, 800bd22 <__swsetup_r+0xc6>
 800bd10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bd14:	d1ba      	bne.n	800bc8c <__swsetup_r+0x30>
 800bd16:	bd70      	pop	{r4, r5, r6, pc}
 800bd18:	0781      	lsls	r1, r0, #30
 800bd1a:	bf58      	it	pl
 800bd1c:	6963      	ldrpl	r3, [r4, #20]
 800bd1e:	60a3      	str	r3, [r4, #8]
 800bd20:	e7f4      	b.n	800bd0c <__swsetup_r+0xb0>
 800bd22:	2000      	movs	r0, #0
 800bd24:	e7f7      	b.n	800bd16 <__swsetup_r+0xba>
 800bd26:	bf00      	nop
 800bd28:	2000000c 	.word	0x2000000c
 800bd2c:	0800cba4 	.word	0x0800cba4
 800bd30:	0800cbc4 	.word	0x0800cbc4
 800bd34:	0800cb84 	.word	0x0800cb84

0800bd38 <abort>:
 800bd38:	b508      	push	{r3, lr}
 800bd3a:	2006      	movs	r0, #6
 800bd3c:	f000 fa52 	bl	800c1e4 <raise>
 800bd40:	2001      	movs	r0, #1
 800bd42:	f7f6 f821 	bl	8001d88 <_exit>
	...

0800bd48 <__sflush_r>:
 800bd48:	898a      	ldrh	r2, [r1, #12]
 800bd4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd4e:	4605      	mov	r5, r0
 800bd50:	0710      	lsls	r0, r2, #28
 800bd52:	460c      	mov	r4, r1
 800bd54:	d458      	bmi.n	800be08 <__sflush_r+0xc0>
 800bd56:	684b      	ldr	r3, [r1, #4]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	dc05      	bgt.n	800bd68 <__sflush_r+0x20>
 800bd5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	dc02      	bgt.n	800bd68 <__sflush_r+0x20>
 800bd62:	2000      	movs	r0, #0
 800bd64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd6a:	2e00      	cmp	r6, #0
 800bd6c:	d0f9      	beq.n	800bd62 <__sflush_r+0x1a>
 800bd6e:	2300      	movs	r3, #0
 800bd70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bd74:	682f      	ldr	r7, [r5, #0]
 800bd76:	602b      	str	r3, [r5, #0]
 800bd78:	d032      	beq.n	800bde0 <__sflush_r+0x98>
 800bd7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bd7c:	89a3      	ldrh	r3, [r4, #12]
 800bd7e:	075a      	lsls	r2, r3, #29
 800bd80:	d505      	bpl.n	800bd8e <__sflush_r+0x46>
 800bd82:	6863      	ldr	r3, [r4, #4]
 800bd84:	1ac0      	subs	r0, r0, r3
 800bd86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bd88:	b10b      	cbz	r3, 800bd8e <__sflush_r+0x46>
 800bd8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bd8c:	1ac0      	subs	r0, r0, r3
 800bd8e:	2300      	movs	r3, #0
 800bd90:	4602      	mov	r2, r0
 800bd92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd94:	6a21      	ldr	r1, [r4, #32]
 800bd96:	4628      	mov	r0, r5
 800bd98:	47b0      	blx	r6
 800bd9a:	1c43      	adds	r3, r0, #1
 800bd9c:	89a3      	ldrh	r3, [r4, #12]
 800bd9e:	d106      	bne.n	800bdae <__sflush_r+0x66>
 800bda0:	6829      	ldr	r1, [r5, #0]
 800bda2:	291d      	cmp	r1, #29
 800bda4:	d82c      	bhi.n	800be00 <__sflush_r+0xb8>
 800bda6:	4a2a      	ldr	r2, [pc, #168]	; (800be50 <__sflush_r+0x108>)
 800bda8:	40ca      	lsrs	r2, r1
 800bdaa:	07d6      	lsls	r6, r2, #31
 800bdac:	d528      	bpl.n	800be00 <__sflush_r+0xb8>
 800bdae:	2200      	movs	r2, #0
 800bdb0:	6062      	str	r2, [r4, #4]
 800bdb2:	04d9      	lsls	r1, r3, #19
 800bdb4:	6922      	ldr	r2, [r4, #16]
 800bdb6:	6022      	str	r2, [r4, #0]
 800bdb8:	d504      	bpl.n	800bdc4 <__sflush_r+0x7c>
 800bdba:	1c42      	adds	r2, r0, #1
 800bdbc:	d101      	bne.n	800bdc2 <__sflush_r+0x7a>
 800bdbe:	682b      	ldr	r3, [r5, #0]
 800bdc0:	b903      	cbnz	r3, 800bdc4 <__sflush_r+0x7c>
 800bdc2:	6560      	str	r0, [r4, #84]	; 0x54
 800bdc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bdc6:	602f      	str	r7, [r5, #0]
 800bdc8:	2900      	cmp	r1, #0
 800bdca:	d0ca      	beq.n	800bd62 <__sflush_r+0x1a>
 800bdcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bdd0:	4299      	cmp	r1, r3
 800bdd2:	d002      	beq.n	800bdda <__sflush_r+0x92>
 800bdd4:	4628      	mov	r0, r5
 800bdd6:	f7ff fae3 	bl	800b3a0 <_free_r>
 800bdda:	2000      	movs	r0, #0
 800bddc:	6360      	str	r0, [r4, #52]	; 0x34
 800bdde:	e7c1      	b.n	800bd64 <__sflush_r+0x1c>
 800bde0:	6a21      	ldr	r1, [r4, #32]
 800bde2:	2301      	movs	r3, #1
 800bde4:	4628      	mov	r0, r5
 800bde6:	47b0      	blx	r6
 800bde8:	1c41      	adds	r1, r0, #1
 800bdea:	d1c7      	bne.n	800bd7c <__sflush_r+0x34>
 800bdec:	682b      	ldr	r3, [r5, #0]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d0c4      	beq.n	800bd7c <__sflush_r+0x34>
 800bdf2:	2b1d      	cmp	r3, #29
 800bdf4:	d001      	beq.n	800bdfa <__sflush_r+0xb2>
 800bdf6:	2b16      	cmp	r3, #22
 800bdf8:	d101      	bne.n	800bdfe <__sflush_r+0xb6>
 800bdfa:	602f      	str	r7, [r5, #0]
 800bdfc:	e7b1      	b.n	800bd62 <__sflush_r+0x1a>
 800bdfe:	89a3      	ldrh	r3, [r4, #12]
 800be00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be04:	81a3      	strh	r3, [r4, #12]
 800be06:	e7ad      	b.n	800bd64 <__sflush_r+0x1c>
 800be08:	690f      	ldr	r7, [r1, #16]
 800be0a:	2f00      	cmp	r7, #0
 800be0c:	d0a9      	beq.n	800bd62 <__sflush_r+0x1a>
 800be0e:	0793      	lsls	r3, r2, #30
 800be10:	680e      	ldr	r6, [r1, #0]
 800be12:	bf08      	it	eq
 800be14:	694b      	ldreq	r3, [r1, #20]
 800be16:	600f      	str	r7, [r1, #0]
 800be18:	bf18      	it	ne
 800be1a:	2300      	movne	r3, #0
 800be1c:	eba6 0807 	sub.w	r8, r6, r7
 800be20:	608b      	str	r3, [r1, #8]
 800be22:	f1b8 0f00 	cmp.w	r8, #0
 800be26:	dd9c      	ble.n	800bd62 <__sflush_r+0x1a>
 800be28:	6a21      	ldr	r1, [r4, #32]
 800be2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800be2c:	4643      	mov	r3, r8
 800be2e:	463a      	mov	r2, r7
 800be30:	4628      	mov	r0, r5
 800be32:	47b0      	blx	r6
 800be34:	2800      	cmp	r0, #0
 800be36:	dc06      	bgt.n	800be46 <__sflush_r+0xfe>
 800be38:	89a3      	ldrh	r3, [r4, #12]
 800be3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be3e:	81a3      	strh	r3, [r4, #12]
 800be40:	f04f 30ff 	mov.w	r0, #4294967295
 800be44:	e78e      	b.n	800bd64 <__sflush_r+0x1c>
 800be46:	4407      	add	r7, r0
 800be48:	eba8 0800 	sub.w	r8, r8, r0
 800be4c:	e7e9      	b.n	800be22 <__sflush_r+0xda>
 800be4e:	bf00      	nop
 800be50:	20400001 	.word	0x20400001

0800be54 <_fflush_r>:
 800be54:	b538      	push	{r3, r4, r5, lr}
 800be56:	690b      	ldr	r3, [r1, #16]
 800be58:	4605      	mov	r5, r0
 800be5a:	460c      	mov	r4, r1
 800be5c:	b913      	cbnz	r3, 800be64 <_fflush_r+0x10>
 800be5e:	2500      	movs	r5, #0
 800be60:	4628      	mov	r0, r5
 800be62:	bd38      	pop	{r3, r4, r5, pc}
 800be64:	b118      	cbz	r0, 800be6e <_fflush_r+0x1a>
 800be66:	6983      	ldr	r3, [r0, #24]
 800be68:	b90b      	cbnz	r3, 800be6e <_fflush_r+0x1a>
 800be6a:	f000 f887 	bl	800bf7c <__sinit>
 800be6e:	4b14      	ldr	r3, [pc, #80]	; (800bec0 <_fflush_r+0x6c>)
 800be70:	429c      	cmp	r4, r3
 800be72:	d11b      	bne.n	800beac <_fflush_r+0x58>
 800be74:	686c      	ldr	r4, [r5, #4]
 800be76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d0ef      	beq.n	800be5e <_fflush_r+0xa>
 800be7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800be80:	07d0      	lsls	r0, r2, #31
 800be82:	d404      	bmi.n	800be8e <_fflush_r+0x3a>
 800be84:	0599      	lsls	r1, r3, #22
 800be86:	d402      	bmi.n	800be8e <_fflush_r+0x3a>
 800be88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be8a:	f000 f915 	bl	800c0b8 <__retarget_lock_acquire_recursive>
 800be8e:	4628      	mov	r0, r5
 800be90:	4621      	mov	r1, r4
 800be92:	f7ff ff59 	bl	800bd48 <__sflush_r>
 800be96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be98:	07da      	lsls	r2, r3, #31
 800be9a:	4605      	mov	r5, r0
 800be9c:	d4e0      	bmi.n	800be60 <_fflush_r+0xc>
 800be9e:	89a3      	ldrh	r3, [r4, #12]
 800bea0:	059b      	lsls	r3, r3, #22
 800bea2:	d4dd      	bmi.n	800be60 <_fflush_r+0xc>
 800bea4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bea6:	f000 f908 	bl	800c0ba <__retarget_lock_release_recursive>
 800beaa:	e7d9      	b.n	800be60 <_fflush_r+0xc>
 800beac:	4b05      	ldr	r3, [pc, #20]	; (800bec4 <_fflush_r+0x70>)
 800beae:	429c      	cmp	r4, r3
 800beb0:	d101      	bne.n	800beb6 <_fflush_r+0x62>
 800beb2:	68ac      	ldr	r4, [r5, #8]
 800beb4:	e7df      	b.n	800be76 <_fflush_r+0x22>
 800beb6:	4b04      	ldr	r3, [pc, #16]	; (800bec8 <_fflush_r+0x74>)
 800beb8:	429c      	cmp	r4, r3
 800beba:	bf08      	it	eq
 800bebc:	68ec      	ldreq	r4, [r5, #12]
 800bebe:	e7da      	b.n	800be76 <_fflush_r+0x22>
 800bec0:	0800cba4 	.word	0x0800cba4
 800bec4:	0800cbc4 	.word	0x0800cbc4
 800bec8:	0800cb84 	.word	0x0800cb84

0800becc <std>:
 800becc:	2300      	movs	r3, #0
 800bece:	b510      	push	{r4, lr}
 800bed0:	4604      	mov	r4, r0
 800bed2:	e9c0 3300 	strd	r3, r3, [r0]
 800bed6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800beda:	6083      	str	r3, [r0, #8]
 800bedc:	8181      	strh	r1, [r0, #12]
 800bede:	6643      	str	r3, [r0, #100]	; 0x64
 800bee0:	81c2      	strh	r2, [r0, #14]
 800bee2:	6183      	str	r3, [r0, #24]
 800bee4:	4619      	mov	r1, r3
 800bee6:	2208      	movs	r2, #8
 800bee8:	305c      	adds	r0, #92	; 0x5c
 800beea:	f7fd fba5 	bl	8009638 <memset>
 800beee:	4b05      	ldr	r3, [pc, #20]	; (800bf04 <std+0x38>)
 800bef0:	6263      	str	r3, [r4, #36]	; 0x24
 800bef2:	4b05      	ldr	r3, [pc, #20]	; (800bf08 <std+0x3c>)
 800bef4:	62a3      	str	r3, [r4, #40]	; 0x28
 800bef6:	4b05      	ldr	r3, [pc, #20]	; (800bf0c <std+0x40>)
 800bef8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800befa:	4b05      	ldr	r3, [pc, #20]	; (800bf10 <std+0x44>)
 800befc:	6224      	str	r4, [r4, #32]
 800befe:	6323      	str	r3, [r4, #48]	; 0x30
 800bf00:	bd10      	pop	{r4, pc}
 800bf02:	bf00      	nop
 800bf04:	0800c21d 	.word	0x0800c21d
 800bf08:	0800c23f 	.word	0x0800c23f
 800bf0c:	0800c277 	.word	0x0800c277
 800bf10:	0800c29b 	.word	0x0800c29b

0800bf14 <_cleanup_r>:
 800bf14:	4901      	ldr	r1, [pc, #4]	; (800bf1c <_cleanup_r+0x8>)
 800bf16:	f000 b8af 	b.w	800c078 <_fwalk_reent>
 800bf1a:	bf00      	nop
 800bf1c:	0800be55 	.word	0x0800be55

0800bf20 <__sfmoreglue>:
 800bf20:	b570      	push	{r4, r5, r6, lr}
 800bf22:	1e4a      	subs	r2, r1, #1
 800bf24:	2568      	movs	r5, #104	; 0x68
 800bf26:	4355      	muls	r5, r2
 800bf28:	460e      	mov	r6, r1
 800bf2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bf2e:	f7ff fa87 	bl	800b440 <_malloc_r>
 800bf32:	4604      	mov	r4, r0
 800bf34:	b140      	cbz	r0, 800bf48 <__sfmoreglue+0x28>
 800bf36:	2100      	movs	r1, #0
 800bf38:	e9c0 1600 	strd	r1, r6, [r0]
 800bf3c:	300c      	adds	r0, #12
 800bf3e:	60a0      	str	r0, [r4, #8]
 800bf40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bf44:	f7fd fb78 	bl	8009638 <memset>
 800bf48:	4620      	mov	r0, r4
 800bf4a:	bd70      	pop	{r4, r5, r6, pc}

0800bf4c <__sfp_lock_acquire>:
 800bf4c:	4801      	ldr	r0, [pc, #4]	; (800bf54 <__sfp_lock_acquire+0x8>)
 800bf4e:	f000 b8b3 	b.w	800c0b8 <__retarget_lock_acquire_recursive>
 800bf52:	bf00      	nop
 800bf54:	20000598 	.word	0x20000598

0800bf58 <__sfp_lock_release>:
 800bf58:	4801      	ldr	r0, [pc, #4]	; (800bf60 <__sfp_lock_release+0x8>)
 800bf5a:	f000 b8ae 	b.w	800c0ba <__retarget_lock_release_recursive>
 800bf5e:	bf00      	nop
 800bf60:	20000598 	.word	0x20000598

0800bf64 <__sinit_lock_acquire>:
 800bf64:	4801      	ldr	r0, [pc, #4]	; (800bf6c <__sinit_lock_acquire+0x8>)
 800bf66:	f000 b8a7 	b.w	800c0b8 <__retarget_lock_acquire_recursive>
 800bf6a:	bf00      	nop
 800bf6c:	20000593 	.word	0x20000593

0800bf70 <__sinit_lock_release>:
 800bf70:	4801      	ldr	r0, [pc, #4]	; (800bf78 <__sinit_lock_release+0x8>)
 800bf72:	f000 b8a2 	b.w	800c0ba <__retarget_lock_release_recursive>
 800bf76:	bf00      	nop
 800bf78:	20000593 	.word	0x20000593

0800bf7c <__sinit>:
 800bf7c:	b510      	push	{r4, lr}
 800bf7e:	4604      	mov	r4, r0
 800bf80:	f7ff fff0 	bl	800bf64 <__sinit_lock_acquire>
 800bf84:	69a3      	ldr	r3, [r4, #24]
 800bf86:	b11b      	cbz	r3, 800bf90 <__sinit+0x14>
 800bf88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf8c:	f7ff bff0 	b.w	800bf70 <__sinit_lock_release>
 800bf90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bf94:	6523      	str	r3, [r4, #80]	; 0x50
 800bf96:	4b13      	ldr	r3, [pc, #76]	; (800bfe4 <__sinit+0x68>)
 800bf98:	4a13      	ldr	r2, [pc, #76]	; (800bfe8 <__sinit+0x6c>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	62a2      	str	r2, [r4, #40]	; 0x28
 800bf9e:	42a3      	cmp	r3, r4
 800bfa0:	bf04      	itt	eq
 800bfa2:	2301      	moveq	r3, #1
 800bfa4:	61a3      	streq	r3, [r4, #24]
 800bfa6:	4620      	mov	r0, r4
 800bfa8:	f000 f820 	bl	800bfec <__sfp>
 800bfac:	6060      	str	r0, [r4, #4]
 800bfae:	4620      	mov	r0, r4
 800bfb0:	f000 f81c 	bl	800bfec <__sfp>
 800bfb4:	60a0      	str	r0, [r4, #8]
 800bfb6:	4620      	mov	r0, r4
 800bfb8:	f000 f818 	bl	800bfec <__sfp>
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	60e0      	str	r0, [r4, #12]
 800bfc0:	2104      	movs	r1, #4
 800bfc2:	6860      	ldr	r0, [r4, #4]
 800bfc4:	f7ff ff82 	bl	800becc <std>
 800bfc8:	68a0      	ldr	r0, [r4, #8]
 800bfca:	2201      	movs	r2, #1
 800bfcc:	2109      	movs	r1, #9
 800bfce:	f7ff ff7d 	bl	800becc <std>
 800bfd2:	68e0      	ldr	r0, [r4, #12]
 800bfd4:	2202      	movs	r2, #2
 800bfd6:	2112      	movs	r1, #18
 800bfd8:	f7ff ff78 	bl	800becc <std>
 800bfdc:	2301      	movs	r3, #1
 800bfde:	61a3      	str	r3, [r4, #24]
 800bfe0:	e7d2      	b.n	800bf88 <__sinit+0xc>
 800bfe2:	bf00      	nop
 800bfe4:	0800c804 	.word	0x0800c804
 800bfe8:	0800bf15 	.word	0x0800bf15

0800bfec <__sfp>:
 800bfec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfee:	4607      	mov	r7, r0
 800bff0:	f7ff ffac 	bl	800bf4c <__sfp_lock_acquire>
 800bff4:	4b1e      	ldr	r3, [pc, #120]	; (800c070 <__sfp+0x84>)
 800bff6:	681e      	ldr	r6, [r3, #0]
 800bff8:	69b3      	ldr	r3, [r6, #24]
 800bffa:	b913      	cbnz	r3, 800c002 <__sfp+0x16>
 800bffc:	4630      	mov	r0, r6
 800bffe:	f7ff ffbd 	bl	800bf7c <__sinit>
 800c002:	3648      	adds	r6, #72	; 0x48
 800c004:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c008:	3b01      	subs	r3, #1
 800c00a:	d503      	bpl.n	800c014 <__sfp+0x28>
 800c00c:	6833      	ldr	r3, [r6, #0]
 800c00e:	b30b      	cbz	r3, 800c054 <__sfp+0x68>
 800c010:	6836      	ldr	r6, [r6, #0]
 800c012:	e7f7      	b.n	800c004 <__sfp+0x18>
 800c014:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c018:	b9d5      	cbnz	r5, 800c050 <__sfp+0x64>
 800c01a:	4b16      	ldr	r3, [pc, #88]	; (800c074 <__sfp+0x88>)
 800c01c:	60e3      	str	r3, [r4, #12]
 800c01e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c022:	6665      	str	r5, [r4, #100]	; 0x64
 800c024:	f000 f847 	bl	800c0b6 <__retarget_lock_init_recursive>
 800c028:	f7ff ff96 	bl	800bf58 <__sfp_lock_release>
 800c02c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c030:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c034:	6025      	str	r5, [r4, #0]
 800c036:	61a5      	str	r5, [r4, #24]
 800c038:	2208      	movs	r2, #8
 800c03a:	4629      	mov	r1, r5
 800c03c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c040:	f7fd fafa 	bl	8009638 <memset>
 800c044:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c048:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c04c:	4620      	mov	r0, r4
 800c04e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c050:	3468      	adds	r4, #104	; 0x68
 800c052:	e7d9      	b.n	800c008 <__sfp+0x1c>
 800c054:	2104      	movs	r1, #4
 800c056:	4638      	mov	r0, r7
 800c058:	f7ff ff62 	bl	800bf20 <__sfmoreglue>
 800c05c:	4604      	mov	r4, r0
 800c05e:	6030      	str	r0, [r6, #0]
 800c060:	2800      	cmp	r0, #0
 800c062:	d1d5      	bne.n	800c010 <__sfp+0x24>
 800c064:	f7ff ff78 	bl	800bf58 <__sfp_lock_release>
 800c068:	230c      	movs	r3, #12
 800c06a:	603b      	str	r3, [r7, #0]
 800c06c:	e7ee      	b.n	800c04c <__sfp+0x60>
 800c06e:	bf00      	nop
 800c070:	0800c804 	.word	0x0800c804
 800c074:	ffff0001 	.word	0xffff0001

0800c078 <_fwalk_reent>:
 800c078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c07c:	4606      	mov	r6, r0
 800c07e:	4688      	mov	r8, r1
 800c080:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c084:	2700      	movs	r7, #0
 800c086:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c08a:	f1b9 0901 	subs.w	r9, r9, #1
 800c08e:	d505      	bpl.n	800c09c <_fwalk_reent+0x24>
 800c090:	6824      	ldr	r4, [r4, #0]
 800c092:	2c00      	cmp	r4, #0
 800c094:	d1f7      	bne.n	800c086 <_fwalk_reent+0xe>
 800c096:	4638      	mov	r0, r7
 800c098:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c09c:	89ab      	ldrh	r3, [r5, #12]
 800c09e:	2b01      	cmp	r3, #1
 800c0a0:	d907      	bls.n	800c0b2 <_fwalk_reent+0x3a>
 800c0a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c0a6:	3301      	adds	r3, #1
 800c0a8:	d003      	beq.n	800c0b2 <_fwalk_reent+0x3a>
 800c0aa:	4629      	mov	r1, r5
 800c0ac:	4630      	mov	r0, r6
 800c0ae:	47c0      	blx	r8
 800c0b0:	4307      	orrs	r7, r0
 800c0b2:	3568      	adds	r5, #104	; 0x68
 800c0b4:	e7e9      	b.n	800c08a <_fwalk_reent+0x12>

0800c0b6 <__retarget_lock_init_recursive>:
 800c0b6:	4770      	bx	lr

0800c0b8 <__retarget_lock_acquire_recursive>:
 800c0b8:	4770      	bx	lr

0800c0ba <__retarget_lock_release_recursive>:
 800c0ba:	4770      	bx	lr

0800c0bc <__swhatbuf_r>:
 800c0bc:	b570      	push	{r4, r5, r6, lr}
 800c0be:	460e      	mov	r6, r1
 800c0c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0c4:	2900      	cmp	r1, #0
 800c0c6:	b096      	sub	sp, #88	; 0x58
 800c0c8:	4614      	mov	r4, r2
 800c0ca:	461d      	mov	r5, r3
 800c0cc:	da07      	bge.n	800c0de <__swhatbuf_r+0x22>
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	602b      	str	r3, [r5, #0]
 800c0d2:	89b3      	ldrh	r3, [r6, #12]
 800c0d4:	061a      	lsls	r2, r3, #24
 800c0d6:	d410      	bmi.n	800c0fa <__swhatbuf_r+0x3e>
 800c0d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0dc:	e00e      	b.n	800c0fc <__swhatbuf_r+0x40>
 800c0de:	466a      	mov	r2, sp
 800c0e0:	f000 f902 	bl	800c2e8 <_fstat_r>
 800c0e4:	2800      	cmp	r0, #0
 800c0e6:	dbf2      	blt.n	800c0ce <__swhatbuf_r+0x12>
 800c0e8:	9a01      	ldr	r2, [sp, #4]
 800c0ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c0ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c0f2:	425a      	negs	r2, r3
 800c0f4:	415a      	adcs	r2, r3
 800c0f6:	602a      	str	r2, [r5, #0]
 800c0f8:	e7ee      	b.n	800c0d8 <__swhatbuf_r+0x1c>
 800c0fa:	2340      	movs	r3, #64	; 0x40
 800c0fc:	2000      	movs	r0, #0
 800c0fe:	6023      	str	r3, [r4, #0]
 800c100:	b016      	add	sp, #88	; 0x58
 800c102:	bd70      	pop	{r4, r5, r6, pc}

0800c104 <__smakebuf_r>:
 800c104:	898b      	ldrh	r3, [r1, #12]
 800c106:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c108:	079d      	lsls	r5, r3, #30
 800c10a:	4606      	mov	r6, r0
 800c10c:	460c      	mov	r4, r1
 800c10e:	d507      	bpl.n	800c120 <__smakebuf_r+0x1c>
 800c110:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c114:	6023      	str	r3, [r4, #0]
 800c116:	6123      	str	r3, [r4, #16]
 800c118:	2301      	movs	r3, #1
 800c11a:	6163      	str	r3, [r4, #20]
 800c11c:	b002      	add	sp, #8
 800c11e:	bd70      	pop	{r4, r5, r6, pc}
 800c120:	ab01      	add	r3, sp, #4
 800c122:	466a      	mov	r2, sp
 800c124:	f7ff ffca 	bl	800c0bc <__swhatbuf_r>
 800c128:	9900      	ldr	r1, [sp, #0]
 800c12a:	4605      	mov	r5, r0
 800c12c:	4630      	mov	r0, r6
 800c12e:	f7ff f987 	bl	800b440 <_malloc_r>
 800c132:	b948      	cbnz	r0, 800c148 <__smakebuf_r+0x44>
 800c134:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c138:	059a      	lsls	r2, r3, #22
 800c13a:	d4ef      	bmi.n	800c11c <__smakebuf_r+0x18>
 800c13c:	f023 0303 	bic.w	r3, r3, #3
 800c140:	f043 0302 	orr.w	r3, r3, #2
 800c144:	81a3      	strh	r3, [r4, #12]
 800c146:	e7e3      	b.n	800c110 <__smakebuf_r+0xc>
 800c148:	4b0d      	ldr	r3, [pc, #52]	; (800c180 <__smakebuf_r+0x7c>)
 800c14a:	62b3      	str	r3, [r6, #40]	; 0x28
 800c14c:	89a3      	ldrh	r3, [r4, #12]
 800c14e:	6020      	str	r0, [r4, #0]
 800c150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c154:	81a3      	strh	r3, [r4, #12]
 800c156:	9b00      	ldr	r3, [sp, #0]
 800c158:	6163      	str	r3, [r4, #20]
 800c15a:	9b01      	ldr	r3, [sp, #4]
 800c15c:	6120      	str	r0, [r4, #16]
 800c15e:	b15b      	cbz	r3, 800c178 <__smakebuf_r+0x74>
 800c160:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c164:	4630      	mov	r0, r6
 800c166:	f000 f8d1 	bl	800c30c <_isatty_r>
 800c16a:	b128      	cbz	r0, 800c178 <__smakebuf_r+0x74>
 800c16c:	89a3      	ldrh	r3, [r4, #12]
 800c16e:	f023 0303 	bic.w	r3, r3, #3
 800c172:	f043 0301 	orr.w	r3, r3, #1
 800c176:	81a3      	strh	r3, [r4, #12]
 800c178:	89a0      	ldrh	r0, [r4, #12]
 800c17a:	4305      	orrs	r5, r0
 800c17c:	81a5      	strh	r5, [r4, #12]
 800c17e:	e7cd      	b.n	800c11c <__smakebuf_r+0x18>
 800c180:	0800bf15 	.word	0x0800bf15

0800c184 <_malloc_usable_size_r>:
 800c184:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c188:	1f18      	subs	r0, r3, #4
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	bfbc      	itt	lt
 800c18e:	580b      	ldrlt	r3, [r1, r0]
 800c190:	18c0      	addlt	r0, r0, r3
 800c192:	4770      	bx	lr

0800c194 <_raise_r>:
 800c194:	291f      	cmp	r1, #31
 800c196:	b538      	push	{r3, r4, r5, lr}
 800c198:	4604      	mov	r4, r0
 800c19a:	460d      	mov	r5, r1
 800c19c:	d904      	bls.n	800c1a8 <_raise_r+0x14>
 800c19e:	2316      	movs	r3, #22
 800c1a0:	6003      	str	r3, [r0, #0]
 800c1a2:	f04f 30ff 	mov.w	r0, #4294967295
 800c1a6:	bd38      	pop	{r3, r4, r5, pc}
 800c1a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c1aa:	b112      	cbz	r2, 800c1b2 <_raise_r+0x1e>
 800c1ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c1b0:	b94b      	cbnz	r3, 800c1c6 <_raise_r+0x32>
 800c1b2:	4620      	mov	r0, r4
 800c1b4:	f000 f830 	bl	800c218 <_getpid_r>
 800c1b8:	462a      	mov	r2, r5
 800c1ba:	4601      	mov	r1, r0
 800c1bc:	4620      	mov	r0, r4
 800c1be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c1c2:	f000 b817 	b.w	800c1f4 <_kill_r>
 800c1c6:	2b01      	cmp	r3, #1
 800c1c8:	d00a      	beq.n	800c1e0 <_raise_r+0x4c>
 800c1ca:	1c59      	adds	r1, r3, #1
 800c1cc:	d103      	bne.n	800c1d6 <_raise_r+0x42>
 800c1ce:	2316      	movs	r3, #22
 800c1d0:	6003      	str	r3, [r0, #0]
 800c1d2:	2001      	movs	r0, #1
 800c1d4:	e7e7      	b.n	800c1a6 <_raise_r+0x12>
 800c1d6:	2400      	movs	r4, #0
 800c1d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c1dc:	4628      	mov	r0, r5
 800c1de:	4798      	blx	r3
 800c1e0:	2000      	movs	r0, #0
 800c1e2:	e7e0      	b.n	800c1a6 <_raise_r+0x12>

0800c1e4 <raise>:
 800c1e4:	4b02      	ldr	r3, [pc, #8]	; (800c1f0 <raise+0xc>)
 800c1e6:	4601      	mov	r1, r0
 800c1e8:	6818      	ldr	r0, [r3, #0]
 800c1ea:	f7ff bfd3 	b.w	800c194 <_raise_r>
 800c1ee:	bf00      	nop
 800c1f0:	2000000c 	.word	0x2000000c

0800c1f4 <_kill_r>:
 800c1f4:	b538      	push	{r3, r4, r5, lr}
 800c1f6:	4d07      	ldr	r5, [pc, #28]	; (800c214 <_kill_r+0x20>)
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	4604      	mov	r4, r0
 800c1fc:	4608      	mov	r0, r1
 800c1fe:	4611      	mov	r1, r2
 800c200:	602b      	str	r3, [r5, #0]
 800c202:	f7f5 fdb1 	bl	8001d68 <_kill>
 800c206:	1c43      	adds	r3, r0, #1
 800c208:	d102      	bne.n	800c210 <_kill_r+0x1c>
 800c20a:	682b      	ldr	r3, [r5, #0]
 800c20c:	b103      	cbz	r3, 800c210 <_kill_r+0x1c>
 800c20e:	6023      	str	r3, [r4, #0]
 800c210:	bd38      	pop	{r3, r4, r5, pc}
 800c212:	bf00      	nop
 800c214:	2000058c 	.word	0x2000058c

0800c218 <_getpid_r>:
 800c218:	f7f5 bd9e 	b.w	8001d58 <_getpid>

0800c21c <__sread>:
 800c21c:	b510      	push	{r4, lr}
 800c21e:	460c      	mov	r4, r1
 800c220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c224:	f000 f894 	bl	800c350 <_read_r>
 800c228:	2800      	cmp	r0, #0
 800c22a:	bfab      	itete	ge
 800c22c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c22e:	89a3      	ldrhlt	r3, [r4, #12]
 800c230:	181b      	addge	r3, r3, r0
 800c232:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c236:	bfac      	ite	ge
 800c238:	6563      	strge	r3, [r4, #84]	; 0x54
 800c23a:	81a3      	strhlt	r3, [r4, #12]
 800c23c:	bd10      	pop	{r4, pc}

0800c23e <__swrite>:
 800c23e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c242:	461f      	mov	r7, r3
 800c244:	898b      	ldrh	r3, [r1, #12]
 800c246:	05db      	lsls	r3, r3, #23
 800c248:	4605      	mov	r5, r0
 800c24a:	460c      	mov	r4, r1
 800c24c:	4616      	mov	r6, r2
 800c24e:	d505      	bpl.n	800c25c <__swrite+0x1e>
 800c250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c254:	2302      	movs	r3, #2
 800c256:	2200      	movs	r2, #0
 800c258:	f000 f868 	bl	800c32c <_lseek_r>
 800c25c:	89a3      	ldrh	r3, [r4, #12]
 800c25e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c262:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c266:	81a3      	strh	r3, [r4, #12]
 800c268:	4632      	mov	r2, r6
 800c26a:	463b      	mov	r3, r7
 800c26c:	4628      	mov	r0, r5
 800c26e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c272:	f000 b817 	b.w	800c2a4 <_write_r>

0800c276 <__sseek>:
 800c276:	b510      	push	{r4, lr}
 800c278:	460c      	mov	r4, r1
 800c27a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c27e:	f000 f855 	bl	800c32c <_lseek_r>
 800c282:	1c43      	adds	r3, r0, #1
 800c284:	89a3      	ldrh	r3, [r4, #12]
 800c286:	bf15      	itete	ne
 800c288:	6560      	strne	r0, [r4, #84]	; 0x54
 800c28a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c28e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c292:	81a3      	strheq	r3, [r4, #12]
 800c294:	bf18      	it	ne
 800c296:	81a3      	strhne	r3, [r4, #12]
 800c298:	bd10      	pop	{r4, pc}

0800c29a <__sclose>:
 800c29a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c29e:	f000 b813 	b.w	800c2c8 <_close_r>
	...

0800c2a4 <_write_r>:
 800c2a4:	b538      	push	{r3, r4, r5, lr}
 800c2a6:	4d07      	ldr	r5, [pc, #28]	; (800c2c4 <_write_r+0x20>)
 800c2a8:	4604      	mov	r4, r0
 800c2aa:	4608      	mov	r0, r1
 800c2ac:	4611      	mov	r1, r2
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	602a      	str	r2, [r5, #0]
 800c2b2:	461a      	mov	r2, r3
 800c2b4:	f7f5 fd8f 	bl	8001dd6 <_write>
 800c2b8:	1c43      	adds	r3, r0, #1
 800c2ba:	d102      	bne.n	800c2c2 <_write_r+0x1e>
 800c2bc:	682b      	ldr	r3, [r5, #0]
 800c2be:	b103      	cbz	r3, 800c2c2 <_write_r+0x1e>
 800c2c0:	6023      	str	r3, [r4, #0]
 800c2c2:	bd38      	pop	{r3, r4, r5, pc}
 800c2c4:	2000058c 	.word	0x2000058c

0800c2c8 <_close_r>:
 800c2c8:	b538      	push	{r3, r4, r5, lr}
 800c2ca:	4d06      	ldr	r5, [pc, #24]	; (800c2e4 <_close_r+0x1c>)
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	4604      	mov	r4, r0
 800c2d0:	4608      	mov	r0, r1
 800c2d2:	602b      	str	r3, [r5, #0]
 800c2d4:	f7f5 fd9b 	bl	8001e0e <_close>
 800c2d8:	1c43      	adds	r3, r0, #1
 800c2da:	d102      	bne.n	800c2e2 <_close_r+0x1a>
 800c2dc:	682b      	ldr	r3, [r5, #0]
 800c2de:	b103      	cbz	r3, 800c2e2 <_close_r+0x1a>
 800c2e0:	6023      	str	r3, [r4, #0]
 800c2e2:	bd38      	pop	{r3, r4, r5, pc}
 800c2e4:	2000058c 	.word	0x2000058c

0800c2e8 <_fstat_r>:
 800c2e8:	b538      	push	{r3, r4, r5, lr}
 800c2ea:	4d07      	ldr	r5, [pc, #28]	; (800c308 <_fstat_r+0x20>)
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	4604      	mov	r4, r0
 800c2f0:	4608      	mov	r0, r1
 800c2f2:	4611      	mov	r1, r2
 800c2f4:	602b      	str	r3, [r5, #0]
 800c2f6:	f7f5 fd96 	bl	8001e26 <_fstat>
 800c2fa:	1c43      	adds	r3, r0, #1
 800c2fc:	d102      	bne.n	800c304 <_fstat_r+0x1c>
 800c2fe:	682b      	ldr	r3, [r5, #0]
 800c300:	b103      	cbz	r3, 800c304 <_fstat_r+0x1c>
 800c302:	6023      	str	r3, [r4, #0]
 800c304:	bd38      	pop	{r3, r4, r5, pc}
 800c306:	bf00      	nop
 800c308:	2000058c 	.word	0x2000058c

0800c30c <_isatty_r>:
 800c30c:	b538      	push	{r3, r4, r5, lr}
 800c30e:	4d06      	ldr	r5, [pc, #24]	; (800c328 <_isatty_r+0x1c>)
 800c310:	2300      	movs	r3, #0
 800c312:	4604      	mov	r4, r0
 800c314:	4608      	mov	r0, r1
 800c316:	602b      	str	r3, [r5, #0]
 800c318:	f7f5 fd95 	bl	8001e46 <_isatty>
 800c31c:	1c43      	adds	r3, r0, #1
 800c31e:	d102      	bne.n	800c326 <_isatty_r+0x1a>
 800c320:	682b      	ldr	r3, [r5, #0]
 800c322:	b103      	cbz	r3, 800c326 <_isatty_r+0x1a>
 800c324:	6023      	str	r3, [r4, #0]
 800c326:	bd38      	pop	{r3, r4, r5, pc}
 800c328:	2000058c 	.word	0x2000058c

0800c32c <_lseek_r>:
 800c32c:	b538      	push	{r3, r4, r5, lr}
 800c32e:	4d07      	ldr	r5, [pc, #28]	; (800c34c <_lseek_r+0x20>)
 800c330:	4604      	mov	r4, r0
 800c332:	4608      	mov	r0, r1
 800c334:	4611      	mov	r1, r2
 800c336:	2200      	movs	r2, #0
 800c338:	602a      	str	r2, [r5, #0]
 800c33a:	461a      	mov	r2, r3
 800c33c:	f7f5 fd8e 	bl	8001e5c <_lseek>
 800c340:	1c43      	adds	r3, r0, #1
 800c342:	d102      	bne.n	800c34a <_lseek_r+0x1e>
 800c344:	682b      	ldr	r3, [r5, #0]
 800c346:	b103      	cbz	r3, 800c34a <_lseek_r+0x1e>
 800c348:	6023      	str	r3, [r4, #0]
 800c34a:	bd38      	pop	{r3, r4, r5, pc}
 800c34c:	2000058c 	.word	0x2000058c

0800c350 <_read_r>:
 800c350:	b538      	push	{r3, r4, r5, lr}
 800c352:	4d07      	ldr	r5, [pc, #28]	; (800c370 <_read_r+0x20>)
 800c354:	4604      	mov	r4, r0
 800c356:	4608      	mov	r0, r1
 800c358:	4611      	mov	r1, r2
 800c35a:	2200      	movs	r2, #0
 800c35c:	602a      	str	r2, [r5, #0]
 800c35e:	461a      	mov	r2, r3
 800c360:	f7f5 fd1c 	bl	8001d9c <_read>
 800c364:	1c43      	adds	r3, r0, #1
 800c366:	d102      	bne.n	800c36e <_read_r+0x1e>
 800c368:	682b      	ldr	r3, [r5, #0]
 800c36a:	b103      	cbz	r3, 800c36e <_read_r+0x1e>
 800c36c:	6023      	str	r3, [r4, #0]
 800c36e:	bd38      	pop	{r3, r4, r5, pc}
 800c370:	2000058c 	.word	0x2000058c
 800c374:	00000000 	.word	0x00000000

0800c378 <log>:
 800c378:	b538      	push	{r3, r4, r5, lr}
 800c37a:	ed2d 8b02 	vpush	{d8}
 800c37e:	ec55 4b10 	vmov	r4, r5, d0
 800c382:	f000 f841 	bl	800c408 <__ieee754_log>
 800c386:	4b1e      	ldr	r3, [pc, #120]	; (800c400 <log+0x88>)
 800c388:	eeb0 8a40 	vmov.f32	s16, s0
 800c38c:	eef0 8a60 	vmov.f32	s17, s1
 800c390:	f993 3000 	ldrsb.w	r3, [r3]
 800c394:	3301      	adds	r3, #1
 800c396:	d01a      	beq.n	800c3ce <log+0x56>
 800c398:	4622      	mov	r2, r4
 800c39a:	462b      	mov	r3, r5
 800c39c:	4620      	mov	r0, r4
 800c39e:	4629      	mov	r1, r5
 800c3a0:	f7f4 fbec 	bl	8000b7c <__aeabi_dcmpun>
 800c3a4:	b998      	cbnz	r0, 800c3ce <log+0x56>
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	4620      	mov	r0, r4
 800c3ac:	4629      	mov	r1, r5
 800c3ae:	f7f4 fbdb 	bl	8000b68 <__aeabi_dcmpgt>
 800c3b2:	b960      	cbnz	r0, 800c3ce <log+0x56>
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	4620      	mov	r0, r4
 800c3ba:	4629      	mov	r1, r5
 800c3bc:	f7f4 fbac 	bl	8000b18 <__aeabi_dcmpeq>
 800c3c0:	b160      	cbz	r0, 800c3dc <log+0x64>
 800c3c2:	f7fd f90f 	bl	80095e4 <__errno>
 800c3c6:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 800c3f8 <log+0x80>
 800c3ca:	2322      	movs	r3, #34	; 0x22
 800c3cc:	6003      	str	r3, [r0, #0]
 800c3ce:	eeb0 0a48 	vmov.f32	s0, s16
 800c3d2:	eef0 0a68 	vmov.f32	s1, s17
 800c3d6:	ecbd 8b02 	vpop	{d8}
 800c3da:	bd38      	pop	{r3, r4, r5, pc}
 800c3dc:	f7fd f902 	bl	80095e4 <__errno>
 800c3e0:	ecbd 8b02 	vpop	{d8}
 800c3e4:	2321      	movs	r3, #33	; 0x21
 800c3e6:	6003      	str	r3, [r0, #0]
 800c3e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3ec:	4805      	ldr	r0, [pc, #20]	; (800c404 <log+0x8c>)
 800c3ee:	f000 b9c7 	b.w	800c780 <nan>
 800c3f2:	bf00      	nop
 800c3f4:	f3af 8000 	nop.w
 800c3f8:	00000000 	.word	0x00000000
 800c3fc:	fff00000 	.word	0xfff00000
 800c400:	200001dc 	.word	0x200001dc
 800c404:	0800ca78 	.word	0x0800ca78

0800c408 <__ieee754_log>:
 800c408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c40c:	ec51 0b10 	vmov	r0, r1, d0
 800c410:	ed2d 8b04 	vpush	{d8-d9}
 800c414:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800c418:	b083      	sub	sp, #12
 800c41a:	460d      	mov	r5, r1
 800c41c:	da29      	bge.n	800c472 <__ieee754_log+0x6a>
 800c41e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c422:	4303      	orrs	r3, r0
 800c424:	ee10 2a10 	vmov	r2, s0
 800c428:	d10c      	bne.n	800c444 <__ieee754_log+0x3c>
 800c42a:	49cf      	ldr	r1, [pc, #828]	; (800c768 <__ieee754_log+0x360>)
 800c42c:	2200      	movs	r2, #0
 800c42e:	2300      	movs	r3, #0
 800c430:	2000      	movs	r0, #0
 800c432:	f7f4 fa33 	bl	800089c <__aeabi_ddiv>
 800c436:	ec41 0b10 	vmov	d0, r0, r1
 800c43a:	b003      	add	sp, #12
 800c43c:	ecbd 8b04 	vpop	{d8-d9}
 800c440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c444:	2900      	cmp	r1, #0
 800c446:	da05      	bge.n	800c454 <__ieee754_log+0x4c>
 800c448:	460b      	mov	r3, r1
 800c44a:	f7f3 ff45 	bl	80002d8 <__aeabi_dsub>
 800c44e:	2200      	movs	r2, #0
 800c450:	2300      	movs	r3, #0
 800c452:	e7ee      	b.n	800c432 <__ieee754_log+0x2a>
 800c454:	4bc5      	ldr	r3, [pc, #788]	; (800c76c <__ieee754_log+0x364>)
 800c456:	2200      	movs	r2, #0
 800c458:	f7f4 f8f6 	bl	8000648 <__aeabi_dmul>
 800c45c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800c460:	460d      	mov	r5, r1
 800c462:	4ac3      	ldr	r2, [pc, #780]	; (800c770 <__ieee754_log+0x368>)
 800c464:	4295      	cmp	r5, r2
 800c466:	dd06      	ble.n	800c476 <__ieee754_log+0x6e>
 800c468:	4602      	mov	r2, r0
 800c46a:	460b      	mov	r3, r1
 800c46c:	f7f3 ff36 	bl	80002dc <__adddf3>
 800c470:	e7e1      	b.n	800c436 <__ieee754_log+0x2e>
 800c472:	2300      	movs	r3, #0
 800c474:	e7f5      	b.n	800c462 <__ieee754_log+0x5a>
 800c476:	152c      	asrs	r4, r5, #20
 800c478:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800c47c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800c480:	441c      	add	r4, r3
 800c482:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800c486:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800c48a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c48e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800c492:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800c496:	ea42 0105 	orr.w	r1, r2, r5
 800c49a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800c49e:	2200      	movs	r2, #0
 800c4a0:	4bb4      	ldr	r3, [pc, #720]	; (800c774 <__ieee754_log+0x36c>)
 800c4a2:	f7f3 ff19 	bl	80002d8 <__aeabi_dsub>
 800c4a6:	1cab      	adds	r3, r5, #2
 800c4a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c4ac:	2b02      	cmp	r3, #2
 800c4ae:	4682      	mov	sl, r0
 800c4b0:	468b      	mov	fp, r1
 800c4b2:	f04f 0200 	mov.w	r2, #0
 800c4b6:	dc53      	bgt.n	800c560 <__ieee754_log+0x158>
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	f7f4 fb2d 	bl	8000b18 <__aeabi_dcmpeq>
 800c4be:	b1d0      	cbz	r0, 800c4f6 <__ieee754_log+0xee>
 800c4c0:	2c00      	cmp	r4, #0
 800c4c2:	f000 8122 	beq.w	800c70a <__ieee754_log+0x302>
 800c4c6:	4620      	mov	r0, r4
 800c4c8:	f7f4 f854 	bl	8000574 <__aeabi_i2d>
 800c4cc:	a390      	add	r3, pc, #576	; (adr r3, 800c710 <__ieee754_log+0x308>)
 800c4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4d2:	4606      	mov	r6, r0
 800c4d4:	460f      	mov	r7, r1
 800c4d6:	f7f4 f8b7 	bl	8000648 <__aeabi_dmul>
 800c4da:	a38f      	add	r3, pc, #572	; (adr r3, 800c718 <__ieee754_log+0x310>)
 800c4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4e0:	4604      	mov	r4, r0
 800c4e2:	460d      	mov	r5, r1
 800c4e4:	4630      	mov	r0, r6
 800c4e6:	4639      	mov	r1, r7
 800c4e8:	f7f4 f8ae 	bl	8000648 <__aeabi_dmul>
 800c4ec:	4602      	mov	r2, r0
 800c4ee:	460b      	mov	r3, r1
 800c4f0:	4620      	mov	r0, r4
 800c4f2:	4629      	mov	r1, r5
 800c4f4:	e7ba      	b.n	800c46c <__ieee754_log+0x64>
 800c4f6:	a38a      	add	r3, pc, #552	; (adr r3, 800c720 <__ieee754_log+0x318>)
 800c4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4fc:	4650      	mov	r0, sl
 800c4fe:	4659      	mov	r1, fp
 800c500:	f7f4 f8a2 	bl	8000648 <__aeabi_dmul>
 800c504:	4602      	mov	r2, r0
 800c506:	460b      	mov	r3, r1
 800c508:	2000      	movs	r0, #0
 800c50a:	499b      	ldr	r1, [pc, #620]	; (800c778 <__ieee754_log+0x370>)
 800c50c:	f7f3 fee4 	bl	80002d8 <__aeabi_dsub>
 800c510:	4652      	mov	r2, sl
 800c512:	4606      	mov	r6, r0
 800c514:	460f      	mov	r7, r1
 800c516:	465b      	mov	r3, fp
 800c518:	4650      	mov	r0, sl
 800c51a:	4659      	mov	r1, fp
 800c51c:	f7f4 f894 	bl	8000648 <__aeabi_dmul>
 800c520:	4602      	mov	r2, r0
 800c522:	460b      	mov	r3, r1
 800c524:	4630      	mov	r0, r6
 800c526:	4639      	mov	r1, r7
 800c528:	f7f4 f88e 	bl	8000648 <__aeabi_dmul>
 800c52c:	4606      	mov	r6, r0
 800c52e:	460f      	mov	r7, r1
 800c530:	b914      	cbnz	r4, 800c538 <__ieee754_log+0x130>
 800c532:	4632      	mov	r2, r6
 800c534:	463b      	mov	r3, r7
 800c536:	e0a2      	b.n	800c67e <__ieee754_log+0x276>
 800c538:	4620      	mov	r0, r4
 800c53a:	f7f4 f81b 	bl	8000574 <__aeabi_i2d>
 800c53e:	a374      	add	r3, pc, #464	; (adr r3, 800c710 <__ieee754_log+0x308>)
 800c540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c544:	4680      	mov	r8, r0
 800c546:	4689      	mov	r9, r1
 800c548:	f7f4 f87e 	bl	8000648 <__aeabi_dmul>
 800c54c:	a372      	add	r3, pc, #456	; (adr r3, 800c718 <__ieee754_log+0x310>)
 800c54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c552:	4604      	mov	r4, r0
 800c554:	460d      	mov	r5, r1
 800c556:	4640      	mov	r0, r8
 800c558:	4649      	mov	r1, r9
 800c55a:	f7f4 f875 	bl	8000648 <__aeabi_dmul>
 800c55e:	e0a7      	b.n	800c6b0 <__ieee754_log+0x2a8>
 800c560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c564:	f7f3 feba 	bl	80002dc <__adddf3>
 800c568:	4602      	mov	r2, r0
 800c56a:	460b      	mov	r3, r1
 800c56c:	4650      	mov	r0, sl
 800c56e:	4659      	mov	r1, fp
 800c570:	f7f4 f994 	bl	800089c <__aeabi_ddiv>
 800c574:	ec41 0b18 	vmov	d8, r0, r1
 800c578:	4620      	mov	r0, r4
 800c57a:	f7f3 fffb 	bl	8000574 <__aeabi_i2d>
 800c57e:	ec53 2b18 	vmov	r2, r3, d8
 800c582:	ec41 0b19 	vmov	d9, r0, r1
 800c586:	ec51 0b18 	vmov	r0, r1, d8
 800c58a:	f7f4 f85d 	bl	8000648 <__aeabi_dmul>
 800c58e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800c592:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800c596:	9301      	str	r3, [sp, #4]
 800c598:	4602      	mov	r2, r0
 800c59a:	460b      	mov	r3, r1
 800c59c:	4680      	mov	r8, r0
 800c59e:	4689      	mov	r9, r1
 800c5a0:	f7f4 f852 	bl	8000648 <__aeabi_dmul>
 800c5a4:	a360      	add	r3, pc, #384	; (adr r3, 800c728 <__ieee754_log+0x320>)
 800c5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5aa:	4606      	mov	r6, r0
 800c5ac:	460f      	mov	r7, r1
 800c5ae:	f7f4 f84b 	bl	8000648 <__aeabi_dmul>
 800c5b2:	a35f      	add	r3, pc, #380	; (adr r3, 800c730 <__ieee754_log+0x328>)
 800c5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5b8:	f7f3 fe90 	bl	80002dc <__adddf3>
 800c5bc:	4632      	mov	r2, r6
 800c5be:	463b      	mov	r3, r7
 800c5c0:	f7f4 f842 	bl	8000648 <__aeabi_dmul>
 800c5c4:	a35c      	add	r3, pc, #368	; (adr r3, 800c738 <__ieee754_log+0x330>)
 800c5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ca:	f7f3 fe87 	bl	80002dc <__adddf3>
 800c5ce:	4632      	mov	r2, r6
 800c5d0:	463b      	mov	r3, r7
 800c5d2:	f7f4 f839 	bl	8000648 <__aeabi_dmul>
 800c5d6:	a35a      	add	r3, pc, #360	; (adr r3, 800c740 <__ieee754_log+0x338>)
 800c5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5dc:	f7f3 fe7e 	bl	80002dc <__adddf3>
 800c5e0:	4642      	mov	r2, r8
 800c5e2:	464b      	mov	r3, r9
 800c5e4:	f7f4 f830 	bl	8000648 <__aeabi_dmul>
 800c5e8:	a357      	add	r3, pc, #348	; (adr r3, 800c748 <__ieee754_log+0x340>)
 800c5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ee:	4680      	mov	r8, r0
 800c5f0:	4689      	mov	r9, r1
 800c5f2:	4630      	mov	r0, r6
 800c5f4:	4639      	mov	r1, r7
 800c5f6:	f7f4 f827 	bl	8000648 <__aeabi_dmul>
 800c5fa:	a355      	add	r3, pc, #340	; (adr r3, 800c750 <__ieee754_log+0x348>)
 800c5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c600:	f7f3 fe6c 	bl	80002dc <__adddf3>
 800c604:	4632      	mov	r2, r6
 800c606:	463b      	mov	r3, r7
 800c608:	f7f4 f81e 	bl	8000648 <__aeabi_dmul>
 800c60c:	a352      	add	r3, pc, #328	; (adr r3, 800c758 <__ieee754_log+0x350>)
 800c60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c612:	f7f3 fe63 	bl	80002dc <__adddf3>
 800c616:	4632      	mov	r2, r6
 800c618:	463b      	mov	r3, r7
 800c61a:	f7f4 f815 	bl	8000648 <__aeabi_dmul>
 800c61e:	460b      	mov	r3, r1
 800c620:	4602      	mov	r2, r0
 800c622:	4649      	mov	r1, r9
 800c624:	4640      	mov	r0, r8
 800c626:	f7f3 fe59 	bl	80002dc <__adddf3>
 800c62a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800c62e:	9b01      	ldr	r3, [sp, #4]
 800c630:	3551      	adds	r5, #81	; 0x51
 800c632:	431d      	orrs	r5, r3
 800c634:	2d00      	cmp	r5, #0
 800c636:	4680      	mov	r8, r0
 800c638:	4689      	mov	r9, r1
 800c63a:	dd48      	ble.n	800c6ce <__ieee754_log+0x2c6>
 800c63c:	4b4e      	ldr	r3, [pc, #312]	; (800c778 <__ieee754_log+0x370>)
 800c63e:	2200      	movs	r2, #0
 800c640:	4650      	mov	r0, sl
 800c642:	4659      	mov	r1, fp
 800c644:	f7f4 f800 	bl	8000648 <__aeabi_dmul>
 800c648:	4652      	mov	r2, sl
 800c64a:	465b      	mov	r3, fp
 800c64c:	f7f3 fffc 	bl	8000648 <__aeabi_dmul>
 800c650:	4602      	mov	r2, r0
 800c652:	460b      	mov	r3, r1
 800c654:	4606      	mov	r6, r0
 800c656:	460f      	mov	r7, r1
 800c658:	4640      	mov	r0, r8
 800c65a:	4649      	mov	r1, r9
 800c65c:	f7f3 fe3e 	bl	80002dc <__adddf3>
 800c660:	ec53 2b18 	vmov	r2, r3, d8
 800c664:	f7f3 fff0 	bl	8000648 <__aeabi_dmul>
 800c668:	4680      	mov	r8, r0
 800c66a:	4689      	mov	r9, r1
 800c66c:	b964      	cbnz	r4, 800c688 <__ieee754_log+0x280>
 800c66e:	4602      	mov	r2, r0
 800c670:	460b      	mov	r3, r1
 800c672:	4630      	mov	r0, r6
 800c674:	4639      	mov	r1, r7
 800c676:	f7f3 fe2f 	bl	80002d8 <__aeabi_dsub>
 800c67a:	4602      	mov	r2, r0
 800c67c:	460b      	mov	r3, r1
 800c67e:	4650      	mov	r0, sl
 800c680:	4659      	mov	r1, fp
 800c682:	f7f3 fe29 	bl	80002d8 <__aeabi_dsub>
 800c686:	e6d6      	b.n	800c436 <__ieee754_log+0x2e>
 800c688:	a321      	add	r3, pc, #132	; (adr r3, 800c710 <__ieee754_log+0x308>)
 800c68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c68e:	ec51 0b19 	vmov	r0, r1, d9
 800c692:	f7f3 ffd9 	bl	8000648 <__aeabi_dmul>
 800c696:	a320      	add	r3, pc, #128	; (adr r3, 800c718 <__ieee754_log+0x310>)
 800c698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c69c:	4604      	mov	r4, r0
 800c69e:	460d      	mov	r5, r1
 800c6a0:	ec51 0b19 	vmov	r0, r1, d9
 800c6a4:	f7f3 ffd0 	bl	8000648 <__aeabi_dmul>
 800c6a8:	4642      	mov	r2, r8
 800c6aa:	464b      	mov	r3, r9
 800c6ac:	f7f3 fe16 	bl	80002dc <__adddf3>
 800c6b0:	4602      	mov	r2, r0
 800c6b2:	460b      	mov	r3, r1
 800c6b4:	4630      	mov	r0, r6
 800c6b6:	4639      	mov	r1, r7
 800c6b8:	f7f3 fe0e 	bl	80002d8 <__aeabi_dsub>
 800c6bc:	4652      	mov	r2, sl
 800c6be:	465b      	mov	r3, fp
 800c6c0:	f7f3 fe0a 	bl	80002d8 <__aeabi_dsub>
 800c6c4:	4602      	mov	r2, r0
 800c6c6:	460b      	mov	r3, r1
 800c6c8:	4620      	mov	r0, r4
 800c6ca:	4629      	mov	r1, r5
 800c6cc:	e7d9      	b.n	800c682 <__ieee754_log+0x27a>
 800c6ce:	4602      	mov	r2, r0
 800c6d0:	460b      	mov	r3, r1
 800c6d2:	4650      	mov	r0, sl
 800c6d4:	4659      	mov	r1, fp
 800c6d6:	f7f3 fdff 	bl	80002d8 <__aeabi_dsub>
 800c6da:	ec53 2b18 	vmov	r2, r3, d8
 800c6de:	f7f3 ffb3 	bl	8000648 <__aeabi_dmul>
 800c6e2:	4606      	mov	r6, r0
 800c6e4:	460f      	mov	r7, r1
 800c6e6:	2c00      	cmp	r4, #0
 800c6e8:	f43f af23 	beq.w	800c532 <__ieee754_log+0x12a>
 800c6ec:	a308      	add	r3, pc, #32	; (adr r3, 800c710 <__ieee754_log+0x308>)
 800c6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f2:	ec51 0b19 	vmov	r0, r1, d9
 800c6f6:	f7f3 ffa7 	bl	8000648 <__aeabi_dmul>
 800c6fa:	a307      	add	r3, pc, #28	; (adr r3, 800c718 <__ieee754_log+0x310>)
 800c6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c700:	4604      	mov	r4, r0
 800c702:	460d      	mov	r5, r1
 800c704:	ec51 0b19 	vmov	r0, r1, d9
 800c708:	e727      	b.n	800c55a <__ieee754_log+0x152>
 800c70a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800c760 <__ieee754_log+0x358>
 800c70e:	e694      	b.n	800c43a <__ieee754_log+0x32>
 800c710:	fee00000 	.word	0xfee00000
 800c714:	3fe62e42 	.word	0x3fe62e42
 800c718:	35793c76 	.word	0x35793c76
 800c71c:	3dea39ef 	.word	0x3dea39ef
 800c720:	55555555 	.word	0x55555555
 800c724:	3fd55555 	.word	0x3fd55555
 800c728:	df3e5244 	.word	0xdf3e5244
 800c72c:	3fc2f112 	.word	0x3fc2f112
 800c730:	96cb03de 	.word	0x96cb03de
 800c734:	3fc74664 	.word	0x3fc74664
 800c738:	94229359 	.word	0x94229359
 800c73c:	3fd24924 	.word	0x3fd24924
 800c740:	55555593 	.word	0x55555593
 800c744:	3fe55555 	.word	0x3fe55555
 800c748:	d078c69f 	.word	0xd078c69f
 800c74c:	3fc39a09 	.word	0x3fc39a09
 800c750:	1d8e78af 	.word	0x1d8e78af
 800c754:	3fcc71c5 	.word	0x3fcc71c5
 800c758:	9997fa04 	.word	0x9997fa04
 800c75c:	3fd99999 	.word	0x3fd99999
	...
 800c768:	c3500000 	.word	0xc3500000
 800c76c:	43500000 	.word	0x43500000
 800c770:	7fefffff 	.word	0x7fefffff
 800c774:	3ff00000 	.word	0x3ff00000
 800c778:	3fe00000 	.word	0x3fe00000
 800c77c:	00000000 	.word	0x00000000

0800c780 <nan>:
 800c780:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c788 <nan+0x8>
 800c784:	4770      	bx	lr
 800c786:	bf00      	nop
 800c788:	00000000 	.word	0x00000000
 800c78c:	7ff80000 	.word	0x7ff80000

0800c790 <_init>:
 800c790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c792:	bf00      	nop
 800c794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c796:	bc08      	pop	{r3}
 800c798:	469e      	mov	lr, r3
 800c79a:	4770      	bx	lr

0800c79c <_fini>:
 800c79c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c79e:	bf00      	nop
 800c7a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7a2:	bc08      	pop	{r3}
 800c7a4:	469e      	mov	lr, r3
 800c7a6:	4770      	bx	lr
