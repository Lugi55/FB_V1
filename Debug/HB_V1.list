
HB_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c638  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004cc  0800c818  0800c818  0001c818  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cce4  0800cce4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800cce4  0800cce4  0001cce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ccec  0800ccec  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ccec  0800ccec  0001ccec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ccf0  0800ccf0  0001ccf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800ccf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000708  200001e4  0800ced8  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008ec  0800ced8  000208ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000228e1  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003973  00000000  00000000  00042af5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ae0  00000000  00000000  00046468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001958  00000000  00000000  00047f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c4de  00000000  00000000  000498a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001df13  00000000  00000000  00075d7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00131a69  00000000  00000000  00093c91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001c56fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008700  00000000  00000000  001c5750  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c800 	.word	0x0800c800

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e8 	.word	0x200001e8
 800021c:	0800c800 	.word	0x0800c800

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96e 	b.w	8000f8c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468c      	mov	ip, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8083 	bne.w	8000dde <__udivmoddi4+0x116>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4617      	mov	r7, r2
 8000cdc:	d947      	bls.n	8000d6e <__udivmoddi4+0xa6>
 8000cde:	fab2 f282 	clz	r2, r2
 8000ce2:	b142      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	f1c2 0020 	rsb	r0, r2, #32
 8000ce8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cec:	4091      	lsls	r1, r2
 8000cee:	4097      	lsls	r7, r2
 8000cf0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbbc f6f8 	udiv	r6, ip, r8
 8000d00:	fa1f fe87 	uxth.w	lr, r7
 8000d04:	fb08 c116 	mls	r1, r8, r6, ip
 8000d08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18fb      	adds	r3, r7, r3
 8000d16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1a:	f080 8119 	bcs.w	8000f50 <__udivmoddi4+0x288>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8116 	bls.w	8000f50 <__udivmoddi4+0x288>
 8000d24:	3e02      	subs	r6, #2
 8000d26:	443b      	add	r3, r7
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d30:	fb08 3310 	mls	r3, r8, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d3c:	45a6      	cmp	lr, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	193c      	adds	r4, r7, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8105 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d4a:	45a6      	cmp	lr, r4
 8000d4c:	f240 8102 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d50:	3802      	subs	r0, #2
 8000d52:	443c      	add	r4, r7
 8000d54:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d58:	eba4 040e 	sub.w	r4, r4, lr
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	b11d      	cbz	r5, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c5 4300 	strd	r4, r3, [r5]
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	b902      	cbnz	r2, 8000d72 <__udivmoddi4+0xaa>
 8000d70:	deff      	udf	#255	; 0xff
 8000d72:	fab2 f282 	clz	r2, r2
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	d150      	bne.n	8000e1c <__udivmoddi4+0x154>
 8000d7a:	1bcb      	subs	r3, r1, r7
 8000d7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d80:	fa1f f887 	uxth.w	r8, r7
 8000d84:	2601      	movs	r6, #1
 8000d86:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d8a:	0c21      	lsrs	r1, r4, #16
 8000d8c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb08 f30c 	mul.w	r3, r8, ip
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0xe2>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	f200 80e9 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1ac9      	subs	r1, r1, r3
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000db8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x10c>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x10a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80d9 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e7bf      	b.n	8000d5e <__udivmoddi4+0x96>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0x12e>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80b1 	beq.w	8000f4a <__udivmoddi4+0x282>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x1cc>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0x140>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80b8 	bhi.w	8000f78 <__udivmoddi4+0x2b0>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	468c      	mov	ip, r1
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0a8      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000e16:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e1a:	e7a5      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f603 	lsr.w	r6, r0, r3
 8000e24:	4097      	lsls	r7, r2
 8000e26:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e2e:	40d9      	lsrs	r1, r3
 8000e30:	4330      	orrs	r0, r6
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e38:	fa1f f887 	uxth.w	r8, r7
 8000e3c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e44:	fb06 f108 	mul.w	r1, r6, r8
 8000e48:	4299      	cmp	r1, r3
 8000e4a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4e:	d909      	bls.n	8000e64 <__udivmoddi4+0x19c>
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e56:	f080 808d 	bcs.w	8000f74 <__udivmoddi4+0x2ac>
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	f240 808a 	bls.w	8000f74 <__udivmoddi4+0x2ac>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	443b      	add	r3, r7
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b281      	uxth	r1, r0
 8000e68:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e74:	fb00 f308 	mul.w	r3, r0, r8
 8000e78:	428b      	cmp	r3, r1
 8000e7a:	d907      	bls.n	8000e8c <__udivmoddi4+0x1c4>
 8000e7c:	1879      	adds	r1, r7, r1
 8000e7e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e82:	d273      	bcs.n	8000f6c <__udivmoddi4+0x2a4>
 8000e84:	428b      	cmp	r3, r1
 8000e86:	d971      	bls.n	8000f6c <__udivmoddi4+0x2a4>
 8000e88:	3802      	subs	r0, #2
 8000e8a:	4439      	add	r1, r7
 8000e8c:	1acb      	subs	r3, r1, r3
 8000e8e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e92:	e778      	b.n	8000d86 <__udivmoddi4+0xbe>
 8000e94:	f1c6 0c20 	rsb	ip, r6, #32
 8000e98:	fa03 f406 	lsl.w	r4, r3, r6
 8000e9c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ea0:	431c      	orrs	r4, r3
 8000ea2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000eae:	fa21 f10c 	lsr.w	r1, r1, ip
 8000eb2:	431f      	orrs	r7, r3
 8000eb4:	0c3b      	lsrs	r3, r7, #16
 8000eb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eba:	fa1f f884 	uxth.w	r8, r4
 8000ebe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ec2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ec6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eca:	458a      	cmp	sl, r1
 8000ecc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x220>
 8000ed6:	1861      	adds	r1, r4, r1
 8000ed8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000edc:	d248      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000ede:	458a      	cmp	sl, r1
 8000ee0:	d946      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000ee2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ee6:	4421      	add	r1, r4
 8000ee8:	eba1 010a 	sub.w	r1, r1, sl
 8000eec:	b2bf      	uxth	r7, r7
 8000eee:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ef2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ef6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000efa:	fb00 f808 	mul.w	r8, r0, r8
 8000efe:	45b8      	cmp	r8, r7
 8000f00:	d907      	bls.n	8000f12 <__udivmoddi4+0x24a>
 8000f02:	19e7      	adds	r7, r4, r7
 8000f04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f08:	d22e      	bcs.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0a:	45b8      	cmp	r8, r7
 8000f0c:	d92c      	bls.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0e:	3802      	subs	r0, #2
 8000f10:	4427      	add	r7, r4
 8000f12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f16:	eba7 0708 	sub.w	r7, r7, r8
 8000f1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f1e:	454f      	cmp	r7, r9
 8000f20:	46c6      	mov	lr, r8
 8000f22:	4649      	mov	r1, r9
 8000f24:	d31a      	bcc.n	8000f5c <__udivmoddi4+0x294>
 8000f26:	d017      	beq.n	8000f58 <__udivmoddi4+0x290>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x27a>
 8000f2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f36:	40f2      	lsrs	r2, r6
 8000f38:	ea4c 0202 	orr.w	r2, ip, r2
 8000f3c:	40f7      	lsrs	r7, r6
 8000f3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f42:	2600      	movs	r6, #0
 8000f44:	4631      	mov	r1, r6
 8000f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e70b      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6fd      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f58:	4543      	cmp	r3, r8
 8000f5a:	d2e5      	bcs.n	8000f28 <__udivmoddi4+0x260>
 8000f5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f60:	eb69 0104 	sbc.w	r1, r9, r4
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7df      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e7d2      	b.n	8000f12 <__udivmoddi4+0x24a>
 8000f6c:	4660      	mov	r0, ip
 8000f6e:	e78d      	b.n	8000e8c <__udivmoddi4+0x1c4>
 8000f70:	4681      	mov	r9, r0
 8000f72:	e7b9      	b.n	8000ee8 <__udivmoddi4+0x220>
 8000f74:	4666      	mov	r6, ip
 8000f76:	e775      	b.n	8000e64 <__udivmoddi4+0x19c>
 8000f78:	4630      	mov	r0, r6
 8000f7a:	e74a      	b.n	8000e12 <__udivmoddi4+0x14a>
 8000f7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f80:	4439      	add	r1, r7
 8000f82:	e713      	b.n	8000dac <__udivmoddi4+0xe4>
 8000f84:	3802      	subs	r0, #2
 8000f86:	443c      	add	r4, r7
 8000f88:	e724      	b.n	8000dd4 <__udivmoddi4+0x10c>
 8000f8a:	bf00      	nop

08000f8c <__aeabi_idiv0>:
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08c      	sub	sp, #48	; 0x30
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	2220      	movs	r2, #32
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f008 fb6f 	bl	800968c <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fae:	4b40      	ldr	r3, [pc, #256]	; (80010b0 <MX_ADC1_Init+0x120>)
 8000fb0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fb4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fb6:	4b3e      	ldr	r3, [pc, #248]	; (80010b0 <MX_ADC1_Init+0x120>)
 8000fb8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000fbc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fbe:	4b3c      	ldr	r3, [pc, #240]	; (80010b0 <MX_ADC1_Init+0x120>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fc4:	4b3a      	ldr	r3, [pc, #232]	; (80010b0 <MX_ADC1_Init+0x120>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000fca:	4b39      	ldr	r3, [pc, #228]	; (80010b0 <MX_ADC1_Init+0x120>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000fd0:	4b37      	ldr	r3, [pc, #220]	; (80010b0 <MX_ADC1_Init+0x120>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fd6:	4b36      	ldr	r3, [pc, #216]	; (80010b0 <MX_ADC1_Init+0x120>)
 8000fd8:	2204      	movs	r2, #4
 8000fda:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fdc:	4b34      	ldr	r3, [pc, #208]	; (80010b0 <MX_ADC1_Init+0x120>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fe2:	4b33      	ldr	r3, [pc, #204]	; (80010b0 <MX_ADC1_Init+0x120>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8000fe8:	4b31      	ldr	r3, [pc, #196]	; (80010b0 <MX_ADC1_Init+0x120>)
 8000fea:	2202      	movs	r2, #2
 8000fec:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fee:	4b30      	ldr	r3, [pc, #192]	; (80010b0 <MX_ADC1_Init+0x120>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_HRTIM_TRG1;
 8000ff6:	4b2e      	ldr	r3, [pc, #184]	; (80010b0 <MX_ADC1_Init+0x120>)
 8000ff8:	f44f 62d4 	mov.w	r2, #1696	; 0x6a0
 8000ffc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000ffe:	4b2c      	ldr	r3, [pc, #176]	; (80010b0 <MX_ADC1_Init+0x120>)
 8001000:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001004:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001006:	4b2a      	ldr	r3, [pc, #168]	; (80010b0 <MX_ADC1_Init+0x120>)
 8001008:	2201      	movs	r2, #1
 800100a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800100e:	4b28      	ldr	r3, [pc, #160]	; (80010b0 <MX_ADC1_Init+0x120>)
 8001010:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001014:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 8001016:	4b26      	ldr	r3, [pc, #152]	; (80010b0 <MX_ADC1_Init+0x120>)
 8001018:	2201      	movs	r2, #1
 800101a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_32;
 800101e:	4b24      	ldr	r3, [pc, #144]	; (80010b0 <MX_ADC1_Init+0x120>)
 8001020:	2210      	movs	r2, #16
 8001022:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_5;
 8001024:	4b22      	ldr	r3, [pc, #136]	; (80010b0 <MX_ADC1_Init+0x120>)
 8001026:	22a0      	movs	r2, #160	; 0xa0
 8001028:	649a      	str	r2, [r3, #72]	; 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800102a:	4b21      	ldr	r3, [pc, #132]	; (80010b0 <MX_ADC1_Init+0x120>)
 800102c:	2200      	movs	r2, #0
 800102e:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001030:	4b1f      	ldr	r3, [pc, #124]	; (80010b0 <MX_ADC1_Init+0x120>)
 8001032:	2201      	movs	r2, #1
 8001034:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001036:	481e      	ldr	r0, [pc, #120]	; (80010b0 <MX_ADC1_Init+0x120>)
 8001038:	f001 ff56 	bl	8002ee8 <HAL_ADC_Init>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8001042:	f001 f995 	bl	8002370 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001046:	2300      	movs	r3, #0
 8001048:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800104a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104e:	4619      	mov	r1, r3
 8001050:	4817      	ldr	r0, [pc, #92]	; (80010b0 <MX_ADC1_Init+0x120>)
 8001052:	f003 f841 	bl	80040d8 <HAL_ADCEx_MultiModeConfigChannel>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 800105c:	f001 f988 	bl	8002370 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001060:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <MX_ADC1_Init+0x124>)
 8001062:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001064:	2306      	movs	r3, #6
 8001066:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8001068:	2304      	movs	r3, #4
 800106a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800106c:	237f      	movs	r3, #127	; 0x7f
 800106e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001070:	2304      	movs	r3, #4
 8001072:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001078:	1d3b      	adds	r3, r7, #4
 800107a:	4619      	mov	r1, r3
 800107c:	480c      	ldr	r0, [pc, #48]	; (80010b0 <MX_ADC1_Init+0x120>)
 800107e:	f002 f9e1 	bl	8003444 <HAL_ADC_ConfigChannel>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8001088:	f001 f972 	bl	8002370 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800108c:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <MX_ADC1_Init+0x128>)
 800108e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001090:	230c      	movs	r3, #12
 8001092:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	4619      	mov	r1, r3
 8001098:	4805      	ldr	r0, [pc, #20]	; (80010b0 <MX_ADC1_Init+0x120>)
 800109a:	f002 f9d3 	bl	8003444 <HAL_ADC_ConfigChannel>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80010a4:	f001 f964 	bl	8002370 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010a8:	bf00      	nop
 80010aa:	3730      	adds	r7, #48	; 0x30
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000350 	.word	0x20000350
 80010b4:	19200040 	.word	0x19200040
 80010b8:	1d500080 	.word	0x1d500080

080010bc <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b088      	sub	sp, #32
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010c2:	463b      	mov	r3, r7
 80010c4:	2220      	movs	r2, #32
 80010c6:	2100      	movs	r1, #0
 80010c8:	4618      	mov	r0, r3
 80010ca:	f008 fadf 	bl	800968c <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80010ce:	4b39      	ldr	r3, [pc, #228]	; (80011b4 <MX_ADC2_Init+0xf8>)
 80010d0:	4a39      	ldr	r2, [pc, #228]	; (80011b8 <MX_ADC2_Init+0xfc>)
 80010d2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010d4:	4b37      	ldr	r3, [pc, #220]	; (80011b4 <MX_ADC2_Init+0xf8>)
 80010d6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80010da:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80010dc:	4b35      	ldr	r3, [pc, #212]	; (80011b4 <MX_ADC2_Init+0xf8>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010e2:	4b34      	ldr	r3, [pc, #208]	; (80011b4 <MX_ADC2_Init+0xf8>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80010e8:	4b32      	ldr	r3, [pc, #200]	; (80011b4 <MX_ADC2_Init+0xf8>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010ee:	4b31      	ldr	r3, [pc, #196]	; (80011b4 <MX_ADC2_Init+0xf8>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010f4:	4b2f      	ldr	r3, [pc, #188]	; (80011b4 <MX_ADC2_Init+0xf8>)
 80010f6:	2204      	movs	r2, #4
 80010f8:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80010fa:	4b2e      	ldr	r3, [pc, #184]	; (80011b4 <MX_ADC2_Init+0xf8>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001100:	4b2c      	ldr	r3, [pc, #176]	; (80011b4 <MX_ADC2_Init+0xf8>)
 8001102:	2200      	movs	r2, #0
 8001104:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 8001106:	4b2b      	ldr	r3, [pc, #172]	; (80011b4 <MX_ADC2_Init+0xf8>)
 8001108:	2202      	movs	r2, #2
 800110a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800110c:	4b29      	ldr	r3, [pc, #164]	; (80011b4 <MX_ADC2_Init+0xf8>)
 800110e:	2200      	movs	r2, #0
 8001110:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_HRTIM_TRG1;
 8001114:	4b27      	ldr	r3, [pc, #156]	; (80011b4 <MX_ADC2_Init+0xf8>)
 8001116:	f44f 62d4 	mov.w	r2, #1696	; 0x6a0
 800111a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800111c:	4b25      	ldr	r3, [pc, #148]	; (80011b4 <MX_ADC2_Init+0xf8>)
 800111e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001122:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001124:	4b23      	ldr	r3, [pc, #140]	; (80011b4 <MX_ADC2_Init+0xf8>)
 8001126:	2201      	movs	r2, #1
 8001128:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800112c:	4b21      	ldr	r3, [pc, #132]	; (80011b4 <MX_ADC2_Init+0xf8>)
 800112e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001132:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = ENABLE;
 8001134:	4b1f      	ldr	r3, [pc, #124]	; (80011b4 <MX_ADC2_Init+0xf8>)
 8001136:	2201      	movs	r2, #1
 8001138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc2.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_32;
 800113c:	4b1d      	ldr	r3, [pc, #116]	; (80011b4 <MX_ADC2_Init+0xf8>)
 800113e:	2210      	movs	r2, #16
 8001140:	645a      	str	r2, [r3, #68]	; 0x44
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_5;
 8001142:	4b1c      	ldr	r3, [pc, #112]	; (80011b4 <MX_ADC2_Init+0xf8>)
 8001144:	22a0      	movs	r2, #160	; 0xa0
 8001146:	649a      	str	r2, [r3, #72]	; 0x48
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001148:	4b1a      	ldr	r3, [pc, #104]	; (80011b4 <MX_ADC2_Init+0xf8>)
 800114a:	2200      	movs	r2, #0
 800114c:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800114e:	4b19      	ldr	r3, [pc, #100]	; (80011b4 <MX_ADC2_Init+0xf8>)
 8001150:	2201      	movs	r2, #1
 8001152:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001154:	4817      	ldr	r0, [pc, #92]	; (80011b4 <MX_ADC2_Init+0xf8>)
 8001156:	f001 fec7 	bl	8002ee8 <HAL_ADC_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_ADC2_Init+0xa8>
  {
    Error_Handler();
 8001160:	f001 f906 	bl	8002370 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001164:	4b15      	ldr	r3, [pc, #84]	; (80011bc <MX_ADC2_Init+0x100>)
 8001166:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001168:	2306      	movs	r3, #6
 800116a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 800116c:	2304      	movs	r3, #4
 800116e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001170:	237f      	movs	r3, #127	; 0x7f
 8001172:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001174:	2304      	movs	r3, #4
 8001176:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800117c:	463b      	mov	r3, r7
 800117e:	4619      	mov	r1, r3
 8001180:	480c      	ldr	r0, [pc, #48]	; (80011b4 <MX_ADC2_Init+0xf8>)
 8001182:	f002 f95f 	bl	8003444 <HAL_ADC_ConfigChannel>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_ADC2_Init+0xd4>
  {
    Error_Handler();
 800118c:	f001 f8f0 	bl	8002370 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001190:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <MX_ADC2_Init+0x104>)
 8001192:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001194:	230c      	movs	r3, #12
 8001196:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001198:	463b      	mov	r3, r7
 800119a:	4619      	mov	r1, r3
 800119c:	4805      	ldr	r0, [pc, #20]	; (80011b4 <MX_ADC2_Init+0xf8>)
 800119e:	f002 f951 	bl	8003444 <HAL_ADC_ConfigChannel>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_ADC2_Init+0xf0>
  {
    Error_Handler();
 80011a8:	f001 f8e2 	bl	8002370 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011ac:	bf00      	nop
 80011ae:	3720      	adds	r7, #32
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000218 	.word	0x20000218
 80011b8:	50000100 	.word	0x50000100
 80011bc:	25b00200 	.word	0x25b00200
 80011c0:	0c900008 	.word	0x0c900008

080011c4 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b088      	sub	sp, #32
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ca:	463b      	mov	r3, r7
 80011cc:	2220      	movs	r2, #32
 80011ce:	2100      	movs	r1, #0
 80011d0:	4618      	mov	r0, r3
 80011d2:	f008 fa5b 	bl	800968c <memset>
  /* USER CODE BEGIN ADC5_Init 1 */

  /* USER CODE END ADC5_Init 1 */
  /** Common config
  */
  hadc5.Instance = ADC5;
 80011d6:	4b32      	ldr	r3, [pc, #200]	; (80012a0 <MX_ADC5_Init+0xdc>)
 80011d8:	4a32      	ldr	r2, [pc, #200]	; (80012a4 <MX_ADC5_Init+0xe0>)
 80011da:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011dc:	4b30      	ldr	r3, [pc, #192]	; (80012a0 <MX_ADC5_Init+0xdc>)
 80011de:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80011e2:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 80011e4:	4b2e      	ldr	r3, [pc, #184]	; (80012a0 <MX_ADC5_Init+0xdc>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011ea:	4b2d      	ldr	r3, [pc, #180]	; (80012a0 <MX_ADC5_Init+0xdc>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 80011f0:	4b2b      	ldr	r3, [pc, #172]	; (80012a0 <MX_ADC5_Init+0xdc>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011f6:	4b2a      	ldr	r3, [pc, #168]	; (80012a0 <MX_ADC5_Init+0xdc>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011fc:	4b28      	ldr	r3, [pc, #160]	; (80012a0 <MX_ADC5_Init+0xdc>)
 80011fe:	2204      	movs	r2, #4
 8001200:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8001202:	4b27      	ldr	r3, [pc, #156]	; (80012a0 <MX_ADC5_Init+0xdc>)
 8001204:	2200      	movs	r2, #0
 8001206:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 8001208:	4b25      	ldr	r3, [pc, #148]	; (80012a0 <MX_ADC5_Init+0xdc>)
 800120a:	2200      	movs	r2, #0
 800120c:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 800120e:	4b24      	ldr	r3, [pc, #144]	; (80012a0 <MX_ADC5_Init+0xdc>)
 8001210:	2201      	movs	r2, #1
 8001212:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8001214:	4b22      	ldr	r3, [pc, #136]	; (80012a0 <MX_ADC5_Init+0xdc>)
 8001216:	2200      	movs	r2, #0
 8001218:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_EXTERNALTRIG_HRTIM_TRG1;
 800121c:	4b20      	ldr	r3, [pc, #128]	; (80012a0 <MX_ADC5_Init+0xdc>)
 800121e:	f44f 62d4 	mov.w	r2, #1696	; 0x6a0
 8001222:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001224:	4b1e      	ldr	r3, [pc, #120]	; (80012a0 <MX_ADC5_Init+0xdc>)
 8001226:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800122a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 800122c:	4b1c      	ldr	r3, [pc, #112]	; (80012a0 <MX_ADC5_Init+0xdc>)
 800122e:	2201      	movs	r2, #1
 8001230:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001234:	4b1a      	ldr	r3, [pc, #104]	; (80012a0 <MX_ADC5_Init+0xdc>)
 8001236:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800123a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = ENABLE;
 800123c:	4b18      	ldr	r3, [pc, #96]	; (80012a0 <MX_ADC5_Init+0xdc>)
 800123e:	2201      	movs	r2, #1
 8001240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc5.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_32;
 8001244:	4b16      	ldr	r3, [pc, #88]	; (80012a0 <MX_ADC5_Init+0xdc>)
 8001246:	2210      	movs	r2, #16
 8001248:	645a      	str	r2, [r3, #68]	; 0x44
  hadc5.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_5;
 800124a:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <MX_ADC5_Init+0xdc>)
 800124c:	22a0      	movs	r2, #160	; 0xa0
 800124e:	649a      	str	r2, [r3, #72]	; 0x48
  hadc5.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001250:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <MX_ADC5_Init+0xdc>)
 8001252:	2200      	movs	r2, #0
 8001254:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc5.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001256:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <MX_ADC5_Init+0xdc>)
 8001258:	2201      	movs	r2, #1
 800125a:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 800125c:	4810      	ldr	r0, [pc, #64]	; (80012a0 <MX_ADC5_Init+0xdc>)
 800125e:	f001 fe43 	bl	8002ee8 <HAL_ADC_Init>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_ADC5_Init+0xa8>
  {
    Error_Handler();
 8001268:	f001 f882 	bl	8002370 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800126c:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <MX_ADC5_Init+0xe4>)
 800126e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001270:	2306      	movs	r3, #6
 8001272:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8001274:	2304      	movs	r3, #4
 8001276:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001278:	237f      	movs	r3, #127	; 0x7f
 800127a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800127c:	2304      	movs	r3, #4
 800127e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8001284:	463b      	mov	r3, r7
 8001286:	4619      	mov	r1, r3
 8001288:	4805      	ldr	r0, [pc, #20]	; (80012a0 <MX_ADC5_Init+0xdc>)
 800128a:	f002 f8db 	bl	8003444 <HAL_ADC_ConfigChannel>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_ADC5_Init+0xd4>
  {
    Error_Handler();
 8001294:	f001 f86c 	bl	8002370 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8001298:	bf00      	nop
 800129a:	3720      	adds	r7, #32
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000284 	.word	0x20000284
 80012a4:	50000600 	.word	0x50000600
 80012a8:	04300002 	.word	0x04300002

080012ac <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08e      	sub	sp, #56	; 0x38
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012cc:	d158      	bne.n	8001380 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80012ce:	4b95      	ldr	r3, [pc, #596]	; (8001524 <HAL_ADC_MspInit+0x278>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	3301      	adds	r3, #1
 80012d4:	4a93      	ldr	r2, [pc, #588]	; (8001524 <HAL_ADC_MspInit+0x278>)
 80012d6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80012d8:	4b92      	ldr	r3, [pc, #584]	; (8001524 <HAL_ADC_MspInit+0x278>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d10b      	bne.n	80012f8 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80012e0:	4b91      	ldr	r3, [pc, #580]	; (8001528 <HAL_ADC_MspInit+0x27c>)
 80012e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e4:	4a90      	ldr	r2, [pc, #576]	; (8001528 <HAL_ADC_MspInit+0x27c>)
 80012e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ec:	4b8e      	ldr	r3, [pc, #568]	; (8001528 <HAL_ADC_MspInit+0x27c>)
 80012ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012f4:	623b      	str	r3, [r7, #32]
 80012f6:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f8:	4b8b      	ldr	r3, [pc, #556]	; (8001528 <HAL_ADC_MspInit+0x27c>)
 80012fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fc:	4a8a      	ldr	r2, [pc, #552]	; (8001528 <HAL_ADC_MspInit+0x27c>)
 80012fe:	f043 0304 	orr.w	r3, r3, #4
 8001302:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001304:	4b88      	ldr	r3, [pc, #544]	; (8001528 <HAL_ADC_MspInit+0x27c>)
 8001306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001308:	f003 0304 	and.w	r3, r3, #4
 800130c:	61fb      	str	r3, [r7, #28]
 800130e:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001310:	2303      	movs	r3, #3
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001314:	2303      	movs	r3, #3
 8001316:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800131c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001320:	4619      	mov	r1, r3
 8001322:	4882      	ldr	r0, [pc, #520]	; (800152c <HAL_ADC_MspInit+0x280>)
 8001324:	f003 fc22 	bl	8004b6c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Channel1;
 8001328:	4b81      	ldr	r3, [pc, #516]	; (8001530 <HAL_ADC_MspInit+0x284>)
 800132a:	4a82      	ldr	r2, [pc, #520]	; (8001534 <HAL_ADC_MspInit+0x288>)
 800132c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800132e:	4b80      	ldr	r3, [pc, #512]	; (8001530 <HAL_ADC_MspInit+0x284>)
 8001330:	2205      	movs	r2, #5
 8001332:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001334:	4b7e      	ldr	r3, [pc, #504]	; (8001530 <HAL_ADC_MspInit+0x284>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800133a:	4b7d      	ldr	r3, [pc, #500]	; (8001530 <HAL_ADC_MspInit+0x284>)
 800133c:	2200      	movs	r2, #0
 800133e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001340:	4b7b      	ldr	r3, [pc, #492]	; (8001530 <HAL_ADC_MspInit+0x284>)
 8001342:	2280      	movs	r2, #128	; 0x80
 8001344:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001346:	4b7a      	ldr	r3, [pc, #488]	; (8001530 <HAL_ADC_MspInit+0x284>)
 8001348:	f44f 7200 	mov.w	r2, #512	; 0x200
 800134c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800134e:	4b78      	ldr	r3, [pc, #480]	; (8001530 <HAL_ADC_MspInit+0x284>)
 8001350:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001354:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001356:	4b76      	ldr	r3, [pc, #472]	; (8001530 <HAL_ADC_MspInit+0x284>)
 8001358:	2220      	movs	r2, #32
 800135a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800135c:	4b74      	ldr	r3, [pc, #464]	; (8001530 <HAL_ADC_MspInit+0x284>)
 800135e:	2200      	movs	r2, #0
 8001360:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001362:	4873      	ldr	r0, [pc, #460]	; (8001530 <HAL_ADC_MspInit+0x284>)
 8001364:	f003 f8d0 	bl	8004508 <HAL_DMA_Init>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800136e:	f000 ffff 	bl	8002370 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a6e      	ldr	r2, [pc, #440]	; (8001530 <HAL_ADC_MspInit+0x284>)
 8001376:	655a      	str	r2, [r3, #84]	; 0x54
 8001378:	4a6d      	ldr	r2, [pc, #436]	; (8001530 <HAL_ADC_MspInit+0x284>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 800137e:	e0cc      	b.n	800151a <HAL_ADC_MspInit+0x26e>
  else if(adcHandle->Instance==ADC2)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a6c      	ldr	r2, [pc, #432]	; (8001538 <HAL_ADC_MspInit+0x28c>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d171      	bne.n	800146e <HAL_ADC_MspInit+0x1c2>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800138a:	4b66      	ldr	r3, [pc, #408]	; (8001524 <HAL_ADC_MspInit+0x278>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	3301      	adds	r3, #1
 8001390:	4a64      	ldr	r2, [pc, #400]	; (8001524 <HAL_ADC_MspInit+0x278>)
 8001392:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001394:	4b63      	ldr	r3, [pc, #396]	; (8001524 <HAL_ADC_MspInit+0x278>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d10b      	bne.n	80013b4 <HAL_ADC_MspInit+0x108>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800139c:	4b62      	ldr	r3, [pc, #392]	; (8001528 <HAL_ADC_MspInit+0x27c>)
 800139e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a0:	4a61      	ldr	r2, [pc, #388]	; (8001528 <HAL_ADC_MspInit+0x27c>)
 80013a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013a8:	4b5f      	ldr	r3, [pc, #380]	; (8001528 <HAL_ADC_MspInit+0x27c>)
 80013aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013b0:	61bb      	str	r3, [r7, #24]
 80013b2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013b4:	4b5c      	ldr	r3, [pc, #368]	; (8001528 <HAL_ADC_MspInit+0x27c>)
 80013b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b8:	4a5b      	ldr	r2, [pc, #364]	; (8001528 <HAL_ADC_MspInit+0x27c>)
 80013ba:	f043 0304 	orr.w	r3, r3, #4
 80013be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c0:	4b59      	ldr	r3, [pc, #356]	; (8001528 <HAL_ADC_MspInit+0x27c>)
 80013c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c4:	f003 0304 	and.w	r3, r3, #4
 80013c8:	617b      	str	r3, [r7, #20]
 80013ca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013cc:	4b56      	ldr	r3, [pc, #344]	; (8001528 <HAL_ADC_MspInit+0x27c>)
 80013ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d0:	4a55      	ldr	r2, [pc, #340]	; (8001528 <HAL_ADC_MspInit+0x27c>)
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013d8:	4b53      	ldr	r3, [pc, #332]	; (8001528 <HAL_ADC_MspInit+0x27c>)
 80013da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013dc:	f003 0301 	and.w	r3, r3, #1
 80013e0:	613b      	str	r3, [r7, #16]
 80013e2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013e4:	2308      	movs	r3, #8
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013e8:	2303      	movs	r3, #3
 80013ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f4:	4619      	mov	r1, r3
 80013f6:	484d      	ldr	r0, [pc, #308]	; (800152c <HAL_ADC_MspInit+0x280>)
 80013f8:	f003 fbb8 	bl	8004b6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013fc:	2340      	movs	r3, #64	; 0x40
 80013fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001400:	2303      	movs	r3, #3
 8001402:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001408:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800140c:	4619      	mov	r1, r3
 800140e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001412:	f003 fbab 	bl	8004b6c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel2;
 8001416:	4b49      	ldr	r3, [pc, #292]	; (800153c <HAL_ADC_MspInit+0x290>)
 8001418:	4a49      	ldr	r2, [pc, #292]	; (8001540 <HAL_ADC_MspInit+0x294>)
 800141a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800141c:	4b47      	ldr	r3, [pc, #284]	; (800153c <HAL_ADC_MspInit+0x290>)
 800141e:	2224      	movs	r2, #36	; 0x24
 8001420:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001422:	4b46      	ldr	r3, [pc, #280]	; (800153c <HAL_ADC_MspInit+0x290>)
 8001424:	2200      	movs	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001428:	4b44      	ldr	r3, [pc, #272]	; (800153c <HAL_ADC_MspInit+0x290>)
 800142a:	2200      	movs	r2, #0
 800142c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800142e:	4b43      	ldr	r3, [pc, #268]	; (800153c <HAL_ADC_MspInit+0x290>)
 8001430:	2280      	movs	r2, #128	; 0x80
 8001432:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001434:	4b41      	ldr	r3, [pc, #260]	; (800153c <HAL_ADC_MspInit+0x290>)
 8001436:	f44f 7200 	mov.w	r2, #512	; 0x200
 800143a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800143c:	4b3f      	ldr	r3, [pc, #252]	; (800153c <HAL_ADC_MspInit+0x290>)
 800143e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001442:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001444:	4b3d      	ldr	r3, [pc, #244]	; (800153c <HAL_ADC_MspInit+0x290>)
 8001446:	2220      	movs	r2, #32
 8001448:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800144a:	4b3c      	ldr	r3, [pc, #240]	; (800153c <HAL_ADC_MspInit+0x290>)
 800144c:	2200      	movs	r2, #0
 800144e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001450:	483a      	ldr	r0, [pc, #232]	; (800153c <HAL_ADC_MspInit+0x290>)
 8001452:	f003 f859 	bl	8004508 <HAL_DMA_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <HAL_ADC_MspInit+0x1b4>
      Error_Handler();
 800145c:	f000 ff88 	bl	8002370 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4a36      	ldr	r2, [pc, #216]	; (800153c <HAL_ADC_MspInit+0x290>)
 8001464:	655a      	str	r2, [r3, #84]	; 0x54
 8001466:	4a35      	ldr	r2, [pc, #212]	; (800153c <HAL_ADC_MspInit+0x290>)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6293      	str	r3, [r2, #40]	; 0x28
}
 800146c:	e055      	b.n	800151a <HAL_ADC_MspInit+0x26e>
  else if(adcHandle->Instance==ADC5)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a34      	ldr	r2, [pc, #208]	; (8001544 <HAL_ADC_MspInit+0x298>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d150      	bne.n	800151a <HAL_ADC_MspInit+0x26e>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8001478:	4b2b      	ldr	r3, [pc, #172]	; (8001528 <HAL_ADC_MspInit+0x27c>)
 800147a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147c:	4a2a      	ldr	r2, [pc, #168]	; (8001528 <HAL_ADC_MspInit+0x27c>)
 800147e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001482:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001484:	4b28      	ldr	r3, [pc, #160]	; (8001528 <HAL_ADC_MspInit+0x27c>)
 8001486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001488:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001490:	4b25      	ldr	r3, [pc, #148]	; (8001528 <HAL_ADC_MspInit+0x27c>)
 8001492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001494:	4a24      	ldr	r2, [pc, #144]	; (8001528 <HAL_ADC_MspInit+0x27c>)
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800149c:	4b22      	ldr	r3, [pc, #136]	; (8001528 <HAL_ADC_MspInit+0x27c>)
 800149e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a0:	f003 0301 	and.w	r3, r3, #1
 80014a4:	60bb      	str	r3, [r7, #8]
 80014a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ae:	2303      	movs	r3, #3
 80014b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ba:	4619      	mov	r1, r3
 80014bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014c0:	f003 fb54 	bl	8004b6c <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA2_Channel3;
 80014c4:	4b20      	ldr	r3, [pc, #128]	; (8001548 <HAL_ADC_MspInit+0x29c>)
 80014c6:	4a21      	ldr	r2, [pc, #132]	; (800154c <HAL_ADC_MspInit+0x2a0>)
 80014c8:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 80014ca:	4b1f      	ldr	r3, [pc, #124]	; (8001548 <HAL_ADC_MspInit+0x29c>)
 80014cc:	2227      	movs	r2, #39	; 0x27
 80014ce:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014d0:	4b1d      	ldr	r3, [pc, #116]	; (8001548 <HAL_ADC_MspInit+0x29c>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 80014d6:	4b1c      	ldr	r3, [pc, #112]	; (8001548 <HAL_ADC_MspInit+0x29c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 80014dc:	4b1a      	ldr	r3, [pc, #104]	; (8001548 <HAL_ADC_MspInit+0x29c>)
 80014de:	2280      	movs	r2, #128	; 0x80
 80014e0:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014e2:	4b19      	ldr	r3, [pc, #100]	; (8001548 <HAL_ADC_MspInit+0x29c>)
 80014e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014e8:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014ea:	4b17      	ldr	r3, [pc, #92]	; (8001548 <HAL_ADC_MspInit+0x29c>)
 80014ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014f0:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 80014f2:	4b15      	ldr	r3, [pc, #84]	; (8001548 <HAL_ADC_MspInit+0x29c>)
 80014f4:	2220      	movs	r2, #32
 80014f6:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 80014f8:	4b13      	ldr	r3, [pc, #76]	; (8001548 <HAL_ADC_MspInit+0x29c>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 80014fe:	4812      	ldr	r0, [pc, #72]	; (8001548 <HAL_ADC_MspInit+0x29c>)
 8001500:	f003 f802 	bl	8004508 <HAL_DMA_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <HAL_ADC_MspInit+0x262>
      Error_Handler();
 800150a:	f000 ff31 	bl	8002370 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc5);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a0d      	ldr	r2, [pc, #52]	; (8001548 <HAL_ADC_MspInit+0x29c>)
 8001512:	655a      	str	r2, [r3, #84]	; 0x54
 8001514:	4a0c      	ldr	r2, [pc, #48]	; (8001548 <HAL_ADC_MspInit+0x29c>)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6293      	str	r3, [r2, #40]	; 0x28
}
 800151a:	bf00      	nop
 800151c:	3738      	adds	r7, #56	; 0x38
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000200 	.word	0x20000200
 8001528:	40021000 	.word	0x40021000
 800152c:	48000800 	.word	0x48000800
 8001530:	200003bc 	.word	0x200003bc
 8001534:	40020408 	.word	0x40020408
 8001538:	50000100 	.word	0x50000100
 800153c:	2000041c 	.word	0x2000041c
 8001540:	4002041c 	.word	0x4002041c
 8001544:	50000600 	.word	0x50000600
 8001548:	200002f0 	.word	0x200002f0
 800154c:	40020430 	.word	0x40020430

08001550 <controller_update>:


// Function: controller_update
// ----------------------------------------------------------------------------------------
//
void controller_update(adcval_t ADCValues){
 8001550:	b084      	sub	sp, #16
 8001552:	b580      	push	{r7, lr}
 8001554:	af00      	add	r7, sp, #0
 8001556:	f107 0c08 	add.w	ip, r7, #8
 800155a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	updateTempMeasurementCold(ADCValues.ADC1Val[0]);
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	4618      	mov	r0, r3
 8001562:	f000 f977 	bl	8001854 <updateTempMeasurementCold>
	updateTempMeasurementHot(ADCValues.ADC1Val[1]);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	4618      	mov	r0, r3
 800156a:	f000 f8fb 	bl	8001764 <updateTempMeasurementHot>
	updateVoltage(ADCValues.ADC2Val[0]);
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	4618      	mov	r0, r3
 8001572:	f000 f9e7 	bl	8001944 <updateVoltage>
	updateCurrent(ADCValues.ADC2Val[1]);
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	4618      	mov	r0, r3
 800157a:	f000 fa39 	bl	80019f0 <updateCurrent>
	updateSuplyVoltage(ADCValues.ADC5Val[0]);
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	4618      	mov	r0, r3
 8001582:	f000 fa09 	bl	8001998 <updateSuplyVoltage>
	controller();
 8001586:	f000 faab 	bl	8001ae0 <controller>
	updateSetVoltagePWM();
 800158a:	f000 fa7d 	bl	8001a88 <updateSetVoltagePWM>
}
 800158e:	bf00      	nop
 8001590:	46bd      	mov	sp, r7
 8001592:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001596:	b004      	add	sp, #16
 8001598:	4770      	bx	lr
	...

0800159c <controller_setReferenceTemp>:
}

// Function: controller_setReferenceTemp
// ----------------------------------------------------------------------------------------
//
void controller_setReferenceTemp(float temp){
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	ed87 0a01 	vstr	s0, [r7, #4]
	referneceTemp = temp;
 80015a6:	4a04      	ldr	r2, [pc, #16]	; (80015b8 <controller_setReferenceTemp+0x1c>)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6013      	str	r3, [r2, #0]
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	20000000 	.word	0x20000000

080015bc <controller_print>:
}

// Function: controller_print
// ----------------------------------------------------------------------------------------
//
void controller_print(){
 80015bc:	b580      	push	{r7, lr}
 80015be:	b09a      	sub	sp, #104	; 0x68
 80015c0:	af00      	add	r7, sp, #0
	char stringBufferTemp[100];
	stringBuffer[0] = '\0';
 80015c2:	4b54      	ldr	r3, [pc, #336]	; (8001714 <controller_print+0x158>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	701a      	strb	r2, [r3, #0]
	sprintf(stringBufferTemp,"\"Time\":%u,",HAL_GetTick());
 80015c8:	f001 fa1c 	bl	8002a04 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	1d3b      	adds	r3, r7, #4
 80015d0:	4951      	ldr	r1, [pc, #324]	; (8001718 <controller_print+0x15c>)
 80015d2:	4618      	mov	r0, r3
 80015d4:	f008 fccc 	bl	8009f70 <siprintf>
	strcat(stringBuffer,stringBufferTemp);
 80015d8:	1d3b      	adds	r3, r7, #4
 80015da:	4619      	mov	r1, r3
 80015dc:	484d      	ldr	r0, [pc, #308]	; (8001714 <controller_print+0x158>)
 80015de:	f008 fce7 	bl	8009fb0 <strcat>
	sprintf(stringBufferTemp, "\"SetVoltage\":%.3f," ,setVoltage);
 80015e2:	4b4e      	ldr	r3, [pc, #312]	; (800171c <controller_print+0x160>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7fe ffd6 	bl	8000598 <__aeabi_f2d>
 80015ec:	4602      	mov	r2, r0
 80015ee:	460b      	mov	r3, r1
 80015f0:	1d38      	adds	r0, r7, #4
 80015f2:	494b      	ldr	r1, [pc, #300]	; (8001720 <controller_print+0x164>)
 80015f4:	f008 fcbc 	bl	8009f70 <siprintf>
	strcat(stringBuffer,stringBufferTemp);
 80015f8:	1d3b      	adds	r3, r7, #4
 80015fa:	4619      	mov	r1, r3
 80015fc:	4845      	ldr	r0, [pc, #276]	; (8001714 <controller_print+0x158>)
 80015fe:	f008 fcd7 	bl	8009fb0 <strcat>
	sprintf(stringBufferTemp, "\"HotTemp\":%.3f," ,tempHot);
 8001602:	4b48      	ldr	r3, [pc, #288]	; (8001724 <controller_print+0x168>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f7fe ffc6 	bl	8000598 <__aeabi_f2d>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	1d38      	adds	r0, r7, #4
 8001612:	4945      	ldr	r1, [pc, #276]	; (8001728 <controller_print+0x16c>)
 8001614:	f008 fcac 	bl	8009f70 <siprintf>
	strcat(stringBuffer,stringBufferTemp);
 8001618:	1d3b      	adds	r3, r7, #4
 800161a:	4619      	mov	r1, r3
 800161c:	483d      	ldr	r0, [pc, #244]	; (8001714 <controller_print+0x158>)
 800161e:	f008 fcc7 	bl	8009fb0 <strcat>
	sprintf(stringBufferTemp, "\"ColdTemp\":%.3f,",tempCold);
 8001622:	4b42      	ldr	r3, [pc, #264]	; (800172c <controller_print+0x170>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe ffb6 	bl	8000598 <__aeabi_f2d>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	1d38      	adds	r0, r7, #4
 8001632:	493f      	ldr	r1, [pc, #252]	; (8001730 <controller_print+0x174>)
 8001634:	f008 fc9c 	bl	8009f70 <siprintf>
	strcat(stringBuffer,stringBufferTemp);
 8001638:	1d3b      	adds	r3, r7, #4
 800163a:	4619      	mov	r1, r3
 800163c:	4835      	ldr	r0, [pc, #212]	; (8001714 <controller_print+0x158>)
 800163e:	f008 fcb7 	bl	8009fb0 <strcat>
	sprintf(stringBufferTemp, "\"Current\":%.3f,",current);
 8001642:	4b3c      	ldr	r3, [pc, #240]	; (8001734 <controller_print+0x178>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	f7fe ffa6 	bl	8000598 <__aeabi_f2d>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	1d38      	adds	r0, r7, #4
 8001652:	4939      	ldr	r1, [pc, #228]	; (8001738 <controller_print+0x17c>)
 8001654:	f008 fc8c 	bl	8009f70 <siprintf>
	strcat(stringBuffer,stringBufferTemp);
 8001658:	1d3b      	adds	r3, r7, #4
 800165a:	4619      	mov	r1, r3
 800165c:	482d      	ldr	r0, [pc, #180]	; (8001714 <controller_print+0x158>)
 800165e:	f008 fca7 	bl	8009fb0 <strcat>
	sprintf(stringBufferTemp, "\"RefTemp\":%.3f,",referneceTemp);
 8001662:	4b36      	ldr	r3, [pc, #216]	; (800173c <controller_print+0x180>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4618      	mov	r0, r3
 8001668:	f7fe ff96 	bl	8000598 <__aeabi_f2d>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	1d38      	adds	r0, r7, #4
 8001672:	4933      	ldr	r1, [pc, #204]	; (8001740 <controller_print+0x184>)
 8001674:	f008 fc7c 	bl	8009f70 <siprintf>
	strcat(stringBuffer,stringBufferTemp);
 8001678:	1d3b      	adds	r3, r7, #4
 800167a:	4619      	mov	r1, r3
 800167c:	4825      	ldr	r0, [pc, #148]	; (8001714 <controller_print+0x158>)
 800167e:	f008 fc97 	bl	8009fb0 <strcat>
	sprintf(stringBufferTemp, "\"Voltage\":%.3f,",voltage);
 8001682:	4b30      	ldr	r3, [pc, #192]	; (8001744 <controller_print+0x188>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f7fe ff86 	bl	8000598 <__aeabi_f2d>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	1d38      	adds	r0, r7, #4
 8001692:	492d      	ldr	r1, [pc, #180]	; (8001748 <controller_print+0x18c>)
 8001694:	f008 fc6c 	bl	8009f70 <siprintf>
	strcat(stringBuffer,stringBufferTemp);
 8001698:	1d3b      	adds	r3, r7, #4
 800169a:	4619      	mov	r1, r3
 800169c:	481d      	ldr	r0, [pc, #116]	; (8001714 <controller_print+0x158>)
 800169e:	f008 fc87 	bl	8009fb0 <strcat>
	sprintf(stringBufferTemp, "\"PWMConsumerVoltage\":%.3f,",PWMConsumerVoltage);
 80016a2:	4b2a      	ldr	r3, [pc, #168]	; (800174c <controller_print+0x190>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7fe ff76 	bl	8000598 <__aeabi_f2d>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	1d38      	adds	r0, r7, #4
 80016b2:	4927      	ldr	r1, [pc, #156]	; (8001750 <controller_print+0x194>)
 80016b4:	f008 fc5c 	bl	8009f70 <siprintf>
	strcat(stringBuffer,stringBufferTemp);
 80016b8:	1d3b      	adds	r3, r7, #4
 80016ba:	4619      	mov	r1, r3
 80016bc:	4815      	ldr	r0, [pc, #84]	; (8001714 <controller_print+0x158>)
 80016be:	f008 fc77 	bl	8009fb0 <strcat>
	sprintf(stringBufferTemp, "\"SuplyVoltage\":%.3f",suplyVoltage);
 80016c2:	4b24      	ldr	r3, [pc, #144]	; (8001754 <controller_print+0x198>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7fe ff66 	bl	8000598 <__aeabi_f2d>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	1d38      	adds	r0, r7, #4
 80016d2:	4921      	ldr	r1, [pc, #132]	; (8001758 <controller_print+0x19c>)
 80016d4:	f008 fc4c 	bl	8009f70 <siprintf>
	strcat(stringBuffer,stringBufferTemp);
 80016d8:	1d3b      	adds	r3, r7, #4
 80016da:	4619      	mov	r1, r3
 80016dc:	480d      	ldr	r0, [pc, #52]	; (8001714 <controller_print+0x158>)
 80016de:	f008 fc67 	bl	8009fb0 <strcat>
	sprintf(stringBufferTemp, "\n\r");
 80016e2:	1d3b      	adds	r3, r7, #4
 80016e4:	491d      	ldr	r1, [pc, #116]	; (800175c <controller_print+0x1a0>)
 80016e6:	4618      	mov	r0, r3
 80016e8:	f008 fc42 	bl	8009f70 <siprintf>
	strcat(stringBuffer,stringBufferTemp);
 80016ec:	1d3b      	adds	r3, r7, #4
 80016ee:	4619      	mov	r1, r3
 80016f0:	4808      	ldr	r0, [pc, #32]	; (8001714 <controller_print+0x158>)
 80016f2:	f008 fc5d 	bl	8009fb0 <strcat>
	HAL_UART_Transmit_DMA(&huart1, (uint8_t *)stringBuffer, strlen(stringBuffer));
 80016f6:	4807      	ldr	r0, [pc, #28]	; (8001714 <controller_print+0x158>)
 80016f8:	f7fe fd92 	bl	8000220 <strlen>
 80016fc:	4603      	mov	r3, r0
 80016fe:	b29b      	uxth	r3, r3
 8001700:	461a      	mov	r2, r3
 8001702:	4904      	ldr	r1, [pc, #16]	; (8001714 <controller_print+0x158>)
 8001704:	4816      	ldr	r0, [pc, #88]	; (8001760 <controller_print+0x1a4>)
 8001706:	f006 fe69 	bl	80083dc <HAL_UART_Transmit_DMA>
}
 800170a:	bf00      	nop
 800170c:	3768      	adds	r7, #104	; 0x68
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	2000048c 	.word	0x2000048c
 8001718:	0800c818 	.word	0x0800c818
 800171c:	20000680 	.word	0x20000680
 8001720:	0800c824 	.word	0x0800c824
 8001724:	20000688 	.word	0x20000688
 8001728:	0800c838 	.word	0x0800c838
 800172c:	20000484 	.word	0x20000484
 8001730:	0800c848 	.word	0x0800c848
 8001734:	20000488 	.word	0x20000488
 8001738:	0800c85c 	.word	0x0800c85c
 800173c:	20000000 	.word	0x20000000
 8001740:	0800c86c 	.word	0x0800c86c
 8001744:	20000480 	.word	0x20000480
 8001748:	0800c87c 	.word	0x0800c87c
 800174c:	2000047c 	.word	0x2000047c
 8001750:	0800c88c 	.word	0x0800c88c
 8001754:	20000684 	.word	0x20000684
 8001758:	0800c8a8 	.word	0x0800c8a8
 800175c:	0800c8bc 	.word	0x0800c8bc
 8001760:	20000848 	.word	0x20000848

08001764 <updateTempMeasurementHot>:

// Function: updateTempMeasurementHot
// ----------------------------------------------------------------------------------------
//
static void updateTempMeasurementHot(uint32_t adcVal){
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
	float R;
	R = 3.3f*adcVal/MAX_ADC_VALUE;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	ee07 3a90 	vmov	s15, r3
 8001772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001776:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001834 <updateTempMeasurementHot+0xd0>
 800177a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800177e:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8001838 <updateTempMeasurementHot+0xd4>
 8001782:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001786:	edc7 7a03 	vstr	s15, [r7, #12]
	R = R0*3.3f/R - R0;
 800178a:	eddf 6a2c 	vldr	s13, [pc, #176]	; 800183c <updateTempMeasurementHot+0xd8>
 800178e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001792:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001796:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001840 <updateTempMeasurementHot+0xdc>
 800179a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800179e:	edc7 7a03 	vstr	s15, [r7, #12]
	tempHot = R/R0;
 80017a2:	ed97 7a03 	vldr	s14, [r7, #12]
 80017a6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001840 <updateTempMeasurementHot+0xdc>
 80017aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017ae:	4b25      	ldr	r3, [pc, #148]	; (8001844 <updateTempMeasurementHot+0xe0>)
 80017b0:	edc3 7a00 	vstr	s15, [r3]
	tempHot = log(tempHot);
 80017b4:	4b23      	ldr	r3, [pc, #140]	; (8001844 <updateTempMeasurementHot+0xe0>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7fe feed 	bl	8000598 <__aeabi_f2d>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	ec43 2b10 	vmov	d0, r2, r3
 80017c6:	f00a fe0f 	bl	800c3e8 <log>
 80017ca:	ec53 2b10 	vmov	r2, r3, d0
 80017ce:	4610      	mov	r0, r2
 80017d0:	4619      	mov	r1, r3
 80017d2:	f7ff fa11 	bl	8000bf8 <__aeabi_d2f>
 80017d6:	4603      	mov	r3, r0
 80017d8:	4a1a      	ldr	r2, [pc, #104]	; (8001844 <updateTempMeasurementHot+0xe0>)
 80017da:	6013      	str	r3, [r2, #0]
	tempHot /= B;
 80017dc:	4b19      	ldr	r3, [pc, #100]	; (8001844 <updateTempMeasurementHot+0xe0>)
 80017de:	ed93 7a00 	vldr	s14, [r3]
 80017e2:	eddf 6a19 	vldr	s13, [pc, #100]	; 8001848 <updateTempMeasurementHot+0xe4>
 80017e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017ea:	4b16      	ldr	r3, [pc, #88]	; (8001844 <updateTempMeasurementHot+0xe0>)
 80017ec:	edc3 7a00 	vstr	s15, [r3]
	tempHot += 1.0f / (T0 + 273.15f);
 80017f0:	4b14      	ldr	r3, [pc, #80]	; (8001844 <updateTempMeasurementHot+0xe0>)
 80017f2:	edd3 7a00 	vldr	s15, [r3]
 80017f6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800184c <updateTempMeasurementHot+0xe8>
 80017fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017fe:	4b11      	ldr	r3, [pc, #68]	; (8001844 <updateTempMeasurementHot+0xe0>)
 8001800:	edc3 7a00 	vstr	s15, [r3]
	tempHot = 1.0f / tempHot;
 8001804:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <updateTempMeasurementHot+0xe0>)
 8001806:	ed93 7a00 	vldr	s14, [r3]
 800180a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800180e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001812:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <updateTempMeasurementHot+0xe0>)
 8001814:	edc3 7a00 	vstr	s15, [r3]
	tempHot -= 273.15f;
 8001818:	4b0a      	ldr	r3, [pc, #40]	; (8001844 <updateTempMeasurementHot+0xe0>)
 800181a:	edd3 7a00 	vldr	s15, [r3]
 800181e:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001850 <updateTempMeasurementHot+0xec>
 8001822:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001826:	4b07      	ldr	r3, [pc, #28]	; (8001844 <updateTempMeasurementHot+0xe0>)
 8001828:	edc3 7a00 	vstr	s15, [r3]
}
 800182c:	bf00      	nop
 800182e:	3710      	adds	r7, #16
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40533333 	.word	0x40533333
 8001838:	45800000 	.word	0x45800000
 800183c:	4700e800 	.word	0x4700e800
 8001840:	461c4000 	.word	0x461c4000
 8001844:	20000688 	.word	0x20000688
 8001848:	4573c000 	.word	0x4573c000
 800184c:	3b5bcf0f 	.word	0x3b5bcf0f
 8001850:	43889333 	.word	0x43889333

08001854 <updateTempMeasurementCold>:

// Function: updateTempMeasurementCold
// ----------------------------------------------------------------------------------------
//
static void updateTempMeasurementCold(uint32_t adcVal){
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
	float R;
	R = 3.3f*adcVal/MAX_ADC_VALUE;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	ee07 3a90 	vmov	s15, r3
 8001862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001866:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001924 <updateTempMeasurementCold+0xd0>
 800186a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800186e:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8001928 <updateTempMeasurementCold+0xd4>
 8001872:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001876:	edc7 7a03 	vstr	s15, [r7, #12]
	R = R0*3.3f/R - R0;
 800187a:	eddf 6a2c 	vldr	s13, [pc, #176]	; 800192c <updateTempMeasurementCold+0xd8>
 800187e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001882:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001886:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001930 <updateTempMeasurementCold+0xdc>
 800188a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800188e:	edc7 7a03 	vstr	s15, [r7, #12]
	tempCold = R/R0;
 8001892:	ed97 7a03 	vldr	s14, [r7, #12]
 8001896:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001930 <updateTempMeasurementCold+0xdc>
 800189a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800189e:	4b25      	ldr	r3, [pc, #148]	; (8001934 <updateTempMeasurementCold+0xe0>)
 80018a0:	edc3 7a00 	vstr	s15, [r3]
	tempCold = log(tempCold);
 80018a4:	4b23      	ldr	r3, [pc, #140]	; (8001934 <updateTempMeasurementCold+0xe0>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7fe fe75 	bl	8000598 <__aeabi_f2d>
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	ec43 2b10 	vmov	d0, r2, r3
 80018b6:	f00a fd97 	bl	800c3e8 <log>
 80018ba:	ec53 2b10 	vmov	r2, r3, d0
 80018be:	4610      	mov	r0, r2
 80018c0:	4619      	mov	r1, r3
 80018c2:	f7ff f999 	bl	8000bf8 <__aeabi_d2f>
 80018c6:	4603      	mov	r3, r0
 80018c8:	4a1a      	ldr	r2, [pc, #104]	; (8001934 <updateTempMeasurementCold+0xe0>)
 80018ca:	6013      	str	r3, [r2, #0]
	tempCold /= B;
 80018cc:	4b19      	ldr	r3, [pc, #100]	; (8001934 <updateTempMeasurementCold+0xe0>)
 80018ce:	ed93 7a00 	vldr	s14, [r3]
 80018d2:	eddf 6a19 	vldr	s13, [pc, #100]	; 8001938 <updateTempMeasurementCold+0xe4>
 80018d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018da:	4b16      	ldr	r3, [pc, #88]	; (8001934 <updateTempMeasurementCold+0xe0>)
 80018dc:	edc3 7a00 	vstr	s15, [r3]
	tempCold += 1.0f / (T0 + 273.15f);
 80018e0:	4b14      	ldr	r3, [pc, #80]	; (8001934 <updateTempMeasurementCold+0xe0>)
 80018e2:	edd3 7a00 	vldr	s15, [r3]
 80018e6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800193c <updateTempMeasurementCold+0xe8>
 80018ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018ee:	4b11      	ldr	r3, [pc, #68]	; (8001934 <updateTempMeasurementCold+0xe0>)
 80018f0:	edc3 7a00 	vstr	s15, [r3]
	tempCold = 1.0f / tempCold;
 80018f4:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <updateTempMeasurementCold+0xe0>)
 80018f6:	ed93 7a00 	vldr	s14, [r3]
 80018fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80018fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001902:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <updateTempMeasurementCold+0xe0>)
 8001904:	edc3 7a00 	vstr	s15, [r3]
	tempCold -= 273.15f;
 8001908:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <updateTempMeasurementCold+0xe0>)
 800190a:	edd3 7a00 	vldr	s15, [r3]
 800190e:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001940 <updateTempMeasurementCold+0xec>
 8001912:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001916:	4b07      	ldr	r3, [pc, #28]	; (8001934 <updateTempMeasurementCold+0xe0>)
 8001918:	edc3 7a00 	vstr	s15, [r3]
}
 800191c:	bf00      	nop
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40533333 	.word	0x40533333
 8001928:	45800000 	.word	0x45800000
 800192c:	4700e800 	.word	0x4700e800
 8001930:	461c4000 	.word	0x461c4000
 8001934:	20000484 	.word	0x20000484
 8001938:	4573c000 	.word	0x4573c000
 800193c:	3b5bcf0f 	.word	0x3b5bcf0f
 8001940:	43889333 	.word	0x43889333

08001944 <updateVoltage>:

// Function: updateVoltage
// ----------------------------------------------------------------------------------------
//
static void updateVoltage(uint32_t adcVal){
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
	voltage = 3.3f*adcVal/MAX_ADC_VALUE;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	ee07 3a90 	vmov	s15, r3
 8001952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001956:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800198c <updateVoltage+0x48>
 800195a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800195e:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001990 <updateVoltage+0x4c>
 8001962:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001966:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <updateVoltage+0x50>)
 8001968:	edc3 7a00 	vstr	s15, [r3]
	voltage *= 4.0f;
 800196c:	4b09      	ldr	r3, [pc, #36]	; (8001994 <updateVoltage+0x50>)
 800196e:	edd3 7a00 	vldr	s15, [r3]
 8001972:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001976:	ee67 7a87 	vmul.f32	s15, s15, s14
 800197a:	4b06      	ldr	r3, [pc, #24]	; (8001994 <updateVoltage+0x50>)
 800197c:	edc3 7a00 	vstr	s15, [r3]
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	40533333 	.word	0x40533333
 8001990:	45800000 	.word	0x45800000
 8001994:	20000480 	.word	0x20000480

08001998 <updateSuplyVoltage>:

// Function: updateSuplyVoltage
// ----------------------------------------------------------------------------------------
//
static void updateSuplyVoltage(uint32_t adcVal){
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
	suplyVoltage = 3.3f*adcVal/MAX_ADC_VALUE;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	ee07 3a90 	vmov	s15, r3
 80019a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019aa:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80019e0 <updateSuplyVoltage+0x48>
 80019ae:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019b2:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80019e4 <updateSuplyVoltage+0x4c>
 80019b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019ba:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <updateSuplyVoltage+0x50>)
 80019bc:	edc3 7a00 	vstr	s15, [r3]
	suplyVoltage *= 4.0f;
 80019c0:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <updateSuplyVoltage+0x50>)
 80019c2:	edd3 7a00 	vldr	s15, [r3]
 80019c6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80019ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019ce:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <updateSuplyVoltage+0x50>)
 80019d0:	edc3 7a00 	vstr	s15, [r3]
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	40533333 	.word	0x40533333
 80019e4:	45800000 	.word	0x45800000
 80019e8:	20000684 	.word	0x20000684
 80019ec:	00000000 	.word	0x00000000

080019f0 <updateCurrent>:

// Function: updateCurrent
// ----------------------------------------------------------------------------------------
//
static void updateCurrent(uint32_t adcVal){
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
	current = 3.3f*adcVal/MAX_ADC_VALUE;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	ee07 3a90 	vmov	s15, r3
 80019fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a02:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001a78 <updateCurrent+0x88>
 8001a06:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a0a:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001a7c <updateCurrent+0x8c>
 8001a0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a12:	4b1b      	ldr	r3, [pc, #108]	; (8001a80 <updateCurrent+0x90>)
 8001a14:	edc3 7a00 	vstr	s15, [r3]
	current -= 1.65f;
 8001a18:	4b19      	ldr	r3, [pc, #100]	; (8001a80 <updateCurrent+0x90>)
 8001a1a:	edd3 7a00 	vldr	s15, [r3]
 8001a1e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001a84 <updateCurrent+0x94>
 8001a22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a26:	4b16      	ldr	r3, [pc, #88]	; (8001a80 <updateCurrent+0x90>)
 8001a28:	edc3 7a00 	vstr	s15, [r3]
	current /= -20;
 8001a2c:	4b14      	ldr	r3, [pc, #80]	; (8001a80 <updateCurrent+0x90>)
 8001a2e:	ed93 7a00 	vldr	s14, [r3]
 8001a32:	eefb 6a04 	vmov.f32	s13, #180	; 0xc1a00000 -20.0
 8001a36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a3a:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <updateCurrent+0x90>)
 8001a3c:	edc3 7a00 	vstr	s15, [r3]
	current /= 0.02;
 8001a40:	4b0f      	ldr	r3, [pc, #60]	; (8001a80 <updateCurrent+0x90>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7fe fda7 	bl	8000598 <__aeabi_f2d>
 8001a4a:	a309      	add	r3, pc, #36	; (adr r3, 8001a70 <updateCurrent+0x80>)
 8001a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a50:	f7fe ff24 	bl	800089c <__aeabi_ddiv>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4610      	mov	r0, r2
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	f7ff f8cc 	bl	8000bf8 <__aeabi_d2f>
 8001a60:	4603      	mov	r3, r0
 8001a62:	4a07      	ldr	r2, [pc, #28]	; (8001a80 <updateCurrent+0x90>)
 8001a64:	6013      	str	r3, [r2, #0]
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	47ae147b 	.word	0x47ae147b
 8001a74:	3f947ae1 	.word	0x3f947ae1
 8001a78:	40533333 	.word	0x40533333
 8001a7c:	45800000 	.word	0x45800000
 8001a80:	20000488 	.word	0x20000488
 8001a84:	3fd33333 	.word	0x3fd33333

08001a88 <updateSetVoltagePWM>:

static void updateSetVoltagePWM(){
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
	uint32_t compare;
	compare = VOLTAGE_GAIN*setVoltage/suplyVoltage*PERIOD_100;
 8001a8e:	4b10      	ldr	r3, [pc, #64]	; (8001ad0 <updateSetVoltagePWM+0x48>)
 8001a90:	edd3 6a00 	vldr	s13, [r3]
 8001a94:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <updateSetVoltagePWM+0x4c>)
 8001a96:	ed93 7a00 	vldr	s14, [r3]
 8001a9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a9e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001ad8 <updateSetVoltagePWM+0x50>
 8001aa2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001aaa:	ee17 3a90 	vmov	r3, s15
 8001aae:	607b      	str	r3, [r7, #4]
	if(compare < 121){
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2b78      	cmp	r3, #120	; 0x78
 8001ab4:	d801      	bhi.n	8001aba <updateSetVoltagePWM+0x32>
		compare = 121;
 8001ab6:	2379      	movs	r3, #121	; 0x79
 8001ab8:	607b      	str	r3, [r7, #4]
	}
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1,compare);
 8001aba:	4b08      	ldr	r3, [pc, #32]	; (8001adc <updateSetVoltagePWM+0x54>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	20000680 	.word	0x20000680
 8001ad4:	20000684 	.word	0x20000684
 8001ad8:	47548000 	.word	0x47548000
 8001adc:	2000068c 	.word	0x2000068c

08001ae0 <controller>:



static void controller(){
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001ae6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001aea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aee:	f003 f9d7 	bl	8004ea0 <HAL_GPIO_TogglePin>
	static float uk1 = 0;
	static float ek1 = 0;
	float ek = -(referneceTemp - tempCold);
 8001af2:	4b22      	ldr	r3, [pc, #136]	; (8001b7c <controller+0x9c>)
 8001af4:	ed93 7a00 	vldr	s14, [r3]
 8001af8:	4b21      	ldr	r3, [pc, #132]	; (8001b80 <controller+0xa0>)
 8001afa:	edd3 7a00 	vldr	s15, [r3]
 8001afe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b02:	eef1 7a67 	vneg.f32	s15, s15
 8001b06:	edc7 7a00 	vstr	s15, [r7]
	float uk = uk1 + 0.5642f*ek - 0.55f*ek1;
 8001b0a:	edd7 7a00 	vldr	s15, [r7]
 8001b0e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001b84 <controller+0xa4>
 8001b12:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b16:	4b1c      	ldr	r3, [pc, #112]	; (8001b88 <controller+0xa8>)
 8001b18:	edd3 7a00 	vldr	s15, [r3]
 8001b1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b20:	4b1a      	ldr	r3, [pc, #104]	; (8001b8c <controller+0xac>)
 8001b22:	edd3 7a00 	vldr	s15, [r3]
 8001b26:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8001b90 <controller+0xb0>
 8001b2a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001b2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b32:	edc7 7a01 	vstr	s15, [r7, #4]

	if(uk>5){
 8001b36:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b3a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001b3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b46:	dd01      	ble.n	8001b4c <controller+0x6c>
		uk=5;
 8001b48:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <controller+0xb4>)
 8001b4a:	607b      	str	r3, [r7, #4]
	}
	if(uk<0){
 8001b4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b58:	d502      	bpl.n	8001b60 <controller+0x80>
		uk = 0;
 8001b5a:	f04f 0300 	mov.w	r3, #0
 8001b5e:	607b      	str	r3, [r7, #4]
	}

	uk1 = uk;
 8001b60:	4a09      	ldr	r2, [pc, #36]	; (8001b88 <controller+0xa8>)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6013      	str	r3, [r2, #0]
	ek1 = ek;
 8001b66:	4a09      	ldr	r2, [pc, #36]	; (8001b8c <controller+0xac>)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	6013      	str	r3, [r2, #0]
	setVoltage = uk;
 8001b6c:	4a0a      	ldr	r2, [pc, #40]	; (8001b98 <controller+0xb8>)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6013      	str	r3, [r2, #0]
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20000000 	.word	0x20000000
 8001b80:	20000484 	.word	0x20000484
 8001b84:	3f106f69 	.word	0x3f106f69
 8001b88:	20000204 	.word	0x20000204
 8001b8c:	20000208 	.word	0x20000208
 8001b90:	3f0ccccd 	.word	0x3f0ccccd
 8001b94:	40a00000 	.word	0x40a00000
 8001b98:	20000680 	.word	0x20000680

08001b9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001ba2:	4b18      	ldr	r3, [pc, #96]	; (8001c04 <MX_DMA_Init+0x68>)
 8001ba4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ba6:	4a17      	ldr	r2, [pc, #92]	; (8001c04 <MX_DMA_Init+0x68>)
 8001ba8:	f043 0304 	orr.w	r3, r3, #4
 8001bac:	6493      	str	r3, [r2, #72]	; 0x48
 8001bae:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <MX_DMA_Init+0x68>)
 8001bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bb2:	f003 0304 	and.w	r3, r3, #4
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bba:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <MX_DMA_Init+0x68>)
 8001bbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bbe:	4a11      	ldr	r2, [pc, #68]	; (8001c04 <MX_DMA_Init+0x68>)
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	6493      	str	r3, [r2, #72]	; 0x48
 8001bc6:	4b0f      	ldr	r3, [pc, #60]	; (8001c04 <MX_DMA_Init+0x68>)
 8001bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	60bb      	str	r3, [r7, #8]
 8001bd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001bd2:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <MX_DMA_Init+0x68>)
 8001bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bd6:	4a0b      	ldr	r2, [pc, #44]	; (8001c04 <MX_DMA_Init+0x68>)
 8001bd8:	f043 0302 	orr.w	r3, r3, #2
 8001bdc:	6493      	str	r3, [r2, #72]	; 0x48
 8001bde:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <MX_DMA_Init+0x68>)
 8001be0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	607b      	str	r3, [r7, #4]
 8001be8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001bea:	2200      	movs	r2, #0
 8001bec:	2100      	movs	r1, #0
 8001bee:	200b      	movs	r0, #11
 8001bf0:	f002 fc55 	bl	800449e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001bf4:	200b      	movs	r0, #11
 8001bf6:	f002 fc6c 	bl	80044d2 <HAL_NVIC_EnableIRQ>

}
 8001bfa:	bf00      	nop
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40021000 	.word	0x40021000

08001c08 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b088      	sub	sp, #32
 8001c0c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0e:	f107 030c 	add.w	r3, r7, #12
 8001c12:	2200      	movs	r2, #0
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	605a      	str	r2, [r3, #4]
 8001c18:	609a      	str	r2, [r3, #8]
 8001c1a:	60da      	str	r2, [r3, #12]
 8001c1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c1e:	4b33      	ldr	r3, [pc, #204]	; (8001cec <MX_GPIO_Init+0xe4>)
 8001c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c22:	4a32      	ldr	r2, [pc, #200]	; (8001cec <MX_GPIO_Init+0xe4>)
 8001c24:	f043 0304 	orr.w	r3, r3, #4
 8001c28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c2a:	4b30      	ldr	r3, [pc, #192]	; (8001cec <MX_GPIO_Init+0xe4>)
 8001c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2e:	f003 0304 	and.w	r3, r3, #4
 8001c32:	60bb      	str	r3, [r7, #8]
 8001c34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c36:	4b2d      	ldr	r3, [pc, #180]	; (8001cec <MX_GPIO_Init+0xe4>)
 8001c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c3a:	4a2c      	ldr	r2, [pc, #176]	; (8001cec <MX_GPIO_Init+0xe4>)
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c42:	4b2a      	ldr	r3, [pc, #168]	; (8001cec <MX_GPIO_Init+0xe4>)
 8001c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	607b      	str	r3, [r7, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c4e:	4b27      	ldr	r3, [pc, #156]	; (8001cec <MX_GPIO_Init+0xe4>)
 8001c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c52:	4a26      	ldr	r2, [pc, #152]	; (8001cec <MX_GPIO_Init+0xe4>)
 8001c54:	f043 0302 	orr.w	r3, r3, #2
 8001c58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c5a:	4b24      	ldr	r3, [pc, #144]	; (8001cec <MX_GPIO_Init+0xe4>)
 8001c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	603b      	str	r3, [r7, #0]
 8001c64:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001c66:	2200      	movs	r2, #0
 8001c68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c6c:	4820      	ldr	r0, [pc, #128]	; (8001cf0 <MX_GPIO_Init+0xe8>)
 8001c6e:	f003 f8ff 	bl	8004e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001c72:	2200      	movs	r2, #0
 8001c74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c7c:	f003 f8f8 	bl	8004e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED4_Pin|LED5_Pin, GPIO_PIN_RESET);
 8001c80:	2200      	movs	r2, #0
 8001c82:	2130      	movs	r1, #48	; 0x30
 8001c84:	481b      	ldr	r0, [pc, #108]	; (8001cf4 <MX_GPIO_Init+0xec>)
 8001c86:	f003 f8f3 	bl	8004e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED3_Pin;
 8001c8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c90:	2301      	movs	r3, #1
 8001c92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8001c9c:	f107 030c 	add.w	r3, r7, #12
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4813      	ldr	r0, [pc, #76]	; (8001cf0 <MX_GPIO_Init+0xe8>)
 8001ca4:	f002 ff62 	bl	8004b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8001ca8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8001cba:	f107 030c 	add.w	r3, r7, #12
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cc4:	f002 ff52 	bl	8004b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED4_Pin|LED5_Pin;
 8001cc8:	2330      	movs	r3, #48	; 0x30
 8001cca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd8:	f107 030c 	add.w	r3, r7, #12
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4805      	ldr	r0, [pc, #20]	; (8001cf4 <MX_GPIO_Init+0xec>)
 8001ce0:	f002 ff44 	bl	8004b6c <HAL_GPIO_Init>

}
 8001ce4:	bf00      	nop
 8001ce6:	3720      	adds	r7, #32
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	48000800 	.word	0x48000800
 8001cf4:	48000400 	.word	0x48000400

08001cf8 <MX_HRTIM1_Init>:

HRTIM_HandleTypeDef hhrtim1;

/* HRTIM1 init function */
void MX_HRTIM1_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b0ba      	sub	sp, #232	; 0xe8
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_ADCTriggerCfgTypeDef pADCTriggerCfg = {0};
 8001cfe:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	605a      	str	r2, [r3, #4]
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8001d08:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	605a      	str	r2, [r3, #4]
 8001d12:	609a      	str	r2, [r3, #8]
 8001d14:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCtlTypeDef pTimerCtl = {0};
 8001d16:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	605a      	str	r2, [r3, #4]
 8001d20:	609a      	str	r2, [r3, #8]
 8001d22:	60da      	str	r2, [r3, #12]
 8001d24:	611a      	str	r2, [r3, #16]
 8001d26:	615a      	str	r2, [r3, #20]
 8001d28:	619a      	str	r2, [r3, #24]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8001d2a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d2e:	2260      	movs	r2, #96	; 0x60
 8001d30:	2100      	movs	r1, #0
 8001d32:	4618      	mov	r0, r3
 8001d34:	f007 fcaa 	bl	800968c <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 8001d38:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
  HRTIM_DeadTimeCfgTypeDef pDeadTimeCfg = {0};
 8001d44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d48:	2224      	movs	r2, #36	; 0x24
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f007 fc9d 	bl	800968c <memset>
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 8001d52:	1d3b      	adds	r3, r7, #4
 8001d54:	2220      	movs	r2, #32
 8001d56:	2100      	movs	r1, #0
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f007 fc97 	bl	800968c <memset>

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 8001d5e:	4bce      	ldr	r3, [pc, #824]	; (8002098 <MX_HRTIM1_Init+0x3a0>)
 8001d60:	4ace      	ldr	r2, [pc, #824]	; (800209c <MX_HRTIM1_Init+0x3a4>)
 8001d62:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8001d64:	4bcc      	ldr	r3, [pc, #816]	; (8002098 <MX_HRTIM1_Init+0x3a0>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8001d6a:	4bcb      	ldr	r3, [pc, #812]	; (8002098 <MX_HRTIM1_Init+0x3a0>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 8001d70:	48c9      	ldr	r0, [pc, #804]	; (8002098 <MX_HRTIM1_Init+0x3a0>)
 8001d72:	f003 f8af 	bl	8004ed4 <HAL_HRTIM_Init>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_HRTIM1_Init+0x88>
  {
    Error_Handler();
 8001d7c:	f000 faf8 	bl	8002370 <Error_Handler>
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) != HAL_OK)
 8001d80:	210c      	movs	r1, #12
 8001d82:	48c5      	ldr	r0, [pc, #788]	; (8002098 <MX_HRTIM1_Init+0x3a0>)
 8001d84:	f003 f976 	bl	8005074 <HAL_HRTIM_DLLCalibrationStart>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_HRTIM1_Init+0x9a>
  {
    Error_Handler();
 8001d8e:	f000 faef 	bl	8002370 <Error_Handler>
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 8001d92:	210a      	movs	r1, #10
 8001d94:	48c0      	ldr	r0, [pc, #768]	; (8002098 <MX_HRTIM1_Init+0x3a0>)
 8001d96:	f003 f9c5 	bl	8005124 <HAL_HRTIM_PollForDLLCalibration>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_HRTIM1_Init+0xac>
  {
    Error_Handler();
 8001da0:	f000 fae6 	bl	8002370 <Error_Handler>
  }
  pADCTriggerCfg.UpdateSource = HRTIM_ADCTRIGGERUPDATE_TIMER_C;
 8001da4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001da8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  pADCTriggerCfg.Trigger = HRTIM_ADCTRIGGEREVENT13_TIMERE_CMP3;
 8001dac:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001db0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  if (HAL_HRTIM_ADCTriggerConfig(&hhrtim1, HRTIM_ADCTRIGGER_1, &pADCTriggerCfg) != HAL_OK)
 8001db4:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001db8:	461a      	mov	r2, r3
 8001dba:	2101      	movs	r1, #1
 8001dbc:	48b6      	ldr	r0, [pc, #728]	; (8002098 <MX_HRTIM1_Init+0x3a0>)
 8001dbe:	f003 fa0d 	bl	80051dc <HAL_HRTIM_ADCTriggerConfig>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <MX_HRTIM1_Init+0xd4>
  {
    Error_Handler();
 8001dc8:	f000 fad2 	bl	8002370 <Error_Handler>
  }
  if (HAL_HRTIM_ADCPostScalerConfig(&hhrtim1, HRTIM_ADCTRIGGER_1, 10) != HAL_OK)
 8001dcc:	220a      	movs	r2, #10
 8001dce:	2101      	movs	r1, #1
 8001dd0:	48b1      	ldr	r0, [pc, #708]	; (8002098 <MX_HRTIM1_Init+0x3a0>)
 8001dd2:	f003 fbef 	bl	80055b4 <HAL_HRTIM_ADCPostScalerConfig>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_HRTIM1_Init+0xe8>
  {
    Error_Handler();
 8001ddc:	f000 fac8 	bl	8002370 <Error_Handler>
  }
  pTimeBaseCfg.Period = PERIOD_100;
 8001de0:	f24d 4380 	movw	r3, #54400	; 0xd480
 8001de4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8001de8:	2300      	movs	r3, #0
 8001dea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL32;
 8001dee:	2300      	movs	r3, #0
 8001df0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8001df4:	2308      	movs	r3, #8
 8001df6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimeBaseCfg) != HAL_OK)
 8001dfa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001dfe:	461a      	mov	r2, r3
 8001e00:	2102      	movs	r1, #2
 8001e02:	48a5      	ldr	r0, [pc, #660]	; (8002098 <MX_HRTIM1_Init+0x3a0>)
 8001e04:	f003 f9c2 	bl	800518c <HAL_HRTIM_TimeBaseConfig>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <MX_HRTIM1_Init+0x11a>
  {
    Error_Handler();
 8001e0e:	f000 faaf 	bl	8002370 <Error_Handler>
  }
  pTimerCtl.UpDownMode = HRTIM_TIMERUPDOWNMODE_UP;
 8001e12:	2300      	movs	r3, #0
 8001e14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  pTimerCtl.GreaterCMP1 = HRTIM_TIMERGTCMP1_EQUAL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  pTimerCtl.DualChannelDacEnable = HRTIM_TIMER_DCDE_DISABLED;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimerCtl) != HAL_OK)
 8001e24:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001e28:	461a      	mov	r2, r3
 8001e2a:	2102      	movs	r1, #2
 8001e2c:	489a      	ldr	r0, [pc, #616]	; (8002098 <MX_HRTIM1_Init+0x3a0>)
 8001e2e:	f003 fd7d 	bl	800592c <HAL_HRTIM_WaveformTimerControl>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_HRTIM1_Init+0x144>
  {
    Error_Handler();
 8001e38:	f000 fa9a 	bl	8002370 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8001e40:	2300      	movs	r3, #0
 8001e42:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.DMASrcAddress = 0x0000;
 8001e44:	2300      	movs	r3, #0
 8001e46:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.DMADstAddress = 0x0000;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.DMASize = 0x1;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8001e50:	2300      	movs	r3, #0
 8001e52:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 8001e54:	2300      	movs	r3, #0
 8001e56:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8001e60:	2300      	movs	r3, #0
 8001e62:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 8001e64:	2300      	movs	r3, #0
 8001e66:	67fb      	str	r3, [r7, #124]	; 0x7c
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8001e74:	2300      	movs	r3, #0
 8001e76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8001e80:	2300      	movs	r3, #0
 8001e82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8001e86:	2300      	movs	r3, #0
 8001e88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_ENABLED;
 8001e8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8001e94:	2300      	movs	r3, #0
 8001e96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 8001eac:	2300      	movs	r3, #0
 8001eae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimerCfg) != HAL_OK)
 8001eb2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	2102      	movs	r1, #2
 8001eba:	4877      	ldr	r0, [pc, #476]	; (8002098 <MX_HRTIM1_Init+0x3a0>)
 8001ebc:	f003 fcc4 	bl	8005848 <HAL_HRTIM_WaveformTimerConfig>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <MX_HRTIM1_Init+0x1d2>
  {
    Error_Handler();
 8001ec6:	f000 fa53 	bl	8002370 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_MASTER_IT_NONE;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 8001ed4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ed8:	461a      	mov	r2, r3
 8001eda:	2104      	movs	r1, #4
 8001edc:	486e      	ldr	r0, [pc, #440]	; (8002098 <MX_HRTIM1_Init+0x3a0>)
 8001ede:	f003 fcb3 	bl	8005848 <HAL_HRTIM_WaveformTimerConfig>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_HRTIM1_Init+0x1f4>
  {
    Error_Handler();
 8001ee8:	f000 fa42 	bl	8002370 <Error_Handler>
  }
  pCompareCfg.CompareValue = 0x120;
 8001eec:	f44f 7390 	mov.w	r3, #288	; 0x120
 8001ef0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8001ef2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	2102      	movs	r1, #2
 8001efa:	4867      	ldr	r0, [pc, #412]	; (8002098 <MX_HRTIM1_Init+0x3a0>)
 8001efc:	f003 fdca 	bl	8005a94 <HAL_HRTIM_WaveformCompareConfig>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <MX_HRTIM1_Init+0x212>
  {
    Error_Handler();
 8001f06:	f000 fa33 	bl	8002370 <Error_Handler>
  }
  pDeadTimeCfg.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_MUL8;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	627b      	str	r3, [r7, #36]	; 0x24
  pDeadTimeCfg.RisingValue = DEADTIME;
 8001f0e:	2332      	movs	r3, #50	; 0x32
 8001f10:	62bb      	str	r3, [r7, #40]	; 0x28
  pDeadTimeCfg.RisingSign = HRTIM_TIMDEADTIME_RISINGSIGN_POSITIVE;
 8001f12:	2300      	movs	r3, #0
 8001f14:	62fb      	str	r3, [r7, #44]	; 0x2c
  pDeadTimeCfg.RisingLock = HRTIM_TIMDEADTIME_RISINGLOCK_WRITE;
 8001f16:	2300      	movs	r3, #0
 8001f18:	633b      	str	r3, [r7, #48]	; 0x30
  pDeadTimeCfg.RisingSignLock = HRTIM_TIMDEADTIME_RISINGSIGNLOCK_WRITE;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	637b      	str	r3, [r7, #52]	; 0x34
  pDeadTimeCfg.FallingValue = DEADTIME;
 8001f1e:	2332      	movs	r3, #50	; 0x32
 8001f20:	63bb      	str	r3, [r7, #56]	; 0x38
  pDeadTimeCfg.FallingSign = HRTIM_TIMDEADTIME_FALLINGSIGN_POSITIVE;
 8001f22:	2300      	movs	r3, #0
 8001f24:	63fb      	str	r3, [r7, #60]	; 0x3c
  pDeadTimeCfg.FallingLock = HRTIM_TIMDEADTIME_FALLINGLOCK_WRITE;
 8001f26:	2300      	movs	r3, #0
 8001f28:	643b      	str	r3, [r7, #64]	; 0x40
  pDeadTimeCfg.FallingSignLock = HRTIM_TIMDEADTIME_FALLINGSIGNLOCK_WRITE;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pDeadTimeCfg) != HAL_OK)
 8001f2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f32:	461a      	mov	r2, r3
 8001f34:	2102      	movs	r1, #2
 8001f36:	4858      	ldr	r0, [pc, #352]	; (8002098 <MX_HRTIM1_Init+0x3a0>)
 8001f38:	f003 fd2c 	bl	8005994 <HAL_HRTIM_DeadTimeConfig>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <MX_HRTIM1_Init+0x24e>
  {
    Error_Handler();
 8001f42:	f000 fa15 	bl	8002370 <Error_Handler>
  }
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pDeadTimeCfg) != HAL_OK)
 8001f46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	2104      	movs	r1, #4
 8001f4e:	4852      	ldr	r0, [pc, #328]	; (8002098 <MX_HRTIM1_Init+0x3a0>)
 8001f50:	f003 fd20 	bl	8005994 <HAL_HRTIM_DeadTimeConfig>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_HRTIM1_Init+0x266>
  {
    Error_Handler();
 8001f5a:	f000 fa09 	bl	8002370 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	607b      	str	r3, [r7, #4]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMPER;
 8001f62:	2304      	movs	r3, #4
 8001f64:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP1;
 8001f66:	2308      	movs	r3, #8
 8001f68:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	613b      	str	r3, [r7, #16]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	617b      	str	r3, [r7, #20]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61bb      	str	r3, [r7, #24]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC1, &pOutputCfg) != HAL_OK)
 8001f7e:	1d3b      	adds	r3, r7, #4
 8001f80:	2210      	movs	r2, #16
 8001f82:	2102      	movs	r1, #2
 8001f84:	4844      	ldr	r0, [pc, #272]	; (8002098 <MX_HRTIM1_Init+0x3a0>)
 8001f86:	f003 fef3 	bl	8005d70 <HAL_HRTIM_WaveformOutputConfig>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_HRTIM1_Init+0x29c>
  {
    Error_Handler();
 8001f90:	f000 f9ee 	bl	8002370 <Error_Handler>
  }
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMCMP1;
 8001f94:	2318      	movs	r3, #24
 8001f96:	60fb      	str	r3, [r7, #12]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE1, &pOutputCfg) != HAL_OK)
 8001f98:	1d3b      	adds	r3, r7, #4
 8001f9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f9e:	2104      	movs	r1, #4
 8001fa0:	483d      	ldr	r0, [pc, #244]	; (8002098 <MX_HRTIM1_Init+0x3a0>)
 8001fa2:	f003 fee5 	bl	8005d70 <HAL_HRTIM_WaveformOutputConfig>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <MX_HRTIM1_Init+0x2b8>
  {
    Error_Handler();
 8001fac:	f000 f9e0 	bl	8002370 <Error_Handler>
  }
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	60fb      	str	r3, [r7, #12]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC2, &pOutputCfg) != HAL_OK)
 8001fb8:	1d3b      	adds	r3, r7, #4
 8001fba:	2220      	movs	r2, #32
 8001fbc:	2102      	movs	r1, #2
 8001fbe:	4836      	ldr	r0, [pc, #216]	; (8002098 <MX_HRTIM1_Init+0x3a0>)
 8001fc0:	f003 fed6 	bl	8005d70 <HAL_HRTIM_WaveformOutputConfig>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <MX_HRTIM1_Init+0x2d6>
  {
    Error_Handler();
 8001fca:	f000 f9d1 	bl	8002370 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE2, &pOutputCfg) != HAL_OK)
 8001fce:	1d3b      	adds	r3, r7, #4
 8001fd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fd4:	2104      	movs	r1, #4
 8001fd6:	4830      	ldr	r0, [pc, #192]	; (8002098 <MX_HRTIM1_Init+0x3a0>)
 8001fd8:	f003 feca 	bl	8005d70 <HAL_HRTIM_WaveformOutputConfig>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <MX_HRTIM1_Init+0x2ee>
  {
    Error_Handler();
 8001fe2:	f000 f9c5 	bl	8002370 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 8001fe6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001fea:	461a      	mov	r2, r3
 8001fec:	2104      	movs	r1, #4
 8001fee:	482a      	ldr	r0, [pc, #168]	; (8002098 <MX_HRTIM1_Init+0x3a0>)
 8001ff0:	f003 f8cc 	bl	800518c <HAL_HRTIM_TimeBaseConfig>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_HRTIM1_Init+0x306>
  {
    Error_Handler();
 8001ffa:	f000 f9b9 	bl	8002370 <Error_Handler>
  }
  pTimerCtl.TrigHalf = HRTIM_TIMERTRIGHALF_DISABLED;
 8001ffe:	2300      	movs	r3, #0
 8002000:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  pTimerCtl.GreaterCMP3 = HRTIM_TIMERGTCMP3_EQUAL;
 8002004:	2300      	movs	r3, #0
 8002006:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  pTimerCtl.GreaterCMP1 = HRTIM_TIMERGTCMP1_GREATER;
 800200a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800200e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimerCtl) != HAL_OK)
 8002012:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002016:	461a      	mov	r2, r3
 8002018:	2104      	movs	r1, #4
 800201a:	481f      	ldr	r0, [pc, #124]	; (8002098 <MX_HRTIM1_Init+0x3a0>)
 800201c:	f003 fc86 	bl	800592c <HAL_HRTIM_WaveformTimerControl>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <MX_HRTIM1_Init+0x332>
  {
    Error_Handler();
 8002026:	f000 f9a3 	bl	8002370 <Error_Handler>
  }
  pCompareCfg.CompareValue = 120;
 800202a:	2378      	movs	r3, #120	; 0x78
 800202c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 800202e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002032:	2201      	movs	r2, #1
 8002034:	2104      	movs	r1, #4
 8002036:	4818      	ldr	r0, [pc, #96]	; (8002098 <MX_HRTIM1_Init+0x3a0>)
 8002038:	f003 fd2c 	bl	8005a94 <HAL_HRTIM_WaveformCompareConfig>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_HRTIM1_Init+0x34e>
  {
    Error_Handler();
 8002042:	f000 f995 	bl	8002370 <Error_Handler>
  }
  pCompareCfg.CompareValue = MAX_PERIOD;
 8002046:	f648 53ab 	movw	r3, #36267	; 0x8dab
 800204a:	64bb      	str	r3, [r7, #72]	; 0x48
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 800204c:	2300      	movs	r3, #0
 800204e:	64fb      	str	r3, [r7, #76]	; 0x4c
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 8002050:	2300      	movs	r3, #0
 8002052:	653b      	str	r3, [r7, #80]	; 0x50

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8002054:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002058:	2202      	movs	r2, #2
 800205a:	2104      	movs	r1, #4
 800205c:	480e      	ldr	r0, [pc, #56]	; (8002098 <MX_HRTIM1_Init+0x3a0>)
 800205e:	f003 fd19 	bl	8005a94 <HAL_HRTIM_WaveformCompareConfig>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <MX_HRTIM1_Init+0x374>
  {
    Error_Handler();
 8002068:	f000 f982 	bl	8002370 <Error_Handler>
  }
  pCompareCfg.CompareValue = BLANKING;
 800206c:	23c8      	movs	r3, #200	; 0xc8
 800206e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8002070:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002074:	2204      	movs	r2, #4
 8002076:	2104      	movs	r1, #4
 8002078:	4807      	ldr	r0, [pc, #28]	; (8002098 <MX_HRTIM1_Init+0x3a0>)
 800207a:	f003 fd0b 	bl	8005a94 <HAL_HRTIM_WaveformCompareConfig>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <MX_HRTIM1_Init+0x390>
  {
    Error_Handler();
 8002084:	f000 f974 	bl	8002370 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim1);
 8002088:	4803      	ldr	r0, [pc, #12]	; (8002098 <MX_HRTIM1_Init+0x3a0>)
 800208a:	f000 f829 	bl	80020e0 <HAL_HRTIM_MspPostInit>

}
 800208e:	bf00      	nop
 8002090:	37e8      	adds	r7, #232	; 0xe8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	2000068c 	.word	0x2000068c
 800209c:	40016800 	.word	0x40016800

080020a0 <HAL_HRTIM_MspInit>:

void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]

  if(hrtimHandle->Instance==HRTIM1)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a0a      	ldr	r2, [pc, #40]	; (80020d8 <HAL_HRTIM_MspInit+0x38>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d10b      	bne.n	80020ca <HAL_HRTIM_MspInit+0x2a>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* HRTIM1 clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 80020b2:	4b0a      	ldr	r3, [pc, #40]	; (80020dc <HAL_HRTIM_MspInit+0x3c>)
 80020b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020b6:	4a09      	ldr	r2, [pc, #36]	; (80020dc <HAL_HRTIM_MspInit+0x3c>)
 80020b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80020bc:	6613      	str	r3, [r2, #96]	; 0x60
 80020be:	4b07      	ldr	r3, [pc, #28]	; (80020dc <HAL_HRTIM_MspInit+0x3c>)
 80020c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }
}
 80020ca:	bf00      	nop
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	40016800 	.word	0x40016800
 80020dc:	40021000 	.word	0x40021000

080020e0 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b08a      	sub	sp, #40	; 0x28
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e8:	f107 0314 	add.w	r3, r7, #20
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	605a      	str	r2, [r3, #4]
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	60da      	str	r2, [r3, #12]
 80020f6:	611a      	str	r2, [r3, #16]
  if(hrtimHandle->Instance==HRTIM1)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a20      	ldr	r2, [pc, #128]	; (8002180 <HAL_HRTIM_MspPostInit+0xa0>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d139      	bne.n	8002176 <HAL_HRTIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002102:	4b20      	ldr	r3, [pc, #128]	; (8002184 <HAL_HRTIM_MspPostInit+0xa4>)
 8002104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002106:	4a1f      	ldr	r2, [pc, #124]	; (8002184 <HAL_HRTIM_MspPostInit+0xa4>)
 8002108:	f043 0302 	orr.w	r3, r3, #2
 800210c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800210e:	4b1d      	ldr	r3, [pc, #116]	; (8002184 <HAL_HRTIM_MspPostInit+0xa4>)
 8002110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	613b      	str	r3, [r7, #16]
 8002118:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800211a:	4b1a      	ldr	r3, [pc, #104]	; (8002184 <HAL_HRTIM_MspPostInit+0xa4>)
 800211c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800211e:	4a19      	ldr	r2, [pc, #100]	; (8002184 <HAL_HRTIM_MspPostInit+0xa4>)
 8002120:	f043 0304 	orr.w	r3, r3, #4
 8002124:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002126:	4b17      	ldr	r3, [pc, #92]	; (8002184 <HAL_HRTIM_MspPostInit+0xa4>)
 8002128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800212a:	f003 0304 	and.w	r3, r3, #4
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> HRTIM1_CHC1
    PB13     ------> HRTIM1_CHC2
    PC8     ------> HRTIM1_CHE1
    PC9     ------> HRTIM1_CHE2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002132:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002136:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002138:	2302      	movs	r3, #2
 800213a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213c:	2300      	movs	r3, #0
 800213e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002140:	2303      	movs	r3, #3
 8002142:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8002144:	230d      	movs	r3, #13
 8002146:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002148:	f107 0314 	add.w	r3, r7, #20
 800214c:	4619      	mov	r1, r3
 800214e:	480e      	ldr	r0, [pc, #56]	; (8002188 <HAL_HRTIM_MspPostInit+0xa8>)
 8002150:	f002 fd0c 	bl	8004b6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002154:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002158:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215a:	2302      	movs	r3, #2
 800215c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215e:	2300      	movs	r3, #0
 8002160:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002162:	2303      	movs	r3, #3
 8002164:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_HRTIM1;
 8002166:	2303      	movs	r3, #3
 8002168:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800216a:	f107 0314 	add.w	r3, r7, #20
 800216e:	4619      	mov	r1, r3
 8002170:	4806      	ldr	r0, [pc, #24]	; (800218c <HAL_HRTIM_MspPostInit+0xac>)
 8002172:	f002 fcfb 	bl	8004b6c <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8002176:	bf00      	nop
 8002178:	3728      	adds	r7, #40	; 0x28
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40016800 	.word	0x40016800
 8002184:	40021000 	.word	0x40021000
 8002188:	48000400 	.word	0x48000400
 800218c:	48000800 	.word	0x48000800

08002190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002194:	f000 fbd1 	bl	800293a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002198:	f000 f866 	bl	8002268 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800219c:	f7ff fd34 	bl	8001c08 <MX_GPIO_Init>
  MX_DMA_Init();
 80021a0:	f7ff fcfc 	bl	8001b9c <MX_DMA_Init>
  MX_HRTIM1_Init();
 80021a4:	f7ff fda8 	bl	8001cf8 <MX_HRTIM1_Init>
  MX_USART1_UART_Init();
 80021a8:	f000 fada 	bl	8002760 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80021ac:	f7fe fef0 	bl	8000f90 <MX_ADC1_Init>
  MX_TIM2_Init();
 80021b0:	f000 fa64 	bl	800267c <MX_TIM2_Init>
  MX_ADC2_Init();
 80021b4:	f7fe ff82 	bl	80010bc <MX_ADC2_Init>
  MX_ADC5_Init();
 80021b8:	f7ff f804 	bl	80011c4 <MX_ADC5_Init>
  /* USER CODE BEGIN 2 */

  //Calibration of adc2
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80021bc:	217f      	movs	r1, #127	; 0x7f
 80021be:	4821      	ldr	r0, [pc, #132]	; (8002244 <main+0xb4>)
 80021c0:	f001 ff28 	bl	8004014 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 80021c4:	217f      	movs	r1, #127	; 0x7f
 80021c6:	4820      	ldr	r0, [pc, #128]	; (8002248 <main+0xb8>)
 80021c8:	f001 ff24 	bl	8004014 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc5, ADC_SINGLE_ENDED);
 80021cc:	217f      	movs	r1, #127	; 0x7f
 80021ce:	481f      	ldr	r0, [pc, #124]	; (800224c <main+0xbc>)
 80021d0:	f001 ff20 	bl	8004014 <HAL_ADCEx_Calibration_Start>



  //Start HRTIM
  HAL_HRTIM_WaveformOutputStart(&hhrtim1, HRTIM_OUTPUT_TE1|HRTIM_OUTPUT_TE2);
 80021d4:	f44f 7140 	mov.w	r1, #768	; 0x300
 80021d8:	481d      	ldr	r0, [pc, #116]	; (8002250 <main+0xc0>)
 80021da:	f003 fdfa 	bl	8005dd2 <HAL_HRTIM_WaveformOutputStart>
  HAL_HRTIM_WaveformCounterStart(&hhrtim1, HRTIM_TIMERID_TIMER_E);
 80021de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80021e2:	481b      	ldr	r0, [pc, #108]	; (8002250 <main+0xc0>)
 80021e4:	f003 fe22 	bl	8005e2c <HAL_HRTIM_WaveformCountStart>

  HAL_HRTIM_WaveformOutputStart(&hhrtim1, HRTIM_OUTPUT_TC1|HRTIM_OUTPUT_TC2);
 80021e8:	2130      	movs	r1, #48	; 0x30
 80021ea:	4819      	ldr	r0, [pc, #100]	; (8002250 <main+0xc0>)
 80021ec:	f003 fdf1 	bl	8005dd2 <HAL_HRTIM_WaveformOutputStart>
  HAL_HRTIM_WaveformCounterStart(&hhrtim1, HRTIM_TIMERID_TIMER_C);
 80021f0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80021f4:	4816      	ldr	r0, [pc, #88]	; (8002250 <main+0xc0>)
 80021f6:	f003 fe19 	bl	8005e2c <HAL_HRTIM_WaveformCountStart>



  HAL_ADC_Start_DMA(&hadc1, adcVal.ADC1Val, 2);
 80021fa:	2202      	movs	r2, #2
 80021fc:	4915      	ldr	r1, [pc, #84]	; (8002254 <main+0xc4>)
 80021fe:	4811      	ldr	r0, [pc, #68]	; (8002244 <main+0xb4>)
 8002200:	f001 f834 	bl	800326c <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, adcVal.ADC2Val, 2);
 8002204:	2202      	movs	r2, #2
 8002206:	4914      	ldr	r1, [pc, #80]	; (8002258 <main+0xc8>)
 8002208:	480f      	ldr	r0, [pc, #60]	; (8002248 <main+0xb8>)
 800220a:	f001 f82f 	bl	800326c <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc5, adcVal.ADC5Val, 1);
 800220e:	2201      	movs	r2, #1
 8002210:	4912      	ldr	r1, [pc, #72]	; (800225c <main+0xcc>)
 8002212:	480e      	ldr	r0, [pc, #56]	; (800224c <main+0xbc>)
 8002214:	f001 f82a 	bl	800326c <HAL_ADC_Start_DMA>
  HAL_Delay(1);
 8002218:	2001      	movs	r0, #1
 800221a:	f000 fbff 	bl	8002a1c <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim2);
 800221e:	4810      	ldr	r0, [pc, #64]	; (8002260 <main+0xd0>)
 8002220:	f005 fb3a 	bl	8007898 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  //controller_setVoltagePWMConsumer(0);
	  controller_setReferenceTemp(20);
 8002224:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8002228:	f7ff f9b8 	bl	800159c <controller_setReferenceTemp>
	  //controller_setVoltagePWM(0.15);
	  HAL_Delay(100000);
 800222c:	480d      	ldr	r0, [pc, #52]	; (8002264 <main+0xd4>)
 800222e:	f000 fbf5 	bl	8002a1c <HAL_Delay>

	  //controller_setVoltagePWMConsumer(5);
	  controller_setReferenceTemp(18);
 8002232:	eeb3 0a02 	vmov.f32	s0, #50	; 0x41900000  18.0
 8002236:	f7ff f9b1 	bl	800159c <controller_setReferenceTemp>
	  //controller_setVoltagePWM(0.4);
	  HAL_Delay(100000);
 800223a:	480a      	ldr	r0, [pc, #40]	; (8002264 <main+0xd4>)
 800223c:	f000 fbee 	bl	8002a1c <HAL_Delay>
	  controller_setReferenceTemp(20);
 8002240:	e7f0      	b.n	8002224 <main+0x94>
 8002242:	bf00      	nop
 8002244:	20000350 	.word	0x20000350
 8002248:	20000218 	.word	0x20000218
 800224c:	20000284 	.word	0x20000284
 8002250:	2000068c 	.word	0x2000068c
 8002254:	20000788 	.word	0x20000788
 8002258:	20000790 	.word	0x20000790
 800225c:	20000798 	.word	0x20000798
 8002260:	2000079c 	.word	0x2000079c
 8002264:	000186a0 	.word	0x000186a0

08002268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b0a8      	sub	sp, #160	; 0xa0
 800226c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800226e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002272:	2238      	movs	r2, #56	; 0x38
 8002274:	2100      	movs	r1, #0
 8002276:	4618      	mov	r0, r3
 8002278:	f007 fa08 	bl	800968c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800227c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	60da      	str	r2, [r3, #12]
 800228a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800228c:	463b      	mov	r3, r7
 800228e:	2254      	movs	r2, #84	; 0x54
 8002290:	2100      	movs	r1, #0
 8002292:	4618      	mov	r0, r3
 8002294:	f007 f9fa 	bl	800968c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002298:	2000      	movs	r0, #0
 800229a:	f004 fa71 	bl	8006780 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800229e:	2302      	movs	r3, #2
 80022a0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022a6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022a8:	2340      	movs	r3, #64	; 0x40
 80022aa:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022ac:	2302      	movs	r3, #2
 80022ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80022b2:	2302      	movs	r3, #2
 80022b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80022b8:	2304      	movs	r3, #4
 80022ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80022be:	2355      	movs	r3, #85	; 0x55
 80022c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022c4:	2302      	movs	r3, #2
 80022c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80022ca:	2302      	movs	r3, #2
 80022cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80022d0:	2302      	movs	r3, #2
 80022d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022d6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80022da:	4618      	mov	r0, r3
 80022dc:	f004 fb04 	bl	80068e8 <HAL_RCC_OscConfig>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <SystemClock_Config+0x82>
  {
    Error_Handler();
 80022e6:	f000 f843 	bl	8002370 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022ea:	230f      	movs	r3, #15
 80022ec:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022ee:	2303      	movs	r3, #3
 80022f0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022f2:	2300      	movs	r3, #0
 80022f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 80022f6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80022fa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80022fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002300:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002302:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002306:	2104      	movs	r1, #4
 8002308:	4618      	mov	r0, r3
 800230a:	f004 fe05 	bl	8006f18 <HAL_RCC_ClockConfig>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002314:	f000 f82c 	bl	8002370 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC12
 8002318:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <SystemClock_Config+0xe0>)
 800231a:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC345;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800231c:	2300      	movs	r3, #0
 800231e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002320:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002324:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8002326:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800232a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800232c:	463b      	mov	r3, r7
 800232e:	4618      	mov	r0, r3
 8002330:	f005 f80e 	bl	8007350 <HAL_RCCEx_PeriphCLKConfig>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800233a:	f000 f819 	bl	8002370 <Error_Handler>
  }
}
 800233e:	bf00      	nop
 8002340:	37a0      	adds	r7, #160	; 0xa0
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	00018001 	.word	0x00018001

0800234c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af02      	add	r7, sp, #8
 8002352:	6078      	str	r0, [r7, #4]
	controller_update(adcVal);
 8002354:	4b05      	ldr	r3, [pc, #20]	; (800236c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002356:	691a      	ldr	r2, [r3, #16]
 8002358:	9200      	str	r2, [sp, #0]
 800235a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800235c:	f7ff f8f8 	bl	8001550 <controller_update>
	controller_print();
 8002360:	f7ff f92c 	bl	80015bc <controller_print>
}
 8002364:	bf00      	nop
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	20000788 	.word	0x20000788

08002370 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002374:	b672      	cpsid	i
}
 8002376:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002378:	e7fe      	b.n	8002378 <Error_Handler+0x8>
	...

0800237c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002382:	4b0f      	ldr	r3, [pc, #60]	; (80023c0 <HAL_MspInit+0x44>)
 8002384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002386:	4a0e      	ldr	r2, [pc, #56]	; (80023c0 <HAL_MspInit+0x44>)
 8002388:	f043 0301 	orr.w	r3, r3, #1
 800238c:	6613      	str	r3, [r2, #96]	; 0x60
 800238e:	4b0c      	ldr	r3, [pc, #48]	; (80023c0 <HAL_MspInit+0x44>)
 8002390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	607b      	str	r3, [r7, #4]
 8002398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800239a:	4b09      	ldr	r3, [pc, #36]	; (80023c0 <HAL_MspInit+0x44>)
 800239c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239e:	4a08      	ldr	r2, [pc, #32]	; (80023c0 <HAL_MspInit+0x44>)
 80023a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a4:	6593      	str	r3, [r2, #88]	; 0x58
 80023a6:	4b06      	ldr	r3, [pc, #24]	; (80023c0 <HAL_MspInit+0x44>)
 80023a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ae:	603b      	str	r3, [r7, #0]
 80023b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80023b2:	f004 fa89 	bl	80068c8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	40021000 	.word	0x40021000

080023c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 80023c8:	2201      	movs	r2, #1
 80023ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023ce:	4802      	ldr	r0, [pc, #8]	; (80023d8 <NMI_Handler+0x14>)
 80023d0:	f002 fd4e 	bl	8004e70 <HAL_GPIO_WritePin>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023d4:	e7fe      	b.n	80023d4 <NMI_Handler+0x10>
 80023d6:	bf00      	nop
 80023d8:	48000800 	.word	0x48000800

080023dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 80023e0:	2201      	movs	r2, #1
 80023e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023e6:	4802      	ldr	r0, [pc, #8]	; (80023f0 <HardFault_Handler+0x14>)
 80023e8:	f002 fd42 	bl	8004e70 <HAL_GPIO_WritePin>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023ec:	e7fe      	b.n	80023ec <HardFault_Handler+0x10>
 80023ee:	bf00      	nop
 80023f0:	48000800 	.word	0x48000800

080023f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 80023f8:	2201      	movs	r2, #1
 80023fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023fe:	4802      	ldr	r0, [pc, #8]	; (8002408 <MemManage_Handler+0x14>)
 8002400:	f002 fd36 	bl	8004e70 <HAL_GPIO_WritePin>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002404:	e7fe      	b.n	8002404 <MemManage_Handler+0x10>
 8002406:	bf00      	nop
 8002408:	48000800 	.word	0x48000800

0800240c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 8002410:	2201      	movs	r2, #1
 8002412:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002416:	4802      	ldr	r0, [pc, #8]	; (8002420 <BusFault_Handler+0x14>)
 8002418:	f002 fd2a 	bl	8004e70 <HAL_GPIO_WritePin>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800241c:	e7fe      	b.n	800241c <BusFault_Handler+0x10>
 800241e:	bf00      	nop
 8002420:	48000800 	.word	0x48000800

08002424 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 8002428:	2201      	movs	r2, #1
 800242a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800242e:	4802      	ldr	r0, [pc, #8]	; (8002438 <UsageFault_Handler+0x14>)
 8002430:	f002 fd1e 	bl	8004e70 <HAL_GPIO_WritePin>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002434:	e7fe      	b.n	8002434 <UsageFault_Handler+0x10>
 8002436:	bf00      	nop
 8002438:	48000800 	.word	0x48000800

0800243c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 8002440:	2201      	movs	r2, #1
 8002442:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002446:	4802      	ldr	r0, [pc, #8]	; (8002450 <SVC_Handler+0x14>)
 8002448:	f002 fd12 	bl	8004e70 <HAL_GPIO_WritePin>
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800244c:	bf00      	nop
 800244e:	bd80      	pop	{r7, pc}
 8002450:	48000800 	.word	0x48000800

08002454 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 8002458:	2201      	movs	r2, #1
 800245a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800245e:	4802      	ldr	r0, [pc, #8]	; (8002468 <DebugMon_Handler+0x14>)
 8002460:	f002 fd06 	bl	8004e70 <HAL_GPIO_WritePin>
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002464:	bf00      	nop
 8002466:	bd80      	pop	{r7, pc}
 8002468:	48000800 	.word	0x48000800

0800246c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 8002470:	2201      	movs	r2, #1
 8002472:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002476:	4802      	ldr	r0, [pc, #8]	; (8002480 <PendSV_Handler+0x14>)
 8002478:	f002 fcfa 	bl	8004e70 <HAL_GPIO_WritePin>
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800247c:	bf00      	nop
 800247e:	bd80      	pop	{r7, pc}
 8002480:	48000800 	.word	0x48000800

08002484 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002488:	f000 faaa 	bl	80029e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800248c:	bf00      	nop
 800248e:	bd80      	pop	{r7, pc}

08002490 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002494:	4802      	ldr	r0, [pc, #8]	; (80024a0 <DMA1_Channel1_IRQHandler+0x10>)
 8002496:	f002 fa1a 	bl	80048ce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	200007e8 	.word	0x200007e8

080024a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80024a8:	4802      	ldr	r0, [pc, #8]	; (80024b4 <TIM2_IRQHandler+0x10>)
 80024aa:	f005 fa6d 	bl	8007988 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	2000079c 	.word	0x2000079c

080024b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80024bc:	4802      	ldr	r0, [pc, #8]	; (80024c8 <USART1_IRQHandler+0x10>)
 80024be:	f006 f80d 	bl	80084dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20000848 	.word	0x20000848

080024cc <_getpid>:
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	2301      	movs	r3, #1
 80024d2:	4618      	mov	r0, r3
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <_kill>:
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
 80024e6:	f007 f8a7 	bl	8009638 <__errno>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2216      	movs	r2, #22
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	f04f 33ff 	mov.w	r3, #4294967295
 80024f4:	4618      	mov	r0, r3
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <_exit>:
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	f04f 31ff 	mov.w	r1, #4294967295
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f7ff ffe7 	bl	80024dc <_kill>
 800250e:	e7fe      	b.n	800250e <_exit+0x12>

08002510 <_read>:
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
 800251c:	2300      	movs	r3, #0
 800251e:	617b      	str	r3, [r7, #20]
 8002520:	e00a      	b.n	8002538 <_read+0x28>
 8002522:	f3af 8000 	nop.w
 8002526:	4601      	mov	r1, r0
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	1c5a      	adds	r2, r3, #1
 800252c:	60ba      	str	r2, [r7, #8]
 800252e:	b2ca      	uxtb	r2, r1
 8002530:	701a      	strb	r2, [r3, #0]
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	3301      	adds	r3, #1
 8002536:	617b      	str	r3, [r7, #20]
 8002538:	697a      	ldr	r2, [r7, #20]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	429a      	cmp	r2, r3
 800253e:	dbf0      	blt.n	8002522 <_read+0x12>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4618      	mov	r0, r3
 8002544:	3718      	adds	r7, #24
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <_write>:
 800254a:	b580      	push	{r7, lr}
 800254c:	b086      	sub	sp, #24
 800254e:	af00      	add	r7, sp, #0
 8002550:	60f8      	str	r0, [r7, #12]
 8002552:	60b9      	str	r1, [r7, #8]
 8002554:	607a      	str	r2, [r7, #4]
 8002556:	2300      	movs	r3, #0
 8002558:	617b      	str	r3, [r7, #20]
 800255a:	e009      	b.n	8002570 <_write+0x26>
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	1c5a      	adds	r2, r3, #1
 8002560:	60ba      	str	r2, [r7, #8]
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f3af 8000 	nop.w
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	3301      	adds	r3, #1
 800256e:	617b      	str	r3, [r7, #20]
 8002570:	697a      	ldr	r2, [r7, #20]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	429a      	cmp	r2, r3
 8002576:	dbf1      	blt.n	800255c <_write+0x12>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4618      	mov	r0, r3
 800257c:	3718      	adds	r7, #24
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <_close>:
 8002582:	b480      	push	{r7}
 8002584:	b083      	sub	sp, #12
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
 800258a:	f04f 33ff 	mov.w	r3, #4294967295
 800258e:	4618      	mov	r0, r3
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <_fstat>:
 800259a:	b480      	push	{r7}
 800259c:	b083      	sub	sp, #12
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
 80025a2:	6039      	str	r1, [r7, #0]
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025aa:	605a      	str	r2, [r3, #4]
 80025ac:	2300      	movs	r3, #0
 80025ae:	4618      	mov	r0, r3
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <_isatty>:
 80025ba:	b480      	push	{r7}
 80025bc:	b083      	sub	sp, #12
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
 80025c2:	2301      	movs	r3, #1
 80025c4:	4618      	mov	r0, r3
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <_lseek>:
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
 80025dc:	2300      	movs	r3, #0
 80025de:	4618      	mov	r0, r3
 80025e0:	3714      	adds	r7, #20
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
	...

080025ec <_sbrk>:
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	4a14      	ldr	r2, [pc, #80]	; (8002648 <_sbrk+0x5c>)
 80025f6:	4b15      	ldr	r3, [pc, #84]	; (800264c <_sbrk+0x60>)
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	617b      	str	r3, [r7, #20]
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	613b      	str	r3, [r7, #16]
 8002600:	4b13      	ldr	r3, [pc, #76]	; (8002650 <_sbrk+0x64>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d102      	bne.n	800260e <_sbrk+0x22>
 8002608:	4b11      	ldr	r3, [pc, #68]	; (8002650 <_sbrk+0x64>)
 800260a:	4a12      	ldr	r2, [pc, #72]	; (8002654 <_sbrk+0x68>)
 800260c:	601a      	str	r2, [r3, #0]
 800260e:	4b10      	ldr	r3, [pc, #64]	; (8002650 <_sbrk+0x64>)
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4413      	add	r3, r2
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	429a      	cmp	r2, r3
 800261a:	d207      	bcs.n	800262c <_sbrk+0x40>
 800261c:	f007 f80c 	bl	8009638 <__errno>
 8002620:	4603      	mov	r3, r0
 8002622:	220c      	movs	r2, #12
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	f04f 33ff 	mov.w	r3, #4294967295
 800262a:	e009      	b.n	8002640 <_sbrk+0x54>
 800262c:	4b08      	ldr	r3, [pc, #32]	; (8002650 <_sbrk+0x64>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	60fb      	str	r3, [r7, #12]
 8002632:	4b07      	ldr	r3, [pc, #28]	; (8002650 <_sbrk+0x64>)
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4413      	add	r3, r2
 800263a:	4a05      	ldr	r2, [pc, #20]	; (8002650 <_sbrk+0x64>)
 800263c:	6013      	str	r3, [r2, #0]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	4618      	mov	r0, r3
 8002642:	3718      	adds	r7, #24
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	20020000 	.word	0x20020000
 800264c:	00000400 	.word	0x00000400
 8002650:	2000020c 	.word	0x2000020c
 8002654:	200008f0 	.word	0x200008f0

08002658 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800265c:	4b06      	ldr	r3, [pc, #24]	; (8002678 <SystemInit+0x20>)
 800265e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002662:	4a05      	ldr	r2, [pc, #20]	; (8002678 <SystemInit+0x20>)
 8002664:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002668:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800266c:	bf00      	nop
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	e000ed00 	.word	0xe000ed00

0800267c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b088      	sub	sp, #32
 8002680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002682:	f107 0310 	add.w	r3, r7, #16
 8002686:	2200      	movs	r2, #0
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	605a      	str	r2, [r3, #4]
 800268c:	609a      	str	r2, [r3, #8]
 800268e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002690:	1d3b      	adds	r3, r7, #4
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	605a      	str	r2, [r3, #4]
 8002698:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800269a:	4b1d      	ldr	r3, [pc, #116]	; (8002710 <MX_TIM2_Init+0x94>)
 800269c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026a0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80026a2:	4b1b      	ldr	r3, [pc, #108]	; (8002710 <MX_TIM2_Init+0x94>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026a8:	4b19      	ldr	r3, [pc, #100]	; (8002710 <MX_TIM2_Init+0x94>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1.0625E7;
 80026ae:	4b18      	ldr	r3, [pc, #96]	; (8002710 <MX_TIM2_Init+0x94>)
 80026b0:	4a18      	ldr	r2, [pc, #96]	; (8002714 <MX_TIM2_Init+0x98>)
 80026b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026b4:	4b16      	ldr	r3, [pc, #88]	; (8002710 <MX_TIM2_Init+0x94>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026ba:	4b15      	ldr	r3, [pc, #84]	; (8002710 <MX_TIM2_Init+0x94>)
 80026bc:	2200      	movs	r2, #0
 80026be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80026c0:	4813      	ldr	r0, [pc, #76]	; (8002710 <MX_TIM2_Init+0x94>)
 80026c2:	f005 f891 	bl	80077e8 <HAL_TIM_Base_Init>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80026cc:	f7ff fe50 	bl	8002370 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80026d6:	f107 0310 	add.w	r3, r7, #16
 80026da:	4619      	mov	r1, r3
 80026dc:	480c      	ldr	r0, [pc, #48]	; (8002710 <MX_TIM2_Init+0x94>)
 80026de:	f005 fad3 	bl	8007c88 <HAL_TIM_ConfigClockSource>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80026e8:	f7ff fe42 	bl	8002370 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80026ec:	2310      	movs	r3, #16
 80026ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026f0:	2300      	movs	r3, #0
 80026f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026f4:	1d3b      	adds	r3, r7, #4
 80026f6:	4619      	mov	r1, r3
 80026f8:	4805      	ldr	r0, [pc, #20]	; (8002710 <MX_TIM2_Init+0x94>)
 80026fa:	f005 fd43 	bl	8008184 <HAL_TIMEx_MasterConfigSynchronization>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002704:	f7ff fe34 	bl	8002370 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002708:	bf00      	nop
 800270a:	3720      	adds	r7, #32
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	2000079c 	.word	0x2000079c
 8002714:	00a21fe8 	.word	0x00a21fe8

08002718 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002728:	d113      	bne.n	8002752 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800272a:	4b0c      	ldr	r3, [pc, #48]	; (800275c <HAL_TIM_Base_MspInit+0x44>)
 800272c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800272e:	4a0b      	ldr	r2, [pc, #44]	; (800275c <HAL_TIM_Base_MspInit+0x44>)
 8002730:	f043 0301 	orr.w	r3, r3, #1
 8002734:	6593      	str	r3, [r2, #88]	; 0x58
 8002736:	4b09      	ldr	r3, [pc, #36]	; (800275c <HAL_TIM_Base_MspInit+0x44>)
 8002738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002742:	2200      	movs	r2, #0
 8002744:	2100      	movs	r1, #0
 8002746:	201c      	movs	r0, #28
 8002748:	f001 fea9 	bl	800449e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800274c:	201c      	movs	r0, #28
 800274e:	f001 fec0 	bl	80044d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002752:	bf00      	nop
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	40021000 	.word	0x40021000

08002760 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002764:	4b22      	ldr	r3, [pc, #136]	; (80027f0 <MX_USART1_UART_Init+0x90>)
 8002766:	4a23      	ldr	r2, [pc, #140]	; (80027f4 <MX_USART1_UART_Init+0x94>)
 8002768:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 800276a:	4b21      	ldr	r3, [pc, #132]	; (80027f0 <MX_USART1_UART_Init+0x90>)
 800276c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8002770:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002772:	4b1f      	ldr	r3, [pc, #124]	; (80027f0 <MX_USART1_UART_Init+0x90>)
 8002774:	2200      	movs	r2, #0
 8002776:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002778:	4b1d      	ldr	r3, [pc, #116]	; (80027f0 <MX_USART1_UART_Init+0x90>)
 800277a:	2200      	movs	r2, #0
 800277c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800277e:	4b1c      	ldr	r3, [pc, #112]	; (80027f0 <MX_USART1_UART_Init+0x90>)
 8002780:	2200      	movs	r2, #0
 8002782:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002784:	4b1a      	ldr	r3, [pc, #104]	; (80027f0 <MX_USART1_UART_Init+0x90>)
 8002786:	220c      	movs	r2, #12
 8002788:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800278a:	4b19      	ldr	r3, [pc, #100]	; (80027f0 <MX_USART1_UART_Init+0x90>)
 800278c:	2200      	movs	r2, #0
 800278e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002790:	4b17      	ldr	r3, [pc, #92]	; (80027f0 <MX_USART1_UART_Init+0x90>)
 8002792:	2200      	movs	r2, #0
 8002794:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002796:	4b16      	ldr	r3, [pc, #88]	; (80027f0 <MX_USART1_UART_Init+0x90>)
 8002798:	2200      	movs	r2, #0
 800279a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800279c:	4b14      	ldr	r3, [pc, #80]	; (80027f0 <MX_USART1_UART_Init+0x90>)
 800279e:	2200      	movs	r2, #0
 80027a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027a2:	4b13      	ldr	r3, [pc, #76]	; (80027f0 <MX_USART1_UART_Init+0x90>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027a8:	4811      	ldr	r0, [pc, #68]	; (80027f0 <MX_USART1_UART_Init+0x90>)
 80027aa:	f005 fdc7 	bl	800833c <HAL_UART_Init>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80027b4:	f7ff fddc 	bl	8002370 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027b8:	2100      	movs	r1, #0
 80027ba:	480d      	ldr	r0, [pc, #52]	; (80027f0 <MX_USART1_UART_Init+0x90>)
 80027bc:	f006 fe72 	bl	80094a4 <HAL_UARTEx_SetTxFifoThreshold>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80027c6:	f7ff fdd3 	bl	8002370 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027ca:	2100      	movs	r1, #0
 80027cc:	4808      	ldr	r0, [pc, #32]	; (80027f0 <MX_USART1_UART_Init+0x90>)
 80027ce:	f006 fea7 	bl	8009520 <HAL_UARTEx_SetRxFifoThreshold>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80027d8:	f7ff fdca 	bl	8002370 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80027dc:	4804      	ldr	r0, [pc, #16]	; (80027f0 <MX_USART1_UART_Init+0x90>)
 80027de:	f006 fe28 	bl	8009432 <HAL_UARTEx_DisableFifoMode>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80027e8:	f7ff fdc2 	bl	8002370 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80027ec:	bf00      	nop
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	20000848 	.word	0x20000848
 80027f4:	40013800 	.word	0x40013800

080027f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b08a      	sub	sp, #40	; 0x28
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002800:	f107 0314 	add.w	r3, r7, #20
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	605a      	str	r2, [r3, #4]
 800280a:	609a      	str	r2, [r3, #8]
 800280c:	60da      	str	r2, [r3, #12]
 800280e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a2f      	ldr	r2, [pc, #188]	; (80028d4 <HAL_UART_MspInit+0xdc>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d158      	bne.n	80028cc <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800281a:	4b2f      	ldr	r3, [pc, #188]	; (80028d8 <HAL_UART_MspInit+0xe0>)
 800281c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800281e:	4a2e      	ldr	r2, [pc, #184]	; (80028d8 <HAL_UART_MspInit+0xe0>)
 8002820:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002824:	6613      	str	r3, [r2, #96]	; 0x60
 8002826:	4b2c      	ldr	r3, [pc, #176]	; (80028d8 <HAL_UART_MspInit+0xe0>)
 8002828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800282a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800282e:	613b      	str	r3, [r7, #16]
 8002830:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002832:	4b29      	ldr	r3, [pc, #164]	; (80028d8 <HAL_UART_MspInit+0xe0>)
 8002834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002836:	4a28      	ldr	r2, [pc, #160]	; (80028d8 <HAL_UART_MspInit+0xe0>)
 8002838:	f043 0304 	orr.w	r3, r3, #4
 800283c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800283e:	4b26      	ldr	r3, [pc, #152]	; (80028d8 <HAL_UART_MspInit+0xe0>)
 8002840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002842:	f003 0304 	and.w	r3, r3, #4
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800284a:	2330      	movs	r3, #48	; 0x30
 800284c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284e:	2302      	movs	r3, #2
 8002850:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002852:	2300      	movs	r3, #0
 8002854:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002856:	2300      	movs	r3, #0
 8002858:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800285a:	2307      	movs	r3, #7
 800285c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800285e:	f107 0314 	add.w	r3, r7, #20
 8002862:	4619      	mov	r1, r3
 8002864:	481d      	ldr	r0, [pc, #116]	; (80028dc <HAL_UART_MspInit+0xe4>)
 8002866:	f002 f981 	bl	8004b6c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 800286a:	4b1d      	ldr	r3, [pc, #116]	; (80028e0 <HAL_UART_MspInit+0xe8>)
 800286c:	4a1d      	ldr	r2, [pc, #116]	; (80028e4 <HAL_UART_MspInit+0xec>)
 800286e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002870:	4b1b      	ldr	r3, [pc, #108]	; (80028e0 <HAL_UART_MspInit+0xe8>)
 8002872:	2219      	movs	r2, #25
 8002874:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002876:	4b1a      	ldr	r3, [pc, #104]	; (80028e0 <HAL_UART_MspInit+0xe8>)
 8002878:	2210      	movs	r2, #16
 800287a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800287c:	4b18      	ldr	r3, [pc, #96]	; (80028e0 <HAL_UART_MspInit+0xe8>)
 800287e:	2200      	movs	r2, #0
 8002880:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002882:	4b17      	ldr	r3, [pc, #92]	; (80028e0 <HAL_UART_MspInit+0xe8>)
 8002884:	2280      	movs	r2, #128	; 0x80
 8002886:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002888:	4b15      	ldr	r3, [pc, #84]	; (80028e0 <HAL_UART_MspInit+0xe8>)
 800288a:	2200      	movs	r2, #0
 800288c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800288e:	4b14      	ldr	r3, [pc, #80]	; (80028e0 <HAL_UART_MspInit+0xe8>)
 8002890:	2200      	movs	r2, #0
 8002892:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002894:	4b12      	ldr	r3, [pc, #72]	; (80028e0 <HAL_UART_MspInit+0xe8>)
 8002896:	2200      	movs	r2, #0
 8002898:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800289a:	4b11      	ldr	r3, [pc, #68]	; (80028e0 <HAL_UART_MspInit+0xe8>)
 800289c:	2200      	movs	r2, #0
 800289e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80028a0:	480f      	ldr	r0, [pc, #60]	; (80028e0 <HAL_UART_MspInit+0xe8>)
 80028a2:	f001 fe31 	bl	8004508 <HAL_DMA_Init>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <HAL_UART_MspInit+0xb8>
    {
      Error_Handler();
 80028ac:	f7ff fd60 	bl	8002370 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a0b      	ldr	r2, [pc, #44]	; (80028e0 <HAL_UART_MspInit+0xe8>)
 80028b4:	679a      	str	r2, [r3, #120]	; 0x78
 80028b6:	4a0a      	ldr	r2, [pc, #40]	; (80028e0 <HAL_UART_MspInit+0xe8>)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80028bc:	2200      	movs	r2, #0
 80028be:	2100      	movs	r1, #0
 80028c0:	2025      	movs	r0, #37	; 0x25
 80028c2:	f001 fdec 	bl	800449e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80028c6:	2025      	movs	r0, #37	; 0x25
 80028c8:	f001 fe03 	bl	80044d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80028cc:	bf00      	nop
 80028ce:	3728      	adds	r7, #40	; 0x28
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40013800 	.word	0x40013800
 80028d8:	40021000 	.word	0x40021000
 80028dc:	48000800 	.word	0x48000800
 80028e0:	200007e8 	.word	0x200007e8
 80028e4:	40020008 	.word	0x40020008

080028e8 <Reset_Handler>:
 80028e8:	480d      	ldr	r0, [pc, #52]	; (8002920 <LoopForever+0x2>)
 80028ea:	4685      	mov	sp, r0
 80028ec:	480d      	ldr	r0, [pc, #52]	; (8002924 <LoopForever+0x6>)
 80028ee:	490e      	ldr	r1, [pc, #56]	; (8002928 <LoopForever+0xa>)
 80028f0:	4a0e      	ldr	r2, [pc, #56]	; (800292c <LoopForever+0xe>)
 80028f2:	2300      	movs	r3, #0
 80028f4:	e002      	b.n	80028fc <LoopCopyDataInit>

080028f6 <CopyDataInit>:
 80028f6:	58d4      	ldr	r4, [r2, r3]
 80028f8:	50c4      	str	r4, [r0, r3]
 80028fa:	3304      	adds	r3, #4

080028fc <LoopCopyDataInit>:
 80028fc:	18c4      	adds	r4, r0, r3
 80028fe:	428c      	cmp	r4, r1
 8002900:	d3f9      	bcc.n	80028f6 <CopyDataInit>
 8002902:	4a0b      	ldr	r2, [pc, #44]	; (8002930 <LoopForever+0x12>)
 8002904:	4c0b      	ldr	r4, [pc, #44]	; (8002934 <LoopForever+0x16>)
 8002906:	2300      	movs	r3, #0
 8002908:	e001      	b.n	800290e <LoopFillZerobss>

0800290a <FillZerobss>:
 800290a:	6013      	str	r3, [r2, #0]
 800290c:	3204      	adds	r2, #4

0800290e <LoopFillZerobss>:
 800290e:	42a2      	cmp	r2, r4
 8002910:	d3fb      	bcc.n	800290a <FillZerobss>
 8002912:	f7ff fea1 	bl	8002658 <SystemInit>
 8002916:	f006 fe95 	bl	8009644 <__libc_init_array>
 800291a:	f7ff fc39 	bl	8002190 <main>

0800291e <LoopForever>:
 800291e:	e7fe      	b.n	800291e <LoopForever>
 8002920:	20020000 	.word	0x20020000
 8002924:	20000000 	.word	0x20000000
 8002928:	200001e4 	.word	0x200001e4
 800292c:	0800ccf4 	.word	0x0800ccf4
 8002930:	200001e4 	.word	0x200001e4
 8002934:	200008ec 	.word	0x200008ec

08002938 <ADC1_2_IRQHandler>:
 8002938:	e7fe      	b.n	8002938 <ADC1_2_IRQHandler>

0800293a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b082      	sub	sp, #8
 800293e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002940:	2300      	movs	r3, #0
 8002942:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002944:	2003      	movs	r0, #3
 8002946:	f001 fd9f 	bl	8004488 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800294a:	2000      	movs	r0, #0
 800294c:	f000 f80e 	bl	800296c <HAL_InitTick>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d002      	beq.n	800295c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	71fb      	strb	r3, [r7, #7]
 800295a:	e001      	b.n	8002960 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800295c:	f7ff fd0e 	bl	800237c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002960:	79fb      	ldrb	r3, [r7, #7]

}
 8002962:	4618      	mov	r0, r3
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
	...

0800296c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002974:	2300      	movs	r3, #0
 8002976:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002978:	4b16      	ldr	r3, [pc, #88]	; (80029d4 <HAL_InitTick+0x68>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d022      	beq.n	80029c6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002980:	4b15      	ldr	r3, [pc, #84]	; (80029d8 <HAL_InitTick+0x6c>)
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	4b13      	ldr	r3, [pc, #76]	; (80029d4 <HAL_InitTick+0x68>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800298c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002990:	fbb2 f3f3 	udiv	r3, r2, r3
 8002994:	4618      	mov	r0, r3
 8002996:	f001 fdaa 	bl	80044ee <HAL_SYSTICK_Config>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d10f      	bne.n	80029c0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b0f      	cmp	r3, #15
 80029a4:	d809      	bhi.n	80029ba <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029a6:	2200      	movs	r2, #0
 80029a8:	6879      	ldr	r1, [r7, #4]
 80029aa:	f04f 30ff 	mov.w	r0, #4294967295
 80029ae:	f001 fd76 	bl	800449e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80029b2:	4a0a      	ldr	r2, [pc, #40]	; (80029dc <HAL_InitTick+0x70>)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6013      	str	r3, [r2, #0]
 80029b8:	e007      	b.n	80029ca <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	73fb      	strb	r3, [r7, #15]
 80029be:	e004      	b.n	80029ca <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	73fb      	strb	r3, [r7, #15]
 80029c4:	e001      	b.n	80029ca <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80029ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3710      	adds	r7, #16
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	2000000c 	.word	0x2000000c
 80029d8:	20000004 	.word	0x20000004
 80029dc:	20000008 	.word	0x20000008

080029e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029e4:	4b05      	ldr	r3, [pc, #20]	; (80029fc <HAL_IncTick+0x1c>)
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	4b05      	ldr	r3, [pc, #20]	; (8002a00 <HAL_IncTick+0x20>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4413      	add	r3, r2
 80029ee:	4a03      	ldr	r2, [pc, #12]	; (80029fc <HAL_IncTick+0x1c>)
 80029f0:	6013      	str	r3, [r2, #0]
}
 80029f2:	bf00      	nop
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	200008d8 	.word	0x200008d8
 8002a00:	2000000c 	.word	0x2000000c

08002a04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  return uwTick;
 8002a08:	4b03      	ldr	r3, [pc, #12]	; (8002a18 <HAL_GetTick+0x14>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	200008d8 	.word	0x200008d8

08002a1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a24:	f7ff ffee 	bl	8002a04 <HAL_GetTick>
 8002a28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a34:	d004      	beq.n	8002a40 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a36:	4b09      	ldr	r3, [pc, #36]	; (8002a5c <HAL_Delay+0x40>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a40:	bf00      	nop
 8002a42:	f7ff ffdf 	bl	8002a04 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d8f7      	bhi.n	8002a42 <HAL_Delay+0x26>
  {
  }
}
 8002a52:	bf00      	nop
 8002a54:	bf00      	nop
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	2000000c 	.word	0x2000000c

08002a60 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	431a      	orrs	r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	609a      	str	r2, [r3, #8]
}
 8002a7a:	bf00      	nop
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
 8002a8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	609a      	str	r2, [r3, #8]
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b087      	sub	sp, #28
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
 8002ad4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	3360      	adds	r3, #96	; 0x60
 8002ada:	461a      	mov	r2, r3
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	4b08      	ldr	r3, [pc, #32]	; (8002b0c <LL_ADC_SetOffset+0x44>)
 8002aea:	4013      	ands	r3, r2
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	430a      	orrs	r2, r1
 8002af6:	4313      	orrs	r3, r2
 8002af8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002b00:	bf00      	nop
 8002b02:	371c      	adds	r7, #28
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr
 8002b0c:	03fff000 	.word	0x03fff000

08002b10 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	3360      	adds	r3, #96	; 0x60
 8002b1e:	461a      	mov	r2, r3
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4413      	add	r3, r2
 8002b26:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3714      	adds	r7, #20
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b087      	sub	sp, #28
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	3360      	adds	r3, #96	; 0x60
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	4413      	add	r3, r2
 8002b54:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	431a      	orrs	r2, r3
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002b66:	bf00      	nop
 8002b68:	371c      	adds	r7, #28
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002b72:	b480      	push	{r7}
 8002b74:	b087      	sub	sp, #28
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	60f8      	str	r0, [r7, #12]
 8002b7a:	60b9      	str	r1, [r7, #8]
 8002b7c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	3360      	adds	r3, #96	; 0x60
 8002b82:	461a      	mov	r2, r3
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4413      	add	r3, r2
 8002b8a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	431a      	orrs	r2, r3
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002b9c:	bf00      	nop
 8002b9e:	371c      	adds	r7, #28
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b087      	sub	sp, #28
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	3360      	adds	r3, #96	; 0x60
 8002bb8:	461a      	mov	r2, r3
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	4413      	add	r3, r2
 8002bc0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	431a      	orrs	r2, r3
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002bd2:	bf00      	nop
 8002bd4:	371c      	adds	r7, #28
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr

08002bde <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b083      	sub	sp, #12
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
 8002be6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	695b      	ldr	r3, [r3, #20]
 8002bec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	615a      	str	r2, [r3, #20]
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d101      	bne.n	8002c1c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e000      	b.n	8002c1e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b087      	sub	sp, #28
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	60f8      	str	r0, [r7, #12]
 8002c32:	60b9      	str	r1, [r7, #8]
 8002c34:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	3330      	adds	r3, #48	; 0x30
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	0a1b      	lsrs	r3, r3, #8
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	f003 030c 	and.w	r3, r3, #12
 8002c46:	4413      	add	r3, r2
 8002c48:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	f003 031f 	and.w	r3, r3, #31
 8002c54:	211f      	movs	r1, #31
 8002c56:	fa01 f303 	lsl.w	r3, r1, r3
 8002c5a:	43db      	mvns	r3, r3
 8002c5c:	401a      	ands	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	0e9b      	lsrs	r3, r3, #26
 8002c62:	f003 011f 	and.w	r1, r3, #31
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	f003 031f 	and.w	r3, r3, #31
 8002c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c70:	431a      	orrs	r2, r3
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c76:	bf00      	nop
 8002c78:	371c      	adds	r7, #28
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr

08002c82 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b087      	sub	sp, #28
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	60f8      	str	r0, [r7, #12]
 8002c8a:	60b9      	str	r1, [r7, #8]
 8002c8c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	3314      	adds	r3, #20
 8002c92:	461a      	mov	r2, r3
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	0e5b      	lsrs	r3, r3, #25
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	f003 0304 	and.w	r3, r3, #4
 8002c9e:	4413      	add	r3, r2
 8002ca0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	0d1b      	lsrs	r3, r3, #20
 8002caa:	f003 031f 	and.w	r3, r3, #31
 8002cae:	2107      	movs	r1, #7
 8002cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	401a      	ands	r2, r3
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	0d1b      	lsrs	r3, r3, #20
 8002cbc:	f003 031f 	and.w	r3, r3, #31
 8002cc0:	6879      	ldr	r1, [r7, #4]
 8002cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc6:	431a      	orrs	r2, r3
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002ccc:	bf00      	nop
 8002cce:	371c      	adds	r7, #28
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cf0:	43db      	mvns	r3, r3
 8002cf2:	401a      	ands	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f003 0318 	and.w	r3, r3, #24
 8002cfa:	4908      	ldr	r1, [pc, #32]	; (8002d1c <LL_ADC_SetChannelSingleDiff+0x44>)
 8002cfc:	40d9      	lsrs	r1, r3
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	400b      	ands	r3, r1
 8002d02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d06:	431a      	orrs	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002d0e:	bf00      	nop
 8002d10:	3714      	adds	r7, #20
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	0007ffff 	.word	0x0007ffff

08002d20 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f003 031f 	and.w	r3, r3, #31
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002d4c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	6093      	str	r3, [r2, #8]
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d74:	d101      	bne.n	8002d7a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d76:	2301      	movs	r3, #1
 8002d78:	e000      	b.n	8002d7c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002d98:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d9c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dc4:	d101      	bne.n	8002dca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e000      	b.n	8002dcc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002de8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002dec:	f043 0201 	orr.w	r2, r3, #1
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e10:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e14:	f043 0202 	orr.w	r2, r3, #2
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d101      	bne.n	8002e40 <LL_ADC_IsEnabled+0x18>
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e000      	b.n	8002e42 <LL_ADC_IsEnabled+0x1a>
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b083      	sub	sp, #12
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d101      	bne.n	8002e66 <LL_ADC_IsDisableOngoing+0x18>
 8002e62:	2301      	movs	r3, #1
 8002e64:	e000      	b.n	8002e68 <LL_ADC_IsDisableOngoing+0x1a>
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e88:	f043 0204 	orr.w	r2, r3, #4
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f003 0304 	and.w	r3, r3, #4
 8002eac:	2b04      	cmp	r3, #4
 8002eae:	d101      	bne.n	8002eb4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e000      	b.n	8002eb6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b083      	sub	sp, #12
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 0308 	and.w	r3, r3, #8
 8002ed2:	2b08      	cmp	r3, #8
 8002ed4:	d101      	bne.n	8002eda <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e000      	b.n	8002edc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ee8:	b590      	push	{r4, r7, lr}
 8002eea:	b089      	sub	sp, #36	; 0x24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e1af      	b.n	8003262 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d109      	bne.n	8002f24 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f7fe f9cb 	bl	80012ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff ff19 	bl	8002d60 <LL_ADC_IsDeepPowerDownEnabled>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d004      	beq.n	8002f3e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff feff 	bl	8002d3c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7ff ff34 	bl	8002db0 <LL_ADC_IsInternalRegulatorEnabled>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d115      	bne.n	8002f7a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7ff ff18 	bl	8002d88 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f58:	4b9f      	ldr	r3, [pc, #636]	; (80031d8 <HAL_ADC_Init+0x2f0>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	099b      	lsrs	r3, r3, #6
 8002f5e:	4a9f      	ldr	r2, [pc, #636]	; (80031dc <HAL_ADC_Init+0x2f4>)
 8002f60:	fba2 2303 	umull	r2, r3, r2, r3
 8002f64:	099b      	lsrs	r3, r3, #6
 8002f66:	3301      	adds	r3, #1
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f6c:	e002      	b.n	8002f74 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	3b01      	subs	r3, #1
 8002f72:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1f9      	bne.n	8002f6e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff ff16 	bl	8002db0 <LL_ADC_IsInternalRegulatorEnabled>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10d      	bne.n	8002fa6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f8e:	f043 0210 	orr.w	r2, r3, #16
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f9a:	f043 0201 	orr.w	r2, r3, #1
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7ff ff76 	bl	8002e9c <LL_ADC_REG_IsConversionOngoing>
 8002fb0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb6:	f003 0310 	and.w	r3, r3, #16
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f040 8148 	bne.w	8003250 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f040 8144 	bne.w	8003250 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fcc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002fd0:	f043 0202 	orr.w	r2, r3, #2
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7ff ff23 	bl	8002e28 <LL_ADC_IsEnabled>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d141      	bne.n	800306c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ff0:	d004      	beq.n	8002ffc <HAL_ADC_Init+0x114>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a7a      	ldr	r2, [pc, #488]	; (80031e0 <HAL_ADC_Init+0x2f8>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d10f      	bne.n	800301c <HAL_ADC_Init+0x134>
 8002ffc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003000:	f7ff ff12 	bl	8002e28 <LL_ADC_IsEnabled>
 8003004:	4604      	mov	r4, r0
 8003006:	4876      	ldr	r0, [pc, #472]	; (80031e0 <HAL_ADC_Init+0x2f8>)
 8003008:	f7ff ff0e 	bl	8002e28 <LL_ADC_IsEnabled>
 800300c:	4603      	mov	r3, r0
 800300e:	4323      	orrs	r3, r4
 8003010:	2b00      	cmp	r3, #0
 8003012:	bf0c      	ite	eq
 8003014:	2301      	moveq	r3, #1
 8003016:	2300      	movne	r3, #0
 8003018:	b2db      	uxtb	r3, r3
 800301a:	e012      	b.n	8003042 <HAL_ADC_Init+0x15a>
 800301c:	4871      	ldr	r0, [pc, #452]	; (80031e4 <HAL_ADC_Init+0x2fc>)
 800301e:	f7ff ff03 	bl	8002e28 <LL_ADC_IsEnabled>
 8003022:	4604      	mov	r4, r0
 8003024:	4870      	ldr	r0, [pc, #448]	; (80031e8 <HAL_ADC_Init+0x300>)
 8003026:	f7ff feff 	bl	8002e28 <LL_ADC_IsEnabled>
 800302a:	4603      	mov	r3, r0
 800302c:	431c      	orrs	r4, r3
 800302e:	486f      	ldr	r0, [pc, #444]	; (80031ec <HAL_ADC_Init+0x304>)
 8003030:	f7ff fefa 	bl	8002e28 <LL_ADC_IsEnabled>
 8003034:	4603      	mov	r3, r0
 8003036:	4323      	orrs	r3, r4
 8003038:	2b00      	cmp	r3, #0
 800303a:	bf0c      	ite	eq
 800303c:	2301      	moveq	r3, #1
 800303e:	2300      	movne	r3, #0
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d012      	beq.n	800306c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800304e:	d004      	beq.n	800305a <HAL_ADC_Init+0x172>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a62      	ldr	r2, [pc, #392]	; (80031e0 <HAL_ADC_Init+0x2f8>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d101      	bne.n	800305e <HAL_ADC_Init+0x176>
 800305a:	4a65      	ldr	r2, [pc, #404]	; (80031f0 <HAL_ADC_Init+0x308>)
 800305c:	e000      	b.n	8003060 <HAL_ADC_Init+0x178>
 800305e:	4a65      	ldr	r2, [pc, #404]	; (80031f4 <HAL_ADC_Init+0x30c>)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	4619      	mov	r1, r3
 8003066:	4610      	mov	r0, r2
 8003068:	f7ff fcfa 	bl	8002a60 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	7f5b      	ldrb	r3, [r3, #29]
 8003070:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003076:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800307c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003082:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800308a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800308c:	4313      	orrs	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003096:	2b01      	cmp	r3, #1
 8003098:	d106      	bne.n	80030a8 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309e:	3b01      	subs	r3, #1
 80030a0:	045b      	lsls	r3, r3, #17
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d009      	beq.n	80030c4 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030bc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68da      	ldr	r2, [r3, #12]
 80030ca:	4b4b      	ldr	r3, [pc, #300]	; (80031f8 <HAL_ADC_Init+0x310>)
 80030cc:	4013      	ands	r3, r2
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	6812      	ldr	r2, [r2, #0]
 80030d2:	69b9      	ldr	r1, [r7, #24]
 80030d4:	430b      	orrs	r3, r1
 80030d6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7ff fed2 	bl	8002e9c <LL_ADC_REG_IsConversionOngoing>
 80030f8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff fedf 	bl	8002ec2 <LL_ADC_INJ_IsConversionOngoing>
 8003104:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d17f      	bne.n	800320c <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d17c      	bne.n	800320c <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003116:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800311e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003120:	4313      	orrs	r3, r2
 8003122:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800312e:	f023 0302 	bic.w	r3, r3, #2
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	6812      	ldr	r2, [r2, #0]
 8003136:	69b9      	ldr	r1, [r7, #24]
 8003138:	430b      	orrs	r3, r1
 800313a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d017      	beq.n	8003174 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	691a      	ldr	r2, [r3, #16]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003152:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800315c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003160:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	6911      	ldr	r1, [r2, #16]
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	6812      	ldr	r2, [r2, #0]
 800316c:	430b      	orrs	r3, r1
 800316e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003172:	e013      	b.n	800319c <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	691a      	ldr	r2, [r3, #16]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003182:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	6812      	ldr	r2, [r2, #0]
 8003190:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003194:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003198:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d12a      	bne.n	80031fc <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80031b0:	f023 0304 	bic.w	r3, r3, #4
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80031bc:	4311      	orrs	r1, r2
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80031c2:	4311      	orrs	r1, r2
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80031c8:	430a      	orrs	r2, r1
 80031ca:	431a      	orrs	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f042 0201 	orr.w	r2, r2, #1
 80031d4:	611a      	str	r2, [r3, #16]
 80031d6:	e019      	b.n	800320c <HAL_ADC_Init+0x324>
 80031d8:	20000004 	.word	0x20000004
 80031dc:	053e2d63 	.word	0x053e2d63
 80031e0:	50000100 	.word	0x50000100
 80031e4:	50000400 	.word	0x50000400
 80031e8:	50000500 	.word	0x50000500
 80031ec:	50000600 	.word	0x50000600
 80031f0:	50000300 	.word	0x50000300
 80031f4:	50000700 	.word	0x50000700
 80031f8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	691a      	ldr	r2, [r3, #16]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f022 0201 	bic.w	r2, r2, #1
 800320a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	695b      	ldr	r3, [r3, #20]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d10c      	bne.n	800322e <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321a:	f023 010f 	bic.w	r1, r3, #15
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	1e5a      	subs	r2, r3, #1
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	430a      	orrs	r2, r1
 800322a:	631a      	str	r2, [r3, #48]	; 0x30
 800322c:	e007      	b.n	800323e <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 020f 	bic.w	r2, r2, #15
 800323c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003242:	f023 0303 	bic.w	r3, r3, #3
 8003246:	f043 0201 	orr.w	r2, r3, #1
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	65da      	str	r2, [r3, #92]	; 0x5c
 800324e:	e007      	b.n	8003260 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003254:	f043 0210 	orr.w	r2, r3, #16
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003260:	7ffb      	ldrb	r3, [r7, #31]
}
 8003262:	4618      	mov	r0, r3
 8003264:	3724      	adds	r7, #36	; 0x24
 8003266:	46bd      	mov	sp, r7
 8003268:	bd90      	pop	{r4, r7, pc}
 800326a:	bf00      	nop

0800326c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003280:	d004      	beq.n	800328c <HAL_ADC_Start_DMA+0x20>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a58      	ldr	r2, [pc, #352]	; (80033e8 <HAL_ADC_Start_DMA+0x17c>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d101      	bne.n	8003290 <HAL_ADC_Start_DMA+0x24>
 800328c:	4b57      	ldr	r3, [pc, #348]	; (80033ec <HAL_ADC_Start_DMA+0x180>)
 800328e:	e000      	b.n	8003292 <HAL_ADC_Start_DMA+0x26>
 8003290:	4b57      	ldr	r3, [pc, #348]	; (80033f0 <HAL_ADC_Start_DMA+0x184>)
 8003292:	4618      	mov	r0, r3
 8003294:	f7ff fd44 	bl	8002d20 <LL_ADC_GetMultimode>
 8003298:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4618      	mov	r0, r3
 80032a0:	f7ff fdfc 	bl	8002e9c <LL_ADC_REG_IsConversionOngoing>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f040 8096 	bne.w	80033d8 <HAL_ADC_Start_DMA+0x16c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d101      	bne.n	80032ba <HAL_ADC_Start_DMA+0x4e>
 80032b6:	2302      	movs	r3, #2
 80032b8:	e091      	b.n	80033de <HAL_ADC_Start_DMA+0x172>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d005      	beq.n	80032d4 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	2b05      	cmp	r3, #5
 80032cc:	d002      	beq.n	80032d4 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	2b09      	cmp	r3, #9
 80032d2:	d17a      	bne.n	80033ca <HAL_ADC_Start_DMA+0x15e>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	f000 fcf5 	bl	8003cc4 <ADC_Enable>
 80032da:	4603      	mov	r3, r0
 80032dc:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80032de:	7dfb      	ldrb	r3, [r7, #23]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d16d      	bne.n	80033c0 <HAL_ADC_Start_DMA+0x154>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80032ec:	f023 0301 	bic.w	r3, r3, #1
 80032f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a3a      	ldr	r2, [pc, #232]	; (80033e8 <HAL_ADC_Start_DMA+0x17c>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d009      	beq.n	8003316 <HAL_ADC_Start_DMA+0xaa>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a3b      	ldr	r2, [pc, #236]	; (80033f4 <HAL_ADC_Start_DMA+0x188>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d002      	beq.n	8003312 <HAL_ADC_Start_DMA+0xa6>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	e003      	b.n	800331a <HAL_ADC_Start_DMA+0xae>
 8003312:	4b39      	ldr	r3, [pc, #228]	; (80033f8 <HAL_ADC_Start_DMA+0x18c>)
 8003314:	e001      	b.n	800331a <HAL_ADC_Start_DMA+0xae>
 8003316:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	6812      	ldr	r2, [r2, #0]
 800331e:	4293      	cmp	r3, r2
 8003320:	d002      	beq.n	8003328 <HAL_ADC_Start_DMA+0xbc>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d105      	bne.n	8003334 <HAL_ADC_Start_DMA+0xc8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800332c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003338:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d006      	beq.n	800334e <HAL_ADC_Start_DMA+0xe2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003344:	f023 0206 	bic.w	r2, r3, #6
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	661a      	str	r2, [r3, #96]	; 0x60
 800334c:	e002      	b.n	8003354 <HAL_ADC_Start_DMA+0xe8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003358:	4a28      	ldr	r2, [pc, #160]	; (80033fc <HAL_ADC_Start_DMA+0x190>)
 800335a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003360:	4a27      	ldr	r2, [pc, #156]	; (8003400 <HAL_ADC_Start_DMA+0x194>)
 8003362:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003368:	4a26      	ldr	r2, [pc, #152]	; (8003404 <HAL_ADC_Start_DMA+0x198>)
 800336a:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	221c      	movs	r2, #28
 8003372:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685a      	ldr	r2, [r3, #4]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 0210 	orr.w	r2, r2, #16
 800338a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68da      	ldr	r2, [r3, #12]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f042 0201 	orr.w	r2, r2, #1
 800339a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	3340      	adds	r3, #64	; 0x40
 80033a6:	4619      	mov	r1, r3
 80033a8:	68ba      	ldr	r2, [r7, #8]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f001 f954 	bl	8004658 <HAL_DMA_Start_IT>
 80033b0:	4603      	mov	r3, r0
 80033b2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7ff fd5b 	bl	8002e74 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80033be:	e00d      	b.n	80033dc <HAL_ADC_Start_DMA+0x170>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80033c8:	e008      	b.n	80033dc <HAL_ADC_Start_DMA+0x170>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80033d6:	e001      	b.n	80033dc <HAL_ADC_Start_DMA+0x170>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80033d8:	2302      	movs	r3, #2
 80033da:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80033dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3718      	adds	r7, #24
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	50000100 	.word	0x50000100
 80033ec:	50000300 	.word	0x50000300
 80033f0:	50000700 	.word	0x50000700
 80033f4:	50000500 	.word	0x50000500
 80033f8:	50000400 	.word	0x50000400
 80033fc:	08003e47 	.word	0x08003e47
 8003400:	08003f1f 	.word	0x08003f1f
 8003404:	08003f3b 	.word	0x08003f3b

08003408 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b0b6      	sub	sp, #216	; 0xd8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800344e:	2300      	movs	r3, #0
 8003450:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003454:	2300      	movs	r3, #0
 8003456:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800345e:	2b01      	cmp	r3, #1
 8003460:	d102      	bne.n	8003468 <HAL_ADC_ConfigChannel+0x24>
 8003462:	2302      	movs	r3, #2
 8003464:	f000 bc13 	b.w	8003c8e <HAL_ADC_ConfigChannel+0x84a>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff fd11 	bl	8002e9c <LL_ADC_REG_IsConversionOngoing>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	f040 83f3 	bne.w	8003c68 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6818      	ldr	r0, [r3, #0]
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	6859      	ldr	r1, [r3, #4]
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	461a      	mov	r2, r3
 8003490:	f7ff fbcb 	bl	8002c2a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4618      	mov	r0, r3
 800349a:	f7ff fcff 	bl	8002e9c <LL_ADC_REG_IsConversionOngoing>
 800349e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff fd0b 	bl	8002ec2 <LL_ADC_INJ_IsConversionOngoing>
 80034ac:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80034b0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f040 81d9 	bne.w	800386c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80034ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f040 81d4 	bne.w	800386c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034cc:	d10f      	bne.n	80034ee <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6818      	ldr	r0, [r3, #0]
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2200      	movs	r2, #0
 80034d8:	4619      	mov	r1, r3
 80034da:	f7ff fbd2 	bl	8002c82 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7ff fb79 	bl	8002bde <LL_ADC_SetSamplingTimeCommonConfig>
 80034ec:	e00e      	b.n	800350c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6818      	ldr	r0, [r3, #0]
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	6819      	ldr	r1, [r3, #0]
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	461a      	mov	r2, r3
 80034fc:	f7ff fbc1 	bl	8002c82 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2100      	movs	r1, #0
 8003506:	4618      	mov	r0, r3
 8003508:	f7ff fb69 	bl	8002bde <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	695a      	ldr	r2, [r3, #20]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	08db      	lsrs	r3, r3, #3
 8003518:	f003 0303 	and.w	r3, r3, #3
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	fa02 f303 	lsl.w	r3, r2, r3
 8003522:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	2b04      	cmp	r3, #4
 800352c:	d022      	beq.n	8003574 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6818      	ldr	r0, [r3, #0]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	6919      	ldr	r1, [r3, #16]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800353e:	f7ff fac3 	bl	8002ac8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6818      	ldr	r0, [r3, #0]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	6919      	ldr	r1, [r3, #16]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	461a      	mov	r2, r3
 8003550:	f7ff fb0f 	bl	8002b72 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6818      	ldr	r0, [r3, #0]
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	6919      	ldr	r1, [r3, #16]
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	7f1b      	ldrb	r3, [r3, #28]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d102      	bne.n	800356a <HAL_ADC_ConfigChannel+0x126>
 8003564:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003568:	e000      	b.n	800356c <HAL_ADC_ConfigChannel+0x128>
 800356a:	2300      	movs	r3, #0
 800356c:	461a      	mov	r2, r3
 800356e:	f7ff fb1b 	bl	8002ba8 <LL_ADC_SetOffsetSaturation>
 8003572:	e17b      	b.n	800386c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2100      	movs	r1, #0
 800357a:	4618      	mov	r0, r3
 800357c:	f7ff fac8 	bl	8002b10 <LL_ADC_GetOffsetChannel>
 8003580:	4603      	mov	r3, r0
 8003582:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10a      	bne.n	80035a0 <HAL_ADC_ConfigChannel+0x15c>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2100      	movs	r1, #0
 8003590:	4618      	mov	r0, r3
 8003592:	f7ff fabd 	bl	8002b10 <LL_ADC_GetOffsetChannel>
 8003596:	4603      	mov	r3, r0
 8003598:	0e9b      	lsrs	r3, r3, #26
 800359a:	f003 021f 	and.w	r2, r3, #31
 800359e:	e01e      	b.n	80035de <HAL_ADC_ConfigChannel+0x19a>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2100      	movs	r1, #0
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7ff fab2 	bl	8002b10 <LL_ADC_GetOffsetChannel>
 80035ac:	4603      	mov	r3, r0
 80035ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80035b6:	fa93 f3a3 	rbit	r3, r3
 80035ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80035be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80035c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80035c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80035ce:	2320      	movs	r3, #32
 80035d0:	e004      	b.n	80035dc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80035d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80035d6:	fab3 f383 	clz	r3, r3
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d105      	bne.n	80035f6 <HAL_ADC_ConfigChannel+0x1b2>
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	0e9b      	lsrs	r3, r3, #26
 80035f0:	f003 031f 	and.w	r3, r3, #31
 80035f4:	e018      	b.n	8003628 <HAL_ADC_ConfigChannel+0x1e4>
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003602:	fa93 f3a3 	rbit	r3, r3
 8003606:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800360a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800360e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003612:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800361a:	2320      	movs	r3, #32
 800361c:	e004      	b.n	8003628 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800361e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003622:	fab3 f383 	clz	r3, r3
 8003626:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003628:	429a      	cmp	r2, r3
 800362a:	d106      	bne.n	800363a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2200      	movs	r2, #0
 8003632:	2100      	movs	r1, #0
 8003634:	4618      	mov	r0, r3
 8003636:	f7ff fa81 	bl	8002b3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2101      	movs	r1, #1
 8003640:	4618      	mov	r0, r3
 8003642:	f7ff fa65 	bl	8002b10 <LL_ADC_GetOffsetChannel>
 8003646:	4603      	mov	r3, r0
 8003648:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10a      	bne.n	8003666 <HAL_ADC_ConfigChannel+0x222>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2101      	movs	r1, #1
 8003656:	4618      	mov	r0, r3
 8003658:	f7ff fa5a 	bl	8002b10 <LL_ADC_GetOffsetChannel>
 800365c:	4603      	mov	r3, r0
 800365e:	0e9b      	lsrs	r3, r3, #26
 8003660:	f003 021f 	and.w	r2, r3, #31
 8003664:	e01e      	b.n	80036a4 <HAL_ADC_ConfigChannel+0x260>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2101      	movs	r1, #1
 800366c:	4618      	mov	r0, r3
 800366e:	f7ff fa4f 	bl	8002b10 <LL_ADC_GetOffsetChannel>
 8003672:	4603      	mov	r3, r0
 8003674:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003678:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800367c:	fa93 f3a3 	rbit	r3, r3
 8003680:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003684:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003688:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800368c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003690:	2b00      	cmp	r3, #0
 8003692:	d101      	bne.n	8003698 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003694:	2320      	movs	r3, #32
 8003696:	e004      	b.n	80036a2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003698:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800369c:	fab3 f383 	clz	r3, r3
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d105      	bne.n	80036bc <HAL_ADC_ConfigChannel+0x278>
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	0e9b      	lsrs	r3, r3, #26
 80036b6:	f003 031f 	and.w	r3, r3, #31
 80036ba:	e018      	b.n	80036ee <HAL_ADC_ConfigChannel+0x2aa>
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80036c8:	fa93 f3a3 	rbit	r3, r3
 80036cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80036d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80036d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80036d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80036e0:	2320      	movs	r3, #32
 80036e2:	e004      	b.n	80036ee <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80036e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80036e8:	fab3 f383 	clz	r3, r3
 80036ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d106      	bne.n	8003700 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2200      	movs	r2, #0
 80036f8:	2101      	movs	r1, #1
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7ff fa1e 	bl	8002b3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2102      	movs	r1, #2
 8003706:	4618      	mov	r0, r3
 8003708:	f7ff fa02 	bl	8002b10 <LL_ADC_GetOffsetChannel>
 800370c:	4603      	mov	r3, r0
 800370e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10a      	bne.n	800372c <HAL_ADC_ConfigChannel+0x2e8>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2102      	movs	r1, #2
 800371c:	4618      	mov	r0, r3
 800371e:	f7ff f9f7 	bl	8002b10 <LL_ADC_GetOffsetChannel>
 8003722:	4603      	mov	r3, r0
 8003724:	0e9b      	lsrs	r3, r3, #26
 8003726:	f003 021f 	and.w	r2, r3, #31
 800372a:	e01e      	b.n	800376a <HAL_ADC_ConfigChannel+0x326>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2102      	movs	r1, #2
 8003732:	4618      	mov	r0, r3
 8003734:	f7ff f9ec 	bl	8002b10 <LL_ADC_GetOffsetChannel>
 8003738:	4603      	mov	r3, r0
 800373a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003742:	fa93 f3a3 	rbit	r3, r3
 8003746:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800374a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800374e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003752:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800375a:	2320      	movs	r3, #32
 800375c:	e004      	b.n	8003768 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800375e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003762:	fab3 f383 	clz	r3, r3
 8003766:	b2db      	uxtb	r3, r3
 8003768:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003772:	2b00      	cmp	r3, #0
 8003774:	d105      	bne.n	8003782 <HAL_ADC_ConfigChannel+0x33e>
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	0e9b      	lsrs	r3, r3, #26
 800377c:	f003 031f 	and.w	r3, r3, #31
 8003780:	e016      	b.n	80037b0 <HAL_ADC_ConfigChannel+0x36c>
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800378a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800378e:	fa93 f3a3 	rbit	r3, r3
 8003792:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003794:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003796:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800379a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80037a2:	2320      	movs	r3, #32
 80037a4:	e004      	b.n	80037b0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80037a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037aa:	fab3 f383 	clz	r3, r3
 80037ae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d106      	bne.n	80037c2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2200      	movs	r2, #0
 80037ba:	2102      	movs	r1, #2
 80037bc:	4618      	mov	r0, r3
 80037be:	f7ff f9bd 	bl	8002b3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2103      	movs	r1, #3
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7ff f9a1 	bl	8002b10 <LL_ADC_GetOffsetChannel>
 80037ce:	4603      	mov	r3, r0
 80037d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10a      	bne.n	80037ee <HAL_ADC_ConfigChannel+0x3aa>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2103      	movs	r1, #3
 80037de:	4618      	mov	r0, r3
 80037e0:	f7ff f996 	bl	8002b10 <LL_ADC_GetOffsetChannel>
 80037e4:	4603      	mov	r3, r0
 80037e6:	0e9b      	lsrs	r3, r3, #26
 80037e8:	f003 021f 	and.w	r2, r3, #31
 80037ec:	e017      	b.n	800381e <HAL_ADC_ConfigChannel+0x3da>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2103      	movs	r1, #3
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7ff f98b 	bl	8002b10 <LL_ADC_GetOffsetChannel>
 80037fa:	4603      	mov	r3, r0
 80037fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003800:	fa93 f3a3 	rbit	r3, r3
 8003804:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003806:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003808:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800380a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800380c:	2b00      	cmp	r3, #0
 800380e:	d101      	bne.n	8003814 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003810:	2320      	movs	r3, #32
 8003812:	e003      	b.n	800381c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003814:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003816:	fab3 f383 	clz	r3, r3
 800381a:	b2db      	uxtb	r3, r3
 800381c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003826:	2b00      	cmp	r3, #0
 8003828:	d105      	bne.n	8003836 <HAL_ADC_ConfigChannel+0x3f2>
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	0e9b      	lsrs	r3, r3, #26
 8003830:	f003 031f 	and.w	r3, r3, #31
 8003834:	e011      	b.n	800385a <HAL_ADC_ConfigChannel+0x416>
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800383e:	fa93 f3a3 	rbit	r3, r3
 8003842:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003844:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003846:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800384e:	2320      	movs	r3, #32
 8003850:	e003      	b.n	800385a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003854:	fab3 f383 	clz	r3, r3
 8003858:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800385a:	429a      	cmp	r2, r3
 800385c:	d106      	bne.n	800386c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2200      	movs	r2, #0
 8003864:	2103      	movs	r1, #3
 8003866:	4618      	mov	r0, r3
 8003868:	f7ff f968 	bl	8002b3c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4618      	mov	r0, r3
 8003872:	f7ff fad9 	bl	8002e28 <LL_ADC_IsEnabled>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	f040 813d 	bne.w	8003af8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6818      	ldr	r0, [r3, #0]
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	6819      	ldr	r1, [r3, #0]
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	461a      	mov	r2, r3
 800388c:	f7ff fa24 	bl	8002cd8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	4aa2      	ldr	r2, [pc, #648]	; (8003b20 <HAL_ADC_ConfigChannel+0x6dc>)
 8003896:	4293      	cmp	r3, r2
 8003898:	f040 812e 	bne.w	8003af8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d10b      	bne.n	80038c4 <HAL_ADC_ConfigChannel+0x480>
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	0e9b      	lsrs	r3, r3, #26
 80038b2:	3301      	adds	r3, #1
 80038b4:	f003 031f 	and.w	r3, r3, #31
 80038b8:	2b09      	cmp	r3, #9
 80038ba:	bf94      	ite	ls
 80038bc:	2301      	movls	r3, #1
 80038be:	2300      	movhi	r3, #0
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	e019      	b.n	80038f8 <HAL_ADC_ConfigChannel+0x4b4>
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038cc:	fa93 f3a3 	rbit	r3, r3
 80038d0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80038d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038d4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80038d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80038dc:	2320      	movs	r3, #32
 80038de:	e003      	b.n	80038e8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80038e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038e2:	fab3 f383 	clz	r3, r3
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	3301      	adds	r3, #1
 80038ea:	f003 031f 	and.w	r3, r3, #31
 80038ee:	2b09      	cmp	r3, #9
 80038f0:	bf94      	ite	ls
 80038f2:	2301      	movls	r3, #1
 80038f4:	2300      	movhi	r3, #0
 80038f6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d079      	beq.n	80039f0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003904:	2b00      	cmp	r3, #0
 8003906:	d107      	bne.n	8003918 <HAL_ADC_ConfigChannel+0x4d4>
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	0e9b      	lsrs	r3, r3, #26
 800390e:	3301      	adds	r3, #1
 8003910:	069b      	lsls	r3, r3, #26
 8003912:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003916:	e015      	b.n	8003944 <HAL_ADC_ConfigChannel+0x500>
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800391e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003920:	fa93 f3a3 	rbit	r3, r3
 8003924:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003926:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003928:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800392a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800392c:	2b00      	cmp	r3, #0
 800392e:	d101      	bne.n	8003934 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003930:	2320      	movs	r3, #32
 8003932:	e003      	b.n	800393c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003934:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003936:	fab3 f383 	clz	r3, r3
 800393a:	b2db      	uxtb	r3, r3
 800393c:	3301      	adds	r3, #1
 800393e:	069b      	lsls	r3, r3, #26
 8003940:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800394c:	2b00      	cmp	r3, #0
 800394e:	d109      	bne.n	8003964 <HAL_ADC_ConfigChannel+0x520>
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	0e9b      	lsrs	r3, r3, #26
 8003956:	3301      	adds	r3, #1
 8003958:	f003 031f 	and.w	r3, r3, #31
 800395c:	2101      	movs	r1, #1
 800395e:	fa01 f303 	lsl.w	r3, r1, r3
 8003962:	e017      	b.n	8003994 <HAL_ADC_ConfigChannel+0x550>
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800396c:	fa93 f3a3 	rbit	r3, r3
 8003970:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003972:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003974:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003976:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003978:	2b00      	cmp	r3, #0
 800397a:	d101      	bne.n	8003980 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800397c:	2320      	movs	r3, #32
 800397e:	e003      	b.n	8003988 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003980:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003982:	fab3 f383 	clz	r3, r3
 8003986:	b2db      	uxtb	r3, r3
 8003988:	3301      	adds	r3, #1
 800398a:	f003 031f 	and.w	r3, r3, #31
 800398e:	2101      	movs	r1, #1
 8003990:	fa01 f303 	lsl.w	r3, r1, r3
 8003994:	ea42 0103 	orr.w	r1, r2, r3
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d10a      	bne.n	80039ba <HAL_ADC_ConfigChannel+0x576>
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	0e9b      	lsrs	r3, r3, #26
 80039aa:	3301      	adds	r3, #1
 80039ac:	f003 021f 	and.w	r2, r3, #31
 80039b0:	4613      	mov	r3, r2
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	4413      	add	r3, r2
 80039b6:	051b      	lsls	r3, r3, #20
 80039b8:	e018      	b.n	80039ec <HAL_ADC_ConfigChannel+0x5a8>
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c2:	fa93 f3a3 	rbit	r3, r3
 80039c6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80039c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80039cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80039d2:	2320      	movs	r3, #32
 80039d4:	e003      	b.n	80039de <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80039d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039d8:	fab3 f383 	clz	r3, r3
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	3301      	adds	r3, #1
 80039e0:	f003 021f 	and.w	r2, r3, #31
 80039e4:	4613      	mov	r3, r2
 80039e6:	005b      	lsls	r3, r3, #1
 80039e8:	4413      	add	r3, r2
 80039ea:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039ec:	430b      	orrs	r3, r1
 80039ee:	e07e      	b.n	8003aee <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d107      	bne.n	8003a0c <HAL_ADC_ConfigChannel+0x5c8>
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	0e9b      	lsrs	r3, r3, #26
 8003a02:	3301      	adds	r3, #1
 8003a04:	069b      	lsls	r3, r3, #26
 8003a06:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a0a:	e015      	b.n	8003a38 <HAL_ADC_ConfigChannel+0x5f4>
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a14:	fa93 f3a3 	rbit	r3, r3
 8003a18:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d101      	bne.n	8003a28 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003a24:	2320      	movs	r3, #32
 8003a26:	e003      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2a:	fab3 f383 	clz	r3, r3
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	3301      	adds	r3, #1
 8003a32:	069b      	lsls	r3, r3, #26
 8003a34:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d109      	bne.n	8003a58 <HAL_ADC_ConfigChannel+0x614>
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	0e9b      	lsrs	r3, r3, #26
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	f003 031f 	and.w	r3, r3, #31
 8003a50:	2101      	movs	r1, #1
 8003a52:	fa01 f303 	lsl.w	r3, r1, r3
 8003a56:	e017      	b.n	8003a88 <HAL_ADC_ConfigChannel+0x644>
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5e:	6a3b      	ldr	r3, [r7, #32]
 8003a60:	fa93 f3a3 	rbit	r3, r3
 8003a64:	61fb      	str	r3, [r7, #28]
  return result;
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d101      	bne.n	8003a74 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003a70:	2320      	movs	r3, #32
 8003a72:	e003      	b.n	8003a7c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a76:	fab3 f383 	clz	r3, r3
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	f003 031f 	and.w	r3, r3, #31
 8003a82:	2101      	movs	r1, #1
 8003a84:	fa01 f303 	lsl.w	r3, r1, r3
 8003a88:	ea42 0103 	orr.w	r1, r2, r3
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10d      	bne.n	8003ab4 <HAL_ADC_ConfigChannel+0x670>
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	0e9b      	lsrs	r3, r3, #26
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	f003 021f 	and.w	r2, r3, #31
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	005b      	lsls	r3, r3, #1
 8003aa8:	4413      	add	r3, r2
 8003aaa:	3b1e      	subs	r3, #30
 8003aac:	051b      	lsls	r3, r3, #20
 8003aae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003ab2:	e01b      	b.n	8003aec <HAL_ADC_ConfigChannel+0x6a8>
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	fa93 f3a3 	rbit	r3, r3
 8003ac0:	613b      	str	r3, [r7, #16]
  return result;
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d101      	bne.n	8003ad0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003acc:	2320      	movs	r3, #32
 8003ace:	e003      	b.n	8003ad8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	fab3 f383 	clz	r3, r3
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	3301      	adds	r3, #1
 8003ada:	f003 021f 	and.w	r2, r3, #31
 8003ade:	4613      	mov	r3, r2
 8003ae0:	005b      	lsls	r3, r3, #1
 8003ae2:	4413      	add	r3, r2
 8003ae4:	3b1e      	subs	r3, #30
 8003ae6:	051b      	lsls	r3, r3, #20
 8003ae8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003aec:	430b      	orrs	r3, r1
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	6892      	ldr	r2, [r2, #8]
 8003af2:	4619      	mov	r1, r3
 8003af4:	f7ff f8c5 	bl	8002c82 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	4b09      	ldr	r3, [pc, #36]	; (8003b24 <HAL_ADC_ConfigChannel+0x6e0>)
 8003afe:	4013      	ands	r3, r2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f000 80be 	beq.w	8003c82 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b0e:	d004      	beq.n	8003b1a <HAL_ADC_ConfigChannel+0x6d6>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a04      	ldr	r2, [pc, #16]	; (8003b28 <HAL_ADC_ConfigChannel+0x6e4>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d10a      	bne.n	8003b30 <HAL_ADC_ConfigChannel+0x6ec>
 8003b1a:	4b04      	ldr	r3, [pc, #16]	; (8003b2c <HAL_ADC_ConfigChannel+0x6e8>)
 8003b1c:	e009      	b.n	8003b32 <HAL_ADC_ConfigChannel+0x6ee>
 8003b1e:	bf00      	nop
 8003b20:	407f0000 	.word	0x407f0000
 8003b24:	80080000 	.word	0x80080000
 8003b28:	50000100 	.word	0x50000100
 8003b2c:	50000300 	.word	0x50000300
 8003b30:	4b59      	ldr	r3, [pc, #356]	; (8003c98 <HAL_ADC_ConfigChannel+0x854>)
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7fe ffba 	bl	8002aac <LL_ADC_GetCommonPathInternalCh>
 8003b38:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a56      	ldr	r2, [pc, #344]	; (8003c9c <HAL_ADC_ConfigChannel+0x858>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d004      	beq.n	8003b50 <HAL_ADC_ConfigChannel+0x70c>
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a55      	ldr	r2, [pc, #340]	; (8003ca0 <HAL_ADC_ConfigChannel+0x85c>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d13a      	bne.n	8003bc6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003b50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d134      	bne.n	8003bc6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b64:	d005      	beq.n	8003b72 <HAL_ADC_ConfigChannel+0x72e>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a4e      	ldr	r2, [pc, #312]	; (8003ca4 <HAL_ADC_ConfigChannel+0x860>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	f040 8085 	bne.w	8003c7c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b7a:	d004      	beq.n	8003b86 <HAL_ADC_ConfigChannel+0x742>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a49      	ldr	r2, [pc, #292]	; (8003ca8 <HAL_ADC_ConfigChannel+0x864>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d101      	bne.n	8003b8a <HAL_ADC_ConfigChannel+0x746>
 8003b86:	4a49      	ldr	r2, [pc, #292]	; (8003cac <HAL_ADC_ConfigChannel+0x868>)
 8003b88:	e000      	b.n	8003b8c <HAL_ADC_ConfigChannel+0x748>
 8003b8a:	4a43      	ldr	r2, [pc, #268]	; (8003c98 <HAL_ADC_ConfigChannel+0x854>)
 8003b8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b94:	4619      	mov	r1, r3
 8003b96:	4610      	mov	r0, r2
 8003b98:	f7fe ff75 	bl	8002a86 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b9c:	4b44      	ldr	r3, [pc, #272]	; (8003cb0 <HAL_ADC_ConfigChannel+0x86c>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	099b      	lsrs	r3, r3, #6
 8003ba2:	4a44      	ldr	r2, [pc, #272]	; (8003cb4 <HAL_ADC_ConfigChannel+0x870>)
 8003ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba8:	099b      	lsrs	r3, r3, #6
 8003baa:	1c5a      	adds	r2, r3, #1
 8003bac:	4613      	mov	r3, r2
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	4413      	add	r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003bb6:	e002      	b.n	8003bbe <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1f9      	bne.n	8003bb8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003bc4:	e05a      	b.n	8003c7c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a3b      	ldr	r2, [pc, #236]	; (8003cb8 <HAL_ADC_ConfigChannel+0x874>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d125      	bne.n	8003c1c <HAL_ADC_ConfigChannel+0x7d8>
 8003bd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003bd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d11f      	bne.n	8003c1c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a31      	ldr	r2, [pc, #196]	; (8003ca8 <HAL_ADC_ConfigChannel+0x864>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d104      	bne.n	8003bf0 <HAL_ADC_ConfigChannel+0x7ac>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a34      	ldr	r2, [pc, #208]	; (8003cbc <HAL_ADC_ConfigChannel+0x878>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d047      	beq.n	8003c80 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bf8:	d004      	beq.n	8003c04 <HAL_ADC_ConfigChannel+0x7c0>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a2a      	ldr	r2, [pc, #168]	; (8003ca8 <HAL_ADC_ConfigChannel+0x864>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d101      	bne.n	8003c08 <HAL_ADC_ConfigChannel+0x7c4>
 8003c04:	4a29      	ldr	r2, [pc, #164]	; (8003cac <HAL_ADC_ConfigChannel+0x868>)
 8003c06:	e000      	b.n	8003c0a <HAL_ADC_ConfigChannel+0x7c6>
 8003c08:	4a23      	ldr	r2, [pc, #140]	; (8003c98 <HAL_ADC_ConfigChannel+0x854>)
 8003c0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c12:	4619      	mov	r1, r3
 8003c14:	4610      	mov	r0, r2
 8003c16:	f7fe ff36 	bl	8002a86 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c1a:	e031      	b.n	8003c80 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a27      	ldr	r2, [pc, #156]	; (8003cc0 <HAL_ADC_ConfigChannel+0x87c>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d12d      	bne.n	8003c82 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003c26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d127      	bne.n	8003c82 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a1c      	ldr	r2, [pc, #112]	; (8003ca8 <HAL_ADC_ConfigChannel+0x864>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d022      	beq.n	8003c82 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c44:	d004      	beq.n	8003c50 <HAL_ADC_ConfigChannel+0x80c>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a17      	ldr	r2, [pc, #92]	; (8003ca8 <HAL_ADC_ConfigChannel+0x864>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d101      	bne.n	8003c54 <HAL_ADC_ConfigChannel+0x810>
 8003c50:	4a16      	ldr	r2, [pc, #88]	; (8003cac <HAL_ADC_ConfigChannel+0x868>)
 8003c52:	e000      	b.n	8003c56 <HAL_ADC_ConfigChannel+0x812>
 8003c54:	4a10      	ldr	r2, [pc, #64]	; (8003c98 <HAL_ADC_ConfigChannel+0x854>)
 8003c56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c5a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c5e:	4619      	mov	r1, r3
 8003c60:	4610      	mov	r0, r2
 8003c62:	f7fe ff10 	bl	8002a86 <LL_ADC_SetCommonPathInternalCh>
 8003c66:	e00c      	b.n	8003c82 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c6c:	f043 0220 	orr.w	r2, r3, #32
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003c7a:	e002      	b.n	8003c82 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c7c:	bf00      	nop
 8003c7e:	e000      	b.n	8003c82 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c80:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003c8a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	37d8      	adds	r7, #216	; 0xd8
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	50000700 	.word	0x50000700
 8003c9c:	c3210000 	.word	0xc3210000
 8003ca0:	90c00010 	.word	0x90c00010
 8003ca4:	50000600 	.word	0x50000600
 8003ca8:	50000100 	.word	0x50000100
 8003cac:	50000300 	.word	0x50000300
 8003cb0:	20000004 	.word	0x20000004
 8003cb4:	053e2d63 	.word	0x053e2d63
 8003cb8:	c7520000 	.word	0xc7520000
 8003cbc:	50000500 	.word	0x50000500
 8003cc0:	cb840000 	.word	0xcb840000

08003cc4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7ff f8a9 	bl	8002e28 <LL_ADC_IsEnabled>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d14d      	bne.n	8003d78 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	689a      	ldr	r2, [r3, #8]
 8003ce2:	4b28      	ldr	r3, [pc, #160]	; (8003d84 <ADC_Enable+0xc0>)
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00d      	beq.n	8003d06 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cee:	f043 0210 	orr.w	r2, r3, #16
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cfa:	f043 0201 	orr.w	r2, r3, #1
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e039      	b.n	8003d7a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7ff f864 	bl	8002dd8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003d10:	f7fe fe78 	bl	8002a04 <HAL_GetTick>
 8003d14:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d16:	e028      	b.n	8003d6a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7ff f883 	bl	8002e28 <LL_ADC_IsEnabled>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d104      	bne.n	8003d32 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7ff f853 	bl	8002dd8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003d32:	f7fe fe67 	bl	8002a04 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d914      	bls.n	8003d6a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d00d      	beq.n	8003d6a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d52:	f043 0210 	orr.w	r2, r3, #16
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d5e:	f043 0201 	orr.w	r2, r3, #1
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e007      	b.n	8003d7a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0301 	and.w	r3, r3, #1
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d1cf      	bne.n	8003d18 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	8000003f 	.word	0x8000003f

08003d88 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7ff f85a 	bl	8002e4e <LL_ADC_IsDisableOngoing>
 8003d9a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7ff f841 	bl	8002e28 <LL_ADC_IsEnabled>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d047      	beq.n	8003e3c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d144      	bne.n	8003e3c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f003 030d 	and.w	r3, r3, #13
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d10c      	bne.n	8003dda <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7ff f81b 	bl	8002e00 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2203      	movs	r2, #3
 8003dd0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003dd2:	f7fe fe17 	bl	8002a04 <HAL_GetTick>
 8003dd6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003dd8:	e029      	b.n	8003e2e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dde:	f043 0210 	orr.w	r2, r3, #16
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dea:	f043 0201 	orr.w	r2, r3, #1
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e023      	b.n	8003e3e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003df6:	f7fe fe05 	bl	8002a04 <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d914      	bls.n	8003e2e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00d      	beq.n	8003e2e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e16:	f043 0210 	orr.w	r2, r3, #16
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e22:	f043 0201 	orr.w	r2, r3, #1
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e007      	b.n	8003e3e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1dc      	bne.n	8003df6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b084      	sub	sp, #16
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e52:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e58:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d14b      	bne.n	8003ef8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e64:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0308 	and.w	r3, r3, #8
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d021      	beq.n	8003ebe <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7fe fec0 	bl	8002c04 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d032      	beq.n	8003ef0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d12b      	bne.n	8003ef0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d11f      	bne.n	8003ef0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb4:	f043 0201 	orr.w	r2, r3, #1
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ebc:	e018      	b.n	8003ef0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d111      	bne.n	8003ef0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003edc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d105      	bne.n	8003ef0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee8:	f043 0201 	orr.w	r2, r3, #1
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ef0:	68f8      	ldr	r0, [r7, #12]
 8003ef2:	f7ff fa89 	bl	8003408 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003ef6:	e00e      	b.n	8003f16 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003efc:	f003 0310 	and.w	r3, r3, #16
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d003      	beq.n	8003f0c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f7ff fa93 	bl	8003430 <HAL_ADC_ErrorCallback>
}
 8003f0a:	e004      	b.n	8003f16 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	4798      	blx	r3
}
 8003f16:	bf00      	nop
 8003f18:	3710      	adds	r7, #16
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b084      	sub	sp, #16
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003f2c:	68f8      	ldr	r0, [r7, #12]
 8003f2e:	f7ff fa75 	bl	800341c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f32:	bf00      	nop
 8003f34:	3710      	adds	r7, #16
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}

08003f3a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b084      	sub	sp, #16
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f46:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f4c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f58:	f043 0204 	orr.w	r2, r3, #4
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f7ff fa65 	bl	8003430 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f66:	bf00      	nop
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <LL_ADC_IsEnabled>:
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b083      	sub	sp, #12
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d101      	bne.n	8003f86 <LL_ADC_IsEnabled+0x18>
 8003f82:	2301      	movs	r3, #1
 8003f84:	e000      	b.n	8003f88 <LL_ADC_IsEnabled+0x1a>
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <LL_ADC_StartCalibration>:
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003fa6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003faa:	683a      	ldr	r2, [r7, #0]
 8003fac:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	609a      	str	r2, [r3, #8]
}
 8003fba:	bf00      	nop
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr

08003fc6 <LL_ADC_IsCalibrationOnGoing>:
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b083      	sub	sp, #12
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fda:	d101      	bne.n	8003fe0 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e000      	b.n	8003fe2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr

08003fee <LL_ADC_REG_IsConversionOngoing>:
{
 8003fee:	b480      	push	{r7}
 8003ff0:	b083      	sub	sp, #12
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f003 0304 	and.w	r3, r3, #4
 8003ffe:	2b04      	cmp	r3, #4
 8004000:	d101      	bne.n	8004006 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004002:	2301      	movs	r3, #1
 8004004:	e000      	b.n	8004008 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800401e:	2300      	movs	r3, #0
 8004020:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004028:	2b01      	cmp	r3, #1
 800402a:	d101      	bne.n	8004030 <HAL_ADCEx_Calibration_Start+0x1c>
 800402c:	2302      	movs	r3, #2
 800402e:	e04d      	b.n	80040cc <HAL_ADCEx_Calibration_Start+0xb8>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f7ff fea5 	bl	8003d88 <ADC_Disable>
 800403e:	4603      	mov	r3, r0
 8004040:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004042:	7bfb      	ldrb	r3, [r7, #15]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d136      	bne.n	80040b6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800404c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004050:	f023 0302 	bic.w	r3, r3, #2
 8004054:	f043 0202 	orr.w	r2, r3, #2
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6839      	ldr	r1, [r7, #0]
 8004062:	4618      	mov	r0, r3
 8004064:	f7ff ff96 	bl	8003f94 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004068:	e014      	b.n	8004094 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	3301      	adds	r3, #1
 800406e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	4a18      	ldr	r2, [pc, #96]	; (80040d4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d90d      	bls.n	8004094 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800407c:	f023 0312 	bic.w	r3, r3, #18
 8004080:	f043 0210 	orr.w	r2, r3, #16
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e01b      	b.n	80040cc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4618      	mov	r0, r3
 800409a:	f7ff ff94 	bl	8003fc6 <LL_ADC_IsCalibrationOnGoing>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1e2      	bne.n	800406a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a8:	f023 0303 	bic.w	r3, r3, #3
 80040ac:	f043 0201 	orr.w	r2, r3, #1
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	65da      	str	r2, [r3, #92]	; 0x5c
 80040b4:	e005      	b.n	80040c2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ba:	f043 0210 	orr.w	r2, r3, #16
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80040ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	0004de01 	.word	0x0004de01

080040d8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80040d8:	b590      	push	{r4, r7, lr}
 80040da:	b0a1      	sub	sp, #132	; 0x84
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040e2:	2300      	movs	r3, #0
 80040e4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d101      	bne.n	80040f6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80040f2:	2302      	movs	r3, #2
 80040f4:	e0e7      	b.n	80042c6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80040fe:	2300      	movs	r3, #0
 8004100:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004102:	2300      	movs	r3, #0
 8004104:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800410e:	d102      	bne.n	8004116 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004110:	4b6f      	ldr	r3, [pc, #444]	; (80042d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004112:	60bb      	str	r3, [r7, #8]
 8004114:	e009      	b.n	800412a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a6e      	ldr	r2, [pc, #440]	; (80042d4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d102      	bne.n	8004126 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004120:	4b6d      	ldr	r3, [pc, #436]	; (80042d8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004122:	60bb      	str	r3, [r7, #8]
 8004124:	e001      	b.n	800412a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004126:	2300      	movs	r3, #0
 8004128:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d10b      	bne.n	8004148 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004134:	f043 0220 	orr.w	r2, r3, #32
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e0be      	b.n	80042c6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	4618      	mov	r0, r3
 800414c:	f7ff ff4f 	bl	8003fee <LL_ADC_REG_IsConversionOngoing>
 8004150:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4618      	mov	r0, r3
 8004158:	f7ff ff49 	bl	8003fee <LL_ADC_REG_IsConversionOngoing>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	f040 80a0 	bne.w	80042a4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004164:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004166:	2b00      	cmp	r3, #0
 8004168:	f040 809c 	bne.w	80042a4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004174:	d004      	beq.n	8004180 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a55      	ldr	r2, [pc, #340]	; (80042d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d101      	bne.n	8004184 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004180:	4b56      	ldr	r3, [pc, #344]	; (80042dc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004182:	e000      	b.n	8004186 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004184:	4b56      	ldr	r3, [pc, #344]	; (80042e0 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004186:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d04b      	beq.n	8004228 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004190:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	6859      	ldr	r1, [r3, #4]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80041a2:	035b      	lsls	r3, r3, #13
 80041a4:	430b      	orrs	r3, r1
 80041a6:	431a      	orrs	r2, r3
 80041a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041aa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041b4:	d004      	beq.n	80041c0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a45      	ldr	r2, [pc, #276]	; (80042d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d10f      	bne.n	80041e0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80041c0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80041c4:	f7ff fed3 	bl	8003f6e <LL_ADC_IsEnabled>
 80041c8:	4604      	mov	r4, r0
 80041ca:	4841      	ldr	r0, [pc, #260]	; (80042d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80041cc:	f7ff fecf 	bl	8003f6e <LL_ADC_IsEnabled>
 80041d0:	4603      	mov	r3, r0
 80041d2:	4323      	orrs	r3, r4
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	bf0c      	ite	eq
 80041d8:	2301      	moveq	r3, #1
 80041da:	2300      	movne	r3, #0
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	e012      	b.n	8004206 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80041e0:	483c      	ldr	r0, [pc, #240]	; (80042d4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80041e2:	f7ff fec4 	bl	8003f6e <LL_ADC_IsEnabled>
 80041e6:	4604      	mov	r4, r0
 80041e8:	483b      	ldr	r0, [pc, #236]	; (80042d8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80041ea:	f7ff fec0 	bl	8003f6e <LL_ADC_IsEnabled>
 80041ee:	4603      	mov	r3, r0
 80041f0:	431c      	orrs	r4, r3
 80041f2:	483c      	ldr	r0, [pc, #240]	; (80042e4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80041f4:	f7ff febb 	bl	8003f6e <LL_ADC_IsEnabled>
 80041f8:	4603      	mov	r3, r0
 80041fa:	4323      	orrs	r3, r4
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	bf0c      	ite	eq
 8004200:	2301      	moveq	r3, #1
 8004202:	2300      	movne	r3, #0
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	d056      	beq.n	80042b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800420a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004212:	f023 030f 	bic.w	r3, r3, #15
 8004216:	683a      	ldr	r2, [r7, #0]
 8004218:	6811      	ldr	r1, [r2, #0]
 800421a:	683a      	ldr	r2, [r7, #0]
 800421c:	6892      	ldr	r2, [r2, #8]
 800421e:	430a      	orrs	r2, r1
 8004220:	431a      	orrs	r2, r3
 8004222:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004224:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004226:	e047      	b.n	80042b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004228:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004230:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004232:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800423c:	d004      	beq.n	8004248 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a23      	ldr	r2, [pc, #140]	; (80042d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d10f      	bne.n	8004268 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004248:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800424c:	f7ff fe8f 	bl	8003f6e <LL_ADC_IsEnabled>
 8004250:	4604      	mov	r4, r0
 8004252:	481f      	ldr	r0, [pc, #124]	; (80042d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004254:	f7ff fe8b 	bl	8003f6e <LL_ADC_IsEnabled>
 8004258:	4603      	mov	r3, r0
 800425a:	4323      	orrs	r3, r4
 800425c:	2b00      	cmp	r3, #0
 800425e:	bf0c      	ite	eq
 8004260:	2301      	moveq	r3, #1
 8004262:	2300      	movne	r3, #0
 8004264:	b2db      	uxtb	r3, r3
 8004266:	e012      	b.n	800428e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004268:	481a      	ldr	r0, [pc, #104]	; (80042d4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800426a:	f7ff fe80 	bl	8003f6e <LL_ADC_IsEnabled>
 800426e:	4604      	mov	r4, r0
 8004270:	4819      	ldr	r0, [pc, #100]	; (80042d8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004272:	f7ff fe7c 	bl	8003f6e <LL_ADC_IsEnabled>
 8004276:	4603      	mov	r3, r0
 8004278:	431c      	orrs	r4, r3
 800427a:	481a      	ldr	r0, [pc, #104]	; (80042e4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800427c:	f7ff fe77 	bl	8003f6e <LL_ADC_IsEnabled>
 8004280:	4603      	mov	r3, r0
 8004282:	4323      	orrs	r3, r4
 8004284:	2b00      	cmp	r3, #0
 8004286:	bf0c      	ite	eq
 8004288:	2301      	moveq	r3, #1
 800428a:	2300      	movne	r3, #0
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d012      	beq.n	80042b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004292:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800429a:	f023 030f 	bic.w	r3, r3, #15
 800429e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80042a0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80042a2:	e009      	b.n	80042b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042a8:	f043 0220 	orr.w	r2, r3, #32
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80042b6:	e000      	b.n	80042ba <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80042b8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80042c2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3784      	adds	r7, #132	; 0x84
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd90      	pop	{r4, r7, pc}
 80042ce:	bf00      	nop
 80042d0:	50000100 	.word	0x50000100
 80042d4:	50000400 	.word	0x50000400
 80042d8:	50000500 	.word	0x50000500
 80042dc:	50000300 	.word	0x50000300
 80042e0:	50000700 	.word	0x50000700
 80042e4:	50000600 	.word	0x50000600

080042e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f003 0307 	and.w	r3, r3, #7
 80042f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042f8:	4b0c      	ldr	r3, [pc, #48]	; (800432c <__NVIC_SetPriorityGrouping+0x44>)
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004304:	4013      	ands	r3, r2
 8004306:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004310:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800431a:	4a04      	ldr	r2, [pc, #16]	; (800432c <__NVIC_SetPriorityGrouping+0x44>)
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	60d3      	str	r3, [r2, #12]
}
 8004320:	bf00      	nop
 8004322:	3714      	adds	r7, #20
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	e000ed00 	.word	0xe000ed00

08004330 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004330:	b480      	push	{r7}
 8004332:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004334:	4b04      	ldr	r3, [pc, #16]	; (8004348 <__NVIC_GetPriorityGrouping+0x18>)
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	0a1b      	lsrs	r3, r3, #8
 800433a:	f003 0307 	and.w	r3, r3, #7
}
 800433e:	4618      	mov	r0, r3
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr
 8004348:	e000ed00 	.word	0xe000ed00

0800434c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	4603      	mov	r3, r0
 8004354:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800435a:	2b00      	cmp	r3, #0
 800435c:	db0b      	blt.n	8004376 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800435e:	79fb      	ldrb	r3, [r7, #7]
 8004360:	f003 021f 	and.w	r2, r3, #31
 8004364:	4907      	ldr	r1, [pc, #28]	; (8004384 <__NVIC_EnableIRQ+0x38>)
 8004366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800436a:	095b      	lsrs	r3, r3, #5
 800436c:	2001      	movs	r0, #1
 800436e:	fa00 f202 	lsl.w	r2, r0, r2
 8004372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004376:	bf00      	nop
 8004378:	370c      	adds	r7, #12
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	e000e100 	.word	0xe000e100

08004388 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	4603      	mov	r3, r0
 8004390:	6039      	str	r1, [r7, #0]
 8004392:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004398:	2b00      	cmp	r3, #0
 800439a:	db0a      	blt.n	80043b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	b2da      	uxtb	r2, r3
 80043a0:	490c      	ldr	r1, [pc, #48]	; (80043d4 <__NVIC_SetPriority+0x4c>)
 80043a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a6:	0112      	lsls	r2, r2, #4
 80043a8:	b2d2      	uxtb	r2, r2
 80043aa:	440b      	add	r3, r1
 80043ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043b0:	e00a      	b.n	80043c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	4908      	ldr	r1, [pc, #32]	; (80043d8 <__NVIC_SetPriority+0x50>)
 80043b8:	79fb      	ldrb	r3, [r7, #7]
 80043ba:	f003 030f 	and.w	r3, r3, #15
 80043be:	3b04      	subs	r3, #4
 80043c0:	0112      	lsls	r2, r2, #4
 80043c2:	b2d2      	uxtb	r2, r2
 80043c4:	440b      	add	r3, r1
 80043c6:	761a      	strb	r2, [r3, #24]
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr
 80043d4:	e000e100 	.word	0xe000e100
 80043d8:	e000ed00 	.word	0xe000ed00

080043dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043dc:	b480      	push	{r7}
 80043de:	b089      	sub	sp, #36	; 0x24
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f003 0307 	and.w	r3, r3, #7
 80043ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	f1c3 0307 	rsb	r3, r3, #7
 80043f6:	2b04      	cmp	r3, #4
 80043f8:	bf28      	it	cs
 80043fa:	2304      	movcs	r3, #4
 80043fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	3304      	adds	r3, #4
 8004402:	2b06      	cmp	r3, #6
 8004404:	d902      	bls.n	800440c <NVIC_EncodePriority+0x30>
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	3b03      	subs	r3, #3
 800440a:	e000      	b.n	800440e <NVIC_EncodePriority+0x32>
 800440c:	2300      	movs	r3, #0
 800440e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004410:	f04f 32ff 	mov.w	r2, #4294967295
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	fa02 f303 	lsl.w	r3, r2, r3
 800441a:	43da      	mvns	r2, r3
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	401a      	ands	r2, r3
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004424:	f04f 31ff 	mov.w	r1, #4294967295
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	fa01 f303 	lsl.w	r3, r1, r3
 800442e:	43d9      	mvns	r1, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004434:	4313      	orrs	r3, r2
         );
}
 8004436:	4618      	mov	r0, r3
 8004438:	3724      	adds	r7, #36	; 0x24
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
	...

08004444 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	3b01      	subs	r3, #1
 8004450:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004454:	d301      	bcc.n	800445a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004456:	2301      	movs	r3, #1
 8004458:	e00f      	b.n	800447a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800445a:	4a0a      	ldr	r2, [pc, #40]	; (8004484 <SysTick_Config+0x40>)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	3b01      	subs	r3, #1
 8004460:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004462:	210f      	movs	r1, #15
 8004464:	f04f 30ff 	mov.w	r0, #4294967295
 8004468:	f7ff ff8e 	bl	8004388 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800446c:	4b05      	ldr	r3, [pc, #20]	; (8004484 <SysTick_Config+0x40>)
 800446e:	2200      	movs	r2, #0
 8004470:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004472:	4b04      	ldr	r3, [pc, #16]	; (8004484 <SysTick_Config+0x40>)
 8004474:	2207      	movs	r2, #7
 8004476:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3708      	adds	r7, #8
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	e000e010 	.word	0xe000e010

08004488 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f7ff ff29 	bl	80042e8 <__NVIC_SetPriorityGrouping>
}
 8004496:	bf00      	nop
 8004498:	3708      	adds	r7, #8
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800449e:	b580      	push	{r7, lr}
 80044a0:	b086      	sub	sp, #24
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	4603      	mov	r3, r0
 80044a6:	60b9      	str	r1, [r7, #8]
 80044a8:	607a      	str	r2, [r7, #4]
 80044aa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80044ac:	f7ff ff40 	bl	8004330 <__NVIC_GetPriorityGrouping>
 80044b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	68b9      	ldr	r1, [r7, #8]
 80044b6:	6978      	ldr	r0, [r7, #20]
 80044b8:	f7ff ff90 	bl	80043dc <NVIC_EncodePriority>
 80044bc:	4602      	mov	r2, r0
 80044be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044c2:	4611      	mov	r1, r2
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7ff ff5f 	bl	8004388 <__NVIC_SetPriority>
}
 80044ca:	bf00      	nop
 80044cc:	3718      	adds	r7, #24
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b082      	sub	sp, #8
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	4603      	mov	r3, r0
 80044da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7ff ff33 	bl	800434c <__NVIC_EnableIRQ>
}
 80044e6:	bf00      	nop
 80044e8:	3708      	adds	r7, #8
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}

080044ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044ee:	b580      	push	{r7, lr}
 80044f0:	b082      	sub	sp, #8
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f7ff ffa4 	bl	8004444 <SysTick_Config>
 80044fc:	4603      	mov	r3, r0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3708      	adds	r7, #8
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
	...

08004508 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e08d      	b.n	8004636 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	461a      	mov	r2, r3
 8004520:	4b47      	ldr	r3, [pc, #284]	; (8004640 <HAL_DMA_Init+0x138>)
 8004522:	429a      	cmp	r2, r3
 8004524:	d80f      	bhi.n	8004546 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	461a      	mov	r2, r3
 800452c:	4b45      	ldr	r3, [pc, #276]	; (8004644 <HAL_DMA_Init+0x13c>)
 800452e:	4413      	add	r3, r2
 8004530:	4a45      	ldr	r2, [pc, #276]	; (8004648 <HAL_DMA_Init+0x140>)
 8004532:	fba2 2303 	umull	r2, r3, r2, r3
 8004536:	091b      	lsrs	r3, r3, #4
 8004538:	009a      	lsls	r2, r3, #2
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a42      	ldr	r2, [pc, #264]	; (800464c <HAL_DMA_Init+0x144>)
 8004542:	641a      	str	r2, [r3, #64]	; 0x40
 8004544:	e00e      	b.n	8004564 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	461a      	mov	r2, r3
 800454c:	4b40      	ldr	r3, [pc, #256]	; (8004650 <HAL_DMA_Init+0x148>)
 800454e:	4413      	add	r3, r2
 8004550:	4a3d      	ldr	r2, [pc, #244]	; (8004648 <HAL_DMA_Init+0x140>)
 8004552:	fba2 2303 	umull	r2, r3, r2, r3
 8004556:	091b      	lsrs	r3, r3, #4
 8004558:	009a      	lsls	r2, r3, #2
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a3c      	ldr	r2, [pc, #240]	; (8004654 <HAL_DMA_Init+0x14c>)
 8004562:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2202      	movs	r2, #2
 8004568:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800457a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800457e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004588:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004594:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 fa76 	bl	8004aa8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045c4:	d102      	bne.n	80045cc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045d4:	b2d2      	uxtb	r2, r2
 80045d6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80045e0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d010      	beq.n	800460c <HAL_DMA_Init+0x104>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	d80c      	bhi.n	800460c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 fa96 	bl	8004b24 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045fc:	2200      	movs	r2, #0
 80045fe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004608:	605a      	str	r2, [r3, #4]
 800460a:	e008      	b.n	800461e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3710      	adds	r7, #16
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	40020407 	.word	0x40020407
 8004644:	bffdfff8 	.word	0xbffdfff8
 8004648:	cccccccd 	.word	0xcccccccd
 800464c:	40020000 	.word	0x40020000
 8004650:	bffdfbf8 	.word	0xbffdfbf8
 8004654:	40020400 	.word	0x40020400

08004658 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b086      	sub	sp, #24
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
 8004664:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004666:	2300      	movs	r3, #0
 8004668:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004670:	2b01      	cmp	r3, #1
 8004672:	d101      	bne.n	8004678 <HAL_DMA_Start_IT+0x20>
 8004674:	2302      	movs	r3, #2
 8004676:	e066      	b.n	8004746 <HAL_DMA_Start_IT+0xee>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b01      	cmp	r3, #1
 800468a:	d155      	bne.n	8004738 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2202      	movs	r2, #2
 8004690:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2200      	movs	r2, #0
 8004698:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f022 0201 	bic.w	r2, r2, #1
 80046a8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	68b9      	ldr	r1, [r7, #8]
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f000 f9bb 	bl	8004a2c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d008      	beq.n	80046d0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f042 020e 	orr.w	r2, r2, #14
 80046cc:	601a      	str	r2, [r3, #0]
 80046ce:	e00f      	b.n	80046f0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f022 0204 	bic.w	r2, r2, #4
 80046de:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f042 020a 	orr.w	r2, r2, #10
 80046ee:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d007      	beq.n	800470e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004708:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800470c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004712:	2b00      	cmp	r3, #0
 8004714:	d007      	beq.n	8004726 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004720:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004724:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f042 0201 	orr.w	r2, r2, #1
 8004734:	601a      	str	r2, [r3, #0]
 8004736:	e005      	b.n	8004744 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004740:	2302      	movs	r3, #2
 8004742:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004744:	7dfb      	ldrb	r3, [r7, #23]
}
 8004746:	4618      	mov	r0, r3
 8004748:	3718      	adds	r7, #24
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800474e:	b480      	push	{r7}
 8004750:	b085      	sub	sp, #20
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004756:	2300      	movs	r3, #0
 8004758:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d005      	beq.n	8004772 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2204      	movs	r2, #4
 800476a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	73fb      	strb	r3, [r7, #15]
 8004770:	e037      	b.n	80047e2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f022 020e 	bic.w	r2, r2, #14
 8004780:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800478c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004790:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f022 0201 	bic.w	r2, r2, #1
 80047a0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a6:	f003 021f 	and.w	r2, r3, #31
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ae:	2101      	movs	r1, #1
 80047b0:	fa01 f202 	lsl.w	r2, r1, r2
 80047b4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80047be:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00c      	beq.n	80047e2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047d6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80047e0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80047f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3714      	adds	r7, #20
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004808:	2300      	movs	r3, #0
 800480a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b02      	cmp	r3, #2
 8004816:	d00d      	beq.n	8004834 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2204      	movs	r2, #4
 800481c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	73fb      	strb	r3, [r7, #15]
 8004832:	e047      	b.n	80048c4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f022 020e 	bic.w	r2, r2, #14
 8004842:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f022 0201 	bic.w	r2, r2, #1
 8004852:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800485e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004862:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004868:	f003 021f 	and.w	r2, r3, #31
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004870:	2101      	movs	r1, #1
 8004872:	fa01 f202 	lsl.w	r2, r1, r2
 8004876:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004880:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00c      	beq.n	80048a4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004894:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004898:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80048a2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d003      	beq.n	80048c4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	4798      	blx	r3
    }
  }
  return status;
 80048c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80048ce:	b580      	push	{r7, lr}
 80048d0:	b084      	sub	sp, #16
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ea:	f003 031f 	and.w	r3, r3, #31
 80048ee:	2204      	movs	r2, #4
 80048f0:	409a      	lsls	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	4013      	ands	r3, r2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d026      	beq.n	8004948 <HAL_DMA_IRQHandler+0x7a>
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	f003 0304 	and.w	r3, r3, #4
 8004900:	2b00      	cmp	r3, #0
 8004902:	d021      	beq.n	8004948 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0320 	and.w	r3, r3, #32
 800490e:	2b00      	cmp	r3, #0
 8004910:	d107      	bne.n	8004922 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f022 0204 	bic.w	r2, r2, #4
 8004920:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004926:	f003 021f 	and.w	r2, r3, #31
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492e:	2104      	movs	r1, #4
 8004930:	fa01 f202 	lsl.w	r2, r1, r2
 8004934:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493a:	2b00      	cmp	r3, #0
 800493c:	d071      	beq.n	8004a22 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004946:	e06c      	b.n	8004a22 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800494c:	f003 031f 	and.w	r3, r3, #31
 8004950:	2202      	movs	r2, #2
 8004952:	409a      	lsls	r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	4013      	ands	r3, r2
 8004958:	2b00      	cmp	r3, #0
 800495a:	d02e      	beq.n	80049ba <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d029      	beq.n	80049ba <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0320 	and.w	r3, r3, #32
 8004970:	2b00      	cmp	r3, #0
 8004972:	d10b      	bne.n	800498c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f022 020a 	bic.w	r2, r2, #10
 8004982:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004990:	f003 021f 	and.w	r2, r3, #31
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004998:	2102      	movs	r1, #2
 800499a:	fa01 f202 	lsl.w	r2, r1, r2
 800499e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d038      	beq.n	8004a22 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80049b8:	e033      	b.n	8004a22 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049be:	f003 031f 	and.w	r3, r3, #31
 80049c2:	2208      	movs	r2, #8
 80049c4:	409a      	lsls	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	4013      	ands	r3, r2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d02a      	beq.n	8004a24 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	f003 0308 	and.w	r3, r3, #8
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d025      	beq.n	8004a24 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f022 020e 	bic.w	r2, r2, #14
 80049e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ec:	f003 021f 	and.w	r2, r3, #31
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f4:	2101      	movs	r1, #1
 80049f6:	fa01 f202 	lsl.w	r2, r1, r2
 80049fa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d004      	beq.n	8004a24 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004a22:	bf00      	nop
 8004a24:	bf00      	nop
}
 8004a26:	3710      	adds	r7, #16
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
 8004a38:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004a42:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d004      	beq.n	8004a56 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004a54:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a5a:	f003 021f 	and.w	r2, r3, #31
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a62:	2101      	movs	r1, #1
 8004a64:	fa01 f202 	lsl.w	r2, r1, r2
 8004a68:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	2b10      	cmp	r3, #16
 8004a78:	d108      	bne.n	8004a8c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68ba      	ldr	r2, [r7, #8]
 8004a88:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004a8a:	e007      	b.n	8004a9c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68ba      	ldr	r2, [r7, #8]
 8004a92:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	60da      	str	r2, [r3, #12]
}
 8004a9c:	bf00      	nop
 8004a9e:	3714      	adds	r7, #20
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b087      	sub	sp, #28
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	4b16      	ldr	r3, [pc, #88]	; (8004b10 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d802      	bhi.n	8004ac2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004abc:	4b15      	ldr	r3, [pc, #84]	; (8004b14 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004abe:	617b      	str	r3, [r7, #20]
 8004ac0:	e001      	b.n	8004ac6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004ac2:	4b15      	ldr	r3, [pc, #84]	; (8004b18 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004ac4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	3b08      	subs	r3, #8
 8004ad2:	4a12      	ldr	r2, [pc, #72]	; (8004b1c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad8:	091b      	lsrs	r3, r3, #4
 8004ada:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae0:	089b      	lsrs	r3, r3, #2
 8004ae2:	009a      	lsls	r2, r3, #2
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	461a      	mov	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a0b      	ldr	r2, [pc, #44]	; (8004b20 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004af2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f003 031f 	and.w	r3, r3, #31
 8004afa:	2201      	movs	r2, #1
 8004afc:	409a      	lsls	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004b02:	bf00      	nop
 8004b04:	371c      	adds	r7, #28
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	40020407 	.word	0x40020407
 8004b14:	40020800 	.word	0x40020800
 8004b18:	40020820 	.word	0x40020820
 8004b1c:	cccccccd 	.word	0xcccccccd
 8004b20:	40020880 	.word	0x40020880

08004b24 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	4b0b      	ldr	r3, [pc, #44]	; (8004b64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004b38:	4413      	add	r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a08      	ldr	r2, [pc, #32]	; (8004b68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004b46:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	f003 031f 	and.w	r3, r3, #31
 8004b50:	2201      	movs	r2, #1
 8004b52:	409a      	lsls	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004b58:	bf00      	nop
 8004b5a:	3714      	adds	r7, #20
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr
 8004b64:	1000823f 	.word	0x1000823f
 8004b68:	40020940 	.word	0x40020940

08004b6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b087      	sub	sp, #28
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004b76:	2300      	movs	r3, #0
 8004b78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004b7a:	e15a      	b.n	8004e32 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	2101      	movs	r1, #1
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	fa01 f303 	lsl.w	r3, r1, r3
 8004b88:	4013      	ands	r3, r2
 8004b8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f000 814c 	beq.w	8004e2c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d00b      	beq.n	8004bb4 <HAL_GPIO_Init+0x48>
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d007      	beq.n	8004bb4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ba8:	2b11      	cmp	r3, #17
 8004baa:	d003      	beq.n	8004bb4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	2b12      	cmp	r3, #18
 8004bb2:	d130      	bne.n	8004c16 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	005b      	lsls	r3, r3, #1
 8004bbe:	2203      	movs	r2, #3
 8004bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc4:	43db      	mvns	r3, r3
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	4013      	ands	r3, r2
 8004bca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	68da      	ldr	r2, [r3, #12]
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	005b      	lsls	r3, r3, #1
 8004bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	693a      	ldr	r2, [r7, #16]
 8004be2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004bea:	2201      	movs	r2, #1
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf2:	43db      	mvns	r3, r3
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	091b      	lsrs	r3, r3, #4
 8004c00:	f003 0201 	and.w	r2, r3, #1
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	005b      	lsls	r3, r3, #1
 8004c20:	2203      	movs	r2, #3
 8004c22:	fa02 f303 	lsl.w	r3, r2, r3
 8004c26:	43db      	mvns	r3, r3
 8004c28:	693a      	ldr	r2, [r7, #16]
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	689a      	ldr	r2, [r3, #8]
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	005b      	lsls	r3, r3, #1
 8004c36:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3a:	693a      	ldr	r2, [r7, #16]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d003      	beq.n	8004c56 <HAL_GPIO_Init+0xea>
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	2b12      	cmp	r3, #18
 8004c54:	d123      	bne.n	8004c9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	08da      	lsrs	r2, r3, #3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	3208      	adds	r2, #8
 8004c5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	f003 0307 	and.w	r3, r3, #7
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	220f      	movs	r2, #15
 8004c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c72:	43db      	mvns	r3, r3
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	4013      	ands	r3, r2
 8004c78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	691a      	ldr	r2, [r3, #16]
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	f003 0307 	and.w	r3, r3, #7
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	08da      	lsrs	r2, r3, #3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	3208      	adds	r2, #8
 8004c98:	6939      	ldr	r1, [r7, #16]
 8004c9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	005b      	lsls	r3, r3, #1
 8004ca8:	2203      	movs	r2, #3
 8004caa:	fa02 f303 	lsl.w	r3, r2, r3
 8004cae:	43db      	mvns	r3, r3
 8004cb0:	693a      	ldr	r2, [r7, #16]
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f003 0203 	and.w	r2, r3, #3
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	005b      	lsls	r3, r3, #1
 8004cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	693a      	ldr	r2, [r7, #16]
 8004cd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	f000 80a6 	beq.w	8004e2c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ce0:	4b5b      	ldr	r3, [pc, #364]	; (8004e50 <HAL_GPIO_Init+0x2e4>)
 8004ce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ce4:	4a5a      	ldr	r2, [pc, #360]	; (8004e50 <HAL_GPIO_Init+0x2e4>)
 8004ce6:	f043 0301 	orr.w	r3, r3, #1
 8004cea:	6613      	str	r3, [r2, #96]	; 0x60
 8004cec:	4b58      	ldr	r3, [pc, #352]	; (8004e50 <HAL_GPIO_Init+0x2e4>)
 8004cee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cf0:	f003 0301 	and.w	r3, r3, #1
 8004cf4:	60bb      	str	r3, [r7, #8]
 8004cf6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004cf8:	4a56      	ldr	r2, [pc, #344]	; (8004e54 <HAL_GPIO_Init+0x2e8>)
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	089b      	lsrs	r3, r3, #2
 8004cfe:	3302      	adds	r3, #2
 8004d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	f003 0303 	and.w	r3, r3, #3
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	220f      	movs	r2, #15
 8004d10:	fa02 f303 	lsl.w	r3, r2, r3
 8004d14:	43db      	mvns	r3, r3
 8004d16:	693a      	ldr	r2, [r7, #16]
 8004d18:	4013      	ands	r3, r2
 8004d1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004d22:	d01f      	beq.n	8004d64 <HAL_GPIO_Init+0x1f8>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a4c      	ldr	r2, [pc, #304]	; (8004e58 <HAL_GPIO_Init+0x2ec>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d019      	beq.n	8004d60 <HAL_GPIO_Init+0x1f4>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a4b      	ldr	r2, [pc, #300]	; (8004e5c <HAL_GPIO_Init+0x2f0>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d013      	beq.n	8004d5c <HAL_GPIO_Init+0x1f0>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a4a      	ldr	r2, [pc, #296]	; (8004e60 <HAL_GPIO_Init+0x2f4>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d00d      	beq.n	8004d58 <HAL_GPIO_Init+0x1ec>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a49      	ldr	r2, [pc, #292]	; (8004e64 <HAL_GPIO_Init+0x2f8>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d007      	beq.n	8004d54 <HAL_GPIO_Init+0x1e8>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a48      	ldr	r2, [pc, #288]	; (8004e68 <HAL_GPIO_Init+0x2fc>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d101      	bne.n	8004d50 <HAL_GPIO_Init+0x1e4>
 8004d4c:	2305      	movs	r3, #5
 8004d4e:	e00a      	b.n	8004d66 <HAL_GPIO_Init+0x1fa>
 8004d50:	2306      	movs	r3, #6
 8004d52:	e008      	b.n	8004d66 <HAL_GPIO_Init+0x1fa>
 8004d54:	2304      	movs	r3, #4
 8004d56:	e006      	b.n	8004d66 <HAL_GPIO_Init+0x1fa>
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e004      	b.n	8004d66 <HAL_GPIO_Init+0x1fa>
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	e002      	b.n	8004d66 <HAL_GPIO_Init+0x1fa>
 8004d60:	2301      	movs	r3, #1
 8004d62:	e000      	b.n	8004d66 <HAL_GPIO_Init+0x1fa>
 8004d64:	2300      	movs	r3, #0
 8004d66:	697a      	ldr	r2, [r7, #20]
 8004d68:	f002 0203 	and.w	r2, r2, #3
 8004d6c:	0092      	lsls	r2, r2, #2
 8004d6e:	4093      	lsls	r3, r2
 8004d70:	693a      	ldr	r2, [r7, #16]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d76:	4937      	ldr	r1, [pc, #220]	; (8004e54 <HAL_GPIO_Init+0x2e8>)
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	089b      	lsrs	r3, r3, #2
 8004d7c:	3302      	adds	r3, #2
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004d84:	4b39      	ldr	r3, [pc, #228]	; (8004e6c <HAL_GPIO_Init+0x300>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	43db      	mvns	r3, r3
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	4013      	ands	r3, r2
 8004d92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d003      	beq.n	8004da8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004da0:	693a      	ldr	r2, [r7, #16]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004da8:	4a30      	ldr	r2, [pc, #192]	; (8004e6c <HAL_GPIO_Init+0x300>)
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004dae:	4b2f      	ldr	r3, [pc, #188]	; (8004e6c <HAL_GPIO_Init+0x300>)
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	43db      	mvns	r3, r3
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	4013      	ands	r3, r2
 8004dbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d003      	beq.n	8004dd2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004dd2:	4a26      	ldr	r2, [pc, #152]	; (8004e6c <HAL_GPIO_Init+0x300>)
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004dd8:	4b24      	ldr	r3, [pc, #144]	; (8004e6c <HAL_GPIO_Init+0x300>)
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	43db      	mvns	r3, r3
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	4013      	ands	r3, r2
 8004de6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d003      	beq.n	8004dfc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004dfc:	4a1b      	ldr	r2, [pc, #108]	; (8004e6c <HAL_GPIO_Init+0x300>)
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004e02:	4b1a      	ldr	r3, [pc, #104]	; (8004e6c <HAL_GPIO_Init+0x300>)
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	43db      	mvns	r3, r3
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	4013      	ands	r3, r2
 8004e10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d003      	beq.n	8004e26 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004e1e:	693a      	ldr	r2, [r7, #16]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004e26:	4a11      	ldr	r2, [pc, #68]	; (8004e6c <HAL_GPIO_Init+0x300>)
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	3301      	adds	r3, #1
 8004e30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	fa22 f303 	lsr.w	r3, r2, r3
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f47f ae9d 	bne.w	8004b7c <HAL_GPIO_Init+0x10>
  }
}
 8004e42:	bf00      	nop
 8004e44:	bf00      	nop
 8004e46:	371c      	adds	r7, #28
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr
 8004e50:	40021000 	.word	0x40021000
 8004e54:	40010000 	.word	0x40010000
 8004e58:	48000400 	.word	0x48000400
 8004e5c:	48000800 	.word	0x48000800
 8004e60:	48000c00 	.word	0x48000c00
 8004e64:	48001000 	.word	0x48001000
 8004e68:	48001400 	.word	0x48001400
 8004e6c:	40010400 	.word	0x40010400

08004e70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	460b      	mov	r3, r1
 8004e7a:	807b      	strh	r3, [r7, #2]
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e80:	787b      	ldrb	r3, [r7, #1]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d003      	beq.n	8004e8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e86:	887a      	ldrh	r2, [r7, #2]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004e8c:	e002      	b.n	8004e94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004e8e:	887a      	ldrh	r2, [r7, #2]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	695b      	ldr	r3, [r3, #20]
 8004eb0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004eb2:	887a      	ldrh	r2, [r7, #2]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	041a      	lsls	r2, r3, #16
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	43d9      	mvns	r1, r3
 8004ebe:	887b      	ldrh	r3, [r7, #2]
 8004ec0:	400b      	ands	r3, r1
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	619a      	str	r2, [r3, #24]
}
 8004ec8:	bf00      	nop
 8004eca:	3714      	adds	r7, #20
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b086      	sub	sp, #24
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e0be      	b.n	8005064 <HAL_HRTIM_Init+0x190>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2202      	movs	r2, #2
 8004eea:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  hhrtim->hdmaTimerF = (DMA_HandleTypeDef *)NULL;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d02e      	beq.n	8004f90 <HAL_HRTIM_Init+0xbc>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a4d      	ldr	r2, [pc, #308]	; (800506c <HAL_HRTIM_Init+0x198>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d10b      	bne.n	8004f54 <HAL_HRTIM_Init+0x80>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8004f3c:	4b4c      	ldr	r3, [pc, #304]	; (8005070 <HAL_HRTIM_Init+0x19c>)
 8004f3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f40:	4a4b      	ldr	r2, [pc, #300]	; (8005070 <HAL_HRTIM_Init+0x19c>)
 8004f42:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f46:	6613      	str	r3, [r2, #96]	; 0x60
 8004f48:	4b49      	ldr	r3, [pc, #292]	; (8005070 <HAL_HRTIM_Init+0x19c>)
 8004f4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f50:	60fb      	str	r3, [r7, #12]
 8004f52:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004f62:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004f78:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f7fd f885 	bl	80020a0 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f003 0302 	and.w	r3, r3, #2
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d012      	beq.n	8004fc8 <HAL_HRTIM_Init+0xf4>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fb0:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fba:	693a      	ldr	r2, [r7, #16]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	75fb      	strb	r3, [r7, #23]
 8004fdc:	e03e      	b.n	800505c <HAL_HRTIM_Init+0x188>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8004fde:	7dfa      	ldrb	r2, [r7, #23]
 8004fe0:	6879      	ldr	r1, [r7, #4]
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	00db      	lsls	r3, r3, #3
 8004fe6:	1a9b      	subs	r3, r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	440b      	add	r3, r1
 8004fec:	3318      	adds	r3, #24
 8004fee:	2200      	movs	r2, #0
 8004ff0:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8004ff2:	7dfa      	ldrb	r2, [r7, #23]
 8004ff4:	6879      	ldr	r1, [r7, #4]
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	00db      	lsls	r3, r3, #3
 8004ffa:	1a9b      	subs	r3, r3, r2
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	440b      	add	r3, r1
 8005000:	331c      	adds	r3, #28
 8005002:	2200      	movs	r2, #0
 8005004:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8005006:	7dfa      	ldrb	r2, [r7, #23]
 8005008:	6879      	ldr	r1, [r7, #4]
 800500a:	4613      	mov	r3, r2
 800500c:	00db      	lsls	r3, r3, #3
 800500e:	1a9b      	subs	r3, r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	440b      	add	r3, r1
 8005014:	3320      	adds	r3, #32
 8005016:	2200      	movs	r2, #0
 8005018:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 800501a:	7dfa      	ldrb	r2, [r7, #23]
 800501c:	6879      	ldr	r1, [r7, #4]
 800501e:	4613      	mov	r3, r2
 8005020:	00db      	lsls	r3, r3, #3
 8005022:	1a9b      	subs	r3, r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	440b      	add	r3, r1
 8005028:	3324      	adds	r3, #36	; 0x24
 800502a:	2200      	movs	r2, #0
 800502c:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 800502e:	7dfa      	ldrb	r2, [r7, #23]
 8005030:	6879      	ldr	r1, [r7, #4]
 8005032:	4613      	mov	r3, r2
 8005034:	00db      	lsls	r3, r3, #3
 8005036:	1a9b      	subs	r3, r3, r2
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	440b      	add	r3, r1
 800503c:	3328      	adds	r3, #40	; 0x28
 800503e:	2200      	movs	r2, #0
 8005040:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8005042:	7dfa      	ldrb	r2, [r7, #23]
 8005044:	6879      	ldr	r1, [r7, #4]
 8005046:	4613      	mov	r3, r2
 8005048:	00db      	lsls	r3, r3, #3
 800504a:	1a9b      	subs	r3, r3, r2
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	440b      	add	r3, r1
 8005050:	3330      	adds	r3, #48	; 0x30
 8005052:	2200      	movs	r2, #0
 8005054:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8005056:	7dfb      	ldrb	r3, [r7, #23]
 8005058:	3301      	adds	r3, #1
 800505a:	75fb      	strb	r3, [r7, #23]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 800505c:	7dfb      	ldrb	r3, [r7, #23]
 800505e:	2b06      	cmp	r3, #6
 8005060:	d9bd      	bls.n	8004fde <HAL_HRTIM_Init+0x10a>
  }

  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3718      	adds	r7, #24
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}
 800506c:	40016800 	.word	0x40016800
 8005070:	40021000 	.word	0x40021000

08005074 <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t CalibrationRate)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8005084:	2b01      	cmp	r3, #1
 8005086:	d101      	bne.n	800508c <HAL_HRTIM_DLLCalibrationStart+0x18>
 8005088:	2302      	movs	r3, #2
 800508a:	e045      	b.n	8005118 <HAL_HRTIM_DLLCalibrationStart+0xa4>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2202      	movs	r2, #2
 8005098:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a2:	d114      	bne.n	80050ce <HAL_HRTIM_DLLCalibrationStart+0x5a>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f022 0202 	bic.w	r2, r2, #2
 80050b4:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f042 0201 	orr.w	r2, r2, #1
 80050c8:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
 80050cc:	e01f      	b.n	800510e <HAL_HRTIM_DLLCalibrationStart+0x9a>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f042 0202 	orr.w	r2, r2, #2
 80050de:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 80050ea:	f023 010c 	bic.w	r1, r3, #12
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	683a      	ldr	r2, [r7, #0]
 80050f4:	430a      	orrs	r2, r1
 80050f6:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f042 0201 	orr.w	r2, r2, #1
 800510a:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t Timeout)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 800512e:	f7fd fc69 	bl	8002a04 <HAL_GetTick>
 8005132:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8005134:	e014      	b.n	8005160 <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800513c:	d010      	beq.n	8005160 <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0U))
 800513e:	f7fd fc61 	bl	8002a04 <HAL_GetTick>
 8005142:	4602      	mov	r2, r0
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	683a      	ldr	r2, [r7, #0]
 800514a:	429a      	cmp	r2, r3
 800514c:	d302      	bcc.n	8005154 <HAL_HRTIM_PollForDLLCalibration+0x30>
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d105      	bne.n	8005160 <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2207      	movs	r2, #7
 8005158:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
        return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e011      	b.n	8005184 <HAL_HRTIM_PollForDLLCalibration+0x60>
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8005168:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800516c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005170:	d1e1      	bne.n	8005136 <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2201      	movs	r2, #1
 8005176:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d101      	bne.n	80051a8 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 80051a4:	2302      	movs	r3, #2
 80051a6:	e015      	b.n	80051d4 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2202      	movs	r2, #2
 80051ac:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	2b06      	cmp	r3, #6
 80051b4:	d104      	bne.n	80051c0 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 80051b6:	6879      	ldr	r1, [r7, #4]
 80051b8:	68f8      	ldr	r0, [r7, #12]
 80051ba:	f000 fe62 	bl	8005e82 <HRTIM_MasterBase_Config>
 80051be:	e004      	b.n	80051ca <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	68b9      	ldr	r1, [r7, #8]
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	f000 fe8b 	bl	8005ee0 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <HAL_HRTIM_ADCTriggerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_ADCTriggerConfig(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t ADCTrigger,
                                             HRTIM_ADCTriggerCfgTypeDef* pADCTriggerCfg)
{
 80051dc:	b480      	push	{r7}
 80051de:	b087      	sub	sp, #28
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	607a      	str	r2, [r7, #4]

  /* Check parameters */
  assert_param(IS_HRTIM_ADCTRIGGER(ADCTrigger));
  assert_param(IS_HRTIM_ADCTRIGGERUPDATE(pADCTriggerCfg->UpdateSource));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d101      	bne.n	80051f8 <HAL_HRTIM_ADCTriggerConfig+0x1c>
  {
     return HAL_BUSY;
 80051f4:	2302      	movs	r3, #2
 80051f6:	e1d7      	b.n	80055a8 <HAL_HRTIM_ADCTriggerConfig+0x3cc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d101      	bne.n	8005206 <HAL_HRTIM_ADCTriggerConfig+0x2a>
 8005202:	2302      	movs	r3, #2
 8005204:	e1d0      	b.n	80055a8 <HAL_HRTIM_ADCTriggerConfig+0x3cc>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2201      	movs	r2, #1
 800520a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2202      	movs	r2, #2
 8005212:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Set the ADC trigger update source */
  hrtim_cr1 = hhrtim->Instance->sCommonRegs.CR1;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800521e:	617b      	str	r3, [r7, #20]
  hrtim_adcur = hhrtim->Instance->sCommonRegs.ADCUR;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8005228:	613b      	str	r3, [r7, #16]

  switch (ADCTrigger)
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005230:	f000 816d 	beq.w	800550e <HAL_HRTIM_ADCTriggerConfig+0x332>
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800523a:	f200 818d 	bhi.w	8005558 <HAL_HRTIM_ADCTriggerConfig+0x37c>
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005244:	f000 813f 	beq.w	80054c6 <HAL_HRTIM_ADCTriggerConfig+0x2ea>
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800524e:	f200 8183 	bhi.w	8005558 <HAL_HRTIM_ADCTriggerConfig+0x37c>
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	2b80      	cmp	r3, #128	; 0x80
 8005256:	f000 8111 	beq.w	800547c <HAL_HRTIM_ADCTriggerConfig+0x2a0>
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	2b80      	cmp	r3, #128	; 0x80
 800525e:	f200 817b 	bhi.w	8005558 <HAL_HRTIM_ADCTriggerConfig+0x37c>
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	2b20      	cmp	r3, #32
 8005266:	d84b      	bhi.n	8005300 <HAL_HRTIM_ADCTriggerConfig+0x124>
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	2b00      	cmp	r3, #0
 800526c:	f000 8174 	beq.w	8005558 <HAL_HRTIM_ADCTriggerConfig+0x37c>
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	3b01      	subs	r3, #1
 8005274:	2b1f      	cmp	r3, #31
 8005276:	f200 816f 	bhi.w	8005558 <HAL_HRTIM_ADCTriggerConfig+0x37c>
 800527a:	a201      	add	r2, pc, #4	; (adr r2, 8005280 <HAL_HRTIM_ADCTriggerConfig+0xa4>)
 800527c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005280:	0800530b 	.word	0x0800530b
 8005284:	0800532f 	.word	0x0800532f
 8005288:	08005559 	.word	0x08005559
 800528c:	08005355 	.word	0x08005355
 8005290:	08005559 	.word	0x08005559
 8005294:	08005559 	.word	0x08005559
 8005298:	08005559 	.word	0x08005559
 800529c:	0800537b 	.word	0x0800537b
 80052a0:	08005559 	.word	0x08005559
 80052a4:	08005559 	.word	0x08005559
 80052a8:	08005559 	.word	0x08005559
 80052ac:	08005559 	.word	0x08005559
 80052b0:	08005559 	.word	0x08005559
 80052b4:	08005559 	.word	0x08005559
 80052b8:	08005559 	.word	0x08005559
 80052bc:	080053a1 	.word	0x080053a1
 80052c0:	08005559 	.word	0x08005559
 80052c4:	08005559 	.word	0x08005559
 80052c8:	08005559 	.word	0x08005559
 80052cc:	08005559 	.word	0x08005559
 80052d0:	08005559 	.word	0x08005559
 80052d4:	08005559 	.word	0x08005559
 80052d8:	08005559 	.word	0x08005559
 80052dc:	08005559 	.word	0x08005559
 80052e0:	08005559 	.word	0x08005559
 80052e4:	08005559 	.word	0x08005559
 80052e8:	08005559 	.word	0x08005559
 80052ec:	08005559 	.word	0x08005559
 80052f0:	08005559 	.word	0x08005559
 80052f4:	08005559 	.word	0x08005559
 80052f8:	08005559 	.word	0x08005559
 80052fc:	080053e9 	.word	0x080053e9
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	2b40      	cmp	r3, #64	; 0x40
 8005304:	f000 8095 	beq.w	8005432 <HAL_HRTIM_ADCTriggerConfig+0x256>
 8005308:	e126      	b.n	8005558 <HAL_HRTIM_ADCTriggerConfig+0x37c>
  {
  case HRTIM_ADCTRIGGER_1:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC1USRC);
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8005310:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= (pADCTriggerCfg->UpdateSource & HRTIM_CR1_ADC1USRC);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	4313      	orrs	r3, r2
 800531e:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 1 source */
      hhrtim->Instance->sCommonRegs.ADC1R = pADCTriggerCfg->Trigger;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	6852      	ldr	r2, [r2, #4]
 8005328:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
      break;
 800532c:	e11d      	b.n	800556a <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_2:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC2USRC);
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 8005334:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 3U) & HRTIM_CR1_ADC2USRC);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	00db      	lsls	r3, r3, #3
 800533c:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	4313      	orrs	r3, r2
 8005344:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 2 source */
      hhrtim->Instance->sCommonRegs.ADC2R = pADCTriggerCfg->Trigger;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	6852      	ldr	r2, [r2, #4]
 800534e:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
      break;
 8005352:	e10a      	b.n	800556a <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_3:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC3USRC);
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 800535a:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 6U) & HRTIM_CR1_ADC3USRC);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	019b      	lsls	r3, r3, #6
 8005362:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	4313      	orrs	r3, r2
 800536a:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 3 source */
      hhrtim->Instance->sCommonRegs.ADC3R = pADCTriggerCfg->Trigger;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	6852      	ldr	r2, [r2, #4]
 8005374:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
      break;
 8005378:	e0f7      	b.n	800556a <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_4:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC4USRC);
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8005380:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 9U) & HRTIM_CR1_ADC4USRC);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	025b      	lsls	r3, r3, #9
 8005388:	f003 6360 	and.w	r3, r3, #234881024	; 0xe000000
 800538c:	697a      	ldr	r2, [r7, #20]
 800538e:	4313      	orrs	r3, r2
 8005390:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 4 source */
      hhrtim->Instance->sCommonRegs.ADC4R = pADCTriggerCfg->Trigger;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	6852      	ldr	r2, [r2, #4]
 800539a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
      break;
 800539e:	e0e4      	b.n	800556a <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_5:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD5USRC);
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	f023 0307 	bic.w	r3, r3, #7
 80053a6:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 16U) & HRTIM_ADCUR_AD5USRC);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	0c1b      	lsrs	r3, r3, #16
 80053ae:	f003 0307 	and.w	r3, r3, #7
 80053b2:	693a      	ldr	r2, [r7, #16]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 5 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD5TRG);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	; 0x3f8
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f022 021f 	bic.w	r2, r2, #31
 80053c8:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD5TRG_Pos) & HRTIM_ADCER_AD5TRG);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	; 0x3f8
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	f003 021f 	and.w	r2, r3, #31
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	430a      	orrs	r2, r1
 80053e2:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      break;
 80053e6:	e0c0      	b.n	800556a <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_6:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD6USRC);
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ee:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 12U) & HRTIM_ADCUR_AD6USRC);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	0b1b      	lsrs	r3, r3, #12
 80053f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80053fa:	693a      	ldr	r2, [r7, #16]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 6 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD6TRG);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	; 0x3f8
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f422 7278 	bic.w	r2, r2, #992	; 0x3e0
 8005410:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD6TRG_Pos) & HRTIM_ADCER_AD6TRG);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	; 0x3f8
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	015b      	lsls	r3, r3, #5
 8005422:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	430a      	orrs	r2, r1
 800542c:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      break;
 8005430:	e09b      	b.n	800556a <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_7:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD7USRC);
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005438:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 8U) & HRTIM_ADCUR_AD7USRC);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	0a1b      	lsrs	r3, r3, #8
 8005440:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	4313      	orrs	r3, r2
 8005448:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 7 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD7TRG);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	; 0x3f8
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800545a:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD7TRG_Pos) & HRTIM_ADCER_AD7TRG);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	; 0x3f8
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	029b      	lsls	r3, r3, #10
 800546c:	f403 42f8 	and.w	r2, r3, #31744	; 0x7c00
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	430a      	orrs	r2, r1
 8005476:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      break;
 800547a:	e076      	b.n	800556a <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_8:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD8USRC);
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005482:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 4U) & HRTIM_ADCUR_AD8USRC);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	091b      	lsrs	r3, r3, #4
 800548a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	4313      	orrs	r3, r2
 8005492:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 8 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD8TRG);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	; 0x3f8
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80054a4:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD8TRG_Pos) & HRTIM_ADCER_AD8TRG);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	; 0x3f8
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	041b      	lsls	r3, r3, #16
 80054b6:	f403 12f8 	and.w	r2, r3, #2031616	; 0x1f0000
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	430a      	orrs	r2, r1
 80054c0:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      break;
 80054c4:	e051      	b.n	800556a <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_9:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD9USRC);
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80054cc:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource) & HRTIM_ADCUR_AD9USRC);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80054d6:	693a      	ldr	r2, [r7, #16]
 80054d8:	4313      	orrs	r3, r2
 80054da:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 9 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD9TRG);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	; 0x3f8
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f022 7278 	bic.w	r2, r2, #65011712	; 0x3e00000
 80054ec:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD9TRG_Pos) & HRTIM_ADCER_AD9TRG);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	; 0x3f8
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	055b      	lsls	r3, r3, #21
 80054fe:	f003 7278 	and.w	r2, r3, #65011712	; 0x3e00000
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	430a      	orrs	r2, r1
 8005508:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      break;
 800550c:	e02d      	b.n	800556a <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_10:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD10USRC);
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005514:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource << 4U) & HRTIM_ADCUR_AD10USRC);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	011b      	lsls	r3, r3, #4
 800551c:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	4313      	orrs	r3, r2
 8005524:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 10 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD10TRG);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	; 0x3f8
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f022 42f8 	bic.w	r2, r2, #2080374784	; 0x7c000000
 8005536:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD10TRG_Pos) & HRTIM_ADCER_AD10TRG);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	; 0x3f8
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	069b      	lsls	r3, r3, #26
 8005548:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	430a      	orrs	r2, r1
 8005552:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      break;
 8005556:	e008      	b.n	800556a <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2207      	movs	r2, #7
 800555c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 8005568:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8005570:	b2db      	uxtb	r3, r3
 8005572:	2b07      	cmp	r3, #7
 8005574:	d101      	bne.n	800557a <HAL_HRTIM_ADCTriggerConfig+0x39e>
  {
     return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e016      	b.n	80055a8 <HAL_HRTIM_ADCTriggerConfig+0x3cc>
  }

  /* Update the HRTIM registers */
  if (ADCTrigger < HRTIM_ADCTRIGGER_5)
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	2b0f      	cmp	r3, #15
 800557e:	d805      	bhi.n	800558c <HAL_HRTIM_ADCTriggerConfig+0x3b0>
  {
   hhrtim->Instance->sCommonRegs.CR1 = hrtim_cr1;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
 800558a:	e004      	b.n	8005596 <HAL_HRTIM_ADCTriggerConfig+0x3ba>
  }
  else
  {
   hhrtim->Instance->sCommonRegs.ADCUR = hrtim_adcur;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2201      	movs	r2, #1
 800559a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	371c      	adds	r7, #28
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <HAL_HRTIM_ADCPostScalerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_ADCPostScalerConfig(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t ADCTrigger,
                                             uint32_t Postscaler)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	607a      	str	r2, [r7, #4]
  /* Check parameters */
  assert_param(IS_HRTIM_ADCTRIGGER(ADCTrigger));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d101      	bne.n	80055d0 <HAL_HRTIM_ADCPostScalerConfig+0x1c>
  {
     return HAL_BUSY;
 80055cc:	2302      	movs	r3, #2
 80055ce:	e135      	b.n	800583c <HAL_HRTIM_ADCPostScalerConfig+0x288>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d101      	bne.n	80055de <HAL_HRTIM_ADCPostScalerConfig+0x2a>
 80055da:	2302      	movs	r3, #2
 80055dc:	e12e      	b.n	800583c <HAL_HRTIM_ADCPostScalerConfig+0x288>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2202      	movs	r2, #2
 80055ea:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  switch (ADCTrigger)
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055f4:	f000 80f8 	beq.w	80057e8 <HAL_HRTIM_ADCPostScalerConfig+0x234>
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055fe:	f200 8103 	bhi.w	8005808 <HAL_HRTIM_ADCPostScalerConfig+0x254>
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005608:	f000 80de 	beq.w	80057c8 <HAL_HRTIM_ADCPostScalerConfig+0x214>
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005612:	f200 80f9 	bhi.w	8005808 <HAL_HRTIM_ADCPostScalerConfig+0x254>
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	2b80      	cmp	r3, #128	; 0x80
 800561a:	f000 80c5 	beq.w	80057a8 <HAL_HRTIM_ADCPostScalerConfig+0x1f4>
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	2b80      	cmp	r3, #128	; 0x80
 8005622:	f200 80f1 	bhi.w	8005808 <HAL_HRTIM_ADCPostScalerConfig+0x254>
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	2b20      	cmp	r3, #32
 800562a:	d84b      	bhi.n	80056c4 <HAL_HRTIM_ADCPostScalerConfig+0x110>
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	2b00      	cmp	r3, #0
 8005630:	f000 80ea 	beq.w	8005808 <HAL_HRTIM_ADCPostScalerConfig+0x254>
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	3b01      	subs	r3, #1
 8005638:	2b1f      	cmp	r3, #31
 800563a:	f200 80e5 	bhi.w	8005808 <HAL_HRTIM_ADCPostScalerConfig+0x254>
 800563e:	a201      	add	r2, pc, #4	; (adr r2, 8005644 <HAL_HRTIM_ADCPostScalerConfig+0x90>)
 8005640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005644:	080056cd 	.word	0x080056cd
 8005648:	080056eb 	.word	0x080056eb
 800564c:	08005809 	.word	0x08005809
 8005650:	0800570b 	.word	0x0800570b
 8005654:	08005809 	.word	0x08005809
 8005658:	08005809 	.word	0x08005809
 800565c:	08005809 	.word	0x08005809
 8005660:	0800572b 	.word	0x0800572b
 8005664:	08005809 	.word	0x08005809
 8005668:	08005809 	.word	0x08005809
 800566c:	08005809 	.word	0x08005809
 8005670:	08005809 	.word	0x08005809
 8005674:	08005809 	.word	0x08005809
 8005678:	08005809 	.word	0x08005809
 800567c:	08005809 	.word	0x08005809
 8005680:	0800574b 	.word	0x0800574b
 8005684:	08005809 	.word	0x08005809
 8005688:	08005809 	.word	0x08005809
 800568c:	08005809 	.word	0x08005809
 8005690:	08005809 	.word	0x08005809
 8005694:	08005809 	.word	0x08005809
 8005698:	08005809 	.word	0x08005809
 800569c:	08005809 	.word	0x08005809
 80056a0:	08005809 	.word	0x08005809
 80056a4:	08005809 	.word	0x08005809
 80056a8:	08005809 	.word	0x08005809
 80056ac:	08005809 	.word	0x08005809
 80056b0:	08005809 	.word	0x08005809
 80056b4:	08005809 	.word	0x08005809
 80056b8:	08005809 	.word	0x08005809
 80056bc:	08005809 	.word	0x08005809
 80056c0:	0800576b 	.word	0x0800576b
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	2b40      	cmp	r3, #64	; 0x40
 80056c8:	d05e      	beq.n	8005788 <HAL_HRTIM_ADCPostScalerConfig+0x1d4>
 80056ca:	e09d      	b.n	8005808 <HAL_HRTIM_ADCPostScalerConfig+0x254>
  {
  case HRTIM_ADCTRIGGER_1:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD1PSC, (Postscaler & HRTIM_ADCPS1_AD1PSC));
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80056d4:	f023 011f 	bic.w	r1, r3, #31
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f003 021f 	and.w	r2, r3, #31
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	430a      	orrs	r2, r1
 80056e4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      break;
 80056e8:	e097      	b.n	800581a <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_2:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD2PSC, ((Postscaler << HRTIM_ADCPS1_AD2PSC_Pos) & HRTIM_ADCPS1_AD2PSC));
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80056f2:	f423 61f8 	bic.w	r1, r3, #1984	; 0x7c0
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	019b      	lsls	r3, r3, #6
 80056fa:	f403 62f8 	and.w	r2, r3, #1984	; 0x7c0
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	430a      	orrs	r2, r1
 8005704:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      break;
 8005708:	e087      	b.n	800581a <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_3:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD3PSC, ((Postscaler << HRTIM_ADCPS1_AD3PSC_Pos) & HRTIM_ADCPS1_AD3PSC));
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8005712:	f423 31f8 	bic.w	r1, r3, #126976	; 0x1f000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	031b      	lsls	r3, r3, #12
 800571a:	f403 32f8 	and.w	r2, r3, #126976	; 0x1f000
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	430a      	orrs	r2, r1
 8005724:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      break;
 8005728:	e077      	b.n	800581a <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_4:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD4PSC, ((Postscaler << HRTIM_ADCPS1_AD4PSC_Pos) & HRTIM_ADCPS1_AD4PSC));
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8005732:	f423 01f8 	bic.w	r1, r3, #8126464	; 0x7c0000
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	049b      	lsls	r3, r3, #18
 800573a:	f403 02f8 	and.w	r2, r3, #8126464	; 0x7c0000
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	430a      	orrs	r2, r1
 8005744:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      break;
 8005748:	e067      	b.n	800581a <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_5:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD5PSC, ((Postscaler << HRTIM_ADCPS1_AD5PSC_Pos) & HRTIM_ADCPS1_AD5PSC));
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8005752:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	061b      	lsls	r3, r3, #24
 800575a:	f003 52f8 	and.w	r2, r3, #520093696	; 0x1f000000
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	430a      	orrs	r2, r1
 8005764:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      break;
 8005768:	e057      	b.n	800581a <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_6:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD6PSC, ((Postscaler << HRTIM_ADCPS2_AD6PSC_Pos) & HRTIM_ADCPS2_AD6PSC));
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005772:	f023 011f 	bic.w	r1, r3, #31
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f003 021f 	and.w	r2, r3, #31
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	430a      	orrs	r2, r1
 8005782:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      break;
 8005786:	e048      	b.n	800581a <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_7:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD7PSC, ((Postscaler << HRTIM_ADCPS2_AD7PSC_Pos) & HRTIM_ADCPS2_AD7PSC));
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005790:	f423 61f8 	bic.w	r1, r3, #1984	; 0x7c0
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	019b      	lsls	r3, r3, #6
 8005798:	f403 62f8 	and.w	r2, r3, #1984	; 0x7c0
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	430a      	orrs	r2, r1
 80057a2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      break;
 80057a6:	e038      	b.n	800581a <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_8:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD8PSC, ((Postscaler << HRTIM_ADCPS2_AD8PSC_Pos) & HRTIM_ADCPS2_AD8PSC));
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80057b0:	f423 31f8 	bic.w	r1, r3, #126976	; 0x1f000
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	031b      	lsls	r3, r3, #12
 80057b8:	f403 32f8 	and.w	r2, r3, #126976	; 0x1f000
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	430a      	orrs	r2, r1
 80057c2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      break;
 80057c6:	e028      	b.n	800581a <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_9:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD9PSC, ((Postscaler << HRTIM_ADCPS2_AD9PSC_Pos) & HRTIM_ADCPS2_AD9PSC));
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80057d0:	f423 01f8 	bic.w	r1, r3, #8126464	; 0x7c0000
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	049b      	lsls	r3, r3, #18
 80057d8:	f403 02f8 	and.w	r2, r3, #8126464	; 0x7c0000
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	430a      	orrs	r2, r1
 80057e2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      break;
 80057e6:	e018      	b.n	800581a <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_10:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD10PSC, ((Postscaler << HRTIM_ADCPS2_AD10PSC_Pos) & HRTIM_ADCPS2_AD10PSC));
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80057f0:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	061b      	lsls	r3, r3, #24
 80057f8:	f003 52f8 	and.w	r2, r3, #520093696	; 0x1f000000
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	430a      	orrs	r2, r1
 8005802:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      break;
 8005806:	e008      	b.n	800581a <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2207      	movs	r2, #7
 800580c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 8005818:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8005820:	b2db      	uxtb	r3, r3
 8005822:	2b07      	cmp	r3, #7
 8005824:	d101      	bne.n	800582a <HAL_HRTIM_ADCPostScalerConfig+0x276>
  {
     return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e008      	b.n	800583c <HAL_HRTIM_ADCPostScalerConfig+0x288>
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2201      	movs	r2, #1
 800582e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 800583a:	2300      	movs	r3, #0
}
 800583c:	4618      	mov	r0, r3
 800583e:	3714      	adds	r7, #20
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800585a:	b2db      	uxtb	r3, r3
 800585c:	2b02      	cmp	r3, #2
 800585e:	d101      	bne.n	8005864 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8005860:	2302      	movs	r3, #2
 8005862:	e05f      	b.n	8005924 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800586a:	2b01      	cmp	r3, #1
 800586c:	d101      	bne.n	8005872 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 800586e:	2302      	movs	r3, #2
 8005870:	e058      	b.n	8005924 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2201      	movs	r2, #1
 8005876:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2202      	movs	r2, #2
 800587e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	2b06      	cmp	r3, #6
 8005886:	d104      	bne.n	8005892 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8005888:	6879      	ldr	r1, [r7, #4]
 800588a:	68f8      	ldr	r0, [r7, #12]
 800588c:	f000 fb68 	bl	8005f60 <HRTIM_MasterWaveform_Config>
 8005890:	e004      	b.n	800589c <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));
    assert_param(IS_HRTIM_TIMSYNCUPDATE(pTimerCfg->ReSyncUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	68b9      	ldr	r1, [r7, #8]
 8005896:	68f8      	ldr	r0, [r7, #12]
 8005898:	f000 fc00 	bl	800609c <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6819      	ldr	r1, [r3, #0]
 80058a0:	68f8      	ldr	r0, [r7, #12]
 80058a2:	68ba      	ldr	r2, [r7, #8]
 80058a4:	4613      	mov	r3, r2
 80058a6:	00db      	lsls	r3, r3, #3
 80058a8:	1a9b      	subs	r3, r3, r2
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	4403      	add	r3, r0
 80058ae:	3320      	adds	r3, #32
 80058b0:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6859      	ldr	r1, [r3, #4]
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	68ba      	ldr	r2, [r7, #8]
 80058ba:	4613      	mov	r3, r2
 80058bc:	00db      	lsls	r3, r3, #3
 80058be:	1a9b      	subs	r3, r3, r2
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	4403      	add	r3, r0
 80058c4:	3324      	adds	r3, #36	; 0x24
 80058c6:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6899      	ldr	r1, [r3, #8]
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	68ba      	ldr	r2, [r7, #8]
 80058d0:	4613      	mov	r3, r2
 80058d2:	00db      	lsls	r3, r3, #3
 80058d4:	1a9b      	subs	r3, r3, r2
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	4403      	add	r3, r0
 80058da:	3328      	adds	r3, #40	; 0x28
 80058dc:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	68d9      	ldr	r1, [r3, #12]
 80058e2:	68f8      	ldr	r0, [r7, #12]
 80058e4:	68ba      	ldr	r2, [r7, #8]
 80058e6:	4613      	mov	r3, r2
 80058e8:	00db      	lsls	r3, r3, #3
 80058ea:	1a9b      	subs	r3, r3, r2
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	4403      	add	r3, r0
 80058f0:	332c      	adds	r3, #44	; 0x2c
 80058f2:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6919      	ldr	r1, [r3, #16]
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	68ba      	ldr	r2, [r7, #8]
 80058fc:	4613      	mov	r3, r2
 80058fe:	00db      	lsls	r3, r3, #3
 8005900:	1a9b      	subs	r3, r3, r2
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	4403      	add	r3, r0
 8005906:	3330      	adds	r3, #48	; 0x30
 8005908:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 800590a:	68b9      	ldr	r1, [r7, #8]
 800590c:	68f8      	ldr	r0, [r7, #12]
 800590e:	f000 fec9 	bl	80066a4 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3710      	adds	r7, #16
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <HAL_HRTIM_WaveformTimerControl>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerControl(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                HRTIM_TimerCtlTypeDef * pTimerCtl)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	607a      	str	r2, [r7, #4]
    assert_param(IS_HRTIM_TIMERGTCMP1(pTimerCtl->GreaterCMP1));
    assert_param(IS_HRTIM_DUALDAC_RESET(pTimerCtl->DualChannelDacReset));
    assert_param(IS_HRTIM_DUALDAC_STEP(pTimerCtl->DualChannelDacStep));
    assert_param(IS_HRTIM_DUALDAC_ENABLE(pTimerCtl->DualChannelDacEnable));

    if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800593e:	b2db      	uxtb	r3, r3
 8005940:	2b02      	cmp	r3, #2
 8005942:	d101      	bne.n	8005948 <HAL_HRTIM_WaveformTimerControl+0x1c>
    {
       return HAL_BUSY;
 8005944:	2302      	movs	r3, #2
 8005946:	e020      	b.n	800598a <HAL_HRTIM_WaveformTimerControl+0x5e>
    }

    /* Process Locked */
    __HAL_LOCK(hhrtim);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800594e:	2b01      	cmp	r3, #1
 8005950:	d101      	bne.n	8005956 <HAL_HRTIM_WaveformTimerControl+0x2a>
 8005952:	2302      	movs	r3, #2
 8005954:	e019      	b.n	800598a <HAL_HRTIM_WaveformTimerControl+0x5e>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2201      	movs	r2, #1
 800595a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2202      	movs	r2, #2
 8005962:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Control(hhrtim, TimerIdx, pTimerCtl);
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	68b9      	ldr	r1, [r7, #8]
 800596a:	68f8      	ldr	r0, [r7, #12]
 800596c:	f000 fd2a 	bl	80063c4 <HRTIM_TimingUnitWaveform_Control>

    /* Force a software update */
    HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8005970:	68b9      	ldr	r1, [r7, #8]
 8005972:	68f8      	ldr	r0, [r7, #12]
 8005974:	f000 fe96 	bl	80066a4 <HRTIM_ForceRegistersUpdate>

    hhrtim->State = HAL_HRTIM_STATE_READY;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    /* Process Unlocked */
    __HAL_UNLOCK(hhrtim);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2200      	movs	r2, #0
 8005984:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    return HAL_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3710      	adds	r7, #16
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
	...

08005994 <HAL_HRTIM_DeadTimeConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_DeadTimeConfig(HRTIM_HandleTypeDef * hhrtim,
                                           uint32_t TimerIdx,
                                           HRTIM_DeadTimeCfgTypeDef* pDeadTimeCfg)
{
 8005994:	b480      	push	{r7}
 8005996:	b087      	sub	sp, #28
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_TIMDEADTIME_RISINGSIGNLOCK(pDeadTimeCfg->RisingSignLock));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGSIGN(pDeadTimeCfg->FallingSign));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGLOCK(pDeadTimeCfg->FallingLock));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGSIGNLOCK(pDeadTimeCfg->FallingSignLock));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	d101      	bne.n	80059b0 <HAL_HRTIM_DeadTimeConfig+0x1c>
  {
     return HAL_BUSY;
 80059ac:	2302      	movs	r3, #2
 80059ae:	e067      	b.n	8005a80 <HAL_HRTIM_DeadTimeConfig+0xec>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d101      	bne.n	80059be <HAL_HRTIM_DeadTimeConfig+0x2a>
 80059ba:	2302      	movs	r3, #2
 80059bc:	e060      	b.n	8005a80 <HAL_HRTIM_DeadTimeConfig+0xec>
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2202      	movs	r2, #2
 80059ca:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Set timer deadtime configuration */
  hrtim_dtr  = (pDeadTimeCfg->Prescaler & HRTIM_DTR_DTPRSC);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80059d6:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingValue & HRTIM_DTR_DTR);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingSign & HRTIM_DTR_SDTR);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059ee:	697a      	ldr	r2, [r7, #20]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingSignLock & HRTIM_DTR_DTRSLK);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingLock & HRTIM_DTR_DTRLK);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= ((pDeadTimeCfg->FallingValue << 16U) & HRTIM_DTR_DTF);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	695b      	ldr	r3, [r3, #20]
 8005a14:	041a      	lsls	r2, r3, #16
 8005a16:	4b1d      	ldr	r3, [pc, #116]	; (8005a8c <HAL_HRTIM_DeadTimeConfig+0xf8>)
 8005a18:	4013      	ands	r3, r2
 8005a1a:	697a      	ldr	r2, [r7, #20]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingSign & HRTIM_DTR_SDTF);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	699b      	ldr	r3, [r3, #24]
 8005a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a28:	697a      	ldr	r2, [r7, #20]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingSignLock & HRTIM_DTR_DTFSLK);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a1b      	ldr	r3, [r3, #32]
 8005a32:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005a36:	697a      	ldr	r2, [r7, #20]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingLock & HRTIM_DTR_DTFLK);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	69db      	ldr	r3, [r3, #28]
 8005a40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a44:	697a      	ldr	r2, [r7, #20]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR, (
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	01db      	lsls	r3, r3, #7
 8005a52:	4413      	add	r3, r2
 8005a54:	33b8      	adds	r3, #184	; 0xb8
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	4b0d      	ldr	r3, [pc, #52]	; (8005a90 <HAL_HRTIM_DeadTimeConfig+0xfc>)
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	6811      	ldr	r1, [r2, #0]
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	431a      	orrs	r2, r3
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	01db      	lsls	r3, r3, #7
 8005a68:	440b      	add	r3, r1
 8005a6a:	33b8      	adds	r3, #184	; 0xb8
 8005a6c:	601a      	str	r2, [r3, #0]
                 HRTIM_DTR_DTR | HRTIM_DTR_SDTR | HRTIM_DTR_DTPRSC |
                 HRTIM_DTR_DTRSLK | HRTIM_DTR_DTRLK | HRTIM_DTR_DTF |
                 HRTIM_DTR_SDTF | HRTIM_DTR_DTFSLK | HRTIM_DTR_DTFLK), hrtim_dtr);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2201      	movs	r2, #1
 8005a72:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	371c      	adds	r7, #28
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr
 8005a8c:	01ff0000 	.word	0x01ff0000
 8005a90:	3c002000 	.word	0x3c002000

08005a94 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	607a      	str	r2, [r7, #4]
 8005aa0:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d101      	bne.n	8005ab2 <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 8005aae:	2302      	movs	r3, #2
 8005ab0:	e157      	b.n	8005d62 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d101      	bne.n	8005ac0 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 8005abc:	2302      	movs	r3, #2
 8005abe:	e150      	b.n	8005d62 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2202      	movs	r2, #2
 8005acc:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	2b06      	cmp	r3, #6
 8005ad4:	d140      	bne.n	8005b58 <HAL_HRTIM_WaveformCompareConfig+0xc4>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	3b01      	subs	r3, #1
 8005ada:	2b07      	cmp	r3, #7
 8005adc:	d82a      	bhi.n	8005b34 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 8005ade:	a201      	add	r2, pc, #4	; (adr r2, 8005ae4 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 8005ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae4:	08005b05 	.word	0x08005b05
 8005ae8:	08005b11 	.word	0x08005b11
 8005aec:	08005b35 	.word	0x08005b35
 8005af0:	08005b1d 	.word	0x08005b1d
 8005af4:	08005b35 	.word	0x08005b35
 8005af8:	08005b35 	.word	0x08005b35
 8005afc:	08005b35 	.word	0x08005b35
 8005b00:	08005b29 	.word	0x08005b29
  {
    switch (CompareUnit)
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	683a      	ldr	r2, [r7, #0]
 8005b0a:	6812      	ldr	r2, [r2, #0]
 8005b0c:	61da      	str	r2, [r3, #28]
        break;
 8005b0e:	e01a      	b.n	8005b46 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	683a      	ldr	r2, [r7, #0]
 8005b16:	6812      	ldr	r2, [r2, #0]
 8005b18:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 8005b1a:	e014      	b.n	8005b46 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	683a      	ldr	r2, [r7, #0]
 8005b22:	6812      	ldr	r2, [r2, #0]
 8005b24:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 8005b26:	e00e      	b.n	8005b46 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	683a      	ldr	r2, [r7, #0]
 8005b2e:	6812      	ldr	r2, [r2, #0]
 8005b30:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 8005b32:	e008      	b.n	8005b46 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2207      	movs	r2, #7
 8005b38:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

        break;
 8005b44:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	2b07      	cmp	r3, #7
 8005b50:	f040 80fe 	bne.w	8005d50 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e104      	b.n	8005d62 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	2b07      	cmp	r3, #7
 8005b5e:	f200 80e3 	bhi.w	8005d28 <HAL_HRTIM_WaveformCompareConfig+0x294>
 8005b62:	a201      	add	r2, pc, #4	; (adr r2, 8005b68 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 8005b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b68:	08005b89 	.word	0x08005b89
 8005b6c:	08005b9d 	.word	0x08005b9d
 8005b70:	08005d29 	.word	0x08005d29
 8005b74:	08005c59 	.word	0x08005c59
 8005b78:	08005d29 	.word	0x08005d29
 8005b7c:	08005d29 	.word	0x08005d29
 8005b80:	08005d29 	.word	0x08005d29
 8005b84:	08005c6d 	.word	0x08005c6d
    switch (CompareUnit)
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6819      	ldr	r1, [r3, #0]
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	01db      	lsls	r3, r3, #7
 8005b94:	440b      	add	r3, r1
 8005b96:	339c      	adds	r3, #156	; 0x9c
 8005b98:	601a      	str	r2, [r3, #0]
        break;
 8005b9a:	e0d1      	b.n	8005d40 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6819      	ldr	r1, [r3, #0]
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	01db      	lsls	r3, r3, #7
 8005ba8:	440b      	add	r3, r1
 8005baa:	33a4      	adds	r3, #164	; 0xa4
 8005bac:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d03f      	beq.n	8005c36 <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	01db      	lsls	r3, r3, #7
 8005bc0:	4413      	add	r3, r2
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	6811      	ldr	r1, [r2, #0]
 8005bc8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	3301      	adds	r3, #1
 8005bd0:	01db      	lsls	r3, r3, #7
 8005bd2:	440b      	add	r3, r1
 8005bd4:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	3301      	adds	r3, #1
 8005bde:	01db      	lsls	r3, r3, #7
 8005be0:	4413      	add	r3, r2
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	68f9      	ldr	r1, [r7, #12]
 8005bea:	6809      	ldr	r1, [r1, #0]
 8005bec:	431a      	orrs	r2, r3
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	01db      	lsls	r3, r3, #7
 8005bf4:	440b      	add	r3, r1
 8005bf6:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c00:	d109      	bne.n	8005c16 <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6819      	ldr	r1, [r3, #0]
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	689a      	ldr	r2, [r3, #8]
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	01db      	lsls	r3, r3, #7
 8005c0e:	440b      	add	r3, r1
 8005c10:	339c      	adds	r3, #156	; 0x9c
 8005c12:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 8005c14:	e091      	b.n	8005d3a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c1e:	f040 808c 	bne.w	8005d3a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6819      	ldr	r1, [r3, #0]
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	689a      	ldr	r2, [r3, #8]
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	01db      	lsls	r3, r3, #7
 8005c2e:	440b      	add	r3, r1
 8005c30:	33a8      	adds	r3, #168	; 0xa8
 8005c32:	601a      	str	r2, [r3, #0]
         break;
 8005c34:	e081      	b.n	8005d3a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	01db      	lsls	r3, r3, #7
 8005c40:	4413      	add	r3, r2
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	6811      	ldr	r1, [r2, #0]
 8005c48:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	3301      	adds	r3, #1
 8005c50:	01db      	lsls	r3, r3, #7
 8005c52:	440b      	add	r3, r1
 8005c54:	601a      	str	r2, [r3, #0]
         break;
 8005c56:	e070      	b.n	8005d3a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6819      	ldr	r1, [r3, #0]
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	01db      	lsls	r3, r3, #7
 8005c64:	440b      	add	r3, r1
 8005c66:	33a8      	adds	r3, #168	; 0xa8
 8005c68:	601a      	str	r2, [r3, #0]
        break;
 8005c6a:	e069      	b.n	8005d40 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6819      	ldr	r1, [r3, #0]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	01db      	lsls	r3, r3, #7
 8005c78:	440b      	add	r3, r1
 8005c7a:	33ac      	adds	r3, #172	; 0xac
 8005c7c:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d03f      	beq.n	8005d06 <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	01db      	lsls	r3, r3, #7
 8005c90:	4413      	add	r3, r2
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	6811      	ldr	r1, [r2, #0]
 8005c98:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	01db      	lsls	r3, r3, #7
 8005ca2:	440b      	add	r3, r1
 8005ca4:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	3301      	adds	r3, #1
 8005cae:	01db      	lsls	r3, r3, #7
 8005cb0:	4413      	add	r3, r2
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	68f9      	ldr	r1, [r7, #12]
 8005cbc:	6809      	ldr	r1, [r1, #0]
 8005cbe:	431a      	orrs	r2, r3
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	01db      	lsls	r3, r3, #7
 8005cc6:	440b      	add	r3, r1
 8005cc8:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cd2:	d109      	bne.n	8005ce8 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6819      	ldr	r1, [r3, #0]
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	689a      	ldr	r2, [r3, #8]
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	01db      	lsls	r3, r3, #7
 8005ce0:	440b      	add	r3, r1
 8005ce2:	339c      	adds	r3, #156	; 0x9c
 8005ce4:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 8005ce6:	e02a      	b.n	8005d3e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005cf0:	d125      	bne.n	8005d3e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6819      	ldr	r1, [r3, #0]
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	689a      	ldr	r2, [r3, #8]
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	01db      	lsls	r3, r3, #7
 8005cfe:	440b      	add	r3, r1
 8005d00:	33a8      	adds	r3, #168	; 0xa8
 8005d02:	601a      	str	r2, [r3, #0]
         break;
 8005d04:	e01b      	b.n	8005d3e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	01db      	lsls	r3, r3, #7
 8005d10:	4413      	add	r3, r2
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	6811      	ldr	r1, [r2, #0]
 8005d18:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	3301      	adds	r3, #1
 8005d20:	01db      	lsls	r3, r3, #7
 8005d22:	440b      	add	r3, r1
 8005d24:	601a      	str	r2, [r3, #0]
         break;
 8005d26:	e00a      	b.n	8005d3e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2207      	movs	r2, #7
 8005d2c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 8005d38:	e002      	b.n	8005d40 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8005d3a:	bf00      	nop
 8005d3c:	e000      	b.n	8005d40 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8005d3e:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	2b07      	cmp	r3, #7
 8005d4a:	d101      	bne.n	8005d50 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e008      	b.n	8005d62 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3714      	adds	r7, #20
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr
 8005d6e:	bf00      	nop

08005d70 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	60b9      	str	r1, [r7, #8]
 8005d7a:	607a      	str	r2, [r7, #4]
 8005d7c:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	d101      	bne.n	8005d8e <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 8005d8a:	2302      	movs	r3, #2
 8005d8c:	e01d      	b.n	8005dca <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d101      	bne.n	8005d9c <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8005d98:	2302      	movs	r3, #2
 8005d9a:	e016      	b.n	8005dca <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2202      	movs	r2, #2
 8005da8:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	68b9      	ldr	r1, [r7, #8]
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f000 fb66 	bl	8006484 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3710      	adds	r7, #16
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}

08005dd2 <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TF2: Timer F - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t OutputsToStart)
{
 8005dd2:	b480      	push	{r7}
 8005dd4:	b083      	sub	sp, #12
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
 8005dda:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d101      	bne.n	8005dea <HAL_HRTIM_WaveformOutputStart+0x18>
 8005de6:	2302      	movs	r3, #2
 8005de8:	e01a      	b.n	8005e20 <HAL_HRTIM_WaveformOutputStart+0x4e>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2201      	movs	r2, #1
 8005dee:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2202      	movs	r2, #2
 8005df6:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f8d3 1394 	ldr.w	r1, [r3, #916]	; 0x394
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	683a      	ldr	r2, [r7, #0]
 8005e08:	430a      	orrs	r2, r1
 8005e0a:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2201      	movs	r2, #1
 8005e12:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	370c      	adds	r7, #12
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <HAL_HRTIM_WaveformCountStart>:
  *                   @arg HRTIM_TIMERID_TIMER_F
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart(HRTIM_HandleTypeDef * hhrtim,
                                                 uint32_t Timers)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d101      	bne.n	8005e44 <HAL_HRTIM_WaveformCountStart+0x18>
 8005e40:	2302      	movs	r3, #2
 8005e42:	e018      	b.n	8005e76 <HAL_HRTIM_WaveformCountStart+0x4a>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2202      	movs	r2, #2
 8005e50:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	6819      	ldr	r1, [r3, #0]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	683a      	ldr	r2, [r7, #0]
 8005e60:	430a      	orrs	r2, r1
 8005e62:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	370c      	adds	r7, #12
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr

08005e82 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                     HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8005e82:	b480      	push	{r7}
 8005e84:	b085      	sub	sp, #20
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
 8005e8a:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f023 0307 	bic.w	r3, r3, #7
 8005e9a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f023 0318 	bic.w	r3, r3, #24
 8005eac:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	683a      	ldr	r2, [r7, #0]
 8005ec6:	6812      	ldr	r2, [r2, #0]
 8005ec8:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	683a      	ldr	r2, [r7, #0]
 8005ed0:	6852      	ldr	r2, [r2, #4]
 8005ed2:	619a      	str	r2, [r3, #24]
}
 8005ed4:	bf00      	nop
 8005ed6:	3714      	adds	r7, #20
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                         uint32_t TimerIdx ,
                                         HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b087      	sub	sp, #28
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	01db      	lsls	r3, r3, #7
 8005ef6:	4413      	add	r3, r2
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	f023 0307 	bic.w	r3, r3, #7
 8005f02:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	f023 0318 	bic.w	r3, r3, #24
 8005f14:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	697a      	ldr	r2, [r7, #20]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	3301      	adds	r3, #1
 8005f28:	01db      	lsls	r3, r3, #7
 8005f2a:	4413      	add	r3, r2
 8005f2c:	697a      	ldr	r2, [r7, #20]
 8005f2e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6819      	ldr	r1, [r3, #0]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	01db      	lsls	r3, r3, #7
 8005f3c:	440b      	add	r3, r1
 8005f3e:	3394      	adds	r3, #148	; 0x94
 8005f40:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6819      	ldr	r1, [r3, #0]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685a      	ldr	r2, [r3, #4]
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	01db      	lsls	r3, r3, #7
 8005f4e:	440b      	add	r3, r1
 8005f50:	3398      	adds	r3, #152	; 0x98
 8005f52:	601a      	str	r2, [r3, #0]
}
 8005f54:	bf00      	nop
 8005f56:	371c      	adds	r7, #28
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                         HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b085      	sub	sp, #20
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8005f7a:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f023 0320 	bic.w	r3, r3, #32
 8005f82:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	695b      	ldr	r3, [r3, #20]
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	60fb      	str	r3, [r7, #12]

  /* INTLVD bits are set to 00 */
  hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005f94:	60fb      	str	r3, [r7, #12]
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	695b      	ldr	r3, [r3, #20]
 8005f9a:	2b20      	cmp	r3, #32
 8005f9c:	d003      	beq.n	8005fa6 <HRTIM_MasterWaveform_Config+0x46>
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	699b      	ldr	r3, [r3, #24]
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d108      	bne.n	8005fb8 <HRTIM_MasterWaveform_Config+0x58>
  {
    /* INTLVD bits set to 00 */
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005fac:	60fb      	str	r3, [r7, #12]
    hrtim_mcr |= (HRTIM_MCR_HALF);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f043 0320 	orr.w	r3, r3, #32
 8005fb4:	60fb      	str	r3, [r7, #12]
 8005fb6:	e021      	b.n	8005ffc <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	699b      	ldr	r3, [r3, #24]
 8005fbc:	2b03      	cmp	r3, #3
 8005fbe:	d108      	bne.n	8005fd2 <HRTIM_MasterWaveform_Config+0x72>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_0);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fc6:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_1);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fce:	60fb      	str	r3, [r7, #12]
 8005fd0:	e014      	b.n	8005ffc <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	2b04      	cmp	r3, #4
 8005fd8:	d108      	bne.n	8005fec <HRTIM_MasterWaveform_Config+0x8c>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_1);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fe0:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_0);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fe8:	60fb      	str	r3, [r7, #12]
 8005fea:	e007      	b.n	8005ffc <HRTIM_MasterWaveform_Config+0x9c>
  }
  else
  {
        hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f023 0320 	bic.w	r3, r3, #32
 8005ff2:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005ffa:	60fb      	str	r3, [r7, #12]
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006002:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	69db      	ldr	r3, [r3, #28]
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	4313      	orrs	r3, r2
 800600c:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006014:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	6a1b      	ldr	r3, [r3, #32]
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	4313      	orrs	r3, r2
 800601e:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006026:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	4313      	orrs	r3, r2
 8006030:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8006038:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	4313      	orrs	r3, r2
 8006042:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800604a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	4313      	orrs	r3, r2
 8006056:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800605e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006064:	68fa      	ldr	r2, [r7, #12]
 8006066:	4313      	orrs	r3, r2
 8006068:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006070:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006076:	68ba      	ldr	r2, [r7, #8]
 8006078:	4313      	orrs	r3, r2
 800607a:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68ba      	ldr	r2, [r7, #8]
 800608a:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 800608e:	bf00      	nop
 8006090:	3714      	adds	r7, #20
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr
	...

0800609c <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 800609c:	b480      	push	{r7}
 800609e:	b08b      	sub	sp, #44	; 0x2c
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	3301      	adds	r3, #1
 80060b0:	01db      	lsls	r3, r3, #7
 80060b2:	4413      	add	r3, r2
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68fa      	ldr	r2, [r7, #12]
 80060b8:	6811      	ldr	r1, [r2, #0]
 80060ba:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	3301      	adds	r3, #1
 80060c2:	01db      	lsls	r3, r3, #7
 80060c4:	440b      	add	r3, r1
 80060c6:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	3301      	adds	r3, #1
 80060d0:	01db      	lsls	r3, r3, #7
 80060d2:	4413      	add	r3, r2
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	01db      	lsls	r3, r3, #7
 80060e0:	4413      	add	r3, r2
 80060e2:	33e8      	adds	r3, #232	; 0xe8
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	01db      	lsls	r3, r3, #7
 80060f0:	4413      	add	r3, r2
 80060f2:	33e4      	adds	r3, #228	; 0xe4
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8006100:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8006102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006104:	f023 0320 	bic.w	r3, r3, #32
 8006108:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	695b      	ldr	r3, [r3, #20]
 800610e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006110:	4313      	orrs	r3, r2
 8006112:	627b      	str	r3, [r7, #36]	; 0x24

  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	695b      	ldr	r3, [r3, #20]
 8006118:	2b20      	cmp	r3, #32
 800611a:	d003      	beq.n	8006124 <HRTIM_TimingUnitWaveform_Config+0x88>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	699b      	ldr	r3, [r3, #24]
 8006120:	2b02      	cmp	r3, #2
 8006122:	d108      	bne.n	8006136 <HRTIM_TimingUnitWaveform_Config+0x9a>
  {
    /* INTLVD bits set to 00 */
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8006124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006126:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 800612a:	627b      	str	r3, [r7, #36]	; 0x24
    hrtim_timcr |= (HRTIM_TIMCR_HALF);
 800612c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612e:	f043 0320 	orr.w	r3, r3, #32
 8006132:	627b      	str	r3, [r7, #36]	; 0x24
 8006134:	e021      	b.n	800617a <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	2b03      	cmp	r3, #3
 800613c:	d108      	bne.n	8006150 <HRTIM_TimingUnitWaveform_Config+0xb4>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_0);
 800613e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006144:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_1);
 8006146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006148:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800614c:	627b      	str	r3, [r7, #36]	; 0x24
 800614e:	e014      	b.n	800617a <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	699b      	ldr	r3, [r3, #24]
 8006154:	2b04      	cmp	r3, #4
 8006156:	d108      	bne.n	800616a <HRTIM_TimingUnitWaveform_Config+0xce>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_1);
 8006158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800615e:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_0);
 8006160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006162:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006166:	627b      	str	r3, [r7, #36]	; 0x24
 8006168:	e007      	b.n	800617a <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else
  {
        hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 800616a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616c:	f023 0320 	bic.w	r3, r3, #32
 8006170:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8006172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006174:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 8006178:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 800617a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006180:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	69db      	ldr	r3, [r3, #28]
 8006186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006188:	4313      	orrs	r3, r2
 800618a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 800618c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006192:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a1b      	ldr	r3, [r3, #32]
 8006198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800619a:	4313      	orrs	r3, r2
 800619c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 800619e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80061a4:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ac:	4313      	orrs	r3, r2
 80061ae:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 80061b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b2:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80061b6:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061be:	4313      	orrs	r3, r2
 80061c0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 80061c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80061c8:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061d0:	4313      	orrs	r3, r2
 80061d2:	627b      	str	r3, [r7, #36]	; 0x24

  if (pTimerCfg->UpdateGating == HRTIM_UPDATEGATING_INDEPENDENT)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d109      	bne.n	80061f0 <HRTIM_TimingUnitWaveform_Config+0x154>
  {
    /* Timing unit Re-Synchronized Update */
    hrtim_timcr &= ~(HRTIM_TIMCR_RSYNCU);
 80061dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061de:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061e2:	627b      	str	r3, [r7, #36]	; 0x24
    hrtim_timcr |= (pTimerCfg->ReSyncUpdate) << HRTIM_TIMCR_RSYNCU_Pos;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061e8:	025b      	lsls	r3, r3, #9
 80061ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ec:	4313      	orrs	r3, r2
 80061ee:	627b      	str	r3, [r7, #36]	; 0x24
  }


  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 80061f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80061f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006200:	d103      	bne.n	800620a <HRTIM_TimingUnitWaveform_Config+0x16e>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8006202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006208:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 800620a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006210:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006218:	4313      	orrs	r3, r2
 800621a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 800621c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006222:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800622a:	4313      	orrs	r3, r2
 800622c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 800622e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006230:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 8006234:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006238:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800623e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006240:	4313      	orrs	r3, r2
 8006242:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800624a:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006250:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006254:	69ba      	ldr	r2, [r7, #24]
 8006256:	4313      	orrs	r3, r2
 8006258:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006260:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006266:	69ba      	ldr	r2, [r7, #24]
 8006268:	4313      	orrs	r3, r2
 800626a:	61bb      	str	r3, [r7, #24]

    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 800626c:	6a3b      	ldr	r3, [r7, #32]
 800626e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006272:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006278:	6a3a      	ldr	r2, [r7, #32]
 800627a:	4313      	orrs	r3, r2
 800627c:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006282:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8006286:	d004      	beq.n	8006292 <HRTIM_TimingUnitWaveform_Config+0x1f6>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800628c:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8006290:	d103      	bne.n	800629a <HRTIM_TimingUnitWaveform_Config+0x1fe>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006296:	2b40      	cmp	r3, #64	; 0x40
 8006298:	d108      	bne.n	80062ac <HRTIM_TimingUnitWaveform_Config+0x210>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 800629a:	6a3b      	ldr	r3, [r7, #32]
 800629c:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 80062a0:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062a6:	6a3a      	ldr	r2, [r7, #32]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	623b      	str	r3, [r7, #32]
  }

  /* Set the BIAR mode : one bit for both outputs */
  hrtim_timoutr &= ~(HRTIM_OUTR_BIAR);
 80062ac:	6a3b      	ldr	r3, [r7, #32]
 80062ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062b2:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062b8:	6a3a      	ldr	r2, [r7, #32]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	623b      	str	r3, [r7, #32]

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062c2:	617b      	str	r3, [r7, #20]
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	2b05      	cmp	r3, #5
 80062c8:	d850      	bhi.n	800636c <HRTIM_TimingUnitWaveform_Config+0x2d0>
 80062ca:	a201      	add	r2, pc, #4	; (adr r2, 80062d0 <HRTIM_TimingUnitWaveform_Config+0x234>)
 80062cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d0:	080062e9 	.word	0x080062e9
 80062d4:	080062ff 	.word	0x080062ff
 80062d8:	08006315 	.word	0x08006315
 80062dc:	0800632b 	.word	0x0800632b
 80062e0:	08006341 	.word	0x08006341
 80062e4:	08006357 	.word	0x08006357
  /* Set the timer burst mode */
  switch (TimerIdx)
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80062ee:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f4:	005b      	lsls	r3, r3, #1
 80062f6:	69fa      	ldr	r2, [r7, #28]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	61fb      	str	r3, [r7, #28]
      break;
 80062fc:	e037      	b.n	800636e <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006304:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	69fa      	ldr	r2, [r7, #28]
 800630e:	4313      	orrs	r3, r2
 8006310:	61fb      	str	r3, [r7, #28]
      break;
 8006312:	e02c      	b.n	800636e <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800631a:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006320:	00db      	lsls	r3, r3, #3
 8006322:	69fa      	ldr	r2, [r7, #28]
 8006324:	4313      	orrs	r3, r2
 8006326:	61fb      	str	r3, [r7, #28]
      break;
 8006328:	e021      	b.n	800636e <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006330:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006336:	011b      	lsls	r3, r3, #4
 8006338:	69fa      	ldr	r2, [r7, #28]
 800633a:	4313      	orrs	r3, r2
 800633c:	61fb      	str	r3, [r7, #28]
      break;
 800633e:	e016      	b.n	800636e <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006346:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800634c:	015b      	lsls	r3, r3, #5
 800634e:	69fa      	ldr	r2, [r7, #28]
 8006350:	4313      	orrs	r3, r2
 8006352:	61fb      	str	r3, [r7, #28]
      break;
 8006354:	e00b      	b.n	800636e <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TFBM);
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800635c:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 6U);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006362:	019b      	lsls	r3, r3, #6
 8006364:	69fa      	ldr	r2, [r7, #28]
 8006366:	4313      	orrs	r3, r2
 8006368:	61fb      	str	r3, [r7, #28]
      break;
 800636a:	e000      	b.n	800636e <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  default:
    break;
 800636c:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	3301      	adds	r3, #1
 8006376:	01db      	lsls	r3, r3, #7
 8006378:	4413      	add	r3, r2
 800637a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800637c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	01db      	lsls	r3, r3, #7
 8006386:	4413      	add	r3, r2
 8006388:	33e8      	adds	r3, #232	; 0xe8
 800638a:	69ba      	ldr	r2, [r7, #24]
 800638c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	01db      	lsls	r3, r3, #7
 8006396:	4413      	add	r3, r2
 8006398:	33e4      	adds	r3, #228	; 0xe4
 800639a:	6a3a      	ldr	r2, [r7, #32]
 800639c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	01db      	lsls	r3, r3, #7
 80063a6:	4413      	add	r3, r2
 80063a8:	33d4      	adds	r3, #212	; 0xd4
 80063aa:	697a      	ldr	r2, [r7, #20]
 80063ac:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	69fa      	ldr	r2, [r7, #28]
 80063b4:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 80063b8:	bf00      	nop
 80063ba:	372c      	adds	r7, #44	; 0x2c
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <HRTIM_TimingUnitWaveform_Control>:
  * @retval None
  */
static void HRTIM_TimingUnitWaveform_Control(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             HRTIM_TimerCtlTypeDef * pTimerCtl)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b087      	sub	sp, #28
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	607a      	str	r2, [r7, #4]
   uint32_t hrtim_timcr2;

   /* Configure timing unit (Timer A to Timer F) */
   hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	01db      	lsls	r3, r3, #7
 80063d8:	4413      	add	r3, r2
 80063da:	33ec      	adds	r3, #236	; 0xec
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	617b      	str	r3, [r7, #20]

   /* Set the UpDown counting Mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_UDM);
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	f023 0310 	bic.w	r3, r3, #16
 80063e6:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= (pTimerCtl->UpDownMode << HRTIM_TIMCR2_UDM_Pos) ;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	011b      	lsls	r3, r3, #4
 80063ee:	697a      	ldr	r2, [r7, #20]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	617b      	str	r3, [r7, #20]

   /* Set the TrigHalf Mode : requires the counter to be disabled */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_TRGHLF);
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80063fa:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->TrigHalf;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	697a      	ldr	r2, [r7, #20]
 8006402:	4313      	orrs	r3, r2
 8006404:	617b      	str	r3, [r7, #20]

   /* define the compare event operating mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP1);
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800640c:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->GreaterCMP1;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	4313      	orrs	r3, r2
 8006416:	617b      	str	r3, [r7, #20]

   /* define the compare event operating mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP3);
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800641e:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->GreaterCMP3;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	697a      	ldr	r2, [r7, #20]
 8006426:	4313      	orrs	r3, r2
 8006428:	617b      	str	r3, [r7, #20]

   if (pTimerCtl->DualChannelDacEnable == HRTIM_TIMER_DCDE_ENABLED)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	2b01      	cmp	r3, #1
 8006430:	d11a      	bne.n	8006468 <HRTIM_TimingUnitWaveform_Control+0xa4>
   {
      /* Set the DualChannel DAC Reset trigger : requires DCDE enabled */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDR);
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	f023 0304 	bic.w	r3, r3, #4
 8006438:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacReset;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	697a      	ldr	r2, [r7, #20]
 8006440:	4313      	orrs	r3, r2
 8006442:	617b      	str	r3, [r7, #20]

      /* Set the DualChannel DAC Step trigger : requires DCDE enabled */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDS);
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	f023 0302 	bic.w	r3, r3, #2
 800644a:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacStep;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	695b      	ldr	r3, [r3, #20]
 8006450:	697a      	ldr	r2, [r7, #20]
 8006452:	4313      	orrs	r3, r2
 8006454:	617b      	str	r3, [r7, #20]

      /* Enable the DualChannel DAC trigger */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDE);
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	f023 0301 	bic.w	r3, r3, #1
 800645c:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacEnable;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	697a      	ldr	r2, [r7, #20]
 8006464:	4313      	orrs	r3, r2
 8006466:	617b      	str	r3, [r7, #20]
   }
   /* Update the HRTIM registers */
   hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2  = hrtim_timcr2;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	01db      	lsls	r3, r3, #7
 8006470:	4413      	add	r3, r2
 8006472:	33ec      	adds	r3, #236	; 0xec
 8006474:	697a      	ldr	r2, [r7, #20]
 8006476:	601a      	str	r2, [r3, #0]

}
 8006478:	bf00      	nop
 800647a:	371c      	adds	r7, #28
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8006484:	b480      	push	{r7}
 8006486:	b089      	sub	sp, #36	; 0x24
 8006488:	af00      	add	r7, sp, #0
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	60b9      	str	r1, [r7, #8]
 800648e:	607a      	str	r2, [r7, #4]
 8006490:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8006492:	2300      	movs	r3, #0
 8006494:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	01db      	lsls	r3, r3, #7
 800649e:	4413      	add	r3, r2
 80064a0:	33e4      	adds	r3, #228	; 0xe4
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	01db      	lsls	r3, r3, #7
 80064ae:	4413      	add	r3, r2
 80064b0:	33b8      	adds	r3, #184	; 0xb8
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	617b      	str	r3, [r7, #20]

  switch (Output)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064bc:	f000 8088 	beq.w	80065d0 <HRTIM_OutputConfig+0x14c>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064c6:	f200 8098 	bhi.w	80065fa <HRTIM_OutputConfig+0x176>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064d0:	d06b      	beq.n	80065aa <HRTIM_OutputConfig+0x126>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064d8:	f200 808f 	bhi.w	80065fa <HRTIM_OutputConfig+0x176>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064e2:	d075      	beq.n	80065d0 <HRTIM_OutputConfig+0x14c>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064ea:	f200 8086 	bhi.w	80065fa <HRTIM_OutputConfig+0x176>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064f4:	d059      	beq.n	80065aa <HRTIM_OutputConfig+0x126>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064fc:	d87d      	bhi.n	80065fa <HRTIM_OutputConfig+0x176>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2b80      	cmp	r3, #128	; 0x80
 8006502:	d065      	beq.n	80065d0 <HRTIM_OutputConfig+0x14c>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2b80      	cmp	r3, #128	; 0x80
 8006508:	d877      	bhi.n	80065fa <HRTIM_OutputConfig+0x176>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2b20      	cmp	r3, #32
 800650e:	d849      	bhi.n	80065a4 <HRTIM_OutputConfig+0x120>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d071      	beq.n	80065fa <HRTIM_OutputConfig+0x176>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	3b01      	subs	r3, #1
 800651a:	2b1f      	cmp	r3, #31
 800651c:	d86d      	bhi.n	80065fa <HRTIM_OutputConfig+0x176>
 800651e:	a201      	add	r2, pc, #4	; (adr r2, 8006524 <HRTIM_OutputConfig+0xa0>)
 8006520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006524:	080065ab 	.word	0x080065ab
 8006528:	080065d1 	.word	0x080065d1
 800652c:	080065fb 	.word	0x080065fb
 8006530:	080065ab 	.word	0x080065ab
 8006534:	080065fb 	.word	0x080065fb
 8006538:	080065fb 	.word	0x080065fb
 800653c:	080065fb 	.word	0x080065fb
 8006540:	080065d1 	.word	0x080065d1
 8006544:	080065fb 	.word	0x080065fb
 8006548:	080065fb 	.word	0x080065fb
 800654c:	080065fb 	.word	0x080065fb
 8006550:	080065fb 	.word	0x080065fb
 8006554:	080065fb 	.word	0x080065fb
 8006558:	080065fb 	.word	0x080065fb
 800655c:	080065fb 	.word	0x080065fb
 8006560:	080065ab 	.word	0x080065ab
 8006564:	080065fb 	.word	0x080065fb
 8006568:	080065fb 	.word	0x080065fb
 800656c:	080065fb 	.word	0x080065fb
 8006570:	080065fb 	.word	0x080065fb
 8006574:	080065fb 	.word	0x080065fb
 8006578:	080065fb 	.word	0x080065fb
 800657c:	080065fb 	.word	0x080065fb
 8006580:	080065fb 	.word	0x080065fb
 8006584:	080065fb 	.word	0x080065fb
 8006588:	080065fb 	.word	0x080065fb
 800658c:	080065fb 	.word	0x080065fb
 8006590:	080065fb 	.word	0x080065fb
 8006594:	080065fb 	.word	0x080065fb
 8006598:	080065fb 	.word	0x080065fb
 800659c:	080065fb 	.word	0x080065fb
 80065a0:	080065d1 	.word	0x080065d1
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2b40      	cmp	r3, #64	; 0x40
 80065a8:	d127      	bne.n	80065fa <HRTIM_OutputConfig+0x176>
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
  case HRTIM_OUTPUT_TF1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6819      	ldr	r1, [r3, #0]
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	685a      	ldr	r2, [r3, #4]
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	01db      	lsls	r3, r3, #7
 80065b6:	440b      	add	r3, r1
 80065b8:	33bc      	adds	r3, #188	; 0xbc
 80065ba:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6819      	ldr	r1, [r3, #0]
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	689a      	ldr	r2, [r3, #8]
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	01db      	lsls	r3, r3, #7
 80065c8:	440b      	add	r3, r1
 80065ca:	33c0      	adds	r3, #192	; 0xc0
 80065cc:	601a      	str	r2, [r3, #0]
      break;
 80065ce:	e015      	b.n	80065fc <HRTIM_OutputConfig+0x178>
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
  case HRTIM_OUTPUT_TF2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	6819      	ldr	r1, [r3, #0]
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	685a      	ldr	r2, [r3, #4]
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	01db      	lsls	r3, r3, #7
 80065dc:	440b      	add	r3, r1
 80065de:	33c4      	adds	r3, #196	; 0xc4
 80065e0:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6819      	ldr	r1, [r3, #0]
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	689a      	ldr	r2, [r3, #8]
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	01db      	lsls	r3, r3, #7
 80065ee:	440b      	add	r3, r1
 80065f0:	33c8      	adds	r3, #200	; 0xc8
 80065f2:	601a      	str	r2, [r3, #0]
      shift = 16U;
 80065f4:	2310      	movs	r3, #16
 80065f6:	61bb      	str	r3, [r7, #24]
      break;
 80065f8:	e000      	b.n	80065fc <HRTIM_OutputConfig+0x178>
    }

  default:
    break;
 80065fa:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 80065fc:	22fe      	movs	r2, #254	; 0xfe
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8006604:	43db      	mvns	r3, r3
 8006606:	69fa      	ldr	r2, [r7, #28]
 8006608:	4013      	ands	r3, r2
 800660a:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	fa02 f303 	lsl.w	r3, r2, r3
 8006616:	69fa      	ldr	r2, [r7, #28]
 8006618:	4313      	orrs	r3, r2
 800661a:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	68da      	ldr	r2, [r3, #12]
 8006620:	69bb      	ldr	r3, [r7, #24]
 8006622:	fa02 f303 	lsl.w	r3, r2, r3
 8006626:	69fa      	ldr	r2, [r7, #28]
 8006628:	4313      	orrs	r3, r2
 800662a:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	691a      	ldr	r2, [r3, #16]
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	fa02 f303 	lsl.w	r3, r2, r3
 8006636:	69fa      	ldr	r2, [r7, #28]
 8006638:	4313      	orrs	r3, r2
 800663a:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	695a      	ldr	r2, [r3, #20]
 8006640:	69bb      	ldr	r3, [r7, #24]
 8006642:	fa02 f303 	lsl.w	r3, r2, r3
 8006646:	69fa      	ldr	r2, [r7, #28]
 8006648:	4313      	orrs	r3, r2
 800664a:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	699a      	ldr	r2, [r3, #24]
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	fa02 f303 	lsl.w	r3, r2, r3
 8006656:	69fa      	ldr	r2, [r7, #28]
 8006658:	4313      	orrs	r3, r2
 800665a:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	2b08      	cmp	r3, #8
 8006662:	d111      	bne.n	8006688 <HRTIM_OutputConfig+0x204>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 800666a:	2b00      	cmp	r3, #0
 800666c:	d10c      	bne.n	8006688 <HRTIM_OutputConfig+0x204>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8006674:	2b00      	cmp	r3, #0
 8006676:	d107      	bne.n	8006688 <HRTIM_OutputConfig+0x204>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	69da      	ldr	r2, [r3, #28]
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	fa02 f303 	lsl.w	r3, r2, r3
 8006682:	69fa      	ldr	r2, [r7, #28]
 8006684:	4313      	orrs	r3, r2
 8006686:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	01db      	lsls	r3, r3, #7
 8006690:	4413      	add	r3, r2
 8006692:	33e4      	adds	r3, #228	; 0xe4
 8006694:	69fa      	ldr	r2, [r7, #28]
 8006696:	601a      	str	r2, [r3, #0]
}
 8006698:	bf00      	nop
 800669a:	3724      	adds	r7, #36	; 0x24
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	2b06      	cmp	r3, #6
 80066b2:	d85e      	bhi.n	8006772 <HRTIM_ForceRegistersUpdate+0xce>
 80066b4:	a201      	add	r2, pc, #4	; (adr r2, 80066bc <HRTIM_ForceRegistersUpdate+0x18>)
 80066b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ba:	bf00      	nop
 80066bc:	080066ef 	.word	0x080066ef
 80066c0:	08006705 	.word	0x08006705
 80066c4:	0800671b 	.word	0x0800671b
 80066c8:	08006731 	.word	0x08006731
 80066cc:	08006747 	.word	0x08006747
 80066d0:	0800675d 	.word	0x0800675d
 80066d4:	080066d9 	.word	0x080066d9
  switch (TimerIdx)
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f042 0201 	orr.w	r2, r2, #1
 80066e8:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80066ec:	e042      	b.n	8006774 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f042 0202 	orr.w	r2, r2, #2
 80066fe:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8006702:	e037      	b.n	8006774 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f042 0204 	orr.w	r2, r2, #4
 8006714:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8006718:	e02c      	b.n	8006774 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f042 0208 	orr.w	r2, r2, #8
 800672a:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800672e:	e021      	b.n	8006774 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f042 0210 	orr.w	r2, r2, #16
 8006740:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8006744:	e016      	b.n	8006774 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f042 0220 	orr.w	r2, r2, #32
 8006756:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800675a:	e00b      	b.n	8006774 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800676c:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8006770:	e000      	b.n	8006774 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  default:
    break;
 8006772:	bf00      	nop
  }
}
 8006774:	bf00      	nop
 8006776:	370c      	adds	r7, #12
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006780:	b480      	push	{r7}
 8006782:	b085      	sub	sp, #20
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d141      	bne.n	8006812 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800678e:	4b4b      	ldr	r3, [pc, #300]	; (80068bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006796:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800679a:	d131      	bne.n	8006800 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800679c:	4b47      	ldr	r3, [pc, #284]	; (80068bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800679e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067a2:	4a46      	ldr	r2, [pc, #280]	; (80068bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80067ac:	4b43      	ldr	r3, [pc, #268]	; (80068bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80067b4:	4a41      	ldr	r2, [pc, #260]	; (80068bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80067ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80067bc:	4b40      	ldr	r3, [pc, #256]	; (80068c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2232      	movs	r2, #50	; 0x32
 80067c2:	fb02 f303 	mul.w	r3, r2, r3
 80067c6:	4a3f      	ldr	r2, [pc, #252]	; (80068c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80067c8:	fba2 2303 	umull	r2, r3, r2, r3
 80067cc:	0c9b      	lsrs	r3, r3, #18
 80067ce:	3301      	adds	r3, #1
 80067d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067d2:	e002      	b.n	80067da <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	3b01      	subs	r3, #1
 80067d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067da:	4b38      	ldr	r3, [pc, #224]	; (80068bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067dc:	695b      	ldr	r3, [r3, #20]
 80067de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067e6:	d102      	bne.n	80067ee <HAL_PWREx_ControlVoltageScaling+0x6e>
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d1f2      	bne.n	80067d4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80067ee:	4b33      	ldr	r3, [pc, #204]	; (80068bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067f0:	695b      	ldr	r3, [r3, #20]
 80067f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067fa:	d158      	bne.n	80068ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80067fc:	2303      	movs	r3, #3
 80067fe:	e057      	b.n	80068b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006800:	4b2e      	ldr	r3, [pc, #184]	; (80068bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006802:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006806:	4a2d      	ldr	r2, [pc, #180]	; (80068bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800680c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006810:	e04d      	b.n	80068ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006818:	d141      	bne.n	800689e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800681a:	4b28      	ldr	r3, [pc, #160]	; (80068bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006826:	d131      	bne.n	800688c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006828:	4b24      	ldr	r3, [pc, #144]	; (80068bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800682a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800682e:	4a23      	ldr	r2, [pc, #140]	; (80068bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006834:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006838:	4b20      	ldr	r3, [pc, #128]	; (80068bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006840:	4a1e      	ldr	r2, [pc, #120]	; (80068bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006842:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006846:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006848:	4b1d      	ldr	r3, [pc, #116]	; (80068c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2232      	movs	r2, #50	; 0x32
 800684e:	fb02 f303 	mul.w	r3, r2, r3
 8006852:	4a1c      	ldr	r2, [pc, #112]	; (80068c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006854:	fba2 2303 	umull	r2, r3, r2, r3
 8006858:	0c9b      	lsrs	r3, r3, #18
 800685a:	3301      	adds	r3, #1
 800685c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800685e:	e002      	b.n	8006866 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	3b01      	subs	r3, #1
 8006864:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006866:	4b15      	ldr	r3, [pc, #84]	; (80068bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006868:	695b      	ldr	r3, [r3, #20]
 800686a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800686e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006872:	d102      	bne.n	800687a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d1f2      	bne.n	8006860 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800687a:	4b10      	ldr	r3, [pc, #64]	; (80068bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800687c:	695b      	ldr	r3, [r3, #20]
 800687e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006886:	d112      	bne.n	80068ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006888:	2303      	movs	r3, #3
 800688a:	e011      	b.n	80068b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800688c:	4b0b      	ldr	r3, [pc, #44]	; (80068bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800688e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006892:	4a0a      	ldr	r2, [pc, #40]	; (80068bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006898:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800689c:	e007      	b.n	80068ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800689e:	4b07      	ldr	r3, [pc, #28]	; (80068bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80068a6:	4a05      	ldr	r2, [pc, #20]	; (80068bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80068ac:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80068ae:	2300      	movs	r3, #0
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3714      	adds	r7, #20
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr
 80068bc:	40007000 	.word	0x40007000
 80068c0:	20000004 	.word	0x20000004
 80068c4:	431bde83 	.word	0x431bde83

080068c8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80068c8:	b480      	push	{r7}
 80068ca:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80068cc:	4b05      	ldr	r3, [pc, #20]	; (80068e4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	4a04      	ldr	r2, [pc, #16]	; (80068e4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80068d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80068d6:	6093      	str	r3, [r2, #8]
}
 80068d8:	bf00      	nop
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr
 80068e2:	bf00      	nop
 80068e4:	40007000 	.word	0x40007000

080068e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b088      	sub	sp, #32
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d101      	bne.n	80068fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	e308      	b.n	8006f0c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 0301 	and.w	r3, r3, #1
 8006902:	2b00      	cmp	r3, #0
 8006904:	d075      	beq.n	80069f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006906:	4ba3      	ldr	r3, [pc, #652]	; (8006b94 <HAL_RCC_OscConfig+0x2ac>)
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	f003 030c 	and.w	r3, r3, #12
 800690e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006910:	4ba0      	ldr	r3, [pc, #640]	; (8006b94 <HAL_RCC_OscConfig+0x2ac>)
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	f003 0303 	and.w	r3, r3, #3
 8006918:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	2b0c      	cmp	r3, #12
 800691e:	d102      	bne.n	8006926 <HAL_RCC_OscConfig+0x3e>
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	2b03      	cmp	r3, #3
 8006924:	d002      	beq.n	800692c <HAL_RCC_OscConfig+0x44>
 8006926:	69bb      	ldr	r3, [r7, #24]
 8006928:	2b08      	cmp	r3, #8
 800692a:	d10b      	bne.n	8006944 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800692c:	4b99      	ldr	r3, [pc, #612]	; (8006b94 <HAL_RCC_OscConfig+0x2ac>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006934:	2b00      	cmp	r3, #0
 8006936:	d05b      	beq.n	80069f0 <HAL_RCC_OscConfig+0x108>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d157      	bne.n	80069f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	e2e3      	b.n	8006f0c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800694c:	d106      	bne.n	800695c <HAL_RCC_OscConfig+0x74>
 800694e:	4b91      	ldr	r3, [pc, #580]	; (8006b94 <HAL_RCC_OscConfig+0x2ac>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a90      	ldr	r2, [pc, #576]	; (8006b94 <HAL_RCC_OscConfig+0x2ac>)
 8006954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006958:	6013      	str	r3, [r2, #0]
 800695a:	e01d      	b.n	8006998 <HAL_RCC_OscConfig+0xb0>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006964:	d10c      	bne.n	8006980 <HAL_RCC_OscConfig+0x98>
 8006966:	4b8b      	ldr	r3, [pc, #556]	; (8006b94 <HAL_RCC_OscConfig+0x2ac>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a8a      	ldr	r2, [pc, #552]	; (8006b94 <HAL_RCC_OscConfig+0x2ac>)
 800696c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006970:	6013      	str	r3, [r2, #0]
 8006972:	4b88      	ldr	r3, [pc, #544]	; (8006b94 <HAL_RCC_OscConfig+0x2ac>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a87      	ldr	r2, [pc, #540]	; (8006b94 <HAL_RCC_OscConfig+0x2ac>)
 8006978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800697c:	6013      	str	r3, [r2, #0]
 800697e:	e00b      	b.n	8006998 <HAL_RCC_OscConfig+0xb0>
 8006980:	4b84      	ldr	r3, [pc, #528]	; (8006b94 <HAL_RCC_OscConfig+0x2ac>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a83      	ldr	r2, [pc, #524]	; (8006b94 <HAL_RCC_OscConfig+0x2ac>)
 8006986:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800698a:	6013      	str	r3, [r2, #0]
 800698c:	4b81      	ldr	r3, [pc, #516]	; (8006b94 <HAL_RCC_OscConfig+0x2ac>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a80      	ldr	r2, [pc, #512]	; (8006b94 <HAL_RCC_OscConfig+0x2ac>)
 8006992:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006996:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d013      	beq.n	80069c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069a0:	f7fc f830 	bl	8002a04 <HAL_GetTick>
 80069a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80069a6:	e008      	b.n	80069ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069a8:	f7fc f82c 	bl	8002a04 <HAL_GetTick>
 80069ac:	4602      	mov	r2, r0
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	2b64      	cmp	r3, #100	; 0x64
 80069b4:	d901      	bls.n	80069ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80069b6:	2303      	movs	r3, #3
 80069b8:	e2a8      	b.n	8006f0c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80069ba:	4b76      	ldr	r3, [pc, #472]	; (8006b94 <HAL_RCC_OscConfig+0x2ac>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d0f0      	beq.n	80069a8 <HAL_RCC_OscConfig+0xc0>
 80069c6:	e014      	b.n	80069f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069c8:	f7fc f81c 	bl	8002a04 <HAL_GetTick>
 80069cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80069ce:	e008      	b.n	80069e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069d0:	f7fc f818 	bl	8002a04 <HAL_GetTick>
 80069d4:	4602      	mov	r2, r0
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	2b64      	cmp	r3, #100	; 0x64
 80069dc:	d901      	bls.n	80069e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80069de:	2303      	movs	r3, #3
 80069e0:	e294      	b.n	8006f0c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80069e2:	4b6c      	ldr	r3, [pc, #432]	; (8006b94 <HAL_RCC_OscConfig+0x2ac>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d1f0      	bne.n	80069d0 <HAL_RCC_OscConfig+0xe8>
 80069ee:	e000      	b.n	80069f2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f003 0302 	and.w	r3, r3, #2
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d075      	beq.n	8006aea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069fe:	4b65      	ldr	r3, [pc, #404]	; (8006b94 <HAL_RCC_OscConfig+0x2ac>)
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	f003 030c 	and.w	r3, r3, #12
 8006a06:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a08:	4b62      	ldr	r3, [pc, #392]	; (8006b94 <HAL_RCC_OscConfig+0x2ac>)
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	f003 0303 	and.w	r3, r3, #3
 8006a10:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	2b0c      	cmp	r3, #12
 8006a16:	d102      	bne.n	8006a1e <HAL_RCC_OscConfig+0x136>
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	2b02      	cmp	r3, #2
 8006a1c:	d002      	beq.n	8006a24 <HAL_RCC_OscConfig+0x13c>
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	2b04      	cmp	r3, #4
 8006a22:	d11f      	bne.n	8006a64 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a24:	4b5b      	ldr	r3, [pc, #364]	; (8006b94 <HAL_RCC_OscConfig+0x2ac>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d005      	beq.n	8006a3c <HAL_RCC_OscConfig+0x154>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d101      	bne.n	8006a3c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	e267      	b.n	8006f0c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a3c:	4b55      	ldr	r3, [pc, #340]	; (8006b94 <HAL_RCC_OscConfig+0x2ac>)
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	691b      	ldr	r3, [r3, #16]
 8006a48:	061b      	lsls	r3, r3, #24
 8006a4a:	4952      	ldr	r1, [pc, #328]	; (8006b94 <HAL_RCC_OscConfig+0x2ac>)
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006a50:	4b51      	ldr	r3, [pc, #324]	; (8006b98 <HAL_RCC_OscConfig+0x2b0>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4618      	mov	r0, r3
 8006a56:	f7fb ff89 	bl	800296c <HAL_InitTick>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d043      	beq.n	8006ae8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	e253      	b.n	8006f0c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d023      	beq.n	8006ab4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a6c:	4b49      	ldr	r3, [pc, #292]	; (8006b94 <HAL_RCC_OscConfig+0x2ac>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a48      	ldr	r2, [pc, #288]	; (8006b94 <HAL_RCC_OscConfig+0x2ac>)
 8006a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a78:	f7fb ffc4 	bl	8002a04 <HAL_GetTick>
 8006a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a7e:	e008      	b.n	8006a92 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a80:	f7fb ffc0 	bl	8002a04 <HAL_GetTick>
 8006a84:	4602      	mov	r2, r0
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	d901      	bls.n	8006a92 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e23c      	b.n	8006f0c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a92:	4b40      	ldr	r3, [pc, #256]	; (8006b94 <HAL_RCC_OscConfig+0x2ac>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d0f0      	beq.n	8006a80 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a9e:	4b3d      	ldr	r3, [pc, #244]	; (8006b94 <HAL_RCC_OscConfig+0x2ac>)
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	061b      	lsls	r3, r3, #24
 8006aac:	4939      	ldr	r1, [pc, #228]	; (8006b94 <HAL_RCC_OscConfig+0x2ac>)
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	604b      	str	r3, [r1, #4]
 8006ab2:	e01a      	b.n	8006aea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ab4:	4b37      	ldr	r3, [pc, #220]	; (8006b94 <HAL_RCC_OscConfig+0x2ac>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a36      	ldr	r2, [pc, #216]	; (8006b94 <HAL_RCC_OscConfig+0x2ac>)
 8006aba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006abe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ac0:	f7fb ffa0 	bl	8002a04 <HAL_GetTick>
 8006ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006ac6:	e008      	b.n	8006ada <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ac8:	f7fb ff9c 	bl	8002a04 <HAL_GetTick>
 8006acc:	4602      	mov	r2, r0
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	1ad3      	subs	r3, r2, r3
 8006ad2:	2b02      	cmp	r3, #2
 8006ad4:	d901      	bls.n	8006ada <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006ad6:	2303      	movs	r3, #3
 8006ad8:	e218      	b.n	8006f0c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006ada:	4b2e      	ldr	r3, [pc, #184]	; (8006b94 <HAL_RCC_OscConfig+0x2ac>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d1f0      	bne.n	8006ac8 <HAL_RCC_OscConfig+0x1e0>
 8006ae6:	e000      	b.n	8006aea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ae8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 0308 	and.w	r3, r3, #8
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d03c      	beq.n	8006b70 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	695b      	ldr	r3, [r3, #20]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d01c      	beq.n	8006b38 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006afe:	4b25      	ldr	r3, [pc, #148]	; (8006b94 <HAL_RCC_OscConfig+0x2ac>)
 8006b00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b04:	4a23      	ldr	r2, [pc, #140]	; (8006b94 <HAL_RCC_OscConfig+0x2ac>)
 8006b06:	f043 0301 	orr.w	r3, r3, #1
 8006b0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b0e:	f7fb ff79 	bl	8002a04 <HAL_GetTick>
 8006b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006b14:	e008      	b.n	8006b28 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b16:	f7fb ff75 	bl	8002a04 <HAL_GetTick>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	1ad3      	subs	r3, r2, r3
 8006b20:	2b02      	cmp	r3, #2
 8006b22:	d901      	bls.n	8006b28 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006b24:	2303      	movs	r3, #3
 8006b26:	e1f1      	b.n	8006f0c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006b28:	4b1a      	ldr	r3, [pc, #104]	; (8006b94 <HAL_RCC_OscConfig+0x2ac>)
 8006b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b2e:	f003 0302 	and.w	r3, r3, #2
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d0ef      	beq.n	8006b16 <HAL_RCC_OscConfig+0x22e>
 8006b36:	e01b      	b.n	8006b70 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b38:	4b16      	ldr	r3, [pc, #88]	; (8006b94 <HAL_RCC_OscConfig+0x2ac>)
 8006b3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b3e:	4a15      	ldr	r2, [pc, #84]	; (8006b94 <HAL_RCC_OscConfig+0x2ac>)
 8006b40:	f023 0301 	bic.w	r3, r3, #1
 8006b44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b48:	f7fb ff5c 	bl	8002a04 <HAL_GetTick>
 8006b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006b4e:	e008      	b.n	8006b62 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b50:	f7fb ff58 	bl	8002a04 <HAL_GetTick>
 8006b54:	4602      	mov	r2, r0
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	d901      	bls.n	8006b62 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	e1d4      	b.n	8006f0c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006b62:	4b0c      	ldr	r3, [pc, #48]	; (8006b94 <HAL_RCC_OscConfig+0x2ac>)
 8006b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b68:	f003 0302 	and.w	r3, r3, #2
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d1ef      	bne.n	8006b50 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f003 0304 	and.w	r3, r3, #4
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	f000 80ab 	beq.w	8006cd4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006b82:	4b04      	ldr	r3, [pc, #16]	; (8006b94 <HAL_RCC_OscConfig+0x2ac>)
 8006b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d106      	bne.n	8006b9c <HAL_RCC_OscConfig+0x2b4>
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e005      	b.n	8006b9e <HAL_RCC_OscConfig+0x2b6>
 8006b92:	bf00      	nop
 8006b94:	40021000 	.word	0x40021000
 8006b98:	20000008 	.word	0x20000008
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d00d      	beq.n	8006bbe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ba2:	4baf      	ldr	r3, [pc, #700]	; (8006e60 <HAL_RCC_OscConfig+0x578>)
 8006ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ba6:	4aae      	ldr	r2, [pc, #696]	; (8006e60 <HAL_RCC_OscConfig+0x578>)
 8006ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bac:	6593      	str	r3, [r2, #88]	; 0x58
 8006bae:	4bac      	ldr	r3, [pc, #688]	; (8006e60 <HAL_RCC_OscConfig+0x578>)
 8006bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bb6:	60fb      	str	r3, [r7, #12]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006bbe:	4ba9      	ldr	r3, [pc, #676]	; (8006e64 <HAL_RCC_OscConfig+0x57c>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d118      	bne.n	8006bfc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006bca:	4ba6      	ldr	r3, [pc, #664]	; (8006e64 <HAL_RCC_OscConfig+0x57c>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4aa5      	ldr	r2, [pc, #660]	; (8006e64 <HAL_RCC_OscConfig+0x57c>)
 8006bd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006bd6:	f7fb ff15 	bl	8002a04 <HAL_GetTick>
 8006bda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006bdc:	e008      	b.n	8006bf0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bde:	f7fb ff11 	bl	8002a04 <HAL_GetTick>
 8006be2:	4602      	mov	r2, r0
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	1ad3      	subs	r3, r2, r3
 8006be8:	2b02      	cmp	r3, #2
 8006bea:	d901      	bls.n	8006bf0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006bec:	2303      	movs	r3, #3
 8006bee:	e18d      	b.n	8006f0c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006bf0:	4b9c      	ldr	r3, [pc, #624]	; (8006e64 <HAL_RCC_OscConfig+0x57c>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d0f0      	beq.n	8006bde <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d108      	bne.n	8006c16 <HAL_RCC_OscConfig+0x32e>
 8006c04:	4b96      	ldr	r3, [pc, #600]	; (8006e60 <HAL_RCC_OscConfig+0x578>)
 8006c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c0a:	4a95      	ldr	r2, [pc, #596]	; (8006e60 <HAL_RCC_OscConfig+0x578>)
 8006c0c:	f043 0301 	orr.w	r3, r3, #1
 8006c10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006c14:	e024      	b.n	8006c60 <HAL_RCC_OscConfig+0x378>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	2b05      	cmp	r3, #5
 8006c1c:	d110      	bne.n	8006c40 <HAL_RCC_OscConfig+0x358>
 8006c1e:	4b90      	ldr	r3, [pc, #576]	; (8006e60 <HAL_RCC_OscConfig+0x578>)
 8006c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c24:	4a8e      	ldr	r2, [pc, #568]	; (8006e60 <HAL_RCC_OscConfig+0x578>)
 8006c26:	f043 0304 	orr.w	r3, r3, #4
 8006c2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006c2e:	4b8c      	ldr	r3, [pc, #560]	; (8006e60 <HAL_RCC_OscConfig+0x578>)
 8006c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c34:	4a8a      	ldr	r2, [pc, #552]	; (8006e60 <HAL_RCC_OscConfig+0x578>)
 8006c36:	f043 0301 	orr.w	r3, r3, #1
 8006c3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006c3e:	e00f      	b.n	8006c60 <HAL_RCC_OscConfig+0x378>
 8006c40:	4b87      	ldr	r3, [pc, #540]	; (8006e60 <HAL_RCC_OscConfig+0x578>)
 8006c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c46:	4a86      	ldr	r2, [pc, #536]	; (8006e60 <HAL_RCC_OscConfig+0x578>)
 8006c48:	f023 0301 	bic.w	r3, r3, #1
 8006c4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006c50:	4b83      	ldr	r3, [pc, #524]	; (8006e60 <HAL_RCC_OscConfig+0x578>)
 8006c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c56:	4a82      	ldr	r2, [pc, #520]	; (8006e60 <HAL_RCC_OscConfig+0x578>)
 8006c58:	f023 0304 	bic.w	r3, r3, #4
 8006c5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d016      	beq.n	8006c96 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c68:	f7fb fecc 	bl	8002a04 <HAL_GetTick>
 8006c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c6e:	e00a      	b.n	8006c86 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c70:	f7fb fec8 	bl	8002a04 <HAL_GetTick>
 8006c74:	4602      	mov	r2, r0
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	1ad3      	subs	r3, r2, r3
 8006c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d901      	bls.n	8006c86 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006c82:	2303      	movs	r3, #3
 8006c84:	e142      	b.n	8006f0c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c86:	4b76      	ldr	r3, [pc, #472]	; (8006e60 <HAL_RCC_OscConfig+0x578>)
 8006c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c8c:	f003 0302 	and.w	r3, r3, #2
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d0ed      	beq.n	8006c70 <HAL_RCC_OscConfig+0x388>
 8006c94:	e015      	b.n	8006cc2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c96:	f7fb feb5 	bl	8002a04 <HAL_GetTick>
 8006c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006c9c:	e00a      	b.n	8006cb4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c9e:	f7fb feb1 	bl	8002a04 <HAL_GetTick>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	1ad3      	subs	r3, r2, r3
 8006ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d901      	bls.n	8006cb4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	e12b      	b.n	8006f0c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006cb4:	4b6a      	ldr	r3, [pc, #424]	; (8006e60 <HAL_RCC_OscConfig+0x578>)
 8006cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cba:	f003 0302 	and.w	r3, r3, #2
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d1ed      	bne.n	8006c9e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006cc2:	7ffb      	ldrb	r3, [r7, #31]
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d105      	bne.n	8006cd4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cc8:	4b65      	ldr	r3, [pc, #404]	; (8006e60 <HAL_RCC_OscConfig+0x578>)
 8006cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ccc:	4a64      	ldr	r2, [pc, #400]	; (8006e60 <HAL_RCC_OscConfig+0x578>)
 8006cce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cd2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 0320 	and.w	r3, r3, #32
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d03c      	beq.n	8006d5a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	699b      	ldr	r3, [r3, #24]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d01c      	beq.n	8006d22 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006ce8:	4b5d      	ldr	r3, [pc, #372]	; (8006e60 <HAL_RCC_OscConfig+0x578>)
 8006cea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006cee:	4a5c      	ldr	r2, [pc, #368]	; (8006e60 <HAL_RCC_OscConfig+0x578>)
 8006cf0:	f043 0301 	orr.w	r3, r3, #1
 8006cf4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cf8:	f7fb fe84 	bl	8002a04 <HAL_GetTick>
 8006cfc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006cfe:	e008      	b.n	8006d12 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d00:	f7fb fe80 	bl	8002a04 <HAL_GetTick>
 8006d04:	4602      	mov	r2, r0
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	1ad3      	subs	r3, r2, r3
 8006d0a:	2b02      	cmp	r3, #2
 8006d0c:	d901      	bls.n	8006d12 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006d0e:	2303      	movs	r3, #3
 8006d10:	e0fc      	b.n	8006f0c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006d12:	4b53      	ldr	r3, [pc, #332]	; (8006e60 <HAL_RCC_OscConfig+0x578>)
 8006d14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d18:	f003 0302 	and.w	r3, r3, #2
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d0ef      	beq.n	8006d00 <HAL_RCC_OscConfig+0x418>
 8006d20:	e01b      	b.n	8006d5a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006d22:	4b4f      	ldr	r3, [pc, #316]	; (8006e60 <HAL_RCC_OscConfig+0x578>)
 8006d24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d28:	4a4d      	ldr	r2, [pc, #308]	; (8006e60 <HAL_RCC_OscConfig+0x578>)
 8006d2a:	f023 0301 	bic.w	r3, r3, #1
 8006d2e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d32:	f7fb fe67 	bl	8002a04 <HAL_GetTick>
 8006d36:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006d38:	e008      	b.n	8006d4c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d3a:	f7fb fe63 	bl	8002a04 <HAL_GetTick>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	1ad3      	subs	r3, r2, r3
 8006d44:	2b02      	cmp	r3, #2
 8006d46:	d901      	bls.n	8006d4c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006d48:	2303      	movs	r3, #3
 8006d4a:	e0df      	b.n	8006f0c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006d4c:	4b44      	ldr	r3, [pc, #272]	; (8006e60 <HAL_RCC_OscConfig+0x578>)
 8006d4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d52:	f003 0302 	and.w	r3, r3, #2
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d1ef      	bne.n	8006d3a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	69db      	ldr	r3, [r3, #28]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	f000 80d3 	beq.w	8006f0a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d64:	4b3e      	ldr	r3, [pc, #248]	; (8006e60 <HAL_RCC_OscConfig+0x578>)
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	f003 030c 	and.w	r3, r3, #12
 8006d6c:	2b0c      	cmp	r3, #12
 8006d6e:	f000 808d 	beq.w	8006e8c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	69db      	ldr	r3, [r3, #28]
 8006d76:	2b02      	cmp	r3, #2
 8006d78:	d15a      	bne.n	8006e30 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d7a:	4b39      	ldr	r3, [pc, #228]	; (8006e60 <HAL_RCC_OscConfig+0x578>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a38      	ldr	r2, [pc, #224]	; (8006e60 <HAL_RCC_OscConfig+0x578>)
 8006d80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d86:	f7fb fe3d 	bl	8002a04 <HAL_GetTick>
 8006d8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d8c:	e008      	b.n	8006da0 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d8e:	f7fb fe39 	bl	8002a04 <HAL_GetTick>
 8006d92:	4602      	mov	r2, r0
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	1ad3      	subs	r3, r2, r3
 8006d98:	2b02      	cmp	r3, #2
 8006d9a:	d901      	bls.n	8006da0 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	e0b5      	b.n	8006f0c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006da0:	4b2f      	ldr	r3, [pc, #188]	; (8006e60 <HAL_RCC_OscConfig+0x578>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d1f0      	bne.n	8006d8e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006dac:	4b2c      	ldr	r3, [pc, #176]	; (8006e60 <HAL_RCC_OscConfig+0x578>)
 8006dae:	68da      	ldr	r2, [r3, #12]
 8006db0:	4b2d      	ldr	r3, [pc, #180]	; (8006e68 <HAL_RCC_OscConfig+0x580>)
 8006db2:	4013      	ands	r3, r2
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	6a11      	ldr	r1, [r2, #32]
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006dbc:	3a01      	subs	r2, #1
 8006dbe:	0112      	lsls	r2, r2, #4
 8006dc0:	4311      	orrs	r1, r2
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006dc6:	0212      	lsls	r2, r2, #8
 8006dc8:	4311      	orrs	r1, r2
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006dce:	0852      	lsrs	r2, r2, #1
 8006dd0:	3a01      	subs	r2, #1
 8006dd2:	0552      	lsls	r2, r2, #21
 8006dd4:	4311      	orrs	r1, r2
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006dda:	0852      	lsrs	r2, r2, #1
 8006ddc:	3a01      	subs	r2, #1
 8006dde:	0652      	lsls	r2, r2, #25
 8006de0:	4311      	orrs	r1, r2
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006de6:	06d2      	lsls	r2, r2, #27
 8006de8:	430a      	orrs	r2, r1
 8006dea:	491d      	ldr	r1, [pc, #116]	; (8006e60 <HAL_RCC_OscConfig+0x578>)
 8006dec:	4313      	orrs	r3, r2
 8006dee:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006df0:	4b1b      	ldr	r3, [pc, #108]	; (8006e60 <HAL_RCC_OscConfig+0x578>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a1a      	ldr	r2, [pc, #104]	; (8006e60 <HAL_RCC_OscConfig+0x578>)
 8006df6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006dfa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006dfc:	4b18      	ldr	r3, [pc, #96]	; (8006e60 <HAL_RCC_OscConfig+0x578>)
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	4a17      	ldr	r2, [pc, #92]	; (8006e60 <HAL_RCC_OscConfig+0x578>)
 8006e02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e06:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e08:	f7fb fdfc 	bl	8002a04 <HAL_GetTick>
 8006e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e0e:	e008      	b.n	8006e22 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e10:	f7fb fdf8 	bl	8002a04 <HAL_GetTick>
 8006e14:	4602      	mov	r2, r0
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	1ad3      	subs	r3, r2, r3
 8006e1a:	2b02      	cmp	r3, #2
 8006e1c:	d901      	bls.n	8006e22 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8006e1e:	2303      	movs	r3, #3
 8006e20:	e074      	b.n	8006f0c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e22:	4b0f      	ldr	r3, [pc, #60]	; (8006e60 <HAL_RCC_OscConfig+0x578>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d0f0      	beq.n	8006e10 <HAL_RCC_OscConfig+0x528>
 8006e2e:	e06c      	b.n	8006f0a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e30:	4b0b      	ldr	r3, [pc, #44]	; (8006e60 <HAL_RCC_OscConfig+0x578>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a0a      	ldr	r2, [pc, #40]	; (8006e60 <HAL_RCC_OscConfig+0x578>)
 8006e36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e3a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006e3c:	4b08      	ldr	r3, [pc, #32]	; (8006e60 <HAL_RCC_OscConfig+0x578>)
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	4a07      	ldr	r2, [pc, #28]	; (8006e60 <HAL_RCC_OscConfig+0x578>)
 8006e42:	f023 0303 	bic.w	r3, r3, #3
 8006e46:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006e48:	4b05      	ldr	r3, [pc, #20]	; (8006e60 <HAL_RCC_OscConfig+0x578>)
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	4a04      	ldr	r2, [pc, #16]	; (8006e60 <HAL_RCC_OscConfig+0x578>)
 8006e4e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006e52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e56:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e58:	f7fb fdd4 	bl	8002a04 <HAL_GetTick>
 8006e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e5e:	e00e      	b.n	8006e7e <HAL_RCC_OscConfig+0x596>
 8006e60:	40021000 	.word	0x40021000
 8006e64:	40007000 	.word	0x40007000
 8006e68:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e6c:	f7fb fdca 	bl	8002a04 <HAL_GetTick>
 8006e70:	4602      	mov	r2, r0
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d901      	bls.n	8006e7e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	e046      	b.n	8006f0c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e7e:	4b25      	ldr	r3, [pc, #148]	; (8006f14 <HAL_RCC_OscConfig+0x62c>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d1f0      	bne.n	8006e6c <HAL_RCC_OscConfig+0x584>
 8006e8a:	e03e      	b.n	8006f0a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	69db      	ldr	r3, [r3, #28]
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d101      	bne.n	8006e98 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	e039      	b.n	8006f0c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006e98:	4b1e      	ldr	r3, [pc, #120]	; (8006f14 <HAL_RCC_OscConfig+0x62c>)
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	f003 0203 	and.w	r2, r3, #3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6a1b      	ldr	r3, [r3, #32]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d12c      	bne.n	8006f06 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d123      	bne.n	8006f06 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d11b      	bne.n	8006f06 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d113      	bne.n	8006f06 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ee8:	085b      	lsrs	r3, r3, #1
 8006eea:	3b01      	subs	r3, #1
 8006eec:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d109      	bne.n	8006f06 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006efc:	085b      	lsrs	r3, r3, #1
 8006efe:	3b01      	subs	r3, #1
 8006f00:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d001      	beq.n	8006f0a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e000      	b.n	8006f0c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8006f0a:	2300      	movs	r3, #0
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3720      	adds	r7, #32
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}
 8006f14:	40021000 	.word	0x40021000

08006f18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b086      	sub	sp, #24
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006f22:	2300      	movs	r3, #0
 8006f24:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d101      	bne.n	8006f30 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e11e      	b.n	800716e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006f30:	4b91      	ldr	r3, [pc, #580]	; (8007178 <HAL_RCC_ClockConfig+0x260>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f003 030f 	and.w	r3, r3, #15
 8006f38:	683a      	ldr	r2, [r7, #0]
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d910      	bls.n	8006f60 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f3e:	4b8e      	ldr	r3, [pc, #568]	; (8007178 <HAL_RCC_ClockConfig+0x260>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f023 020f 	bic.w	r2, r3, #15
 8006f46:	498c      	ldr	r1, [pc, #560]	; (8007178 <HAL_RCC_ClockConfig+0x260>)
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f4e:	4b8a      	ldr	r3, [pc, #552]	; (8007178 <HAL_RCC_ClockConfig+0x260>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f003 030f 	and.w	r3, r3, #15
 8006f56:	683a      	ldr	r2, [r7, #0]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d001      	beq.n	8006f60 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e106      	b.n	800716e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 0301 	and.w	r3, r3, #1
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d073      	beq.n	8007054 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	2b03      	cmp	r3, #3
 8006f72:	d129      	bne.n	8006fc8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f74:	4b81      	ldr	r3, [pc, #516]	; (800717c <HAL_RCC_ClockConfig+0x264>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d101      	bne.n	8006f84 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006f80:	2301      	movs	r3, #1
 8006f82:	e0f4      	b.n	800716e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006f84:	f000 f99e 	bl	80072c4 <RCC_GetSysClockFreqFromPLLSource>
 8006f88:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	4a7c      	ldr	r2, [pc, #496]	; (8007180 <HAL_RCC_ClockConfig+0x268>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d93f      	bls.n	8007012 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006f92:	4b7a      	ldr	r3, [pc, #488]	; (800717c <HAL_RCC_ClockConfig+0x264>)
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d009      	beq.n	8006fb2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d033      	beq.n	8007012 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d12f      	bne.n	8007012 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006fb2:	4b72      	ldr	r3, [pc, #456]	; (800717c <HAL_RCC_ClockConfig+0x264>)
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006fba:	4a70      	ldr	r2, [pc, #448]	; (800717c <HAL_RCC_ClockConfig+0x264>)
 8006fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fc0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006fc2:	2380      	movs	r3, #128	; 0x80
 8006fc4:	617b      	str	r3, [r7, #20]
 8006fc6:	e024      	b.n	8007012 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	2b02      	cmp	r3, #2
 8006fce:	d107      	bne.n	8006fe0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006fd0:	4b6a      	ldr	r3, [pc, #424]	; (800717c <HAL_RCC_ClockConfig+0x264>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d109      	bne.n	8006ff0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	e0c6      	b.n	800716e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006fe0:	4b66      	ldr	r3, [pc, #408]	; (800717c <HAL_RCC_ClockConfig+0x264>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d101      	bne.n	8006ff0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	e0be      	b.n	800716e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006ff0:	f000 f8ce 	bl	8007190 <HAL_RCC_GetSysClockFreq>
 8006ff4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	4a61      	ldr	r2, [pc, #388]	; (8007180 <HAL_RCC_ClockConfig+0x268>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d909      	bls.n	8007012 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006ffe:	4b5f      	ldr	r3, [pc, #380]	; (800717c <HAL_RCC_ClockConfig+0x264>)
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007006:	4a5d      	ldr	r2, [pc, #372]	; (800717c <HAL_RCC_ClockConfig+0x264>)
 8007008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800700c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800700e:	2380      	movs	r3, #128	; 0x80
 8007010:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007012:	4b5a      	ldr	r3, [pc, #360]	; (800717c <HAL_RCC_ClockConfig+0x264>)
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	f023 0203 	bic.w	r2, r3, #3
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	4957      	ldr	r1, [pc, #348]	; (800717c <HAL_RCC_ClockConfig+0x264>)
 8007020:	4313      	orrs	r3, r2
 8007022:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007024:	f7fb fcee 	bl	8002a04 <HAL_GetTick>
 8007028:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800702a:	e00a      	b.n	8007042 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800702c:	f7fb fcea 	bl	8002a04 <HAL_GetTick>
 8007030:	4602      	mov	r2, r0
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	1ad3      	subs	r3, r2, r3
 8007036:	f241 3288 	movw	r2, #5000	; 0x1388
 800703a:	4293      	cmp	r3, r2
 800703c:	d901      	bls.n	8007042 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800703e:	2303      	movs	r3, #3
 8007040:	e095      	b.n	800716e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007042:	4b4e      	ldr	r3, [pc, #312]	; (800717c <HAL_RCC_ClockConfig+0x264>)
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	f003 020c 	and.w	r2, r3, #12
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	429a      	cmp	r2, r3
 8007052:	d1eb      	bne.n	800702c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 0302 	and.w	r3, r3, #2
 800705c:	2b00      	cmp	r3, #0
 800705e:	d023      	beq.n	80070a8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f003 0304 	and.w	r3, r3, #4
 8007068:	2b00      	cmp	r3, #0
 800706a:	d005      	beq.n	8007078 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800706c:	4b43      	ldr	r3, [pc, #268]	; (800717c <HAL_RCC_ClockConfig+0x264>)
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	4a42      	ldr	r2, [pc, #264]	; (800717c <HAL_RCC_ClockConfig+0x264>)
 8007072:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007076:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f003 0308 	and.w	r3, r3, #8
 8007080:	2b00      	cmp	r3, #0
 8007082:	d007      	beq.n	8007094 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007084:	4b3d      	ldr	r3, [pc, #244]	; (800717c <HAL_RCC_ClockConfig+0x264>)
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800708c:	4a3b      	ldr	r2, [pc, #236]	; (800717c <HAL_RCC_ClockConfig+0x264>)
 800708e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007092:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007094:	4b39      	ldr	r3, [pc, #228]	; (800717c <HAL_RCC_ClockConfig+0x264>)
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	4936      	ldr	r1, [pc, #216]	; (800717c <HAL_RCC_ClockConfig+0x264>)
 80070a2:	4313      	orrs	r3, r2
 80070a4:	608b      	str	r3, [r1, #8]
 80070a6:	e008      	b.n	80070ba <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	2b80      	cmp	r3, #128	; 0x80
 80070ac:	d105      	bne.n	80070ba <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80070ae:	4b33      	ldr	r3, [pc, #204]	; (800717c <HAL_RCC_ClockConfig+0x264>)
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	4a32      	ldr	r2, [pc, #200]	; (800717c <HAL_RCC_ClockConfig+0x264>)
 80070b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070b8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80070ba:	4b2f      	ldr	r3, [pc, #188]	; (8007178 <HAL_RCC_ClockConfig+0x260>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 030f 	and.w	r3, r3, #15
 80070c2:	683a      	ldr	r2, [r7, #0]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d21d      	bcs.n	8007104 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070c8:	4b2b      	ldr	r3, [pc, #172]	; (8007178 <HAL_RCC_ClockConfig+0x260>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f023 020f 	bic.w	r2, r3, #15
 80070d0:	4929      	ldr	r1, [pc, #164]	; (8007178 <HAL_RCC_ClockConfig+0x260>)
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	4313      	orrs	r3, r2
 80070d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80070d8:	f7fb fc94 	bl	8002a04 <HAL_GetTick>
 80070dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070de:	e00a      	b.n	80070f6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070e0:	f7fb fc90 	bl	8002a04 <HAL_GetTick>
 80070e4:	4602      	mov	r2, r0
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	1ad3      	subs	r3, r2, r3
 80070ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d901      	bls.n	80070f6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80070f2:	2303      	movs	r3, #3
 80070f4:	e03b      	b.n	800716e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070f6:	4b20      	ldr	r3, [pc, #128]	; (8007178 <HAL_RCC_ClockConfig+0x260>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 030f 	and.w	r3, r3, #15
 80070fe:	683a      	ldr	r2, [r7, #0]
 8007100:	429a      	cmp	r2, r3
 8007102:	d1ed      	bne.n	80070e0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f003 0304 	and.w	r3, r3, #4
 800710c:	2b00      	cmp	r3, #0
 800710e:	d008      	beq.n	8007122 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007110:	4b1a      	ldr	r3, [pc, #104]	; (800717c <HAL_RCC_ClockConfig+0x264>)
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	4917      	ldr	r1, [pc, #92]	; (800717c <HAL_RCC_ClockConfig+0x264>)
 800711e:	4313      	orrs	r3, r2
 8007120:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f003 0308 	and.w	r3, r3, #8
 800712a:	2b00      	cmp	r3, #0
 800712c:	d009      	beq.n	8007142 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800712e:	4b13      	ldr	r3, [pc, #76]	; (800717c <HAL_RCC_ClockConfig+0x264>)
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	00db      	lsls	r3, r3, #3
 800713c:	490f      	ldr	r1, [pc, #60]	; (800717c <HAL_RCC_ClockConfig+0x264>)
 800713e:	4313      	orrs	r3, r2
 8007140:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007142:	f000 f825 	bl	8007190 <HAL_RCC_GetSysClockFreq>
 8007146:	4602      	mov	r2, r0
 8007148:	4b0c      	ldr	r3, [pc, #48]	; (800717c <HAL_RCC_ClockConfig+0x264>)
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	091b      	lsrs	r3, r3, #4
 800714e:	f003 030f 	and.w	r3, r3, #15
 8007152:	490c      	ldr	r1, [pc, #48]	; (8007184 <HAL_RCC_ClockConfig+0x26c>)
 8007154:	5ccb      	ldrb	r3, [r1, r3]
 8007156:	f003 031f 	and.w	r3, r3, #31
 800715a:	fa22 f303 	lsr.w	r3, r2, r3
 800715e:	4a0a      	ldr	r2, [pc, #40]	; (8007188 <HAL_RCC_ClockConfig+0x270>)
 8007160:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007162:	4b0a      	ldr	r3, [pc, #40]	; (800718c <HAL_RCC_ClockConfig+0x274>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4618      	mov	r0, r3
 8007168:	f7fb fc00 	bl	800296c <HAL_InitTick>
 800716c:	4603      	mov	r3, r0
}
 800716e:	4618      	mov	r0, r3
 8007170:	3718      	adds	r7, #24
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	40022000 	.word	0x40022000
 800717c:	40021000 	.word	0x40021000
 8007180:	04c4b400 	.word	0x04c4b400
 8007184:	0800c8c0 	.word	0x0800c8c0
 8007188:	20000004 	.word	0x20000004
 800718c:	20000008 	.word	0x20000008

08007190 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007190:	b480      	push	{r7}
 8007192:	b087      	sub	sp, #28
 8007194:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007196:	4b2c      	ldr	r3, [pc, #176]	; (8007248 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	f003 030c 	and.w	r3, r3, #12
 800719e:	2b04      	cmp	r3, #4
 80071a0:	d102      	bne.n	80071a8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80071a2:	4b2a      	ldr	r3, [pc, #168]	; (800724c <HAL_RCC_GetSysClockFreq+0xbc>)
 80071a4:	613b      	str	r3, [r7, #16]
 80071a6:	e047      	b.n	8007238 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80071a8:	4b27      	ldr	r3, [pc, #156]	; (8007248 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	f003 030c 	and.w	r3, r3, #12
 80071b0:	2b08      	cmp	r3, #8
 80071b2:	d102      	bne.n	80071ba <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80071b4:	4b26      	ldr	r3, [pc, #152]	; (8007250 <HAL_RCC_GetSysClockFreq+0xc0>)
 80071b6:	613b      	str	r3, [r7, #16]
 80071b8:	e03e      	b.n	8007238 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80071ba:	4b23      	ldr	r3, [pc, #140]	; (8007248 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	f003 030c 	and.w	r3, r3, #12
 80071c2:	2b0c      	cmp	r3, #12
 80071c4:	d136      	bne.n	8007234 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80071c6:	4b20      	ldr	r3, [pc, #128]	; (8007248 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	f003 0303 	and.w	r3, r3, #3
 80071ce:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80071d0:	4b1d      	ldr	r3, [pc, #116]	; (8007248 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	091b      	lsrs	r3, r3, #4
 80071d6:	f003 030f 	and.w	r3, r3, #15
 80071da:	3301      	adds	r3, #1
 80071dc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2b03      	cmp	r3, #3
 80071e2:	d10c      	bne.n	80071fe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80071e4:	4a1a      	ldr	r2, [pc, #104]	; (8007250 <HAL_RCC_GetSysClockFreq+0xc0>)
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80071ec:	4a16      	ldr	r2, [pc, #88]	; (8007248 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071ee:	68d2      	ldr	r2, [r2, #12]
 80071f0:	0a12      	lsrs	r2, r2, #8
 80071f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80071f6:	fb02 f303 	mul.w	r3, r2, r3
 80071fa:	617b      	str	r3, [r7, #20]
      break;
 80071fc:	e00c      	b.n	8007218 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80071fe:	4a13      	ldr	r2, [pc, #76]	; (800724c <HAL_RCC_GetSysClockFreq+0xbc>)
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	fbb2 f3f3 	udiv	r3, r2, r3
 8007206:	4a10      	ldr	r2, [pc, #64]	; (8007248 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007208:	68d2      	ldr	r2, [r2, #12]
 800720a:	0a12      	lsrs	r2, r2, #8
 800720c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007210:	fb02 f303 	mul.w	r3, r2, r3
 8007214:	617b      	str	r3, [r7, #20]
      break;
 8007216:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007218:	4b0b      	ldr	r3, [pc, #44]	; (8007248 <HAL_RCC_GetSysClockFreq+0xb8>)
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	0e5b      	lsrs	r3, r3, #25
 800721e:	f003 0303 	and.w	r3, r3, #3
 8007222:	3301      	adds	r3, #1
 8007224:	005b      	lsls	r3, r3, #1
 8007226:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007228:	697a      	ldr	r2, [r7, #20]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007230:	613b      	str	r3, [r7, #16]
 8007232:	e001      	b.n	8007238 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007234:	2300      	movs	r3, #0
 8007236:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007238:	693b      	ldr	r3, [r7, #16]
}
 800723a:	4618      	mov	r0, r3
 800723c:	371c      	adds	r7, #28
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr
 8007246:	bf00      	nop
 8007248:	40021000 	.word	0x40021000
 800724c:	00f42400 	.word	0x00f42400
 8007250:	007a1200 	.word	0x007a1200

08007254 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007254:	b480      	push	{r7}
 8007256:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007258:	4b03      	ldr	r3, [pc, #12]	; (8007268 <HAL_RCC_GetHCLKFreq+0x14>)
 800725a:	681b      	ldr	r3, [r3, #0]
}
 800725c:	4618      	mov	r0, r3
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr
 8007266:	bf00      	nop
 8007268:	20000004 	.word	0x20000004

0800726c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007270:	f7ff fff0 	bl	8007254 <HAL_RCC_GetHCLKFreq>
 8007274:	4602      	mov	r2, r0
 8007276:	4b06      	ldr	r3, [pc, #24]	; (8007290 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	0a1b      	lsrs	r3, r3, #8
 800727c:	f003 0307 	and.w	r3, r3, #7
 8007280:	4904      	ldr	r1, [pc, #16]	; (8007294 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007282:	5ccb      	ldrb	r3, [r1, r3]
 8007284:	f003 031f 	and.w	r3, r3, #31
 8007288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800728c:	4618      	mov	r0, r3
 800728e:	bd80      	pop	{r7, pc}
 8007290:	40021000 	.word	0x40021000
 8007294:	0800c8d0 	.word	0x0800c8d0

08007298 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800729c:	f7ff ffda 	bl	8007254 <HAL_RCC_GetHCLKFreq>
 80072a0:	4602      	mov	r2, r0
 80072a2:	4b06      	ldr	r3, [pc, #24]	; (80072bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	0adb      	lsrs	r3, r3, #11
 80072a8:	f003 0307 	and.w	r3, r3, #7
 80072ac:	4904      	ldr	r1, [pc, #16]	; (80072c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80072ae:	5ccb      	ldrb	r3, [r1, r3]
 80072b0:	f003 031f 	and.w	r3, r3, #31
 80072b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	40021000 	.word	0x40021000
 80072c0:	0800c8d0 	.word	0x0800c8d0

080072c4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b087      	sub	sp, #28
 80072c8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80072ca:	4b1e      	ldr	r3, [pc, #120]	; (8007344 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	f003 0303 	and.w	r3, r3, #3
 80072d2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80072d4:	4b1b      	ldr	r3, [pc, #108]	; (8007344 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80072d6:	68db      	ldr	r3, [r3, #12]
 80072d8:	091b      	lsrs	r3, r3, #4
 80072da:	f003 030f 	and.w	r3, r3, #15
 80072de:	3301      	adds	r3, #1
 80072e0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	2b03      	cmp	r3, #3
 80072e6:	d10c      	bne.n	8007302 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80072e8:	4a17      	ldr	r2, [pc, #92]	; (8007348 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80072f0:	4a14      	ldr	r2, [pc, #80]	; (8007344 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80072f2:	68d2      	ldr	r2, [r2, #12]
 80072f4:	0a12      	lsrs	r2, r2, #8
 80072f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80072fa:	fb02 f303 	mul.w	r3, r2, r3
 80072fe:	617b      	str	r3, [r7, #20]
    break;
 8007300:	e00c      	b.n	800731c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007302:	4a12      	ldr	r2, [pc, #72]	; (800734c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	fbb2 f3f3 	udiv	r3, r2, r3
 800730a:	4a0e      	ldr	r2, [pc, #56]	; (8007344 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800730c:	68d2      	ldr	r2, [r2, #12]
 800730e:	0a12      	lsrs	r2, r2, #8
 8007310:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007314:	fb02 f303 	mul.w	r3, r2, r3
 8007318:	617b      	str	r3, [r7, #20]
    break;
 800731a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800731c:	4b09      	ldr	r3, [pc, #36]	; (8007344 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	0e5b      	lsrs	r3, r3, #25
 8007322:	f003 0303 	and.w	r3, r3, #3
 8007326:	3301      	adds	r3, #1
 8007328:	005b      	lsls	r3, r3, #1
 800732a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800732c:	697a      	ldr	r2, [r7, #20]
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	fbb2 f3f3 	udiv	r3, r2, r3
 8007334:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007336:	687b      	ldr	r3, [r7, #4]
}
 8007338:	4618      	mov	r0, r3
 800733a:	371c      	adds	r7, #28
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr
 8007344:	40021000 	.word	0x40021000
 8007348:	007a1200 	.word	0x007a1200
 800734c:	00f42400 	.word	0x00f42400

08007350 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b086      	sub	sp, #24
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007358:	2300      	movs	r3, #0
 800735a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800735c:	2300      	movs	r3, #0
 800735e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007368:	2b00      	cmp	r3, #0
 800736a:	f000 8098 	beq.w	800749e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800736e:	2300      	movs	r3, #0
 8007370:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007372:	4b43      	ldr	r3, [pc, #268]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800737a:	2b00      	cmp	r3, #0
 800737c:	d10d      	bne.n	800739a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800737e:	4b40      	ldr	r3, [pc, #256]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007382:	4a3f      	ldr	r2, [pc, #252]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007388:	6593      	str	r3, [r2, #88]	; 0x58
 800738a:	4b3d      	ldr	r3, [pc, #244]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800738c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800738e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007392:	60bb      	str	r3, [r7, #8]
 8007394:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007396:	2301      	movs	r3, #1
 8007398:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800739a:	4b3a      	ldr	r3, [pc, #232]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a39      	ldr	r2, [pc, #228]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80073a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80073a6:	f7fb fb2d 	bl	8002a04 <HAL_GetTick>
 80073aa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073ac:	e009      	b.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073ae:	f7fb fb29 	bl	8002a04 <HAL_GetTick>
 80073b2:	4602      	mov	r2, r0
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	1ad3      	subs	r3, r2, r3
 80073b8:	2b02      	cmp	r3, #2
 80073ba:	d902      	bls.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80073bc:	2303      	movs	r3, #3
 80073be:	74fb      	strb	r3, [r7, #19]
        break;
 80073c0:	e005      	b.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073c2:	4b30      	ldr	r3, [pc, #192]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d0ef      	beq.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80073ce:	7cfb      	ldrb	r3, [r7, #19]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d159      	bne.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80073d4:	4b2a      	ldr	r3, [pc, #168]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073de:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d01e      	beq.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073ea:	697a      	ldr	r2, [r7, #20]
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d019      	beq.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80073f0:	4b23      	ldr	r3, [pc, #140]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073fa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80073fc:	4b20      	ldr	r3, [pc, #128]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007402:	4a1f      	ldr	r2, [pc, #124]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007408:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800740c:	4b1c      	ldr	r3, [pc, #112]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800740e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007412:	4a1b      	ldr	r2, [pc, #108]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007414:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007418:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800741c:	4a18      	ldr	r2, [pc, #96]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	f003 0301 	and.w	r3, r3, #1
 800742a:	2b00      	cmp	r3, #0
 800742c:	d016      	beq.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800742e:	f7fb fae9 	bl	8002a04 <HAL_GetTick>
 8007432:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007434:	e00b      	b.n	800744e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007436:	f7fb fae5 	bl	8002a04 <HAL_GetTick>
 800743a:	4602      	mov	r2, r0
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	1ad3      	subs	r3, r2, r3
 8007440:	f241 3288 	movw	r2, #5000	; 0x1388
 8007444:	4293      	cmp	r3, r2
 8007446:	d902      	bls.n	800744e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007448:	2303      	movs	r3, #3
 800744a:	74fb      	strb	r3, [r7, #19]
            break;
 800744c:	e006      	b.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800744e:	4b0c      	ldr	r3, [pc, #48]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007454:	f003 0302 	and.w	r3, r3, #2
 8007458:	2b00      	cmp	r3, #0
 800745a:	d0ec      	beq.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800745c:	7cfb      	ldrb	r3, [r7, #19]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d10b      	bne.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007462:	4b07      	ldr	r3, [pc, #28]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007468:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007470:	4903      	ldr	r1, [pc, #12]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007472:	4313      	orrs	r3, r2
 8007474:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007478:	e008      	b.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800747a:	7cfb      	ldrb	r3, [r7, #19]
 800747c:	74bb      	strb	r3, [r7, #18]
 800747e:	e005      	b.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007480:	40021000 	.word	0x40021000
 8007484:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007488:	7cfb      	ldrb	r3, [r7, #19]
 800748a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800748c:	7c7b      	ldrb	r3, [r7, #17]
 800748e:	2b01      	cmp	r3, #1
 8007490:	d105      	bne.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007492:	4baf      	ldr	r3, [pc, #700]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007496:	4aae      	ldr	r2, [pc, #696]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007498:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800749c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f003 0301 	and.w	r3, r3, #1
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d00a      	beq.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80074aa:	4ba9      	ldr	r3, [pc, #676]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80074ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074b0:	f023 0203 	bic.w	r2, r3, #3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	49a5      	ldr	r1, [pc, #660]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80074ba:	4313      	orrs	r3, r2
 80074bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f003 0302 	and.w	r3, r3, #2
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d00a      	beq.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80074cc:	4ba0      	ldr	r3, [pc, #640]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80074ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074d2:	f023 020c 	bic.w	r2, r3, #12
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	499d      	ldr	r1, [pc, #628]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80074dc:	4313      	orrs	r3, r2
 80074de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f003 0304 	and.w	r3, r3, #4
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d00a      	beq.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80074ee:	4b98      	ldr	r3, [pc, #608]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80074f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074f4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	4994      	ldr	r1, [pc, #592]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80074fe:	4313      	orrs	r3, r2
 8007500:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f003 0308 	and.w	r3, r3, #8
 800750c:	2b00      	cmp	r3, #0
 800750e:	d00a      	beq.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007510:	4b8f      	ldr	r3, [pc, #572]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007516:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	691b      	ldr	r3, [r3, #16]
 800751e:	498c      	ldr	r1, [pc, #560]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007520:	4313      	orrs	r3, r2
 8007522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f003 0310 	and.w	r3, r3, #16
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00a      	beq.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007532:	4b87      	ldr	r3, [pc, #540]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007538:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	695b      	ldr	r3, [r3, #20]
 8007540:	4983      	ldr	r1, [pc, #524]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007542:	4313      	orrs	r3, r2
 8007544:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 0320 	and.w	r3, r3, #32
 8007550:	2b00      	cmp	r3, #0
 8007552:	d00a      	beq.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007554:	4b7e      	ldr	r3, [pc, #504]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800755a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	699b      	ldr	r3, [r3, #24]
 8007562:	497b      	ldr	r1, [pc, #492]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007564:	4313      	orrs	r3, r2
 8007566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007572:	2b00      	cmp	r3, #0
 8007574:	d00a      	beq.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007576:	4b76      	ldr	r3, [pc, #472]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800757c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	69db      	ldr	r3, [r3, #28]
 8007584:	4972      	ldr	r1, [pc, #456]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007586:	4313      	orrs	r3, r2
 8007588:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00a      	beq.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007598:	4b6d      	ldr	r3, [pc, #436]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800759a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800759e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6a1b      	ldr	r3, [r3, #32]
 80075a6:	496a      	ldr	r1, [pc, #424]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80075a8:	4313      	orrs	r3, r2
 80075aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d00a      	beq.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80075ba:	4b65      	ldr	r3, [pc, #404]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80075bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c8:	4961      	ldr	r1, [pc, #388]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80075ca:	4313      	orrs	r3, r2
 80075cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d00a      	beq.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80075dc:	4b5c      	ldr	r3, [pc, #368]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80075de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80075e2:	f023 0203 	bic.w	r2, r3, #3
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ea:	4959      	ldr	r1, [pc, #356]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80075ec:	4313      	orrs	r3, r2
 80075ee:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d00a      	beq.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80075fe:	4b54      	ldr	r3, [pc, #336]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007604:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800760c:	4950      	ldr	r1, [pc, #320]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800760e:	4313      	orrs	r3, r2
 8007610:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800761c:	2b00      	cmp	r3, #0
 800761e:	d015      	beq.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007620:	4b4b      	ldr	r3, [pc, #300]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007626:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800762e:	4948      	ldr	r1, [pc, #288]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007630:	4313      	orrs	r3, r2
 8007632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800763a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800763e:	d105      	bne.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007640:	4b43      	ldr	r3, [pc, #268]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	4a42      	ldr	r2, [pc, #264]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007646:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800764a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007654:	2b00      	cmp	r3, #0
 8007656:	d015      	beq.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007658:	4b3d      	ldr	r3, [pc, #244]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800765a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800765e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007666:	493a      	ldr	r1, [pc, #232]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007668:	4313      	orrs	r3, r2
 800766a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007672:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007676:	d105      	bne.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007678:	4b35      	ldr	r3, [pc, #212]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800767a:	68db      	ldr	r3, [r3, #12]
 800767c:	4a34      	ldr	r2, [pc, #208]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800767e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007682:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800768c:	2b00      	cmp	r3, #0
 800768e:	d015      	beq.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007690:	4b2f      	ldr	r3, [pc, #188]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007696:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800769e:	492c      	ldr	r1, [pc, #176]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80076a0:	4313      	orrs	r3, r2
 80076a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80076ae:	d105      	bne.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80076b0:	4b27      	ldr	r3, [pc, #156]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80076b2:	68db      	ldr	r3, [r3, #12]
 80076b4:	4a26      	ldr	r2, [pc, #152]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80076b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076ba:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d015      	beq.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80076c8:	4b21      	ldr	r3, [pc, #132]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80076ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076d6:	491e      	ldr	r1, [pc, #120]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80076d8:	4313      	orrs	r3, r2
 80076da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076e6:	d105      	bne.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80076e8:	4b19      	ldr	r3, [pc, #100]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	4a18      	ldr	r2, [pc, #96]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80076ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076f2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d015      	beq.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007700:	4b13      	ldr	r3, [pc, #76]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007706:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770e:	4910      	ldr	r1, [pc, #64]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007710:	4313      	orrs	r3, r2
 8007712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800771a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800771e:	d105      	bne.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007720:	4b0b      	ldr	r3, [pc, #44]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	4a0a      	ldr	r2, [pc, #40]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007726:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800772a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007734:	2b00      	cmp	r3, #0
 8007736:	d018      	beq.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007738:	4b05      	ldr	r3, [pc, #20]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800773a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800773e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007746:	4902      	ldr	r1, [pc, #8]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007748:	4313      	orrs	r3, r2
 800774a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800774e:	e001      	b.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8007750:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007758:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800775c:	d105      	bne.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800775e:	4b21      	ldr	r3, [pc, #132]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	4a20      	ldr	r2, [pc, #128]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8007764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007768:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007772:	2b00      	cmp	r3, #0
 8007774:	d015      	beq.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007776:	4b1b      	ldr	r3, [pc, #108]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8007778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800777c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007784:	4917      	ldr	r1, [pc, #92]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8007786:	4313      	orrs	r3, r2
 8007788:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007794:	d105      	bne.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007796:	4b13      	ldr	r3, [pc, #76]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8007798:	68db      	ldr	r3, [r3, #12]
 800779a:	4a12      	ldr	r2, [pc, #72]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800779c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077a0:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d015      	beq.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80077ae:	4b0d      	ldr	r3, [pc, #52]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80077b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80077b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077bc:	4909      	ldr	r1, [pc, #36]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80077be:	4313      	orrs	r3, r2
 80077c0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80077cc:	d105      	bne.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80077ce:	4b05      	ldr	r3, [pc, #20]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	4a04      	ldr	r2, [pc, #16]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80077d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077d8:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80077da:	7cbb      	ldrb	r3, [r7, #18]
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3718      	adds	r7, #24
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}
 80077e4:	40021000 	.word	0x40021000

080077e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b082      	sub	sp, #8
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d101      	bne.n	80077fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80077f6:	2301      	movs	r3, #1
 80077f8:	e049      	b.n	800788e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007800:	b2db      	uxtb	r3, r3
 8007802:	2b00      	cmp	r3, #0
 8007804:	d106      	bne.n	8007814 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2200      	movs	r2, #0
 800780a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f7fa ff82 	bl	8002718 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2202      	movs	r2, #2
 8007818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	3304      	adds	r3, #4
 8007824:	4619      	mov	r1, r3
 8007826:	4610      	mov	r0, r2
 8007828:	f000 fb68 	bl	8007efc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2201      	movs	r2, #1
 8007830:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2201      	movs	r2, #1
 8007840:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2201      	movs	r2, #1
 8007850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2201      	movs	r2, #1
 8007858:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2201      	movs	r2, #1
 8007860:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2201      	movs	r2, #1
 8007868:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2201      	movs	r2, #1
 8007870:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2201      	movs	r2, #1
 8007878:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2201      	movs	r2, #1
 8007888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800788c:	2300      	movs	r3, #0
}
 800788e:	4618      	mov	r0, r3
 8007890:	3708      	adds	r7, #8
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
	...

08007898 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007898:	b480      	push	{r7}
 800789a:	b085      	sub	sp, #20
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d001      	beq.n	80078b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80078ac:	2301      	movs	r3, #1
 80078ae:	e054      	b.n	800795a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2202      	movs	r2, #2
 80078b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	68da      	ldr	r2, [r3, #12]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f042 0201 	orr.w	r2, r2, #1
 80078c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a26      	ldr	r2, [pc, #152]	; (8007968 <HAL_TIM_Base_Start_IT+0xd0>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d022      	beq.n	8007918 <HAL_TIM_Base_Start_IT+0x80>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078da:	d01d      	beq.n	8007918 <HAL_TIM_Base_Start_IT+0x80>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a22      	ldr	r2, [pc, #136]	; (800796c <HAL_TIM_Base_Start_IT+0xd4>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d018      	beq.n	8007918 <HAL_TIM_Base_Start_IT+0x80>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a21      	ldr	r2, [pc, #132]	; (8007970 <HAL_TIM_Base_Start_IT+0xd8>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d013      	beq.n	8007918 <HAL_TIM_Base_Start_IT+0x80>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a1f      	ldr	r2, [pc, #124]	; (8007974 <HAL_TIM_Base_Start_IT+0xdc>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d00e      	beq.n	8007918 <HAL_TIM_Base_Start_IT+0x80>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a1e      	ldr	r2, [pc, #120]	; (8007978 <HAL_TIM_Base_Start_IT+0xe0>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d009      	beq.n	8007918 <HAL_TIM_Base_Start_IT+0x80>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a1c      	ldr	r2, [pc, #112]	; (800797c <HAL_TIM_Base_Start_IT+0xe4>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d004      	beq.n	8007918 <HAL_TIM_Base_Start_IT+0x80>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a1b      	ldr	r2, [pc, #108]	; (8007980 <HAL_TIM_Base_Start_IT+0xe8>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d115      	bne.n	8007944 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	689a      	ldr	r2, [r3, #8]
 800791e:	4b19      	ldr	r3, [pc, #100]	; (8007984 <HAL_TIM_Base_Start_IT+0xec>)
 8007920:	4013      	ands	r3, r2
 8007922:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2b06      	cmp	r3, #6
 8007928:	d015      	beq.n	8007956 <HAL_TIM_Base_Start_IT+0xbe>
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007930:	d011      	beq.n	8007956 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f042 0201 	orr.w	r2, r2, #1
 8007940:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007942:	e008      	b.n	8007956 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f042 0201 	orr.w	r2, r2, #1
 8007952:	601a      	str	r2, [r3, #0]
 8007954:	e000      	b.n	8007958 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007956:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007958:	2300      	movs	r3, #0
}
 800795a:	4618      	mov	r0, r3
 800795c:	3714      	adds	r7, #20
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr
 8007966:	bf00      	nop
 8007968:	40012c00 	.word	0x40012c00
 800796c:	40000400 	.word	0x40000400
 8007970:	40000800 	.word	0x40000800
 8007974:	40000c00 	.word	0x40000c00
 8007978:	40013400 	.word	0x40013400
 800797c:	40014000 	.word	0x40014000
 8007980:	40015000 	.word	0x40015000
 8007984:	00010007 	.word	0x00010007

08007988 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b082      	sub	sp, #8
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	691b      	ldr	r3, [r3, #16]
 8007996:	f003 0302 	and.w	r3, r3, #2
 800799a:	2b02      	cmp	r3, #2
 800799c:	d122      	bne.n	80079e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	f003 0302 	and.w	r3, r3, #2
 80079a8:	2b02      	cmp	r3, #2
 80079aa:	d11b      	bne.n	80079e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f06f 0202 	mvn.w	r2, #2
 80079b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2201      	movs	r2, #1
 80079ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	699b      	ldr	r3, [r3, #24]
 80079c2:	f003 0303 	and.w	r3, r3, #3
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d003      	beq.n	80079d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 fa78 	bl	8007ec0 <HAL_TIM_IC_CaptureCallback>
 80079d0:	e005      	b.n	80079de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 fa6a 	bl	8007eac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 fa7b 	bl	8007ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	691b      	ldr	r3, [r3, #16]
 80079ea:	f003 0304 	and.w	r3, r3, #4
 80079ee:	2b04      	cmp	r3, #4
 80079f0:	d122      	bne.n	8007a38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	68db      	ldr	r3, [r3, #12]
 80079f8:	f003 0304 	and.w	r3, r3, #4
 80079fc:	2b04      	cmp	r3, #4
 80079fe:	d11b      	bne.n	8007a38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f06f 0204 	mvn.w	r2, #4
 8007a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2202      	movs	r2, #2
 8007a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	699b      	ldr	r3, [r3, #24]
 8007a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d003      	beq.n	8007a26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 fa4e 	bl	8007ec0 <HAL_TIM_IC_CaptureCallback>
 8007a24:	e005      	b.n	8007a32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 fa40 	bl	8007eac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 fa51 	bl	8007ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	691b      	ldr	r3, [r3, #16]
 8007a3e:	f003 0308 	and.w	r3, r3, #8
 8007a42:	2b08      	cmp	r3, #8
 8007a44:	d122      	bne.n	8007a8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	68db      	ldr	r3, [r3, #12]
 8007a4c:	f003 0308 	and.w	r3, r3, #8
 8007a50:	2b08      	cmp	r3, #8
 8007a52:	d11b      	bne.n	8007a8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f06f 0208 	mvn.w	r2, #8
 8007a5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2204      	movs	r2, #4
 8007a62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	69db      	ldr	r3, [r3, #28]
 8007a6a:	f003 0303 	and.w	r3, r3, #3
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d003      	beq.n	8007a7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 fa24 	bl	8007ec0 <HAL_TIM_IC_CaptureCallback>
 8007a78:	e005      	b.n	8007a86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 fa16 	bl	8007eac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 fa27 	bl	8007ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	f003 0310 	and.w	r3, r3, #16
 8007a96:	2b10      	cmp	r3, #16
 8007a98:	d122      	bne.n	8007ae0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	f003 0310 	and.w	r3, r3, #16
 8007aa4:	2b10      	cmp	r3, #16
 8007aa6:	d11b      	bne.n	8007ae0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f06f 0210 	mvn.w	r2, #16
 8007ab0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2208      	movs	r2, #8
 8007ab6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	69db      	ldr	r3, [r3, #28]
 8007abe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d003      	beq.n	8007ace <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 f9fa 	bl	8007ec0 <HAL_TIM_IC_CaptureCallback>
 8007acc:	e005      	b.n	8007ada <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 f9ec 	bl	8007eac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 f9fd 	bl	8007ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	691b      	ldr	r3, [r3, #16]
 8007ae6:	f003 0301 	and.w	r3, r3, #1
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	d10e      	bne.n	8007b0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	68db      	ldr	r3, [r3, #12]
 8007af4:	f003 0301 	and.w	r3, r3, #1
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d107      	bne.n	8007b0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f06f 0201 	mvn.w	r2, #1
 8007b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f7fa fc20 	bl	800234c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	691b      	ldr	r3, [r3, #16]
 8007b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b16:	2b80      	cmp	r3, #128	; 0x80
 8007b18:	d10e      	bne.n	8007b38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b24:	2b80      	cmp	r3, #128	; 0x80
 8007b26:	d107      	bne.n	8007b38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 fbc6 	bl	80082c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	691b      	ldr	r3, [r3, #16]
 8007b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b46:	d10e      	bne.n	8007b66 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	68db      	ldr	r3, [r3, #12]
 8007b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b52:	2b80      	cmp	r3, #128	; 0x80
 8007b54:	d107      	bne.n	8007b66 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007b5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 fbb9 	bl	80082d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	691b      	ldr	r3, [r3, #16]
 8007b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b70:	2b40      	cmp	r3, #64	; 0x40
 8007b72:	d10e      	bne.n	8007b92 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b7e:	2b40      	cmp	r3, #64	; 0x40
 8007b80:	d107      	bne.n	8007b92 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007b8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 f9ab 	bl	8007ee8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	691b      	ldr	r3, [r3, #16]
 8007b98:	f003 0320 	and.w	r3, r3, #32
 8007b9c:	2b20      	cmp	r3, #32
 8007b9e:	d10e      	bne.n	8007bbe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	68db      	ldr	r3, [r3, #12]
 8007ba6:	f003 0320 	and.w	r3, r3, #32
 8007baa:	2b20      	cmp	r3, #32
 8007bac:	d107      	bne.n	8007bbe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f06f 0220 	mvn.w	r2, #32
 8007bb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 fb79 	bl	80082b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	691b      	ldr	r3, [r3, #16]
 8007bc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007bc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bcc:	d10f      	bne.n	8007bee <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	68db      	ldr	r3, [r3, #12]
 8007bd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007bd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bdc:	d107      	bne.n	8007bee <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8007be6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 fb7f 	bl	80082ec <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	691b      	ldr	r3, [r3, #16]
 8007bf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007bf8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007bfc:	d10f      	bne.n	8007c1e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	68db      	ldr	r3, [r3, #12]
 8007c04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c0c:	d107      	bne.n	8007c1e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8007c16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 fb71 	bl	8008300 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	691b      	ldr	r3, [r3, #16]
 8007c24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c2c:	d10f      	bne.n	8007c4e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c3c:	d107      	bne.n	8007c4e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8007c46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 fb63 	bl	8008314 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	691b      	ldr	r3, [r3, #16]
 8007c54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c58:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007c5c:	d10f      	bne.n	8007c7e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c68:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007c6c:	d107      	bne.n	8007c7e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8007c76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 fb55 	bl	8008328 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c7e:	bf00      	nop
 8007c80:	3708      	adds	r7, #8
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
	...

08007c88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d101      	bne.n	8007ca0 <HAL_TIM_ConfigClockSource+0x18>
 8007c9c:	2302      	movs	r3, #2
 8007c9e:	e0f5      	b.n	8007e8c <HAL_TIM_ConfigClockSource+0x204>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2202      	movs	r2, #2
 8007cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8007cbe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007cc2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007cca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	68fa      	ldr	r2, [r7, #12]
 8007cd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a6e      	ldr	r2, [pc, #440]	; (8007e94 <HAL_TIM_ConfigClockSource+0x20c>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	f000 80c1 	beq.w	8007e62 <HAL_TIM_ConfigClockSource+0x1da>
 8007ce0:	4a6c      	ldr	r2, [pc, #432]	; (8007e94 <HAL_TIM_ConfigClockSource+0x20c>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	f200 80c6 	bhi.w	8007e74 <HAL_TIM_ConfigClockSource+0x1ec>
 8007ce8:	4a6b      	ldr	r2, [pc, #428]	; (8007e98 <HAL_TIM_ConfigClockSource+0x210>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	f000 80b9 	beq.w	8007e62 <HAL_TIM_ConfigClockSource+0x1da>
 8007cf0:	4a69      	ldr	r2, [pc, #420]	; (8007e98 <HAL_TIM_ConfigClockSource+0x210>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	f200 80be 	bhi.w	8007e74 <HAL_TIM_ConfigClockSource+0x1ec>
 8007cf8:	4a68      	ldr	r2, [pc, #416]	; (8007e9c <HAL_TIM_ConfigClockSource+0x214>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	f000 80b1 	beq.w	8007e62 <HAL_TIM_ConfigClockSource+0x1da>
 8007d00:	4a66      	ldr	r2, [pc, #408]	; (8007e9c <HAL_TIM_ConfigClockSource+0x214>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	f200 80b6 	bhi.w	8007e74 <HAL_TIM_ConfigClockSource+0x1ec>
 8007d08:	4a65      	ldr	r2, [pc, #404]	; (8007ea0 <HAL_TIM_ConfigClockSource+0x218>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	f000 80a9 	beq.w	8007e62 <HAL_TIM_ConfigClockSource+0x1da>
 8007d10:	4a63      	ldr	r2, [pc, #396]	; (8007ea0 <HAL_TIM_ConfigClockSource+0x218>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	f200 80ae 	bhi.w	8007e74 <HAL_TIM_ConfigClockSource+0x1ec>
 8007d18:	4a62      	ldr	r2, [pc, #392]	; (8007ea4 <HAL_TIM_ConfigClockSource+0x21c>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	f000 80a1 	beq.w	8007e62 <HAL_TIM_ConfigClockSource+0x1da>
 8007d20:	4a60      	ldr	r2, [pc, #384]	; (8007ea4 <HAL_TIM_ConfigClockSource+0x21c>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	f200 80a6 	bhi.w	8007e74 <HAL_TIM_ConfigClockSource+0x1ec>
 8007d28:	4a5f      	ldr	r2, [pc, #380]	; (8007ea8 <HAL_TIM_ConfigClockSource+0x220>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	f000 8099 	beq.w	8007e62 <HAL_TIM_ConfigClockSource+0x1da>
 8007d30:	4a5d      	ldr	r2, [pc, #372]	; (8007ea8 <HAL_TIM_ConfigClockSource+0x220>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	f200 809e 	bhi.w	8007e74 <HAL_TIM_ConfigClockSource+0x1ec>
 8007d38:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007d3c:	f000 8091 	beq.w	8007e62 <HAL_TIM_ConfigClockSource+0x1da>
 8007d40:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007d44:	f200 8096 	bhi.w	8007e74 <HAL_TIM_ConfigClockSource+0x1ec>
 8007d48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d4c:	f000 8089 	beq.w	8007e62 <HAL_TIM_ConfigClockSource+0x1da>
 8007d50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d54:	f200 808e 	bhi.w	8007e74 <HAL_TIM_ConfigClockSource+0x1ec>
 8007d58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d5c:	d03e      	beq.n	8007ddc <HAL_TIM_ConfigClockSource+0x154>
 8007d5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d62:	f200 8087 	bhi.w	8007e74 <HAL_TIM_ConfigClockSource+0x1ec>
 8007d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d6a:	f000 8085 	beq.w	8007e78 <HAL_TIM_ConfigClockSource+0x1f0>
 8007d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d72:	d87f      	bhi.n	8007e74 <HAL_TIM_ConfigClockSource+0x1ec>
 8007d74:	2b70      	cmp	r3, #112	; 0x70
 8007d76:	d01a      	beq.n	8007dae <HAL_TIM_ConfigClockSource+0x126>
 8007d78:	2b70      	cmp	r3, #112	; 0x70
 8007d7a:	d87b      	bhi.n	8007e74 <HAL_TIM_ConfigClockSource+0x1ec>
 8007d7c:	2b60      	cmp	r3, #96	; 0x60
 8007d7e:	d050      	beq.n	8007e22 <HAL_TIM_ConfigClockSource+0x19a>
 8007d80:	2b60      	cmp	r3, #96	; 0x60
 8007d82:	d877      	bhi.n	8007e74 <HAL_TIM_ConfigClockSource+0x1ec>
 8007d84:	2b50      	cmp	r3, #80	; 0x50
 8007d86:	d03c      	beq.n	8007e02 <HAL_TIM_ConfigClockSource+0x17a>
 8007d88:	2b50      	cmp	r3, #80	; 0x50
 8007d8a:	d873      	bhi.n	8007e74 <HAL_TIM_ConfigClockSource+0x1ec>
 8007d8c:	2b40      	cmp	r3, #64	; 0x40
 8007d8e:	d058      	beq.n	8007e42 <HAL_TIM_ConfigClockSource+0x1ba>
 8007d90:	2b40      	cmp	r3, #64	; 0x40
 8007d92:	d86f      	bhi.n	8007e74 <HAL_TIM_ConfigClockSource+0x1ec>
 8007d94:	2b30      	cmp	r3, #48	; 0x30
 8007d96:	d064      	beq.n	8007e62 <HAL_TIM_ConfigClockSource+0x1da>
 8007d98:	2b30      	cmp	r3, #48	; 0x30
 8007d9a:	d86b      	bhi.n	8007e74 <HAL_TIM_ConfigClockSource+0x1ec>
 8007d9c:	2b20      	cmp	r3, #32
 8007d9e:	d060      	beq.n	8007e62 <HAL_TIM_ConfigClockSource+0x1da>
 8007da0:	2b20      	cmp	r3, #32
 8007da2:	d867      	bhi.n	8007e74 <HAL_TIM_ConfigClockSource+0x1ec>
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d05c      	beq.n	8007e62 <HAL_TIM_ConfigClockSource+0x1da>
 8007da8:	2b10      	cmp	r3, #16
 8007daa:	d05a      	beq.n	8007e62 <HAL_TIM_ConfigClockSource+0x1da>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007dac:	e062      	b.n	8007e74 <HAL_TIM_ConfigClockSource+0x1ec>
      TIM_ETR_SetConfig(htim->Instance,
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6818      	ldr	r0, [r3, #0]
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	6899      	ldr	r1, [r3, #8]
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	685a      	ldr	r2, [r3, #4]
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	68db      	ldr	r3, [r3, #12]
 8007dbe:	f000 f9c1 	bl	8008144 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007dd0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	68fa      	ldr	r2, [r7, #12]
 8007dd8:	609a      	str	r2, [r3, #8]
      break;
 8007dda:	e04e      	b.n	8007e7a <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_ETR_SetConfig(htim->Instance,
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6818      	ldr	r0, [r3, #0]
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	6899      	ldr	r1, [r3, #8]
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	685a      	ldr	r2, [r3, #4]
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	68db      	ldr	r3, [r3, #12]
 8007dec:	f000 f9aa 	bl	8008144 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	689a      	ldr	r2, [r3, #8]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007dfe:	609a      	str	r2, [r3, #8]
      break;
 8007e00:	e03b      	b.n	8007e7a <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6818      	ldr	r0, [r3, #0]
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	6859      	ldr	r1, [r3, #4]
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	68db      	ldr	r3, [r3, #12]
 8007e0e:	461a      	mov	r2, r3
 8007e10:	f000 f91c 	bl	800804c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	2150      	movs	r1, #80	; 0x50
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f000 f975 	bl	800810a <TIM_ITRx_SetConfig>
      break;
 8007e20:	e02b      	b.n	8007e7a <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6818      	ldr	r0, [r3, #0]
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	6859      	ldr	r1, [r3, #4]
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	68db      	ldr	r3, [r3, #12]
 8007e2e:	461a      	mov	r2, r3
 8007e30:	f000 f93b 	bl	80080aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	2160      	movs	r1, #96	; 0x60
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f000 f965 	bl	800810a <TIM_ITRx_SetConfig>
      break;
 8007e40:	e01b      	b.n	8007e7a <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6818      	ldr	r0, [r3, #0]
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	6859      	ldr	r1, [r3, #4]
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	68db      	ldr	r3, [r3, #12]
 8007e4e:	461a      	mov	r2, r3
 8007e50:	f000 f8fc 	bl	800804c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	2140      	movs	r1, #64	; 0x40
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f000 f955 	bl	800810a <TIM_ITRx_SetConfig>
      break;
 8007e60:	e00b      	b.n	8007e7a <HAL_TIM_ConfigClockSource+0x1f2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	4610      	mov	r0, r2
 8007e6e:	f000 f94c 	bl	800810a <TIM_ITRx_SetConfig>
        break;
 8007e72:	e002      	b.n	8007e7a <HAL_TIM_ConfigClockSource+0x1f2>
      break;
 8007e74:	bf00      	nop
 8007e76:	e000      	b.n	8007e7a <HAL_TIM_ConfigClockSource+0x1f2>
      break;
 8007e78:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3710      	adds	r7, #16
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}
 8007e94:	00100070 	.word	0x00100070
 8007e98:	00100060 	.word	0x00100060
 8007e9c:	00100050 	.word	0x00100050
 8007ea0:	00100040 	.word	0x00100040
 8007ea4:	00100030 	.word	0x00100030
 8007ea8:	00100020 	.word	0x00100020

08007eac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007eb4:	bf00      	nop
 8007eb6:	370c      	adds	r7, #12
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b083      	sub	sp, #12
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007ec8:	bf00      	nop
 8007eca:	370c      	adds	r7, #12
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr

08007ed4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007edc:	bf00      	nop
 8007ede:	370c      	adds	r7, #12
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr

08007ee8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ef0:	bf00      	nop
 8007ef2:	370c      	adds	r7, #12
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b085      	sub	sp, #20
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	4a46      	ldr	r2, [pc, #280]	; (8008028 <TIM_Base_SetConfig+0x12c>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d017      	beq.n	8007f44 <TIM_Base_SetConfig+0x48>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f1a:	d013      	beq.n	8007f44 <TIM_Base_SetConfig+0x48>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4a43      	ldr	r2, [pc, #268]	; (800802c <TIM_Base_SetConfig+0x130>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d00f      	beq.n	8007f44 <TIM_Base_SetConfig+0x48>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a42      	ldr	r2, [pc, #264]	; (8008030 <TIM_Base_SetConfig+0x134>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d00b      	beq.n	8007f44 <TIM_Base_SetConfig+0x48>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	4a41      	ldr	r2, [pc, #260]	; (8008034 <TIM_Base_SetConfig+0x138>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d007      	beq.n	8007f44 <TIM_Base_SetConfig+0x48>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	4a40      	ldr	r2, [pc, #256]	; (8008038 <TIM_Base_SetConfig+0x13c>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d003      	beq.n	8007f44 <TIM_Base_SetConfig+0x48>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	4a3f      	ldr	r2, [pc, #252]	; (800803c <TIM_Base_SetConfig+0x140>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d108      	bne.n	8007f56 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	68fa      	ldr	r2, [r7, #12]
 8007f52:	4313      	orrs	r3, r2
 8007f54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4a33      	ldr	r2, [pc, #204]	; (8008028 <TIM_Base_SetConfig+0x12c>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d023      	beq.n	8007fa6 <TIM_Base_SetConfig+0xaa>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f64:	d01f      	beq.n	8007fa6 <TIM_Base_SetConfig+0xaa>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	4a30      	ldr	r2, [pc, #192]	; (800802c <TIM_Base_SetConfig+0x130>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d01b      	beq.n	8007fa6 <TIM_Base_SetConfig+0xaa>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	4a2f      	ldr	r2, [pc, #188]	; (8008030 <TIM_Base_SetConfig+0x134>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d017      	beq.n	8007fa6 <TIM_Base_SetConfig+0xaa>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	4a2e      	ldr	r2, [pc, #184]	; (8008034 <TIM_Base_SetConfig+0x138>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d013      	beq.n	8007fa6 <TIM_Base_SetConfig+0xaa>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	4a2d      	ldr	r2, [pc, #180]	; (8008038 <TIM_Base_SetConfig+0x13c>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d00f      	beq.n	8007fa6 <TIM_Base_SetConfig+0xaa>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	4a2d      	ldr	r2, [pc, #180]	; (8008040 <TIM_Base_SetConfig+0x144>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d00b      	beq.n	8007fa6 <TIM_Base_SetConfig+0xaa>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	4a2c      	ldr	r2, [pc, #176]	; (8008044 <TIM_Base_SetConfig+0x148>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d007      	beq.n	8007fa6 <TIM_Base_SetConfig+0xaa>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	4a2b      	ldr	r2, [pc, #172]	; (8008048 <TIM_Base_SetConfig+0x14c>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d003      	beq.n	8007fa6 <TIM_Base_SetConfig+0xaa>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	4a26      	ldr	r2, [pc, #152]	; (800803c <TIM_Base_SetConfig+0x140>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d108      	bne.n	8007fb8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	68db      	ldr	r3, [r3, #12]
 8007fb2:	68fa      	ldr	r2, [r7, #12]
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	695b      	ldr	r3, [r3, #20]
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	68fa      	ldr	r2, [r7, #12]
 8007fca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	689a      	ldr	r2, [r3, #8]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	4a12      	ldr	r2, [pc, #72]	; (8008028 <TIM_Base_SetConfig+0x12c>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d013      	beq.n	800800c <TIM_Base_SetConfig+0x110>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	4a14      	ldr	r2, [pc, #80]	; (8008038 <TIM_Base_SetConfig+0x13c>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d00f      	beq.n	800800c <TIM_Base_SetConfig+0x110>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	4a14      	ldr	r2, [pc, #80]	; (8008040 <TIM_Base_SetConfig+0x144>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d00b      	beq.n	800800c <TIM_Base_SetConfig+0x110>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	4a13      	ldr	r2, [pc, #76]	; (8008044 <TIM_Base_SetConfig+0x148>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d007      	beq.n	800800c <TIM_Base_SetConfig+0x110>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	4a12      	ldr	r2, [pc, #72]	; (8008048 <TIM_Base_SetConfig+0x14c>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d003      	beq.n	800800c <TIM_Base_SetConfig+0x110>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	4a0d      	ldr	r2, [pc, #52]	; (800803c <TIM_Base_SetConfig+0x140>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d103      	bne.n	8008014 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	691a      	ldr	r2, [r3, #16]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2201      	movs	r2, #1
 8008018:	615a      	str	r2, [r3, #20]
}
 800801a:	bf00      	nop
 800801c:	3714      	adds	r7, #20
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr
 8008026:	bf00      	nop
 8008028:	40012c00 	.word	0x40012c00
 800802c:	40000400 	.word	0x40000400
 8008030:	40000800 	.word	0x40000800
 8008034:	40000c00 	.word	0x40000c00
 8008038:	40013400 	.word	0x40013400
 800803c:	40015000 	.word	0x40015000
 8008040:	40014000 	.word	0x40014000
 8008044:	40014400 	.word	0x40014400
 8008048:	40014800 	.word	0x40014800

0800804c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800804c:	b480      	push	{r7}
 800804e:	b087      	sub	sp, #28
 8008050:	af00      	add	r7, sp, #0
 8008052:	60f8      	str	r0, [r7, #12]
 8008054:	60b9      	str	r1, [r7, #8]
 8008056:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	6a1b      	ldr	r3, [r3, #32]
 800805c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	6a1b      	ldr	r3, [r3, #32]
 8008062:	f023 0201 	bic.w	r2, r3, #1
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	699b      	ldr	r3, [r3, #24]
 800806e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008076:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	011b      	lsls	r3, r3, #4
 800807c:	693a      	ldr	r2, [r7, #16]
 800807e:	4313      	orrs	r3, r2
 8008080:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	f023 030a 	bic.w	r3, r3, #10
 8008088:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800808a:	697a      	ldr	r2, [r7, #20]
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	4313      	orrs	r3, r2
 8008090:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	693a      	ldr	r2, [r7, #16]
 8008096:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	697a      	ldr	r2, [r7, #20]
 800809c:	621a      	str	r2, [r3, #32]
}
 800809e:	bf00      	nop
 80080a0:	371c      	adds	r7, #28
 80080a2:	46bd      	mov	sp, r7
 80080a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a8:	4770      	bx	lr

080080aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080aa:	b480      	push	{r7}
 80080ac:	b087      	sub	sp, #28
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	60f8      	str	r0, [r7, #12]
 80080b2:	60b9      	str	r1, [r7, #8]
 80080b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	6a1b      	ldr	r3, [r3, #32]
 80080ba:	f023 0210 	bic.w	r2, r3, #16
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	699b      	ldr	r3, [r3, #24]
 80080c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	6a1b      	ldr	r3, [r3, #32]
 80080cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80080d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	031b      	lsls	r3, r3, #12
 80080da:	697a      	ldr	r2, [r7, #20]
 80080dc:	4313      	orrs	r3, r2
 80080de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80080e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	011b      	lsls	r3, r3, #4
 80080ec:	693a      	ldr	r2, [r7, #16]
 80080ee:	4313      	orrs	r3, r2
 80080f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	697a      	ldr	r2, [r7, #20]
 80080f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	693a      	ldr	r2, [r7, #16]
 80080fc:	621a      	str	r2, [r3, #32]
}
 80080fe:	bf00      	nop
 8008100:	371c      	adds	r7, #28
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr

0800810a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800810a:	b480      	push	{r7}
 800810c:	b085      	sub	sp, #20
 800810e:	af00      	add	r7, sp, #0
 8008110:	6078      	str	r0, [r7, #4]
 8008112:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008120:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008124:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008126:	683a      	ldr	r2, [r7, #0]
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	4313      	orrs	r3, r2
 800812c:	f043 0307 	orr.w	r3, r3, #7
 8008130:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	68fa      	ldr	r2, [r7, #12]
 8008136:	609a      	str	r2, [r3, #8]
}
 8008138:	bf00      	nop
 800813a:	3714      	adds	r7, #20
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr

08008144 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008144:	b480      	push	{r7}
 8008146:	b087      	sub	sp, #28
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	607a      	str	r2, [r7, #4]
 8008150:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800815e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	021a      	lsls	r2, r3, #8
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	431a      	orrs	r2, r3
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	4313      	orrs	r3, r2
 800816c:	697a      	ldr	r2, [r7, #20]
 800816e:	4313      	orrs	r3, r2
 8008170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	697a      	ldr	r2, [r7, #20]
 8008176:	609a      	str	r2, [r3, #8]
}
 8008178:	bf00      	nop
 800817a:	371c      	adds	r7, #28
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr

08008184 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008184:	b480      	push	{r7}
 8008186:	b085      	sub	sp, #20
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008194:	2b01      	cmp	r3, #1
 8008196:	d101      	bne.n	800819c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008198:	2302      	movs	r3, #2
 800819a:	e074      	b.n	8008286 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2202      	movs	r2, #2
 80081a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a34      	ldr	r2, [pc, #208]	; (8008294 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d009      	beq.n	80081da <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a33      	ldr	r2, [pc, #204]	; (8008298 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d004      	beq.n	80081da <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a31      	ldr	r2, [pc, #196]	; (800829c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d108      	bne.n	80081ec <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80081e0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	68fa      	ldr	r2, [r7, #12]
 80081e8:	4313      	orrs	r3, r2
 80081ea:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80081f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	68fa      	ldr	r2, [r7, #12]
 80081fe:	4313      	orrs	r3, r2
 8008200:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	68fa      	ldr	r2, [r7, #12]
 8008208:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a21      	ldr	r2, [pc, #132]	; (8008294 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d022      	beq.n	800825a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800821c:	d01d      	beq.n	800825a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a1f      	ldr	r2, [pc, #124]	; (80082a0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d018      	beq.n	800825a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a1d      	ldr	r2, [pc, #116]	; (80082a4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d013      	beq.n	800825a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a1c      	ldr	r2, [pc, #112]	; (80082a8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d00e      	beq.n	800825a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a15      	ldr	r2, [pc, #84]	; (8008298 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d009      	beq.n	800825a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a18      	ldr	r2, [pc, #96]	; (80082ac <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d004      	beq.n	800825a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a11      	ldr	r2, [pc, #68]	; (800829c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d10c      	bne.n	8008274 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008260:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	68ba      	ldr	r2, [r7, #8]
 8008268:	4313      	orrs	r3, r2
 800826a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	68ba      	ldr	r2, [r7, #8]
 8008272:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2201      	movs	r2, #1
 8008278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008284:	2300      	movs	r3, #0
}
 8008286:	4618      	mov	r0, r3
 8008288:	3714      	adds	r7, #20
 800828a:	46bd      	mov	sp, r7
 800828c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008290:	4770      	bx	lr
 8008292:	bf00      	nop
 8008294:	40012c00 	.word	0x40012c00
 8008298:	40013400 	.word	0x40013400
 800829c:	40015000 	.word	0x40015000
 80082a0:	40000400 	.word	0x40000400
 80082a4:	40000800 	.word	0x40000800
 80082a8:	40000c00 	.word	0x40000c00
 80082ac:	40014000 	.word	0x40014000

080082b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80082b8:	bf00      	nop
 80082ba:	370c      	adds	r7, #12
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr

080082c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80082cc:	bf00      	nop
 80082ce:	370c      	adds	r7, #12
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80082e0:	bf00      	nop
 80082e2:	370c      	adds	r7, #12
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr

080082ec <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b083      	sub	sp, #12
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80082f4:	bf00      	nop
 80082f6:	370c      	adds	r7, #12
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr

08008300 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008300:	b480      	push	{r7}
 8008302:	b083      	sub	sp, #12
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008308:	bf00      	nop
 800830a:	370c      	adds	r7, #12
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr

08008314 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008314:	b480      	push	{r7}
 8008316:	b083      	sub	sp, #12
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800831c:	bf00      	nop
 800831e:	370c      	adds	r7, #12
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr

08008328 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008328:	b480      	push	{r7}
 800832a:	b083      	sub	sp, #12
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008330:	bf00      	nop
 8008332:	370c      	adds	r7, #12
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr

0800833c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b082      	sub	sp, #8
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d101      	bne.n	800834e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800834a:	2301      	movs	r3, #1
 800834c:	e042      	b.n	80083d4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008354:	2b00      	cmp	r3, #0
 8008356:	d106      	bne.n	8008366 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2200      	movs	r2, #0
 800835c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f7fa fa49 	bl	80027f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2224      	movs	r2, #36	; 0x24
 800836a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	681a      	ldr	r2, [r3, #0]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f022 0201 	bic.w	r2, r2, #1
 800837c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 fb0a 	bl	8008998 <UART_SetConfig>
 8008384:	4603      	mov	r3, r0
 8008386:	2b01      	cmp	r3, #1
 8008388:	d101      	bne.n	800838e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800838a:	2301      	movs	r3, #1
 800838c:	e022      	b.n	80083d4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008392:	2b00      	cmp	r3, #0
 8008394:	d002      	beq.n	800839c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 fdc8 	bl	8008f2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	685a      	ldr	r2, [r3, #4]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80083aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	689a      	ldr	r2, [r3, #8]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80083ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	681a      	ldr	r2, [r3, #0]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f042 0201 	orr.w	r2, r2, #1
 80083ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 fe4f 	bl	8009070 <UART_CheckIdleState>
 80083d2:	4603      	mov	r3, r0
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3708      	adds	r7, #8
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b084      	sub	sp, #16
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	60f8      	str	r0, [r7, #12]
 80083e4:	60b9      	str	r1, [r7, #8]
 80083e6:	4613      	mov	r3, r2
 80083e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083f0:	2b20      	cmp	r3, #32
 80083f2:	d168      	bne.n	80084c6 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d002      	beq.n	8008400 <HAL_UART_Transmit_DMA+0x24>
 80083fa:	88fb      	ldrh	r3, [r7, #6]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d101      	bne.n	8008404 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008400:	2301      	movs	r3, #1
 8008402:	e061      	b.n	80084c8 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800840a:	2b01      	cmp	r3, #1
 800840c:	d101      	bne.n	8008412 <HAL_UART_Transmit_DMA+0x36>
 800840e:	2302      	movs	r3, #2
 8008410:	e05a      	b.n	80084c8 <HAL_UART_Transmit_DMA+0xec>
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2201      	movs	r2, #1
 8008416:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	68ba      	ldr	r2, [r7, #8]
 800841e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	88fa      	ldrh	r2, [r7, #6]
 8008424:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	88fa      	ldrh	r2, [r7, #6]
 800842c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2200      	movs	r2, #0
 8008434:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2221      	movs	r2, #33	; 0x21
 800843c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008444:	2b00      	cmp	r3, #0
 8008446:	d02c      	beq.n	80084a2 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800844c:	4a20      	ldr	r2, [pc, #128]	; (80084d0 <HAL_UART_Transmit_DMA+0xf4>)
 800844e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008454:	4a1f      	ldr	r2, [pc, #124]	; (80084d4 <HAL_UART_Transmit_DMA+0xf8>)
 8008456:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800845c:	4a1e      	ldr	r2, [pc, #120]	; (80084d8 <HAL_UART_Transmit_DMA+0xfc>)
 800845e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008464:	2200      	movs	r2, #0
 8008466:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008470:	4619      	mov	r1, r3
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	3328      	adds	r3, #40	; 0x28
 8008478:	461a      	mov	r2, r3
 800847a:	88fb      	ldrh	r3, [r7, #6]
 800847c:	f7fc f8ec 	bl	8004658 <HAL_DMA_Start_IT>
 8008480:	4603      	mov	r3, r0
 8008482:	2b00      	cmp	r3, #0
 8008484:	d00d      	beq.n	80084a2 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2210      	movs	r2, #16
 800848a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2200      	movs	r2, #0
 8008492:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2220      	movs	r2, #32
 800849a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	e012      	b.n	80084c8 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	2240      	movs	r2, #64	; 0x40
 80084a8:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2200      	movs	r2, #0
 80084ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	689a      	ldr	r2, [r3, #8]
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80084c0:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80084c2:	2300      	movs	r3, #0
 80084c4:	e000      	b.n	80084c8 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 80084c6:	2302      	movs	r3, #2
  }
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3710      	adds	r7, #16
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}
 80084d0:	080092a7 	.word	0x080092a7
 80084d4:	080092fb 	.word	0x080092fb
 80084d8:	08009317 	.word	0x08009317

080084dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b088      	sub	sp, #32
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	69db      	ldr	r3, [r3, #28]
 80084ea:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80084fc:	69fa      	ldr	r2, [r7, #28]
 80084fe:	f640 030f 	movw	r3, #2063	; 0x80f
 8008502:	4013      	ands	r3, r2
 8008504:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d118      	bne.n	800853e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800850c:	69fb      	ldr	r3, [r7, #28]
 800850e:	f003 0320 	and.w	r3, r3, #32
 8008512:	2b00      	cmp	r3, #0
 8008514:	d013      	beq.n	800853e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008516:	69bb      	ldr	r3, [r7, #24]
 8008518:	f003 0320 	and.w	r3, r3, #32
 800851c:	2b00      	cmp	r3, #0
 800851e:	d104      	bne.n	800852a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008526:	2b00      	cmp	r3, #0
 8008528:	d009      	beq.n	800853e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800852e:	2b00      	cmp	r3, #0
 8008530:	f000 81fb 	beq.w	800892a <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	4798      	blx	r3
      }
      return;
 800853c:	e1f5      	b.n	800892a <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	2b00      	cmp	r3, #0
 8008542:	f000 80ef 	beq.w	8008724 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008546:	697a      	ldr	r2, [r7, #20]
 8008548:	4b73      	ldr	r3, [pc, #460]	; (8008718 <HAL_UART_IRQHandler+0x23c>)
 800854a:	4013      	ands	r3, r2
 800854c:	2b00      	cmp	r3, #0
 800854e:	d105      	bne.n	800855c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008550:	69ba      	ldr	r2, [r7, #24]
 8008552:	4b72      	ldr	r3, [pc, #456]	; (800871c <HAL_UART_IRQHandler+0x240>)
 8008554:	4013      	ands	r3, r2
 8008556:	2b00      	cmp	r3, #0
 8008558:	f000 80e4 	beq.w	8008724 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800855c:	69fb      	ldr	r3, [r7, #28]
 800855e:	f003 0301 	and.w	r3, r3, #1
 8008562:	2b00      	cmp	r3, #0
 8008564:	d010      	beq.n	8008588 <HAL_UART_IRQHandler+0xac>
 8008566:	69bb      	ldr	r3, [r7, #24]
 8008568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800856c:	2b00      	cmp	r3, #0
 800856e:	d00b      	beq.n	8008588 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2201      	movs	r2, #1
 8008576:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800857e:	f043 0201 	orr.w	r2, r3, #1
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008588:	69fb      	ldr	r3, [r7, #28]
 800858a:	f003 0302 	and.w	r3, r3, #2
 800858e:	2b00      	cmp	r3, #0
 8008590:	d010      	beq.n	80085b4 <HAL_UART_IRQHandler+0xd8>
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	f003 0301 	and.w	r3, r3, #1
 8008598:	2b00      	cmp	r3, #0
 800859a:	d00b      	beq.n	80085b4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2202      	movs	r2, #2
 80085a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085aa:	f043 0204 	orr.w	r2, r3, #4
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085b4:	69fb      	ldr	r3, [r7, #28]
 80085b6:	f003 0304 	and.w	r3, r3, #4
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d010      	beq.n	80085e0 <HAL_UART_IRQHandler+0x104>
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	f003 0301 	and.w	r3, r3, #1
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d00b      	beq.n	80085e0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	2204      	movs	r2, #4
 80085ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085d6:	f043 0202 	orr.w	r2, r3, #2
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80085e0:	69fb      	ldr	r3, [r7, #28]
 80085e2:	f003 0308 	and.w	r3, r3, #8
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d015      	beq.n	8008616 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	f003 0320 	and.w	r3, r3, #32
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d104      	bne.n	80085fe <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80085f4:	697a      	ldr	r2, [r7, #20]
 80085f6:	4b48      	ldr	r3, [pc, #288]	; (8008718 <HAL_UART_IRQHandler+0x23c>)
 80085f8:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d00b      	beq.n	8008616 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	2208      	movs	r2, #8
 8008604:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800860c:	f043 0208 	orr.w	r2, r3, #8
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008616:	69fb      	ldr	r3, [r7, #28]
 8008618:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800861c:	2b00      	cmp	r3, #0
 800861e:	d011      	beq.n	8008644 <HAL_UART_IRQHandler+0x168>
 8008620:	69bb      	ldr	r3, [r7, #24]
 8008622:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008626:	2b00      	cmp	r3, #0
 8008628:	d00c      	beq.n	8008644 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008632:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800863a:	f043 0220 	orr.w	r2, r3, #32
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800864a:	2b00      	cmp	r3, #0
 800864c:	f000 816f 	beq.w	800892e <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008650:	69fb      	ldr	r3, [r7, #28]
 8008652:	f003 0320 	and.w	r3, r3, #32
 8008656:	2b00      	cmp	r3, #0
 8008658:	d011      	beq.n	800867e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800865a:	69bb      	ldr	r3, [r7, #24]
 800865c:	f003 0320 	and.w	r3, r3, #32
 8008660:	2b00      	cmp	r3, #0
 8008662:	d104      	bne.n	800866e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800866a:	2b00      	cmp	r3, #0
 800866c:	d007      	beq.n	800867e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008672:	2b00      	cmp	r3, #0
 8008674:	d003      	beq.n	800867e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008684:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	689b      	ldr	r3, [r3, #8]
 800868c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008690:	2b40      	cmp	r3, #64	; 0x40
 8008692:	d004      	beq.n	800869e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800869a:	2b00      	cmp	r3, #0
 800869c:	d031      	beq.n	8008702 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 fdcf 	bl	8009242 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	689b      	ldr	r3, [r3, #8]
 80086aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086ae:	2b40      	cmp	r3, #64	; 0x40
 80086b0:	d123      	bne.n	80086fa <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	689a      	ldr	r2, [r3, #8]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086c0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d013      	beq.n	80086f2 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086ce:	4a14      	ldr	r2, [pc, #80]	; (8008720 <HAL_UART_IRQHandler+0x244>)
 80086d0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086d6:	4618      	mov	r0, r3
 80086d8:	f7fc f892 	bl	8004800 <HAL_DMA_Abort_IT>
 80086dc:	4603      	mov	r3, r0
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d017      	beq.n	8008712 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80086ec:	4610      	mov	r0, r2
 80086ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086f0:	e00f      	b.n	8008712 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 f93a 	bl	800896c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086f8:	e00b      	b.n	8008712 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 f936 	bl	800896c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008700:	e007      	b.n	8008712 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 f932 	bl	800896c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2200      	movs	r2, #0
 800870c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8008710:	e10d      	b.n	800892e <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008712:	bf00      	nop
    return;
 8008714:	e10b      	b.n	800892e <HAL_UART_IRQHandler+0x452>
 8008716:	bf00      	nop
 8008718:	10000001 	.word	0x10000001
 800871c:	04000120 	.word	0x04000120
 8008720:	08009397 	.word	0x08009397

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008728:	2b01      	cmp	r3, #1
 800872a:	f040 80ab 	bne.w	8008884 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800872e:	69fb      	ldr	r3, [r7, #28]
 8008730:	f003 0310 	and.w	r3, r3, #16
 8008734:	2b00      	cmp	r3, #0
 8008736:	f000 80a5 	beq.w	8008884 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800873a:	69bb      	ldr	r3, [r7, #24]
 800873c:	f003 0310 	and.w	r3, r3, #16
 8008740:	2b00      	cmp	r3, #0
 8008742:	f000 809f 	beq.w	8008884 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	2210      	movs	r2, #16
 800874c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	689b      	ldr	r3, [r3, #8]
 8008754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008758:	2b40      	cmp	r3, #64	; 0x40
 800875a:	d155      	bne.n	8008808 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8008766:	893b      	ldrh	r3, [r7, #8]
 8008768:	2b00      	cmp	r3, #0
 800876a:	f000 80e2 	beq.w	8008932 <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008774:	893a      	ldrh	r2, [r7, #8]
 8008776:	429a      	cmp	r2, r3
 8008778:	f080 80db 	bcs.w	8008932 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	893a      	ldrh	r2, [r7, #8]
 8008780:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f003 0320 	and.w	r3, r3, #32
 8008790:	2b00      	cmp	r3, #0
 8008792:	d12b      	bne.n	80087ec <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	681a      	ldr	r2, [r3, #0]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80087a2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	689a      	ldr	r2, [r3, #8]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f022 0201 	bic.w	r2, r2, #1
 80087b2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	689a      	ldr	r2, [r3, #8]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087c2:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2220      	movs	r2, #32
 80087c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2200      	movs	r2, #0
 80087d0:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f022 0210 	bic.w	r2, r2, #16
 80087e0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087e6:	4618      	mov	r0, r3
 80087e8:	f7fb ffb1 	bl	800474e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	1ad3      	subs	r3, r2, r3
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	4619      	mov	r1, r3
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 f8bd 	bl	8008980 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008806:	e094      	b.n	8008932 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008814:	b29b      	uxth	r3, r3
 8008816:	1ad3      	subs	r3, r2, r3
 8008818:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008820:	b29b      	uxth	r3, r3
 8008822:	2b00      	cmp	r3, #0
 8008824:	f000 8087 	beq.w	8008936 <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 8008828:	897b      	ldrh	r3, [r7, #10]
 800882a:	2b00      	cmp	r3, #0
 800882c:	f000 8083 	beq.w	8008936 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800883e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	689b      	ldr	r3, [r3, #8]
 8008846:	687a      	ldr	r2, [r7, #4]
 8008848:	6812      	ldr	r2, [r2, #0]
 800884a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800884e:	f023 0301 	bic.w	r3, r3, #1
 8008852:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2220      	movs	r2, #32
 8008858:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2200      	movs	r2, #0
 8008860:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f022 0210 	bic.w	r2, r2, #16
 8008876:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008878:	897b      	ldrh	r3, [r7, #10]
 800887a:	4619      	mov	r1, r3
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 f87f 	bl	8008980 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008882:	e058      	b.n	8008936 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008884:	69fb      	ldr	r3, [r7, #28]
 8008886:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800888a:	2b00      	cmp	r3, #0
 800888c:	d00d      	beq.n	80088aa <HAL_UART_IRQHandler+0x3ce>
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008894:	2b00      	cmp	r3, #0
 8008896:	d008      	beq.n	80088aa <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80088a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 fda7 	bl	80093f6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80088a8:	e048      	b.n	800893c <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80088aa:	69fb      	ldr	r3, [r7, #28]
 80088ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d012      	beq.n	80088da <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80088b4:	69bb      	ldr	r3, [r7, #24]
 80088b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d104      	bne.n	80088c8 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d008      	beq.n	80088da <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d034      	beq.n	800893a <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	4798      	blx	r3
    }
    return;
 80088d8:	e02f      	b.n	800893a <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80088da:	69fb      	ldr	r3, [r7, #28]
 80088dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d008      	beq.n	80088f6 <HAL_UART_IRQHandler+0x41a>
 80088e4:	69bb      	ldr	r3, [r7, #24]
 80088e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d003      	beq.n	80088f6 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 fd67 	bl	80093c2 <UART_EndTransmit_IT>
    return;
 80088f4:	e022      	b.n	800893c <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80088f6:	69fb      	ldr	r3, [r7, #28]
 80088f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d008      	beq.n	8008912 <HAL_UART_IRQHandler+0x436>
 8008900:	69bb      	ldr	r3, [r7, #24]
 8008902:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008906:	2b00      	cmp	r3, #0
 8008908:	d003      	beq.n	8008912 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 fd87 	bl	800941e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008910:	e014      	b.n	800893c <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008912:	69fb      	ldr	r3, [r7, #28]
 8008914:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008918:	2b00      	cmp	r3, #0
 800891a:	d00f      	beq.n	800893c <HAL_UART_IRQHandler+0x460>
 800891c:	69bb      	ldr	r3, [r7, #24]
 800891e:	2b00      	cmp	r3, #0
 8008920:	da0c      	bge.n	800893c <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f000 fd71 	bl	800940a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008928:	e008      	b.n	800893c <HAL_UART_IRQHandler+0x460>
      return;
 800892a:	bf00      	nop
 800892c:	e006      	b.n	800893c <HAL_UART_IRQHandler+0x460>
    return;
 800892e:	bf00      	nop
 8008930:	e004      	b.n	800893c <HAL_UART_IRQHandler+0x460>
      return;
 8008932:	bf00      	nop
 8008934:	e002      	b.n	800893c <HAL_UART_IRQHandler+0x460>
      return;
 8008936:	bf00      	nop
 8008938:	e000      	b.n	800893c <HAL_UART_IRQHandler+0x460>
    return;
 800893a:	bf00      	nop
  }
}
 800893c:	3720      	adds	r7, #32
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
 8008942:	bf00      	nop

08008944 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008944:	b480      	push	{r7}
 8008946:	b083      	sub	sp, #12
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800894c:	bf00      	nop
 800894e:	370c      	adds	r7, #12
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr

08008958 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008958:	b480      	push	{r7}
 800895a:	b083      	sub	sp, #12
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008960:	bf00      	nop
 8008962:	370c      	adds	r7, #12
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr

0800896c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800896c:	b480      	push	{r7}
 800896e:	b083      	sub	sp, #12
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008974:	bf00      	nop
 8008976:	370c      	adds	r7, #12
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr

08008980 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008980:	b480      	push	{r7}
 8008982:	b083      	sub	sp, #12
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
 8008988:	460b      	mov	r3, r1
 800898a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800898c:	bf00      	nop
 800898e:	370c      	adds	r7, #12
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008998:	b5b0      	push	{r4, r5, r7, lr}
 800899a:	b088      	sub	sp, #32
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80089a0:	2300      	movs	r3, #0
 80089a2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	689a      	ldr	r2, [r3, #8]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	691b      	ldr	r3, [r3, #16]
 80089ac:	431a      	orrs	r2, r3
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	695b      	ldr	r3, [r3, #20]
 80089b2:	431a      	orrs	r2, r3
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	69db      	ldr	r3, [r3, #28]
 80089b8:	4313      	orrs	r3, r2
 80089ba:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	681a      	ldr	r2, [r3, #0]
 80089c2:	4bb1      	ldr	r3, [pc, #708]	; (8008c88 <UART_SetConfig+0x2f0>)
 80089c4:	4013      	ands	r3, r2
 80089c6:	687a      	ldr	r2, [r7, #4]
 80089c8:	6812      	ldr	r2, [r2, #0]
 80089ca:	69f9      	ldr	r1, [r7, #28]
 80089cc:	430b      	orrs	r3, r1
 80089ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	68da      	ldr	r2, [r3, #12]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	430a      	orrs	r2, r1
 80089e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	699b      	ldr	r3, [r3, #24]
 80089ea:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4aa6      	ldr	r2, [pc, #664]	; (8008c8c <UART_SetConfig+0x2f4>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d004      	beq.n	8008a00 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6a1b      	ldr	r3, [r3, #32]
 80089fa:	69fa      	ldr	r2, [r7, #28]
 80089fc:	4313      	orrs	r3, r2
 80089fe:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	689b      	ldr	r3, [r3, #8]
 8008a06:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008a0a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008a0e:	687a      	ldr	r2, [r7, #4]
 8008a10:	6812      	ldr	r2, [r2, #0]
 8008a12:	69f9      	ldr	r1, [r7, #28]
 8008a14:	430b      	orrs	r3, r1
 8008a16:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a1e:	f023 010f 	bic.w	r1, r3, #15
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	430a      	orrs	r2, r1
 8008a2c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4a97      	ldr	r2, [pc, #604]	; (8008c90 <UART_SetConfig+0x2f8>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d120      	bne.n	8008a7a <UART_SetConfig+0xe2>
 8008a38:	4b96      	ldr	r3, [pc, #600]	; (8008c94 <UART_SetConfig+0x2fc>)
 8008a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a3e:	f003 0303 	and.w	r3, r3, #3
 8008a42:	2b03      	cmp	r3, #3
 8008a44:	d816      	bhi.n	8008a74 <UART_SetConfig+0xdc>
 8008a46:	a201      	add	r2, pc, #4	; (adr r2, 8008a4c <UART_SetConfig+0xb4>)
 8008a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a4c:	08008a5d 	.word	0x08008a5d
 8008a50:	08008a69 	.word	0x08008a69
 8008a54:	08008a63 	.word	0x08008a63
 8008a58:	08008a6f 	.word	0x08008a6f
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	76fb      	strb	r3, [r7, #27]
 8008a60:	e0e7      	b.n	8008c32 <UART_SetConfig+0x29a>
 8008a62:	2302      	movs	r3, #2
 8008a64:	76fb      	strb	r3, [r7, #27]
 8008a66:	e0e4      	b.n	8008c32 <UART_SetConfig+0x29a>
 8008a68:	2304      	movs	r3, #4
 8008a6a:	76fb      	strb	r3, [r7, #27]
 8008a6c:	e0e1      	b.n	8008c32 <UART_SetConfig+0x29a>
 8008a6e:	2308      	movs	r3, #8
 8008a70:	76fb      	strb	r3, [r7, #27]
 8008a72:	e0de      	b.n	8008c32 <UART_SetConfig+0x29a>
 8008a74:	2310      	movs	r3, #16
 8008a76:	76fb      	strb	r3, [r7, #27]
 8008a78:	e0db      	b.n	8008c32 <UART_SetConfig+0x29a>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a86      	ldr	r2, [pc, #536]	; (8008c98 <UART_SetConfig+0x300>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d132      	bne.n	8008aea <UART_SetConfig+0x152>
 8008a84:	4b83      	ldr	r3, [pc, #524]	; (8008c94 <UART_SetConfig+0x2fc>)
 8008a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a8a:	f003 030c 	and.w	r3, r3, #12
 8008a8e:	2b0c      	cmp	r3, #12
 8008a90:	d828      	bhi.n	8008ae4 <UART_SetConfig+0x14c>
 8008a92:	a201      	add	r2, pc, #4	; (adr r2, 8008a98 <UART_SetConfig+0x100>)
 8008a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a98:	08008acd 	.word	0x08008acd
 8008a9c:	08008ae5 	.word	0x08008ae5
 8008aa0:	08008ae5 	.word	0x08008ae5
 8008aa4:	08008ae5 	.word	0x08008ae5
 8008aa8:	08008ad9 	.word	0x08008ad9
 8008aac:	08008ae5 	.word	0x08008ae5
 8008ab0:	08008ae5 	.word	0x08008ae5
 8008ab4:	08008ae5 	.word	0x08008ae5
 8008ab8:	08008ad3 	.word	0x08008ad3
 8008abc:	08008ae5 	.word	0x08008ae5
 8008ac0:	08008ae5 	.word	0x08008ae5
 8008ac4:	08008ae5 	.word	0x08008ae5
 8008ac8:	08008adf 	.word	0x08008adf
 8008acc:	2300      	movs	r3, #0
 8008ace:	76fb      	strb	r3, [r7, #27]
 8008ad0:	e0af      	b.n	8008c32 <UART_SetConfig+0x29a>
 8008ad2:	2302      	movs	r3, #2
 8008ad4:	76fb      	strb	r3, [r7, #27]
 8008ad6:	e0ac      	b.n	8008c32 <UART_SetConfig+0x29a>
 8008ad8:	2304      	movs	r3, #4
 8008ada:	76fb      	strb	r3, [r7, #27]
 8008adc:	e0a9      	b.n	8008c32 <UART_SetConfig+0x29a>
 8008ade:	2308      	movs	r3, #8
 8008ae0:	76fb      	strb	r3, [r7, #27]
 8008ae2:	e0a6      	b.n	8008c32 <UART_SetConfig+0x29a>
 8008ae4:	2310      	movs	r3, #16
 8008ae6:	76fb      	strb	r3, [r7, #27]
 8008ae8:	e0a3      	b.n	8008c32 <UART_SetConfig+0x29a>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a6b      	ldr	r2, [pc, #428]	; (8008c9c <UART_SetConfig+0x304>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d120      	bne.n	8008b36 <UART_SetConfig+0x19e>
 8008af4:	4b67      	ldr	r3, [pc, #412]	; (8008c94 <UART_SetConfig+0x2fc>)
 8008af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008afa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008afe:	2b30      	cmp	r3, #48	; 0x30
 8008b00:	d013      	beq.n	8008b2a <UART_SetConfig+0x192>
 8008b02:	2b30      	cmp	r3, #48	; 0x30
 8008b04:	d814      	bhi.n	8008b30 <UART_SetConfig+0x198>
 8008b06:	2b20      	cmp	r3, #32
 8008b08:	d009      	beq.n	8008b1e <UART_SetConfig+0x186>
 8008b0a:	2b20      	cmp	r3, #32
 8008b0c:	d810      	bhi.n	8008b30 <UART_SetConfig+0x198>
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d002      	beq.n	8008b18 <UART_SetConfig+0x180>
 8008b12:	2b10      	cmp	r3, #16
 8008b14:	d006      	beq.n	8008b24 <UART_SetConfig+0x18c>
 8008b16:	e00b      	b.n	8008b30 <UART_SetConfig+0x198>
 8008b18:	2300      	movs	r3, #0
 8008b1a:	76fb      	strb	r3, [r7, #27]
 8008b1c:	e089      	b.n	8008c32 <UART_SetConfig+0x29a>
 8008b1e:	2302      	movs	r3, #2
 8008b20:	76fb      	strb	r3, [r7, #27]
 8008b22:	e086      	b.n	8008c32 <UART_SetConfig+0x29a>
 8008b24:	2304      	movs	r3, #4
 8008b26:	76fb      	strb	r3, [r7, #27]
 8008b28:	e083      	b.n	8008c32 <UART_SetConfig+0x29a>
 8008b2a:	2308      	movs	r3, #8
 8008b2c:	76fb      	strb	r3, [r7, #27]
 8008b2e:	e080      	b.n	8008c32 <UART_SetConfig+0x29a>
 8008b30:	2310      	movs	r3, #16
 8008b32:	76fb      	strb	r3, [r7, #27]
 8008b34:	e07d      	b.n	8008c32 <UART_SetConfig+0x29a>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a59      	ldr	r2, [pc, #356]	; (8008ca0 <UART_SetConfig+0x308>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d120      	bne.n	8008b82 <UART_SetConfig+0x1ea>
 8008b40:	4b54      	ldr	r3, [pc, #336]	; (8008c94 <UART_SetConfig+0x2fc>)
 8008b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b46:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008b4a:	2bc0      	cmp	r3, #192	; 0xc0
 8008b4c:	d013      	beq.n	8008b76 <UART_SetConfig+0x1de>
 8008b4e:	2bc0      	cmp	r3, #192	; 0xc0
 8008b50:	d814      	bhi.n	8008b7c <UART_SetConfig+0x1e4>
 8008b52:	2b80      	cmp	r3, #128	; 0x80
 8008b54:	d009      	beq.n	8008b6a <UART_SetConfig+0x1d2>
 8008b56:	2b80      	cmp	r3, #128	; 0x80
 8008b58:	d810      	bhi.n	8008b7c <UART_SetConfig+0x1e4>
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d002      	beq.n	8008b64 <UART_SetConfig+0x1cc>
 8008b5e:	2b40      	cmp	r3, #64	; 0x40
 8008b60:	d006      	beq.n	8008b70 <UART_SetConfig+0x1d8>
 8008b62:	e00b      	b.n	8008b7c <UART_SetConfig+0x1e4>
 8008b64:	2300      	movs	r3, #0
 8008b66:	76fb      	strb	r3, [r7, #27]
 8008b68:	e063      	b.n	8008c32 <UART_SetConfig+0x29a>
 8008b6a:	2302      	movs	r3, #2
 8008b6c:	76fb      	strb	r3, [r7, #27]
 8008b6e:	e060      	b.n	8008c32 <UART_SetConfig+0x29a>
 8008b70:	2304      	movs	r3, #4
 8008b72:	76fb      	strb	r3, [r7, #27]
 8008b74:	e05d      	b.n	8008c32 <UART_SetConfig+0x29a>
 8008b76:	2308      	movs	r3, #8
 8008b78:	76fb      	strb	r3, [r7, #27]
 8008b7a:	e05a      	b.n	8008c32 <UART_SetConfig+0x29a>
 8008b7c:	2310      	movs	r3, #16
 8008b7e:	76fb      	strb	r3, [r7, #27]
 8008b80:	e057      	b.n	8008c32 <UART_SetConfig+0x29a>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a47      	ldr	r2, [pc, #284]	; (8008ca4 <UART_SetConfig+0x30c>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d125      	bne.n	8008bd8 <UART_SetConfig+0x240>
 8008b8c:	4b41      	ldr	r3, [pc, #260]	; (8008c94 <UART_SetConfig+0x2fc>)
 8008b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b9a:	d017      	beq.n	8008bcc <UART_SetConfig+0x234>
 8008b9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ba0:	d817      	bhi.n	8008bd2 <UART_SetConfig+0x23a>
 8008ba2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ba6:	d00b      	beq.n	8008bc0 <UART_SetConfig+0x228>
 8008ba8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bac:	d811      	bhi.n	8008bd2 <UART_SetConfig+0x23a>
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d003      	beq.n	8008bba <UART_SetConfig+0x222>
 8008bb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bb6:	d006      	beq.n	8008bc6 <UART_SetConfig+0x22e>
 8008bb8:	e00b      	b.n	8008bd2 <UART_SetConfig+0x23a>
 8008bba:	2300      	movs	r3, #0
 8008bbc:	76fb      	strb	r3, [r7, #27]
 8008bbe:	e038      	b.n	8008c32 <UART_SetConfig+0x29a>
 8008bc0:	2302      	movs	r3, #2
 8008bc2:	76fb      	strb	r3, [r7, #27]
 8008bc4:	e035      	b.n	8008c32 <UART_SetConfig+0x29a>
 8008bc6:	2304      	movs	r3, #4
 8008bc8:	76fb      	strb	r3, [r7, #27]
 8008bca:	e032      	b.n	8008c32 <UART_SetConfig+0x29a>
 8008bcc:	2308      	movs	r3, #8
 8008bce:	76fb      	strb	r3, [r7, #27]
 8008bd0:	e02f      	b.n	8008c32 <UART_SetConfig+0x29a>
 8008bd2:	2310      	movs	r3, #16
 8008bd4:	76fb      	strb	r3, [r7, #27]
 8008bd6:	e02c      	b.n	8008c32 <UART_SetConfig+0x29a>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a2b      	ldr	r2, [pc, #172]	; (8008c8c <UART_SetConfig+0x2f4>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d125      	bne.n	8008c2e <UART_SetConfig+0x296>
 8008be2:	4b2c      	ldr	r3, [pc, #176]	; (8008c94 <UART_SetConfig+0x2fc>)
 8008be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008be8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008bec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008bf0:	d017      	beq.n	8008c22 <UART_SetConfig+0x28a>
 8008bf2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008bf6:	d817      	bhi.n	8008c28 <UART_SetConfig+0x290>
 8008bf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bfc:	d00b      	beq.n	8008c16 <UART_SetConfig+0x27e>
 8008bfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c02:	d811      	bhi.n	8008c28 <UART_SetConfig+0x290>
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d003      	beq.n	8008c10 <UART_SetConfig+0x278>
 8008c08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c0c:	d006      	beq.n	8008c1c <UART_SetConfig+0x284>
 8008c0e:	e00b      	b.n	8008c28 <UART_SetConfig+0x290>
 8008c10:	2300      	movs	r3, #0
 8008c12:	76fb      	strb	r3, [r7, #27]
 8008c14:	e00d      	b.n	8008c32 <UART_SetConfig+0x29a>
 8008c16:	2302      	movs	r3, #2
 8008c18:	76fb      	strb	r3, [r7, #27]
 8008c1a:	e00a      	b.n	8008c32 <UART_SetConfig+0x29a>
 8008c1c:	2304      	movs	r3, #4
 8008c1e:	76fb      	strb	r3, [r7, #27]
 8008c20:	e007      	b.n	8008c32 <UART_SetConfig+0x29a>
 8008c22:	2308      	movs	r3, #8
 8008c24:	76fb      	strb	r3, [r7, #27]
 8008c26:	e004      	b.n	8008c32 <UART_SetConfig+0x29a>
 8008c28:	2310      	movs	r3, #16
 8008c2a:	76fb      	strb	r3, [r7, #27]
 8008c2c:	e001      	b.n	8008c32 <UART_SetConfig+0x29a>
 8008c2e:	2310      	movs	r3, #16
 8008c30:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a15      	ldr	r2, [pc, #84]	; (8008c8c <UART_SetConfig+0x2f4>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	f040 809f 	bne.w	8008d7c <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008c3e:	7efb      	ldrb	r3, [r7, #27]
 8008c40:	2b08      	cmp	r3, #8
 8008c42:	d837      	bhi.n	8008cb4 <UART_SetConfig+0x31c>
 8008c44:	a201      	add	r2, pc, #4	; (adr r2, 8008c4c <UART_SetConfig+0x2b4>)
 8008c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c4a:	bf00      	nop
 8008c4c:	08008c71 	.word	0x08008c71
 8008c50:	08008cb5 	.word	0x08008cb5
 8008c54:	08008c79 	.word	0x08008c79
 8008c58:	08008cb5 	.word	0x08008cb5
 8008c5c:	08008c7f 	.word	0x08008c7f
 8008c60:	08008cb5 	.word	0x08008cb5
 8008c64:	08008cb5 	.word	0x08008cb5
 8008c68:	08008cb5 	.word	0x08008cb5
 8008c6c:	08008cad 	.word	0x08008cad
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c70:	f7fe fafc 	bl	800726c <HAL_RCC_GetPCLK1Freq>
 8008c74:	6178      	str	r0, [r7, #20]
        break;
 8008c76:	e022      	b.n	8008cbe <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c78:	4b0b      	ldr	r3, [pc, #44]	; (8008ca8 <UART_SetConfig+0x310>)
 8008c7a:	617b      	str	r3, [r7, #20]
        break;
 8008c7c:	e01f      	b.n	8008cbe <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c7e:	f7fe fa87 	bl	8007190 <HAL_RCC_GetSysClockFreq>
 8008c82:	6178      	str	r0, [r7, #20]
        break;
 8008c84:	e01b      	b.n	8008cbe <UART_SetConfig+0x326>
 8008c86:	bf00      	nop
 8008c88:	cfff69f3 	.word	0xcfff69f3
 8008c8c:	40008000 	.word	0x40008000
 8008c90:	40013800 	.word	0x40013800
 8008c94:	40021000 	.word	0x40021000
 8008c98:	40004400 	.word	0x40004400
 8008c9c:	40004800 	.word	0x40004800
 8008ca0:	40004c00 	.word	0x40004c00
 8008ca4:	40005000 	.word	0x40005000
 8008ca8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008cac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008cb0:	617b      	str	r3, [r7, #20]
        break;
 8008cb2:	e004      	b.n	8008cbe <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	76bb      	strb	r3, [r7, #26]
        break;
 8008cbc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	f000 811b 	beq.w	8008efc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cca:	4a96      	ldr	r2, [pc, #600]	; (8008f24 <UART_SetConfig+0x58c>)
 8008ccc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cd0:	461a      	mov	r2, r3
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008cd8:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	685a      	ldr	r2, [r3, #4]
 8008cde:	4613      	mov	r3, r2
 8008ce0:	005b      	lsls	r3, r3, #1
 8008ce2:	4413      	add	r3, r2
 8008ce4:	68ba      	ldr	r2, [r7, #8]
 8008ce6:	429a      	cmp	r2, r3
 8008ce8:	d305      	bcc.n	8008cf6 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008cf0:	68ba      	ldr	r2, [r7, #8]
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d902      	bls.n	8008cfc <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	76bb      	strb	r3, [r7, #26]
 8008cfa:	e0ff      	b.n	8008efc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f04f 0100 	mov.w	r1, #0
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d08:	4a86      	ldr	r2, [pc, #536]	; (8008f24 <UART_SetConfig+0x58c>)
 8008d0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d0e:	b29a      	uxth	r2, r3
 8008d10:	f04f 0300 	mov.w	r3, #0
 8008d14:	f7f7 ffc0 	bl	8000c98 <__aeabi_uldivmod>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	460b      	mov	r3, r1
 8008d1c:	4610      	mov	r0, r2
 8008d1e:	4619      	mov	r1, r3
 8008d20:	f04f 0200 	mov.w	r2, #0
 8008d24:	f04f 0300 	mov.w	r3, #0
 8008d28:	020b      	lsls	r3, r1, #8
 8008d2a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008d2e:	0202      	lsls	r2, r0, #8
 8008d30:	6879      	ldr	r1, [r7, #4]
 8008d32:	6849      	ldr	r1, [r1, #4]
 8008d34:	0849      	lsrs	r1, r1, #1
 8008d36:	4608      	mov	r0, r1
 8008d38:	f04f 0100 	mov.w	r1, #0
 8008d3c:	1814      	adds	r4, r2, r0
 8008d3e:	eb43 0501 	adc.w	r5, r3, r1
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	461a      	mov	r2, r3
 8008d48:	f04f 0300 	mov.w	r3, #0
 8008d4c:	4620      	mov	r0, r4
 8008d4e:	4629      	mov	r1, r5
 8008d50:	f7f7 ffa2 	bl	8000c98 <__aeabi_uldivmod>
 8008d54:	4602      	mov	r2, r0
 8008d56:	460b      	mov	r3, r1
 8008d58:	4613      	mov	r3, r2
 8008d5a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d62:	d308      	bcc.n	8008d76 <UART_SetConfig+0x3de>
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d6a:	d204      	bcs.n	8008d76 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	693a      	ldr	r2, [r7, #16]
 8008d72:	60da      	str	r2, [r3, #12]
 8008d74:	e0c2      	b.n	8008efc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8008d76:	2301      	movs	r3, #1
 8008d78:	76bb      	strb	r3, [r7, #26]
 8008d7a:	e0bf      	b.n	8008efc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	69db      	ldr	r3, [r3, #28]
 8008d80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d84:	d165      	bne.n	8008e52 <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 8008d86:	7efb      	ldrb	r3, [r7, #27]
 8008d88:	2b08      	cmp	r3, #8
 8008d8a:	d828      	bhi.n	8008dde <UART_SetConfig+0x446>
 8008d8c:	a201      	add	r2, pc, #4	; (adr r2, 8008d94 <UART_SetConfig+0x3fc>)
 8008d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d92:	bf00      	nop
 8008d94:	08008db9 	.word	0x08008db9
 8008d98:	08008dc1 	.word	0x08008dc1
 8008d9c:	08008dc9 	.word	0x08008dc9
 8008da0:	08008ddf 	.word	0x08008ddf
 8008da4:	08008dcf 	.word	0x08008dcf
 8008da8:	08008ddf 	.word	0x08008ddf
 8008dac:	08008ddf 	.word	0x08008ddf
 8008db0:	08008ddf 	.word	0x08008ddf
 8008db4:	08008dd7 	.word	0x08008dd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008db8:	f7fe fa58 	bl	800726c <HAL_RCC_GetPCLK1Freq>
 8008dbc:	6178      	str	r0, [r7, #20]
        break;
 8008dbe:	e013      	b.n	8008de8 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008dc0:	f7fe fa6a 	bl	8007298 <HAL_RCC_GetPCLK2Freq>
 8008dc4:	6178      	str	r0, [r7, #20]
        break;
 8008dc6:	e00f      	b.n	8008de8 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008dc8:	4b57      	ldr	r3, [pc, #348]	; (8008f28 <UART_SetConfig+0x590>)
 8008dca:	617b      	str	r3, [r7, #20]
        break;
 8008dcc:	e00c      	b.n	8008de8 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008dce:	f7fe f9df 	bl	8007190 <HAL_RCC_GetSysClockFreq>
 8008dd2:	6178      	str	r0, [r7, #20]
        break;
 8008dd4:	e008      	b.n	8008de8 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008dd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008dda:	617b      	str	r3, [r7, #20]
        break;
 8008ddc:	e004      	b.n	8008de8 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8008dde:	2300      	movs	r3, #0
 8008de0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008de2:	2301      	movs	r3, #1
 8008de4:	76bb      	strb	r3, [r7, #26]
        break;
 8008de6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	f000 8086 	beq.w	8008efc <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df4:	4a4b      	ldr	r2, [pc, #300]	; (8008f24 <UART_SetConfig+0x58c>)
 8008df6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e02:	005a      	lsls	r2, r3, #1
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	085b      	lsrs	r3, r3, #1
 8008e0a:	441a      	add	r2, r3
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	2b0f      	cmp	r3, #15
 8008e1c:	d916      	bls.n	8008e4c <UART_SetConfig+0x4b4>
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e24:	d212      	bcs.n	8008e4c <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	b29b      	uxth	r3, r3
 8008e2a:	f023 030f 	bic.w	r3, r3, #15
 8008e2e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	085b      	lsrs	r3, r3, #1
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	f003 0307 	and.w	r3, r3, #7
 8008e3a:	b29a      	uxth	r2, r3
 8008e3c:	89fb      	ldrh	r3, [r7, #14]
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	89fa      	ldrh	r2, [r7, #14]
 8008e48:	60da      	str	r2, [r3, #12]
 8008e4a:	e057      	b.n	8008efc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	76bb      	strb	r3, [r7, #26]
 8008e50:	e054      	b.n	8008efc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008e52:	7efb      	ldrb	r3, [r7, #27]
 8008e54:	2b08      	cmp	r3, #8
 8008e56:	d828      	bhi.n	8008eaa <UART_SetConfig+0x512>
 8008e58:	a201      	add	r2, pc, #4	; (adr r2, 8008e60 <UART_SetConfig+0x4c8>)
 8008e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e5e:	bf00      	nop
 8008e60:	08008e85 	.word	0x08008e85
 8008e64:	08008e8d 	.word	0x08008e8d
 8008e68:	08008e95 	.word	0x08008e95
 8008e6c:	08008eab 	.word	0x08008eab
 8008e70:	08008e9b 	.word	0x08008e9b
 8008e74:	08008eab 	.word	0x08008eab
 8008e78:	08008eab 	.word	0x08008eab
 8008e7c:	08008eab 	.word	0x08008eab
 8008e80:	08008ea3 	.word	0x08008ea3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e84:	f7fe f9f2 	bl	800726c <HAL_RCC_GetPCLK1Freq>
 8008e88:	6178      	str	r0, [r7, #20]
        break;
 8008e8a:	e013      	b.n	8008eb4 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e8c:	f7fe fa04 	bl	8007298 <HAL_RCC_GetPCLK2Freq>
 8008e90:	6178      	str	r0, [r7, #20]
        break;
 8008e92:	e00f      	b.n	8008eb4 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e94:	4b24      	ldr	r3, [pc, #144]	; (8008f28 <UART_SetConfig+0x590>)
 8008e96:	617b      	str	r3, [r7, #20]
        break;
 8008e98:	e00c      	b.n	8008eb4 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e9a:	f7fe f979 	bl	8007190 <HAL_RCC_GetSysClockFreq>
 8008e9e:	6178      	str	r0, [r7, #20]
        break;
 8008ea0:	e008      	b.n	8008eb4 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ea2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ea6:	617b      	str	r3, [r7, #20]
        break;
 8008ea8:	e004      	b.n	8008eb4 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	76bb      	strb	r3, [r7, #26]
        break;
 8008eb2:	bf00      	nop
    }

    if (pclk != 0U)
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d020      	beq.n	8008efc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ebe:	4a19      	ldr	r2, [pc, #100]	; (8008f24 <UART_SetConfig+0x58c>)
 8008ec0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ec4:	461a      	mov	r2, r3
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	fbb3 f2f2 	udiv	r2, r3, r2
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	085b      	lsrs	r3, r3, #1
 8008ed2:	441a      	add	r2, r3
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008edc:	b29b      	uxth	r3, r3
 8008ede:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	2b0f      	cmp	r3, #15
 8008ee4:	d908      	bls.n	8008ef8 <UART_SetConfig+0x560>
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008eec:	d204      	bcs.n	8008ef8 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	693a      	ldr	r2, [r7, #16]
 8008ef4:	60da      	str	r2, [r3, #12]
 8008ef6:	e001      	b.n	8008efc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8008ef8:	2301      	movs	r3, #1
 8008efa:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2201      	movs	r2, #1
 8008f00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2201      	movs	r2, #1
 8008f08:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2200      	movs	r2, #0
 8008f16:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008f18:	7ebb      	ldrb	r3, [r7, #26]
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3720      	adds	r7, #32
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bdb0      	pop	{r4, r5, r7, pc}
 8008f22:	bf00      	nop
 8008f24:	0800c8d8 	.word	0x0800c8d8
 8008f28:	00f42400 	.word	0x00f42400

08008f2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b083      	sub	sp, #12
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f38:	f003 0301 	and.w	r3, r3, #1
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d00a      	beq.n	8008f56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	430a      	orrs	r2, r1
 8008f54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f5a:	f003 0302 	and.w	r3, r3, #2
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d00a      	beq.n	8008f78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	430a      	orrs	r2, r1
 8008f76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f7c:	f003 0304 	and.w	r3, r3, #4
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d00a      	beq.n	8008f9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	430a      	orrs	r2, r1
 8008f98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f9e:	f003 0308 	and.w	r3, r3, #8
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d00a      	beq.n	8008fbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	430a      	orrs	r2, r1
 8008fba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fc0:	f003 0310 	and.w	r3, r3, #16
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d00a      	beq.n	8008fde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	689b      	ldr	r3, [r3, #8]
 8008fce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	430a      	orrs	r2, r1
 8008fdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fe2:	f003 0320 	and.w	r3, r3, #32
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d00a      	beq.n	8009000 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	689b      	ldr	r3, [r3, #8]
 8008ff0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	430a      	orrs	r2, r1
 8008ffe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009008:	2b00      	cmp	r3, #0
 800900a:	d01a      	beq.n	8009042 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	430a      	orrs	r2, r1
 8009020:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009026:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800902a:	d10a      	bne.n	8009042 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	430a      	orrs	r2, r1
 8009040:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800904a:	2b00      	cmp	r3, #0
 800904c:	d00a      	beq.n	8009064 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	430a      	orrs	r2, r1
 8009062:	605a      	str	r2, [r3, #4]
  }
}
 8009064:	bf00      	nop
 8009066:	370c      	adds	r7, #12
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr

08009070 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b086      	sub	sp, #24
 8009074:	af02      	add	r7, sp, #8
 8009076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2200      	movs	r2, #0
 800907c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009080:	f7f9 fcc0 	bl	8002a04 <HAL_GetTick>
 8009084:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f003 0308 	and.w	r3, r3, #8
 8009090:	2b08      	cmp	r3, #8
 8009092:	d10e      	bne.n	80090b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009094:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009098:	9300      	str	r3, [sp, #0]
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2200      	movs	r2, #0
 800909e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 f82f 	bl	8009106 <UART_WaitOnFlagUntilTimeout>
 80090a8:	4603      	mov	r3, r0
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d001      	beq.n	80090b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090ae:	2303      	movs	r3, #3
 80090b0:	e025      	b.n	80090fe <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f003 0304 	and.w	r3, r3, #4
 80090bc:	2b04      	cmp	r3, #4
 80090be:	d10e      	bne.n	80090de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80090c4:	9300      	str	r3, [sp, #0]
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	2200      	movs	r2, #0
 80090ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 f819 	bl	8009106 <UART_WaitOnFlagUntilTimeout>
 80090d4:	4603      	mov	r3, r0
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d001      	beq.n	80090de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090da:	2303      	movs	r3, #3
 80090dc:	e00f      	b.n	80090fe <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2220      	movs	r2, #32
 80090e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2220      	movs	r2, #32
 80090ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2200      	movs	r2, #0
 80090f2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2200      	movs	r2, #0
 80090f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80090fc:	2300      	movs	r3, #0
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3710      	adds	r7, #16
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}

08009106 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009106:	b580      	push	{r7, lr}
 8009108:	b084      	sub	sp, #16
 800910a:	af00      	add	r7, sp, #0
 800910c:	60f8      	str	r0, [r7, #12]
 800910e:	60b9      	str	r1, [r7, #8]
 8009110:	603b      	str	r3, [r7, #0]
 8009112:	4613      	mov	r3, r2
 8009114:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009116:	e062      	b.n	80091de <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009118:	69bb      	ldr	r3, [r7, #24]
 800911a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800911e:	d05e      	beq.n	80091de <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009120:	f7f9 fc70 	bl	8002a04 <HAL_GetTick>
 8009124:	4602      	mov	r2, r0
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	1ad3      	subs	r3, r2, r3
 800912a:	69ba      	ldr	r2, [r7, #24]
 800912c:	429a      	cmp	r2, r3
 800912e:	d302      	bcc.n	8009136 <UART_WaitOnFlagUntilTimeout+0x30>
 8009130:	69bb      	ldr	r3, [r7, #24]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d11d      	bne.n	8009172 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	681a      	ldr	r2, [r3, #0]
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009144:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	689a      	ldr	r2, [r3, #8]
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f022 0201 	bic.w	r2, r2, #1
 8009154:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2220      	movs	r2, #32
 800915a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2220      	movs	r2, #32
 8009162:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	2200      	movs	r2, #0
 800916a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800916e:	2303      	movs	r3, #3
 8009170:	e045      	b.n	80091fe <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f003 0304 	and.w	r3, r3, #4
 800917c:	2b00      	cmp	r3, #0
 800917e:	d02e      	beq.n	80091de <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	69db      	ldr	r3, [r3, #28]
 8009186:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800918a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800918e:	d126      	bne.n	80091de <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009198:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80091a8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	689a      	ldr	r2, [r3, #8]
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f022 0201 	bic.w	r2, r2, #1
 80091b8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2220      	movs	r2, #32
 80091be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2220      	movs	r2, #32
 80091c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2220      	movs	r2, #32
 80091ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2200      	movs	r2, #0
 80091d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80091da:	2303      	movs	r3, #3
 80091dc:	e00f      	b.n	80091fe <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	69da      	ldr	r2, [r3, #28]
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	4013      	ands	r3, r2
 80091e8:	68ba      	ldr	r2, [r7, #8]
 80091ea:	429a      	cmp	r2, r3
 80091ec:	bf0c      	ite	eq
 80091ee:	2301      	moveq	r3, #1
 80091f0:	2300      	movne	r3, #0
 80091f2:	b2db      	uxtb	r3, r3
 80091f4:	461a      	mov	r2, r3
 80091f6:	79fb      	ldrb	r3, [r7, #7]
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d08d      	beq.n	8009118 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80091fc:	2300      	movs	r3, #0
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3710      	adds	r7, #16
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}

08009206 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009206:	b480      	push	{r7}
 8009208:	b083      	sub	sp, #12
 800920a:	af00      	add	r7, sp, #0
 800920c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	681a      	ldr	r2, [r3, #0]
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800921c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	689a      	ldr	r2, [r3, #8]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800922c:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2220      	movs	r2, #32
 8009232:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8009236:	bf00      	nop
 8009238:	370c      	adds	r7, #12
 800923a:	46bd      	mov	sp, r7
 800923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009240:	4770      	bx	lr

08009242 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009242:	b480      	push	{r7}
 8009244:	b083      	sub	sp, #12
 8009246:	af00      	add	r7, sp, #0
 8009248:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	681a      	ldr	r2, [r3, #0]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009258:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	689b      	ldr	r3, [r3, #8]
 8009260:	687a      	ldr	r2, [r7, #4]
 8009262:	6812      	ldr	r2, [r2, #0]
 8009264:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009268:	f023 0301 	bic.w	r3, r3, #1
 800926c:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009272:	2b01      	cmp	r3, #1
 8009274:	d107      	bne.n	8009286 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	681a      	ldr	r2, [r3, #0]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f022 0210 	bic.w	r2, r2, #16
 8009284:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2220      	movs	r2, #32
 800928a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2200      	movs	r2, #0
 8009292:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2200      	movs	r2, #0
 8009298:	671a      	str	r2, [r3, #112]	; 0x70
}
 800929a:	bf00      	nop
 800929c:	370c      	adds	r7, #12
 800929e:	46bd      	mov	sp, r7
 80092a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a4:	4770      	bx	lr

080092a6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80092a6:	b580      	push	{r7, lr}
 80092a8:	b084      	sub	sp, #16
 80092aa:	af00      	add	r7, sp, #0
 80092ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092b2:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f003 0320 	and.w	r3, r3, #32
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d114      	bne.n	80092ec <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2200      	movs	r2, #0
 80092c6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	689a      	ldr	r2, [r3, #8]
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80092d8:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	681a      	ldr	r2, [r3, #0]
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80092e8:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80092ea:	e002      	b.n	80092f2 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 80092ec:	68f8      	ldr	r0, [r7, #12]
 80092ee:	f7ff fb29 	bl	8008944 <HAL_UART_TxCpltCallback>
}
 80092f2:	bf00      	nop
 80092f4:	3710      	adds	r7, #16
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}

080092fa <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80092fa:	b580      	push	{r7, lr}
 80092fc:	b084      	sub	sp, #16
 80092fe:	af00      	add	r7, sp, #0
 8009300:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009306:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009308:	68f8      	ldr	r0, [r7, #12]
 800930a:	f7ff fb25 	bl	8008958 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800930e:	bf00      	nop
 8009310:	3710      	adds	r7, #16
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}

08009316 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009316:	b580      	push	{r7, lr}
 8009318:	b086      	sub	sp, #24
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009322:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800932a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009332:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	689b      	ldr	r3, [r3, #8]
 800933a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800933e:	2b80      	cmp	r3, #128	; 0x80
 8009340:	d109      	bne.n	8009356 <UART_DMAError+0x40>
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	2b21      	cmp	r3, #33	; 0x21
 8009346:	d106      	bne.n	8009356 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	2200      	movs	r2, #0
 800934c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8009350:	6978      	ldr	r0, [r7, #20]
 8009352:	f7ff ff58 	bl	8009206 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	689b      	ldr	r3, [r3, #8]
 800935c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009360:	2b40      	cmp	r3, #64	; 0x40
 8009362:	d109      	bne.n	8009378 <UART_DMAError+0x62>
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2b22      	cmp	r3, #34	; 0x22
 8009368:	d106      	bne.n	8009378 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	2200      	movs	r2, #0
 800936e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8009372:	6978      	ldr	r0, [r7, #20]
 8009374:	f7ff ff65 	bl	8009242 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800937e:	f043 0210 	orr.w	r2, r3, #16
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009388:	6978      	ldr	r0, [r7, #20]
 800938a:	f7ff faef 	bl	800896c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800938e:	bf00      	nop
 8009390:	3718      	adds	r7, #24
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}

08009396 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009396:	b580      	push	{r7, lr}
 8009398:	b084      	sub	sp, #16
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2200      	movs	r2, #0
 80093a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2200      	movs	r2, #0
 80093b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80093b4:	68f8      	ldr	r0, [r7, #12]
 80093b6:	f7ff fad9 	bl	800896c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093ba:	bf00      	nop
 80093bc:	3710      	adds	r7, #16
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}

080093c2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80093c2:	b580      	push	{r7, lr}
 80093c4:	b082      	sub	sp, #8
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	681a      	ldr	r2, [r3, #0]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093d8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2220      	movs	r2, #32
 80093de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2200      	movs	r2, #0
 80093e6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f7ff faab 	bl	8008944 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093ee:	bf00      	nop
 80093f0:	3708      	adds	r7, #8
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}

080093f6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80093f6:	b480      	push	{r7}
 80093f8:	b083      	sub	sp, #12
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80093fe:	bf00      	nop
 8009400:	370c      	adds	r7, #12
 8009402:	46bd      	mov	sp, r7
 8009404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009408:	4770      	bx	lr

0800940a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800940a:	b480      	push	{r7}
 800940c:	b083      	sub	sp, #12
 800940e:	af00      	add	r7, sp, #0
 8009410:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009412:	bf00      	nop
 8009414:	370c      	adds	r7, #12
 8009416:	46bd      	mov	sp, r7
 8009418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941c:	4770      	bx	lr

0800941e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800941e:	b480      	push	{r7}
 8009420:	b083      	sub	sp, #12
 8009422:	af00      	add	r7, sp, #0
 8009424:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009426:	bf00      	nop
 8009428:	370c      	adds	r7, #12
 800942a:	46bd      	mov	sp, r7
 800942c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009430:	4770      	bx	lr

08009432 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009432:	b480      	push	{r7}
 8009434:	b085      	sub	sp, #20
 8009436:	af00      	add	r7, sp, #0
 8009438:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009440:	2b01      	cmp	r3, #1
 8009442:	d101      	bne.n	8009448 <HAL_UARTEx_DisableFifoMode+0x16>
 8009444:	2302      	movs	r3, #2
 8009446:	e027      	b.n	8009498 <HAL_UARTEx_DisableFifoMode+0x66>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2201      	movs	r2, #1
 800944c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2224      	movs	r2, #36	; 0x24
 8009454:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	681a      	ldr	r2, [r3, #0]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f022 0201 	bic.w	r2, r2, #1
 800946e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009476:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2200      	movs	r2, #0
 800947c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	68fa      	ldr	r2, [r7, #12]
 8009484:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2220      	movs	r2, #32
 800948a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2200      	movs	r2, #0
 8009492:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009496:	2300      	movs	r3, #0
}
 8009498:	4618      	mov	r0, r3
 800949a:	3714      	adds	r7, #20
 800949c:	46bd      	mov	sp, r7
 800949e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a2:	4770      	bx	lr

080094a4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b084      	sub	sp, #16
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
 80094ac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80094b4:	2b01      	cmp	r3, #1
 80094b6:	d101      	bne.n	80094bc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80094b8:	2302      	movs	r3, #2
 80094ba:	e02d      	b.n	8009518 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2201      	movs	r2, #1
 80094c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2224      	movs	r2, #36	; 0x24
 80094c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	681a      	ldr	r2, [r3, #0]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f022 0201 	bic.w	r2, r2, #1
 80094e2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	689b      	ldr	r3, [r3, #8]
 80094ea:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	683a      	ldr	r2, [r7, #0]
 80094f4:	430a      	orrs	r2, r1
 80094f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f000 f84f 	bl	800959c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	68fa      	ldr	r2, [r7, #12]
 8009504:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2220      	movs	r2, #32
 800950a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2200      	movs	r2, #0
 8009512:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009516:	2300      	movs	r3, #0
}
 8009518:	4618      	mov	r0, r3
 800951a:	3710      	adds	r7, #16
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}

08009520 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b084      	sub	sp, #16
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009530:	2b01      	cmp	r3, #1
 8009532:	d101      	bne.n	8009538 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009534:	2302      	movs	r3, #2
 8009536:	e02d      	b.n	8009594 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2201      	movs	r2, #1
 800953c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2224      	movs	r2, #36	; 0x24
 8009544:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	681a      	ldr	r2, [r3, #0]
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f022 0201 	bic.w	r2, r2, #1
 800955e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	689b      	ldr	r3, [r3, #8]
 8009566:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	683a      	ldr	r2, [r7, #0]
 8009570:	430a      	orrs	r2, r1
 8009572:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f000 f811 	bl	800959c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	68fa      	ldr	r2, [r7, #12]
 8009580:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2220      	movs	r2, #32
 8009586:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2200      	movs	r2, #0
 800958e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009592:	2300      	movs	r3, #0
}
 8009594:	4618      	mov	r0, r3
 8009596:	3710      	adds	r7, #16
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}

0800959c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800959c:	b480      	push	{r7}
 800959e:	b085      	sub	sp, #20
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d108      	bne.n	80095be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2201      	movs	r2, #1
 80095b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2201      	movs	r2, #1
 80095b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80095bc:	e031      	b.n	8009622 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80095be:	2308      	movs	r3, #8
 80095c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80095c2:	2308      	movs	r3, #8
 80095c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	0e5b      	lsrs	r3, r3, #25
 80095ce:	b2db      	uxtb	r3, r3
 80095d0:	f003 0307 	and.w	r3, r3, #7
 80095d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	689b      	ldr	r3, [r3, #8]
 80095dc:	0f5b      	lsrs	r3, r3, #29
 80095de:	b2db      	uxtb	r3, r3
 80095e0:	f003 0307 	and.w	r3, r3, #7
 80095e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80095e6:	7bbb      	ldrb	r3, [r7, #14]
 80095e8:	7b3a      	ldrb	r2, [r7, #12]
 80095ea:	4911      	ldr	r1, [pc, #68]	; (8009630 <UARTEx_SetNbDataToProcess+0x94>)
 80095ec:	5c8a      	ldrb	r2, [r1, r2]
 80095ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80095f2:	7b3a      	ldrb	r2, [r7, #12]
 80095f4:	490f      	ldr	r1, [pc, #60]	; (8009634 <UARTEx_SetNbDataToProcess+0x98>)
 80095f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80095f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80095fc:	b29a      	uxth	r2, r3
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009604:	7bfb      	ldrb	r3, [r7, #15]
 8009606:	7b7a      	ldrb	r2, [r7, #13]
 8009608:	4909      	ldr	r1, [pc, #36]	; (8009630 <UARTEx_SetNbDataToProcess+0x94>)
 800960a:	5c8a      	ldrb	r2, [r1, r2]
 800960c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009610:	7b7a      	ldrb	r2, [r7, #13]
 8009612:	4908      	ldr	r1, [pc, #32]	; (8009634 <UARTEx_SetNbDataToProcess+0x98>)
 8009614:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009616:	fb93 f3f2 	sdiv	r3, r3, r2
 800961a:	b29a      	uxth	r2, r3
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009622:	bf00      	nop
 8009624:	3714      	adds	r7, #20
 8009626:	46bd      	mov	sp, r7
 8009628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962c:	4770      	bx	lr
 800962e:	bf00      	nop
 8009630:	0800c8f0 	.word	0x0800c8f0
 8009634:	0800c8f8 	.word	0x0800c8f8

08009638 <__errno>:
 8009638:	4b01      	ldr	r3, [pc, #4]	; (8009640 <__errno+0x8>)
 800963a:	6818      	ldr	r0, [r3, #0]
 800963c:	4770      	bx	lr
 800963e:	bf00      	nop
 8009640:	20000010 	.word	0x20000010

08009644 <__libc_init_array>:
 8009644:	b570      	push	{r4, r5, r6, lr}
 8009646:	4d0d      	ldr	r5, [pc, #52]	; (800967c <__libc_init_array+0x38>)
 8009648:	4c0d      	ldr	r4, [pc, #52]	; (8009680 <__libc_init_array+0x3c>)
 800964a:	1b64      	subs	r4, r4, r5
 800964c:	10a4      	asrs	r4, r4, #2
 800964e:	2600      	movs	r6, #0
 8009650:	42a6      	cmp	r6, r4
 8009652:	d109      	bne.n	8009668 <__libc_init_array+0x24>
 8009654:	4d0b      	ldr	r5, [pc, #44]	; (8009684 <__libc_init_array+0x40>)
 8009656:	4c0c      	ldr	r4, [pc, #48]	; (8009688 <__libc_init_array+0x44>)
 8009658:	f003 f8d2 	bl	800c800 <_init>
 800965c:	1b64      	subs	r4, r4, r5
 800965e:	10a4      	asrs	r4, r4, #2
 8009660:	2600      	movs	r6, #0
 8009662:	42a6      	cmp	r6, r4
 8009664:	d105      	bne.n	8009672 <__libc_init_array+0x2e>
 8009666:	bd70      	pop	{r4, r5, r6, pc}
 8009668:	f855 3b04 	ldr.w	r3, [r5], #4
 800966c:	4798      	blx	r3
 800966e:	3601      	adds	r6, #1
 8009670:	e7ee      	b.n	8009650 <__libc_init_array+0xc>
 8009672:	f855 3b04 	ldr.w	r3, [r5], #4
 8009676:	4798      	blx	r3
 8009678:	3601      	adds	r6, #1
 800967a:	e7f2      	b.n	8009662 <__libc_init_array+0x1e>
 800967c:	0800ccec 	.word	0x0800ccec
 8009680:	0800ccec 	.word	0x0800ccec
 8009684:	0800ccec 	.word	0x0800ccec
 8009688:	0800ccf0 	.word	0x0800ccf0

0800968c <memset>:
 800968c:	4402      	add	r2, r0
 800968e:	4603      	mov	r3, r0
 8009690:	4293      	cmp	r3, r2
 8009692:	d100      	bne.n	8009696 <memset+0xa>
 8009694:	4770      	bx	lr
 8009696:	f803 1b01 	strb.w	r1, [r3], #1
 800969a:	e7f9      	b.n	8009690 <memset+0x4>

0800969c <__cvt>:
 800969c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80096a0:	ec55 4b10 	vmov	r4, r5, d0
 80096a4:	2d00      	cmp	r5, #0
 80096a6:	460e      	mov	r6, r1
 80096a8:	4619      	mov	r1, r3
 80096aa:	462b      	mov	r3, r5
 80096ac:	bfbb      	ittet	lt
 80096ae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80096b2:	461d      	movlt	r5, r3
 80096b4:	2300      	movge	r3, #0
 80096b6:	232d      	movlt	r3, #45	; 0x2d
 80096b8:	700b      	strb	r3, [r1, #0]
 80096ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096bc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80096c0:	4691      	mov	r9, r2
 80096c2:	f023 0820 	bic.w	r8, r3, #32
 80096c6:	bfbc      	itt	lt
 80096c8:	4622      	movlt	r2, r4
 80096ca:	4614      	movlt	r4, r2
 80096cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80096d0:	d005      	beq.n	80096de <__cvt+0x42>
 80096d2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80096d6:	d100      	bne.n	80096da <__cvt+0x3e>
 80096d8:	3601      	adds	r6, #1
 80096da:	2102      	movs	r1, #2
 80096dc:	e000      	b.n	80096e0 <__cvt+0x44>
 80096de:	2103      	movs	r1, #3
 80096e0:	ab03      	add	r3, sp, #12
 80096e2:	9301      	str	r3, [sp, #4]
 80096e4:	ab02      	add	r3, sp, #8
 80096e6:	9300      	str	r3, [sp, #0]
 80096e8:	ec45 4b10 	vmov	d0, r4, r5
 80096ec:	4653      	mov	r3, sl
 80096ee:	4632      	mov	r2, r6
 80096f0:	f000 fcfa 	bl	800a0e8 <_dtoa_r>
 80096f4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80096f8:	4607      	mov	r7, r0
 80096fa:	d102      	bne.n	8009702 <__cvt+0x66>
 80096fc:	f019 0f01 	tst.w	r9, #1
 8009700:	d022      	beq.n	8009748 <__cvt+0xac>
 8009702:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009706:	eb07 0906 	add.w	r9, r7, r6
 800970a:	d110      	bne.n	800972e <__cvt+0x92>
 800970c:	783b      	ldrb	r3, [r7, #0]
 800970e:	2b30      	cmp	r3, #48	; 0x30
 8009710:	d10a      	bne.n	8009728 <__cvt+0x8c>
 8009712:	2200      	movs	r2, #0
 8009714:	2300      	movs	r3, #0
 8009716:	4620      	mov	r0, r4
 8009718:	4629      	mov	r1, r5
 800971a:	f7f7 f9fd 	bl	8000b18 <__aeabi_dcmpeq>
 800971e:	b918      	cbnz	r0, 8009728 <__cvt+0x8c>
 8009720:	f1c6 0601 	rsb	r6, r6, #1
 8009724:	f8ca 6000 	str.w	r6, [sl]
 8009728:	f8da 3000 	ldr.w	r3, [sl]
 800972c:	4499      	add	r9, r3
 800972e:	2200      	movs	r2, #0
 8009730:	2300      	movs	r3, #0
 8009732:	4620      	mov	r0, r4
 8009734:	4629      	mov	r1, r5
 8009736:	f7f7 f9ef 	bl	8000b18 <__aeabi_dcmpeq>
 800973a:	b108      	cbz	r0, 8009740 <__cvt+0xa4>
 800973c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009740:	2230      	movs	r2, #48	; 0x30
 8009742:	9b03      	ldr	r3, [sp, #12]
 8009744:	454b      	cmp	r3, r9
 8009746:	d307      	bcc.n	8009758 <__cvt+0xbc>
 8009748:	9b03      	ldr	r3, [sp, #12]
 800974a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800974c:	1bdb      	subs	r3, r3, r7
 800974e:	4638      	mov	r0, r7
 8009750:	6013      	str	r3, [r2, #0]
 8009752:	b004      	add	sp, #16
 8009754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009758:	1c59      	adds	r1, r3, #1
 800975a:	9103      	str	r1, [sp, #12]
 800975c:	701a      	strb	r2, [r3, #0]
 800975e:	e7f0      	b.n	8009742 <__cvt+0xa6>

08009760 <__exponent>:
 8009760:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009762:	4603      	mov	r3, r0
 8009764:	2900      	cmp	r1, #0
 8009766:	bfb8      	it	lt
 8009768:	4249      	neglt	r1, r1
 800976a:	f803 2b02 	strb.w	r2, [r3], #2
 800976e:	bfb4      	ite	lt
 8009770:	222d      	movlt	r2, #45	; 0x2d
 8009772:	222b      	movge	r2, #43	; 0x2b
 8009774:	2909      	cmp	r1, #9
 8009776:	7042      	strb	r2, [r0, #1]
 8009778:	dd2a      	ble.n	80097d0 <__exponent+0x70>
 800977a:	f10d 0407 	add.w	r4, sp, #7
 800977e:	46a4      	mov	ip, r4
 8009780:	270a      	movs	r7, #10
 8009782:	46a6      	mov	lr, r4
 8009784:	460a      	mov	r2, r1
 8009786:	fb91 f6f7 	sdiv	r6, r1, r7
 800978a:	fb07 1516 	mls	r5, r7, r6, r1
 800978e:	3530      	adds	r5, #48	; 0x30
 8009790:	2a63      	cmp	r2, #99	; 0x63
 8009792:	f104 34ff 	add.w	r4, r4, #4294967295
 8009796:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800979a:	4631      	mov	r1, r6
 800979c:	dcf1      	bgt.n	8009782 <__exponent+0x22>
 800979e:	3130      	adds	r1, #48	; 0x30
 80097a0:	f1ae 0502 	sub.w	r5, lr, #2
 80097a4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80097a8:	1c44      	adds	r4, r0, #1
 80097aa:	4629      	mov	r1, r5
 80097ac:	4561      	cmp	r1, ip
 80097ae:	d30a      	bcc.n	80097c6 <__exponent+0x66>
 80097b0:	f10d 0209 	add.w	r2, sp, #9
 80097b4:	eba2 020e 	sub.w	r2, r2, lr
 80097b8:	4565      	cmp	r5, ip
 80097ba:	bf88      	it	hi
 80097bc:	2200      	movhi	r2, #0
 80097be:	4413      	add	r3, r2
 80097c0:	1a18      	subs	r0, r3, r0
 80097c2:	b003      	add	sp, #12
 80097c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80097ca:	f804 2f01 	strb.w	r2, [r4, #1]!
 80097ce:	e7ed      	b.n	80097ac <__exponent+0x4c>
 80097d0:	2330      	movs	r3, #48	; 0x30
 80097d2:	3130      	adds	r1, #48	; 0x30
 80097d4:	7083      	strb	r3, [r0, #2]
 80097d6:	70c1      	strb	r1, [r0, #3]
 80097d8:	1d03      	adds	r3, r0, #4
 80097da:	e7f1      	b.n	80097c0 <__exponent+0x60>

080097dc <_printf_float>:
 80097dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097e0:	ed2d 8b02 	vpush	{d8}
 80097e4:	b08d      	sub	sp, #52	; 0x34
 80097e6:	460c      	mov	r4, r1
 80097e8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80097ec:	4616      	mov	r6, r2
 80097ee:	461f      	mov	r7, r3
 80097f0:	4605      	mov	r5, r0
 80097f2:	f001 fa65 	bl	800acc0 <_localeconv_r>
 80097f6:	f8d0 a000 	ldr.w	sl, [r0]
 80097fa:	4650      	mov	r0, sl
 80097fc:	f7f6 fd10 	bl	8000220 <strlen>
 8009800:	2300      	movs	r3, #0
 8009802:	930a      	str	r3, [sp, #40]	; 0x28
 8009804:	6823      	ldr	r3, [r4, #0]
 8009806:	9305      	str	r3, [sp, #20]
 8009808:	f8d8 3000 	ldr.w	r3, [r8]
 800980c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009810:	3307      	adds	r3, #7
 8009812:	f023 0307 	bic.w	r3, r3, #7
 8009816:	f103 0208 	add.w	r2, r3, #8
 800981a:	f8c8 2000 	str.w	r2, [r8]
 800981e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009822:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009826:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800982a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800982e:	9307      	str	r3, [sp, #28]
 8009830:	f8cd 8018 	str.w	r8, [sp, #24]
 8009834:	ee08 0a10 	vmov	s16, r0
 8009838:	4b9f      	ldr	r3, [pc, #636]	; (8009ab8 <_printf_float+0x2dc>)
 800983a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800983e:	f04f 32ff 	mov.w	r2, #4294967295
 8009842:	f7f7 f99b 	bl	8000b7c <__aeabi_dcmpun>
 8009846:	bb88      	cbnz	r0, 80098ac <_printf_float+0xd0>
 8009848:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800984c:	4b9a      	ldr	r3, [pc, #616]	; (8009ab8 <_printf_float+0x2dc>)
 800984e:	f04f 32ff 	mov.w	r2, #4294967295
 8009852:	f7f7 f975 	bl	8000b40 <__aeabi_dcmple>
 8009856:	bb48      	cbnz	r0, 80098ac <_printf_float+0xd0>
 8009858:	2200      	movs	r2, #0
 800985a:	2300      	movs	r3, #0
 800985c:	4640      	mov	r0, r8
 800985e:	4649      	mov	r1, r9
 8009860:	f7f7 f964 	bl	8000b2c <__aeabi_dcmplt>
 8009864:	b110      	cbz	r0, 800986c <_printf_float+0x90>
 8009866:	232d      	movs	r3, #45	; 0x2d
 8009868:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800986c:	4b93      	ldr	r3, [pc, #588]	; (8009abc <_printf_float+0x2e0>)
 800986e:	4894      	ldr	r0, [pc, #592]	; (8009ac0 <_printf_float+0x2e4>)
 8009870:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009874:	bf94      	ite	ls
 8009876:	4698      	movls	r8, r3
 8009878:	4680      	movhi	r8, r0
 800987a:	2303      	movs	r3, #3
 800987c:	6123      	str	r3, [r4, #16]
 800987e:	9b05      	ldr	r3, [sp, #20]
 8009880:	f023 0204 	bic.w	r2, r3, #4
 8009884:	6022      	str	r2, [r4, #0]
 8009886:	f04f 0900 	mov.w	r9, #0
 800988a:	9700      	str	r7, [sp, #0]
 800988c:	4633      	mov	r3, r6
 800988e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009890:	4621      	mov	r1, r4
 8009892:	4628      	mov	r0, r5
 8009894:	f000 f9d8 	bl	8009c48 <_printf_common>
 8009898:	3001      	adds	r0, #1
 800989a:	f040 8090 	bne.w	80099be <_printf_float+0x1e2>
 800989e:	f04f 30ff 	mov.w	r0, #4294967295
 80098a2:	b00d      	add	sp, #52	; 0x34
 80098a4:	ecbd 8b02 	vpop	{d8}
 80098a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ac:	4642      	mov	r2, r8
 80098ae:	464b      	mov	r3, r9
 80098b0:	4640      	mov	r0, r8
 80098b2:	4649      	mov	r1, r9
 80098b4:	f7f7 f962 	bl	8000b7c <__aeabi_dcmpun>
 80098b8:	b140      	cbz	r0, 80098cc <_printf_float+0xf0>
 80098ba:	464b      	mov	r3, r9
 80098bc:	2b00      	cmp	r3, #0
 80098be:	bfbc      	itt	lt
 80098c0:	232d      	movlt	r3, #45	; 0x2d
 80098c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80098c6:	487f      	ldr	r0, [pc, #508]	; (8009ac4 <_printf_float+0x2e8>)
 80098c8:	4b7f      	ldr	r3, [pc, #508]	; (8009ac8 <_printf_float+0x2ec>)
 80098ca:	e7d1      	b.n	8009870 <_printf_float+0x94>
 80098cc:	6863      	ldr	r3, [r4, #4]
 80098ce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80098d2:	9206      	str	r2, [sp, #24]
 80098d4:	1c5a      	adds	r2, r3, #1
 80098d6:	d13f      	bne.n	8009958 <_printf_float+0x17c>
 80098d8:	2306      	movs	r3, #6
 80098da:	6063      	str	r3, [r4, #4]
 80098dc:	9b05      	ldr	r3, [sp, #20]
 80098de:	6861      	ldr	r1, [r4, #4]
 80098e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80098e4:	2300      	movs	r3, #0
 80098e6:	9303      	str	r3, [sp, #12]
 80098e8:	ab0a      	add	r3, sp, #40	; 0x28
 80098ea:	e9cd b301 	strd	fp, r3, [sp, #4]
 80098ee:	ab09      	add	r3, sp, #36	; 0x24
 80098f0:	ec49 8b10 	vmov	d0, r8, r9
 80098f4:	9300      	str	r3, [sp, #0]
 80098f6:	6022      	str	r2, [r4, #0]
 80098f8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80098fc:	4628      	mov	r0, r5
 80098fe:	f7ff fecd 	bl	800969c <__cvt>
 8009902:	9b06      	ldr	r3, [sp, #24]
 8009904:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009906:	2b47      	cmp	r3, #71	; 0x47
 8009908:	4680      	mov	r8, r0
 800990a:	d108      	bne.n	800991e <_printf_float+0x142>
 800990c:	1cc8      	adds	r0, r1, #3
 800990e:	db02      	blt.n	8009916 <_printf_float+0x13a>
 8009910:	6863      	ldr	r3, [r4, #4]
 8009912:	4299      	cmp	r1, r3
 8009914:	dd41      	ble.n	800999a <_printf_float+0x1be>
 8009916:	f1ab 0b02 	sub.w	fp, fp, #2
 800991a:	fa5f fb8b 	uxtb.w	fp, fp
 800991e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009922:	d820      	bhi.n	8009966 <_printf_float+0x18a>
 8009924:	3901      	subs	r1, #1
 8009926:	465a      	mov	r2, fp
 8009928:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800992c:	9109      	str	r1, [sp, #36]	; 0x24
 800992e:	f7ff ff17 	bl	8009760 <__exponent>
 8009932:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009934:	1813      	adds	r3, r2, r0
 8009936:	2a01      	cmp	r2, #1
 8009938:	4681      	mov	r9, r0
 800993a:	6123      	str	r3, [r4, #16]
 800993c:	dc02      	bgt.n	8009944 <_printf_float+0x168>
 800993e:	6822      	ldr	r2, [r4, #0]
 8009940:	07d2      	lsls	r2, r2, #31
 8009942:	d501      	bpl.n	8009948 <_printf_float+0x16c>
 8009944:	3301      	adds	r3, #1
 8009946:	6123      	str	r3, [r4, #16]
 8009948:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800994c:	2b00      	cmp	r3, #0
 800994e:	d09c      	beq.n	800988a <_printf_float+0xae>
 8009950:	232d      	movs	r3, #45	; 0x2d
 8009952:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009956:	e798      	b.n	800988a <_printf_float+0xae>
 8009958:	9a06      	ldr	r2, [sp, #24]
 800995a:	2a47      	cmp	r2, #71	; 0x47
 800995c:	d1be      	bne.n	80098dc <_printf_float+0x100>
 800995e:	2b00      	cmp	r3, #0
 8009960:	d1bc      	bne.n	80098dc <_printf_float+0x100>
 8009962:	2301      	movs	r3, #1
 8009964:	e7b9      	b.n	80098da <_printf_float+0xfe>
 8009966:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800996a:	d118      	bne.n	800999e <_printf_float+0x1c2>
 800996c:	2900      	cmp	r1, #0
 800996e:	6863      	ldr	r3, [r4, #4]
 8009970:	dd0b      	ble.n	800998a <_printf_float+0x1ae>
 8009972:	6121      	str	r1, [r4, #16]
 8009974:	b913      	cbnz	r3, 800997c <_printf_float+0x1a0>
 8009976:	6822      	ldr	r2, [r4, #0]
 8009978:	07d0      	lsls	r0, r2, #31
 800997a:	d502      	bpl.n	8009982 <_printf_float+0x1a6>
 800997c:	3301      	adds	r3, #1
 800997e:	440b      	add	r3, r1
 8009980:	6123      	str	r3, [r4, #16]
 8009982:	65a1      	str	r1, [r4, #88]	; 0x58
 8009984:	f04f 0900 	mov.w	r9, #0
 8009988:	e7de      	b.n	8009948 <_printf_float+0x16c>
 800998a:	b913      	cbnz	r3, 8009992 <_printf_float+0x1b6>
 800998c:	6822      	ldr	r2, [r4, #0]
 800998e:	07d2      	lsls	r2, r2, #31
 8009990:	d501      	bpl.n	8009996 <_printf_float+0x1ba>
 8009992:	3302      	adds	r3, #2
 8009994:	e7f4      	b.n	8009980 <_printf_float+0x1a4>
 8009996:	2301      	movs	r3, #1
 8009998:	e7f2      	b.n	8009980 <_printf_float+0x1a4>
 800999a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800999e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099a0:	4299      	cmp	r1, r3
 80099a2:	db05      	blt.n	80099b0 <_printf_float+0x1d4>
 80099a4:	6823      	ldr	r3, [r4, #0]
 80099a6:	6121      	str	r1, [r4, #16]
 80099a8:	07d8      	lsls	r0, r3, #31
 80099aa:	d5ea      	bpl.n	8009982 <_printf_float+0x1a6>
 80099ac:	1c4b      	adds	r3, r1, #1
 80099ae:	e7e7      	b.n	8009980 <_printf_float+0x1a4>
 80099b0:	2900      	cmp	r1, #0
 80099b2:	bfd4      	ite	le
 80099b4:	f1c1 0202 	rsble	r2, r1, #2
 80099b8:	2201      	movgt	r2, #1
 80099ba:	4413      	add	r3, r2
 80099bc:	e7e0      	b.n	8009980 <_printf_float+0x1a4>
 80099be:	6823      	ldr	r3, [r4, #0]
 80099c0:	055a      	lsls	r2, r3, #21
 80099c2:	d407      	bmi.n	80099d4 <_printf_float+0x1f8>
 80099c4:	6923      	ldr	r3, [r4, #16]
 80099c6:	4642      	mov	r2, r8
 80099c8:	4631      	mov	r1, r6
 80099ca:	4628      	mov	r0, r5
 80099cc:	47b8      	blx	r7
 80099ce:	3001      	adds	r0, #1
 80099d0:	d12c      	bne.n	8009a2c <_printf_float+0x250>
 80099d2:	e764      	b.n	800989e <_printf_float+0xc2>
 80099d4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80099d8:	f240 80e0 	bls.w	8009b9c <_printf_float+0x3c0>
 80099dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80099e0:	2200      	movs	r2, #0
 80099e2:	2300      	movs	r3, #0
 80099e4:	f7f7 f898 	bl	8000b18 <__aeabi_dcmpeq>
 80099e8:	2800      	cmp	r0, #0
 80099ea:	d034      	beq.n	8009a56 <_printf_float+0x27a>
 80099ec:	4a37      	ldr	r2, [pc, #220]	; (8009acc <_printf_float+0x2f0>)
 80099ee:	2301      	movs	r3, #1
 80099f0:	4631      	mov	r1, r6
 80099f2:	4628      	mov	r0, r5
 80099f4:	47b8      	blx	r7
 80099f6:	3001      	adds	r0, #1
 80099f8:	f43f af51 	beq.w	800989e <_printf_float+0xc2>
 80099fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a00:	429a      	cmp	r2, r3
 8009a02:	db02      	blt.n	8009a0a <_printf_float+0x22e>
 8009a04:	6823      	ldr	r3, [r4, #0]
 8009a06:	07d8      	lsls	r0, r3, #31
 8009a08:	d510      	bpl.n	8009a2c <_printf_float+0x250>
 8009a0a:	ee18 3a10 	vmov	r3, s16
 8009a0e:	4652      	mov	r2, sl
 8009a10:	4631      	mov	r1, r6
 8009a12:	4628      	mov	r0, r5
 8009a14:	47b8      	blx	r7
 8009a16:	3001      	adds	r0, #1
 8009a18:	f43f af41 	beq.w	800989e <_printf_float+0xc2>
 8009a1c:	f04f 0800 	mov.w	r8, #0
 8009a20:	f104 091a 	add.w	r9, r4, #26
 8009a24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a26:	3b01      	subs	r3, #1
 8009a28:	4543      	cmp	r3, r8
 8009a2a:	dc09      	bgt.n	8009a40 <_printf_float+0x264>
 8009a2c:	6823      	ldr	r3, [r4, #0]
 8009a2e:	079b      	lsls	r3, r3, #30
 8009a30:	f100 8105 	bmi.w	8009c3e <_printf_float+0x462>
 8009a34:	68e0      	ldr	r0, [r4, #12]
 8009a36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a38:	4298      	cmp	r0, r3
 8009a3a:	bfb8      	it	lt
 8009a3c:	4618      	movlt	r0, r3
 8009a3e:	e730      	b.n	80098a2 <_printf_float+0xc6>
 8009a40:	2301      	movs	r3, #1
 8009a42:	464a      	mov	r2, r9
 8009a44:	4631      	mov	r1, r6
 8009a46:	4628      	mov	r0, r5
 8009a48:	47b8      	blx	r7
 8009a4a:	3001      	adds	r0, #1
 8009a4c:	f43f af27 	beq.w	800989e <_printf_float+0xc2>
 8009a50:	f108 0801 	add.w	r8, r8, #1
 8009a54:	e7e6      	b.n	8009a24 <_printf_float+0x248>
 8009a56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	dc39      	bgt.n	8009ad0 <_printf_float+0x2f4>
 8009a5c:	4a1b      	ldr	r2, [pc, #108]	; (8009acc <_printf_float+0x2f0>)
 8009a5e:	2301      	movs	r3, #1
 8009a60:	4631      	mov	r1, r6
 8009a62:	4628      	mov	r0, r5
 8009a64:	47b8      	blx	r7
 8009a66:	3001      	adds	r0, #1
 8009a68:	f43f af19 	beq.w	800989e <_printf_float+0xc2>
 8009a6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a70:	4313      	orrs	r3, r2
 8009a72:	d102      	bne.n	8009a7a <_printf_float+0x29e>
 8009a74:	6823      	ldr	r3, [r4, #0]
 8009a76:	07d9      	lsls	r1, r3, #31
 8009a78:	d5d8      	bpl.n	8009a2c <_printf_float+0x250>
 8009a7a:	ee18 3a10 	vmov	r3, s16
 8009a7e:	4652      	mov	r2, sl
 8009a80:	4631      	mov	r1, r6
 8009a82:	4628      	mov	r0, r5
 8009a84:	47b8      	blx	r7
 8009a86:	3001      	adds	r0, #1
 8009a88:	f43f af09 	beq.w	800989e <_printf_float+0xc2>
 8009a8c:	f04f 0900 	mov.w	r9, #0
 8009a90:	f104 0a1a 	add.w	sl, r4, #26
 8009a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a96:	425b      	negs	r3, r3
 8009a98:	454b      	cmp	r3, r9
 8009a9a:	dc01      	bgt.n	8009aa0 <_printf_float+0x2c4>
 8009a9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a9e:	e792      	b.n	80099c6 <_printf_float+0x1ea>
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	4652      	mov	r2, sl
 8009aa4:	4631      	mov	r1, r6
 8009aa6:	4628      	mov	r0, r5
 8009aa8:	47b8      	blx	r7
 8009aaa:	3001      	adds	r0, #1
 8009aac:	f43f aef7 	beq.w	800989e <_printf_float+0xc2>
 8009ab0:	f109 0901 	add.w	r9, r9, #1
 8009ab4:	e7ee      	b.n	8009a94 <_printf_float+0x2b8>
 8009ab6:	bf00      	nop
 8009ab8:	7fefffff 	.word	0x7fefffff
 8009abc:	0800c904 	.word	0x0800c904
 8009ac0:	0800c908 	.word	0x0800c908
 8009ac4:	0800c910 	.word	0x0800c910
 8009ac8:	0800c90c 	.word	0x0800c90c
 8009acc:	0800c914 	.word	0x0800c914
 8009ad0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ad2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	bfa8      	it	ge
 8009ad8:	461a      	movge	r2, r3
 8009ada:	2a00      	cmp	r2, #0
 8009adc:	4691      	mov	r9, r2
 8009ade:	dc37      	bgt.n	8009b50 <_printf_float+0x374>
 8009ae0:	f04f 0b00 	mov.w	fp, #0
 8009ae4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ae8:	f104 021a 	add.w	r2, r4, #26
 8009aec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009aee:	9305      	str	r3, [sp, #20]
 8009af0:	eba3 0309 	sub.w	r3, r3, r9
 8009af4:	455b      	cmp	r3, fp
 8009af6:	dc33      	bgt.n	8009b60 <_printf_float+0x384>
 8009af8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009afc:	429a      	cmp	r2, r3
 8009afe:	db3b      	blt.n	8009b78 <_printf_float+0x39c>
 8009b00:	6823      	ldr	r3, [r4, #0]
 8009b02:	07da      	lsls	r2, r3, #31
 8009b04:	d438      	bmi.n	8009b78 <_printf_float+0x39c>
 8009b06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b08:	9b05      	ldr	r3, [sp, #20]
 8009b0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009b0c:	1ad3      	subs	r3, r2, r3
 8009b0e:	eba2 0901 	sub.w	r9, r2, r1
 8009b12:	4599      	cmp	r9, r3
 8009b14:	bfa8      	it	ge
 8009b16:	4699      	movge	r9, r3
 8009b18:	f1b9 0f00 	cmp.w	r9, #0
 8009b1c:	dc35      	bgt.n	8009b8a <_printf_float+0x3ae>
 8009b1e:	f04f 0800 	mov.w	r8, #0
 8009b22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009b26:	f104 0a1a 	add.w	sl, r4, #26
 8009b2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b2e:	1a9b      	subs	r3, r3, r2
 8009b30:	eba3 0309 	sub.w	r3, r3, r9
 8009b34:	4543      	cmp	r3, r8
 8009b36:	f77f af79 	ble.w	8009a2c <_printf_float+0x250>
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	4652      	mov	r2, sl
 8009b3e:	4631      	mov	r1, r6
 8009b40:	4628      	mov	r0, r5
 8009b42:	47b8      	blx	r7
 8009b44:	3001      	adds	r0, #1
 8009b46:	f43f aeaa 	beq.w	800989e <_printf_float+0xc2>
 8009b4a:	f108 0801 	add.w	r8, r8, #1
 8009b4e:	e7ec      	b.n	8009b2a <_printf_float+0x34e>
 8009b50:	4613      	mov	r3, r2
 8009b52:	4631      	mov	r1, r6
 8009b54:	4642      	mov	r2, r8
 8009b56:	4628      	mov	r0, r5
 8009b58:	47b8      	blx	r7
 8009b5a:	3001      	adds	r0, #1
 8009b5c:	d1c0      	bne.n	8009ae0 <_printf_float+0x304>
 8009b5e:	e69e      	b.n	800989e <_printf_float+0xc2>
 8009b60:	2301      	movs	r3, #1
 8009b62:	4631      	mov	r1, r6
 8009b64:	4628      	mov	r0, r5
 8009b66:	9205      	str	r2, [sp, #20]
 8009b68:	47b8      	blx	r7
 8009b6a:	3001      	adds	r0, #1
 8009b6c:	f43f ae97 	beq.w	800989e <_printf_float+0xc2>
 8009b70:	9a05      	ldr	r2, [sp, #20]
 8009b72:	f10b 0b01 	add.w	fp, fp, #1
 8009b76:	e7b9      	b.n	8009aec <_printf_float+0x310>
 8009b78:	ee18 3a10 	vmov	r3, s16
 8009b7c:	4652      	mov	r2, sl
 8009b7e:	4631      	mov	r1, r6
 8009b80:	4628      	mov	r0, r5
 8009b82:	47b8      	blx	r7
 8009b84:	3001      	adds	r0, #1
 8009b86:	d1be      	bne.n	8009b06 <_printf_float+0x32a>
 8009b88:	e689      	b.n	800989e <_printf_float+0xc2>
 8009b8a:	9a05      	ldr	r2, [sp, #20]
 8009b8c:	464b      	mov	r3, r9
 8009b8e:	4442      	add	r2, r8
 8009b90:	4631      	mov	r1, r6
 8009b92:	4628      	mov	r0, r5
 8009b94:	47b8      	blx	r7
 8009b96:	3001      	adds	r0, #1
 8009b98:	d1c1      	bne.n	8009b1e <_printf_float+0x342>
 8009b9a:	e680      	b.n	800989e <_printf_float+0xc2>
 8009b9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b9e:	2a01      	cmp	r2, #1
 8009ba0:	dc01      	bgt.n	8009ba6 <_printf_float+0x3ca>
 8009ba2:	07db      	lsls	r3, r3, #31
 8009ba4:	d538      	bpl.n	8009c18 <_printf_float+0x43c>
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	4642      	mov	r2, r8
 8009baa:	4631      	mov	r1, r6
 8009bac:	4628      	mov	r0, r5
 8009bae:	47b8      	blx	r7
 8009bb0:	3001      	adds	r0, #1
 8009bb2:	f43f ae74 	beq.w	800989e <_printf_float+0xc2>
 8009bb6:	ee18 3a10 	vmov	r3, s16
 8009bba:	4652      	mov	r2, sl
 8009bbc:	4631      	mov	r1, r6
 8009bbe:	4628      	mov	r0, r5
 8009bc0:	47b8      	blx	r7
 8009bc2:	3001      	adds	r0, #1
 8009bc4:	f43f ae6b 	beq.w	800989e <_printf_float+0xc2>
 8009bc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009bcc:	2200      	movs	r2, #0
 8009bce:	2300      	movs	r3, #0
 8009bd0:	f7f6 ffa2 	bl	8000b18 <__aeabi_dcmpeq>
 8009bd4:	b9d8      	cbnz	r0, 8009c0e <_printf_float+0x432>
 8009bd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bd8:	f108 0201 	add.w	r2, r8, #1
 8009bdc:	3b01      	subs	r3, #1
 8009bde:	4631      	mov	r1, r6
 8009be0:	4628      	mov	r0, r5
 8009be2:	47b8      	blx	r7
 8009be4:	3001      	adds	r0, #1
 8009be6:	d10e      	bne.n	8009c06 <_printf_float+0x42a>
 8009be8:	e659      	b.n	800989e <_printf_float+0xc2>
 8009bea:	2301      	movs	r3, #1
 8009bec:	4652      	mov	r2, sl
 8009bee:	4631      	mov	r1, r6
 8009bf0:	4628      	mov	r0, r5
 8009bf2:	47b8      	blx	r7
 8009bf4:	3001      	adds	r0, #1
 8009bf6:	f43f ae52 	beq.w	800989e <_printf_float+0xc2>
 8009bfa:	f108 0801 	add.w	r8, r8, #1
 8009bfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c00:	3b01      	subs	r3, #1
 8009c02:	4543      	cmp	r3, r8
 8009c04:	dcf1      	bgt.n	8009bea <_printf_float+0x40e>
 8009c06:	464b      	mov	r3, r9
 8009c08:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009c0c:	e6dc      	b.n	80099c8 <_printf_float+0x1ec>
 8009c0e:	f04f 0800 	mov.w	r8, #0
 8009c12:	f104 0a1a 	add.w	sl, r4, #26
 8009c16:	e7f2      	b.n	8009bfe <_printf_float+0x422>
 8009c18:	2301      	movs	r3, #1
 8009c1a:	4642      	mov	r2, r8
 8009c1c:	e7df      	b.n	8009bde <_printf_float+0x402>
 8009c1e:	2301      	movs	r3, #1
 8009c20:	464a      	mov	r2, r9
 8009c22:	4631      	mov	r1, r6
 8009c24:	4628      	mov	r0, r5
 8009c26:	47b8      	blx	r7
 8009c28:	3001      	adds	r0, #1
 8009c2a:	f43f ae38 	beq.w	800989e <_printf_float+0xc2>
 8009c2e:	f108 0801 	add.w	r8, r8, #1
 8009c32:	68e3      	ldr	r3, [r4, #12]
 8009c34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009c36:	1a5b      	subs	r3, r3, r1
 8009c38:	4543      	cmp	r3, r8
 8009c3a:	dcf0      	bgt.n	8009c1e <_printf_float+0x442>
 8009c3c:	e6fa      	b.n	8009a34 <_printf_float+0x258>
 8009c3e:	f04f 0800 	mov.w	r8, #0
 8009c42:	f104 0919 	add.w	r9, r4, #25
 8009c46:	e7f4      	b.n	8009c32 <_printf_float+0x456>

08009c48 <_printf_common>:
 8009c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c4c:	4616      	mov	r6, r2
 8009c4e:	4699      	mov	r9, r3
 8009c50:	688a      	ldr	r2, [r1, #8]
 8009c52:	690b      	ldr	r3, [r1, #16]
 8009c54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	bfb8      	it	lt
 8009c5c:	4613      	movlt	r3, r2
 8009c5e:	6033      	str	r3, [r6, #0]
 8009c60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009c64:	4607      	mov	r7, r0
 8009c66:	460c      	mov	r4, r1
 8009c68:	b10a      	cbz	r2, 8009c6e <_printf_common+0x26>
 8009c6a:	3301      	adds	r3, #1
 8009c6c:	6033      	str	r3, [r6, #0]
 8009c6e:	6823      	ldr	r3, [r4, #0]
 8009c70:	0699      	lsls	r1, r3, #26
 8009c72:	bf42      	ittt	mi
 8009c74:	6833      	ldrmi	r3, [r6, #0]
 8009c76:	3302      	addmi	r3, #2
 8009c78:	6033      	strmi	r3, [r6, #0]
 8009c7a:	6825      	ldr	r5, [r4, #0]
 8009c7c:	f015 0506 	ands.w	r5, r5, #6
 8009c80:	d106      	bne.n	8009c90 <_printf_common+0x48>
 8009c82:	f104 0a19 	add.w	sl, r4, #25
 8009c86:	68e3      	ldr	r3, [r4, #12]
 8009c88:	6832      	ldr	r2, [r6, #0]
 8009c8a:	1a9b      	subs	r3, r3, r2
 8009c8c:	42ab      	cmp	r3, r5
 8009c8e:	dc26      	bgt.n	8009cde <_printf_common+0x96>
 8009c90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009c94:	1e13      	subs	r3, r2, #0
 8009c96:	6822      	ldr	r2, [r4, #0]
 8009c98:	bf18      	it	ne
 8009c9a:	2301      	movne	r3, #1
 8009c9c:	0692      	lsls	r2, r2, #26
 8009c9e:	d42b      	bmi.n	8009cf8 <_printf_common+0xb0>
 8009ca0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ca4:	4649      	mov	r1, r9
 8009ca6:	4638      	mov	r0, r7
 8009ca8:	47c0      	blx	r8
 8009caa:	3001      	adds	r0, #1
 8009cac:	d01e      	beq.n	8009cec <_printf_common+0xa4>
 8009cae:	6823      	ldr	r3, [r4, #0]
 8009cb0:	68e5      	ldr	r5, [r4, #12]
 8009cb2:	6832      	ldr	r2, [r6, #0]
 8009cb4:	f003 0306 	and.w	r3, r3, #6
 8009cb8:	2b04      	cmp	r3, #4
 8009cba:	bf08      	it	eq
 8009cbc:	1aad      	subeq	r5, r5, r2
 8009cbe:	68a3      	ldr	r3, [r4, #8]
 8009cc0:	6922      	ldr	r2, [r4, #16]
 8009cc2:	bf0c      	ite	eq
 8009cc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009cc8:	2500      	movne	r5, #0
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	bfc4      	itt	gt
 8009cce:	1a9b      	subgt	r3, r3, r2
 8009cd0:	18ed      	addgt	r5, r5, r3
 8009cd2:	2600      	movs	r6, #0
 8009cd4:	341a      	adds	r4, #26
 8009cd6:	42b5      	cmp	r5, r6
 8009cd8:	d11a      	bne.n	8009d10 <_printf_common+0xc8>
 8009cda:	2000      	movs	r0, #0
 8009cdc:	e008      	b.n	8009cf0 <_printf_common+0xa8>
 8009cde:	2301      	movs	r3, #1
 8009ce0:	4652      	mov	r2, sl
 8009ce2:	4649      	mov	r1, r9
 8009ce4:	4638      	mov	r0, r7
 8009ce6:	47c0      	blx	r8
 8009ce8:	3001      	adds	r0, #1
 8009cea:	d103      	bne.n	8009cf4 <_printf_common+0xac>
 8009cec:	f04f 30ff 	mov.w	r0, #4294967295
 8009cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cf4:	3501      	adds	r5, #1
 8009cf6:	e7c6      	b.n	8009c86 <_printf_common+0x3e>
 8009cf8:	18e1      	adds	r1, r4, r3
 8009cfa:	1c5a      	adds	r2, r3, #1
 8009cfc:	2030      	movs	r0, #48	; 0x30
 8009cfe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009d02:	4422      	add	r2, r4
 8009d04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009d08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009d0c:	3302      	adds	r3, #2
 8009d0e:	e7c7      	b.n	8009ca0 <_printf_common+0x58>
 8009d10:	2301      	movs	r3, #1
 8009d12:	4622      	mov	r2, r4
 8009d14:	4649      	mov	r1, r9
 8009d16:	4638      	mov	r0, r7
 8009d18:	47c0      	blx	r8
 8009d1a:	3001      	adds	r0, #1
 8009d1c:	d0e6      	beq.n	8009cec <_printf_common+0xa4>
 8009d1e:	3601      	adds	r6, #1
 8009d20:	e7d9      	b.n	8009cd6 <_printf_common+0x8e>
	...

08009d24 <_printf_i>:
 8009d24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d28:	460c      	mov	r4, r1
 8009d2a:	4691      	mov	r9, r2
 8009d2c:	7e27      	ldrb	r7, [r4, #24]
 8009d2e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009d30:	2f78      	cmp	r7, #120	; 0x78
 8009d32:	4680      	mov	r8, r0
 8009d34:	469a      	mov	sl, r3
 8009d36:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009d3a:	d807      	bhi.n	8009d4c <_printf_i+0x28>
 8009d3c:	2f62      	cmp	r7, #98	; 0x62
 8009d3e:	d80a      	bhi.n	8009d56 <_printf_i+0x32>
 8009d40:	2f00      	cmp	r7, #0
 8009d42:	f000 80d8 	beq.w	8009ef6 <_printf_i+0x1d2>
 8009d46:	2f58      	cmp	r7, #88	; 0x58
 8009d48:	f000 80a3 	beq.w	8009e92 <_printf_i+0x16e>
 8009d4c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009d50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009d54:	e03a      	b.n	8009dcc <_printf_i+0xa8>
 8009d56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009d5a:	2b15      	cmp	r3, #21
 8009d5c:	d8f6      	bhi.n	8009d4c <_printf_i+0x28>
 8009d5e:	a001      	add	r0, pc, #4	; (adr r0, 8009d64 <_printf_i+0x40>)
 8009d60:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009d64:	08009dbd 	.word	0x08009dbd
 8009d68:	08009dd1 	.word	0x08009dd1
 8009d6c:	08009d4d 	.word	0x08009d4d
 8009d70:	08009d4d 	.word	0x08009d4d
 8009d74:	08009d4d 	.word	0x08009d4d
 8009d78:	08009d4d 	.word	0x08009d4d
 8009d7c:	08009dd1 	.word	0x08009dd1
 8009d80:	08009d4d 	.word	0x08009d4d
 8009d84:	08009d4d 	.word	0x08009d4d
 8009d88:	08009d4d 	.word	0x08009d4d
 8009d8c:	08009d4d 	.word	0x08009d4d
 8009d90:	08009edd 	.word	0x08009edd
 8009d94:	08009e01 	.word	0x08009e01
 8009d98:	08009ebf 	.word	0x08009ebf
 8009d9c:	08009d4d 	.word	0x08009d4d
 8009da0:	08009d4d 	.word	0x08009d4d
 8009da4:	08009eff 	.word	0x08009eff
 8009da8:	08009d4d 	.word	0x08009d4d
 8009dac:	08009e01 	.word	0x08009e01
 8009db0:	08009d4d 	.word	0x08009d4d
 8009db4:	08009d4d 	.word	0x08009d4d
 8009db8:	08009ec7 	.word	0x08009ec7
 8009dbc:	680b      	ldr	r3, [r1, #0]
 8009dbe:	1d1a      	adds	r2, r3, #4
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	600a      	str	r2, [r1, #0]
 8009dc4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009dc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009dcc:	2301      	movs	r3, #1
 8009dce:	e0a3      	b.n	8009f18 <_printf_i+0x1f4>
 8009dd0:	6825      	ldr	r5, [r4, #0]
 8009dd2:	6808      	ldr	r0, [r1, #0]
 8009dd4:	062e      	lsls	r6, r5, #24
 8009dd6:	f100 0304 	add.w	r3, r0, #4
 8009dda:	d50a      	bpl.n	8009df2 <_printf_i+0xce>
 8009ddc:	6805      	ldr	r5, [r0, #0]
 8009dde:	600b      	str	r3, [r1, #0]
 8009de0:	2d00      	cmp	r5, #0
 8009de2:	da03      	bge.n	8009dec <_printf_i+0xc8>
 8009de4:	232d      	movs	r3, #45	; 0x2d
 8009de6:	426d      	negs	r5, r5
 8009de8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009dec:	485e      	ldr	r0, [pc, #376]	; (8009f68 <_printf_i+0x244>)
 8009dee:	230a      	movs	r3, #10
 8009df0:	e019      	b.n	8009e26 <_printf_i+0x102>
 8009df2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009df6:	6805      	ldr	r5, [r0, #0]
 8009df8:	600b      	str	r3, [r1, #0]
 8009dfa:	bf18      	it	ne
 8009dfc:	b22d      	sxthne	r5, r5
 8009dfe:	e7ef      	b.n	8009de0 <_printf_i+0xbc>
 8009e00:	680b      	ldr	r3, [r1, #0]
 8009e02:	6825      	ldr	r5, [r4, #0]
 8009e04:	1d18      	adds	r0, r3, #4
 8009e06:	6008      	str	r0, [r1, #0]
 8009e08:	0628      	lsls	r0, r5, #24
 8009e0a:	d501      	bpl.n	8009e10 <_printf_i+0xec>
 8009e0c:	681d      	ldr	r5, [r3, #0]
 8009e0e:	e002      	b.n	8009e16 <_printf_i+0xf2>
 8009e10:	0669      	lsls	r1, r5, #25
 8009e12:	d5fb      	bpl.n	8009e0c <_printf_i+0xe8>
 8009e14:	881d      	ldrh	r5, [r3, #0]
 8009e16:	4854      	ldr	r0, [pc, #336]	; (8009f68 <_printf_i+0x244>)
 8009e18:	2f6f      	cmp	r7, #111	; 0x6f
 8009e1a:	bf0c      	ite	eq
 8009e1c:	2308      	moveq	r3, #8
 8009e1e:	230a      	movne	r3, #10
 8009e20:	2100      	movs	r1, #0
 8009e22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009e26:	6866      	ldr	r6, [r4, #4]
 8009e28:	60a6      	str	r6, [r4, #8]
 8009e2a:	2e00      	cmp	r6, #0
 8009e2c:	bfa2      	ittt	ge
 8009e2e:	6821      	ldrge	r1, [r4, #0]
 8009e30:	f021 0104 	bicge.w	r1, r1, #4
 8009e34:	6021      	strge	r1, [r4, #0]
 8009e36:	b90d      	cbnz	r5, 8009e3c <_printf_i+0x118>
 8009e38:	2e00      	cmp	r6, #0
 8009e3a:	d04d      	beq.n	8009ed8 <_printf_i+0x1b4>
 8009e3c:	4616      	mov	r6, r2
 8009e3e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009e42:	fb03 5711 	mls	r7, r3, r1, r5
 8009e46:	5dc7      	ldrb	r7, [r0, r7]
 8009e48:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009e4c:	462f      	mov	r7, r5
 8009e4e:	42bb      	cmp	r3, r7
 8009e50:	460d      	mov	r5, r1
 8009e52:	d9f4      	bls.n	8009e3e <_printf_i+0x11a>
 8009e54:	2b08      	cmp	r3, #8
 8009e56:	d10b      	bne.n	8009e70 <_printf_i+0x14c>
 8009e58:	6823      	ldr	r3, [r4, #0]
 8009e5a:	07df      	lsls	r7, r3, #31
 8009e5c:	d508      	bpl.n	8009e70 <_printf_i+0x14c>
 8009e5e:	6923      	ldr	r3, [r4, #16]
 8009e60:	6861      	ldr	r1, [r4, #4]
 8009e62:	4299      	cmp	r1, r3
 8009e64:	bfde      	ittt	le
 8009e66:	2330      	movle	r3, #48	; 0x30
 8009e68:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009e6c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009e70:	1b92      	subs	r2, r2, r6
 8009e72:	6122      	str	r2, [r4, #16]
 8009e74:	f8cd a000 	str.w	sl, [sp]
 8009e78:	464b      	mov	r3, r9
 8009e7a:	aa03      	add	r2, sp, #12
 8009e7c:	4621      	mov	r1, r4
 8009e7e:	4640      	mov	r0, r8
 8009e80:	f7ff fee2 	bl	8009c48 <_printf_common>
 8009e84:	3001      	adds	r0, #1
 8009e86:	d14c      	bne.n	8009f22 <_printf_i+0x1fe>
 8009e88:	f04f 30ff 	mov.w	r0, #4294967295
 8009e8c:	b004      	add	sp, #16
 8009e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e92:	4835      	ldr	r0, [pc, #212]	; (8009f68 <_printf_i+0x244>)
 8009e94:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009e98:	6823      	ldr	r3, [r4, #0]
 8009e9a:	680e      	ldr	r6, [r1, #0]
 8009e9c:	061f      	lsls	r7, r3, #24
 8009e9e:	f856 5b04 	ldr.w	r5, [r6], #4
 8009ea2:	600e      	str	r6, [r1, #0]
 8009ea4:	d514      	bpl.n	8009ed0 <_printf_i+0x1ac>
 8009ea6:	07d9      	lsls	r1, r3, #31
 8009ea8:	bf44      	itt	mi
 8009eaa:	f043 0320 	orrmi.w	r3, r3, #32
 8009eae:	6023      	strmi	r3, [r4, #0]
 8009eb0:	b91d      	cbnz	r5, 8009eba <_printf_i+0x196>
 8009eb2:	6823      	ldr	r3, [r4, #0]
 8009eb4:	f023 0320 	bic.w	r3, r3, #32
 8009eb8:	6023      	str	r3, [r4, #0]
 8009eba:	2310      	movs	r3, #16
 8009ebc:	e7b0      	b.n	8009e20 <_printf_i+0xfc>
 8009ebe:	6823      	ldr	r3, [r4, #0]
 8009ec0:	f043 0320 	orr.w	r3, r3, #32
 8009ec4:	6023      	str	r3, [r4, #0]
 8009ec6:	2378      	movs	r3, #120	; 0x78
 8009ec8:	4828      	ldr	r0, [pc, #160]	; (8009f6c <_printf_i+0x248>)
 8009eca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009ece:	e7e3      	b.n	8009e98 <_printf_i+0x174>
 8009ed0:	065e      	lsls	r6, r3, #25
 8009ed2:	bf48      	it	mi
 8009ed4:	b2ad      	uxthmi	r5, r5
 8009ed6:	e7e6      	b.n	8009ea6 <_printf_i+0x182>
 8009ed8:	4616      	mov	r6, r2
 8009eda:	e7bb      	b.n	8009e54 <_printf_i+0x130>
 8009edc:	680b      	ldr	r3, [r1, #0]
 8009ede:	6826      	ldr	r6, [r4, #0]
 8009ee0:	6960      	ldr	r0, [r4, #20]
 8009ee2:	1d1d      	adds	r5, r3, #4
 8009ee4:	600d      	str	r5, [r1, #0]
 8009ee6:	0635      	lsls	r5, r6, #24
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	d501      	bpl.n	8009ef0 <_printf_i+0x1cc>
 8009eec:	6018      	str	r0, [r3, #0]
 8009eee:	e002      	b.n	8009ef6 <_printf_i+0x1d2>
 8009ef0:	0671      	lsls	r1, r6, #25
 8009ef2:	d5fb      	bpl.n	8009eec <_printf_i+0x1c8>
 8009ef4:	8018      	strh	r0, [r3, #0]
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	6123      	str	r3, [r4, #16]
 8009efa:	4616      	mov	r6, r2
 8009efc:	e7ba      	b.n	8009e74 <_printf_i+0x150>
 8009efe:	680b      	ldr	r3, [r1, #0]
 8009f00:	1d1a      	adds	r2, r3, #4
 8009f02:	600a      	str	r2, [r1, #0]
 8009f04:	681e      	ldr	r6, [r3, #0]
 8009f06:	6862      	ldr	r2, [r4, #4]
 8009f08:	2100      	movs	r1, #0
 8009f0a:	4630      	mov	r0, r6
 8009f0c:	f7f6 f990 	bl	8000230 <memchr>
 8009f10:	b108      	cbz	r0, 8009f16 <_printf_i+0x1f2>
 8009f12:	1b80      	subs	r0, r0, r6
 8009f14:	6060      	str	r0, [r4, #4]
 8009f16:	6863      	ldr	r3, [r4, #4]
 8009f18:	6123      	str	r3, [r4, #16]
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f20:	e7a8      	b.n	8009e74 <_printf_i+0x150>
 8009f22:	6923      	ldr	r3, [r4, #16]
 8009f24:	4632      	mov	r2, r6
 8009f26:	4649      	mov	r1, r9
 8009f28:	4640      	mov	r0, r8
 8009f2a:	47d0      	blx	sl
 8009f2c:	3001      	adds	r0, #1
 8009f2e:	d0ab      	beq.n	8009e88 <_printf_i+0x164>
 8009f30:	6823      	ldr	r3, [r4, #0]
 8009f32:	079b      	lsls	r3, r3, #30
 8009f34:	d413      	bmi.n	8009f5e <_printf_i+0x23a>
 8009f36:	68e0      	ldr	r0, [r4, #12]
 8009f38:	9b03      	ldr	r3, [sp, #12]
 8009f3a:	4298      	cmp	r0, r3
 8009f3c:	bfb8      	it	lt
 8009f3e:	4618      	movlt	r0, r3
 8009f40:	e7a4      	b.n	8009e8c <_printf_i+0x168>
 8009f42:	2301      	movs	r3, #1
 8009f44:	4632      	mov	r2, r6
 8009f46:	4649      	mov	r1, r9
 8009f48:	4640      	mov	r0, r8
 8009f4a:	47d0      	blx	sl
 8009f4c:	3001      	adds	r0, #1
 8009f4e:	d09b      	beq.n	8009e88 <_printf_i+0x164>
 8009f50:	3501      	adds	r5, #1
 8009f52:	68e3      	ldr	r3, [r4, #12]
 8009f54:	9903      	ldr	r1, [sp, #12]
 8009f56:	1a5b      	subs	r3, r3, r1
 8009f58:	42ab      	cmp	r3, r5
 8009f5a:	dcf2      	bgt.n	8009f42 <_printf_i+0x21e>
 8009f5c:	e7eb      	b.n	8009f36 <_printf_i+0x212>
 8009f5e:	2500      	movs	r5, #0
 8009f60:	f104 0619 	add.w	r6, r4, #25
 8009f64:	e7f5      	b.n	8009f52 <_printf_i+0x22e>
 8009f66:	bf00      	nop
 8009f68:	0800c916 	.word	0x0800c916
 8009f6c:	0800c927 	.word	0x0800c927

08009f70 <siprintf>:
 8009f70:	b40e      	push	{r1, r2, r3}
 8009f72:	b500      	push	{lr}
 8009f74:	b09c      	sub	sp, #112	; 0x70
 8009f76:	ab1d      	add	r3, sp, #116	; 0x74
 8009f78:	9002      	str	r0, [sp, #8]
 8009f7a:	9006      	str	r0, [sp, #24]
 8009f7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009f80:	4809      	ldr	r0, [pc, #36]	; (8009fa8 <siprintf+0x38>)
 8009f82:	9107      	str	r1, [sp, #28]
 8009f84:	9104      	str	r1, [sp, #16]
 8009f86:	4909      	ldr	r1, [pc, #36]	; (8009fac <siprintf+0x3c>)
 8009f88:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f8c:	9105      	str	r1, [sp, #20]
 8009f8e:	6800      	ldr	r0, [r0, #0]
 8009f90:	9301      	str	r3, [sp, #4]
 8009f92:	a902      	add	r1, sp, #8
 8009f94:	f001 fb42 	bl	800b61c <_svfiprintf_r>
 8009f98:	9b02      	ldr	r3, [sp, #8]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	701a      	strb	r2, [r3, #0]
 8009f9e:	b01c      	add	sp, #112	; 0x70
 8009fa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009fa4:	b003      	add	sp, #12
 8009fa6:	4770      	bx	lr
 8009fa8:	20000010 	.word	0x20000010
 8009fac:	ffff0208 	.word	0xffff0208

08009fb0 <strcat>:
 8009fb0:	b510      	push	{r4, lr}
 8009fb2:	4602      	mov	r2, r0
 8009fb4:	7814      	ldrb	r4, [r2, #0]
 8009fb6:	4613      	mov	r3, r2
 8009fb8:	3201      	adds	r2, #1
 8009fba:	2c00      	cmp	r4, #0
 8009fbc:	d1fa      	bne.n	8009fb4 <strcat+0x4>
 8009fbe:	3b01      	subs	r3, #1
 8009fc0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009fc4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009fc8:	2a00      	cmp	r2, #0
 8009fca:	d1f9      	bne.n	8009fc0 <strcat+0x10>
 8009fcc:	bd10      	pop	{r4, pc}

08009fce <quorem>:
 8009fce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fd2:	6903      	ldr	r3, [r0, #16]
 8009fd4:	690c      	ldr	r4, [r1, #16]
 8009fd6:	42a3      	cmp	r3, r4
 8009fd8:	4607      	mov	r7, r0
 8009fda:	f2c0 8081 	blt.w	800a0e0 <quorem+0x112>
 8009fde:	3c01      	subs	r4, #1
 8009fe0:	f101 0814 	add.w	r8, r1, #20
 8009fe4:	f100 0514 	add.w	r5, r0, #20
 8009fe8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009fec:	9301      	str	r3, [sp, #4]
 8009fee:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009ff2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	429a      	cmp	r2, r3
 8009ffa:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009ffe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a002:	fbb2 f6f3 	udiv	r6, r2, r3
 800a006:	d331      	bcc.n	800a06c <quorem+0x9e>
 800a008:	f04f 0e00 	mov.w	lr, #0
 800a00c:	4640      	mov	r0, r8
 800a00e:	46ac      	mov	ip, r5
 800a010:	46f2      	mov	sl, lr
 800a012:	f850 2b04 	ldr.w	r2, [r0], #4
 800a016:	b293      	uxth	r3, r2
 800a018:	fb06 e303 	mla	r3, r6, r3, lr
 800a01c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a020:	b29b      	uxth	r3, r3
 800a022:	ebaa 0303 	sub.w	r3, sl, r3
 800a026:	0c12      	lsrs	r2, r2, #16
 800a028:	f8dc a000 	ldr.w	sl, [ip]
 800a02c:	fb06 e202 	mla	r2, r6, r2, lr
 800a030:	fa13 f38a 	uxtah	r3, r3, sl
 800a034:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a038:	fa1f fa82 	uxth.w	sl, r2
 800a03c:	f8dc 2000 	ldr.w	r2, [ip]
 800a040:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a044:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a048:	b29b      	uxth	r3, r3
 800a04a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a04e:	4581      	cmp	r9, r0
 800a050:	f84c 3b04 	str.w	r3, [ip], #4
 800a054:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a058:	d2db      	bcs.n	800a012 <quorem+0x44>
 800a05a:	f855 300b 	ldr.w	r3, [r5, fp]
 800a05e:	b92b      	cbnz	r3, 800a06c <quorem+0x9e>
 800a060:	9b01      	ldr	r3, [sp, #4]
 800a062:	3b04      	subs	r3, #4
 800a064:	429d      	cmp	r5, r3
 800a066:	461a      	mov	r2, r3
 800a068:	d32e      	bcc.n	800a0c8 <quorem+0xfa>
 800a06a:	613c      	str	r4, [r7, #16]
 800a06c:	4638      	mov	r0, r7
 800a06e:	f001 f8bf 	bl	800b1f0 <__mcmp>
 800a072:	2800      	cmp	r0, #0
 800a074:	db24      	blt.n	800a0c0 <quorem+0xf2>
 800a076:	3601      	adds	r6, #1
 800a078:	4628      	mov	r0, r5
 800a07a:	f04f 0c00 	mov.w	ip, #0
 800a07e:	f858 2b04 	ldr.w	r2, [r8], #4
 800a082:	f8d0 e000 	ldr.w	lr, [r0]
 800a086:	b293      	uxth	r3, r2
 800a088:	ebac 0303 	sub.w	r3, ip, r3
 800a08c:	0c12      	lsrs	r2, r2, #16
 800a08e:	fa13 f38e 	uxtah	r3, r3, lr
 800a092:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a096:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a09a:	b29b      	uxth	r3, r3
 800a09c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a0a0:	45c1      	cmp	r9, r8
 800a0a2:	f840 3b04 	str.w	r3, [r0], #4
 800a0a6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a0aa:	d2e8      	bcs.n	800a07e <quorem+0xb0>
 800a0ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a0b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a0b4:	b922      	cbnz	r2, 800a0c0 <quorem+0xf2>
 800a0b6:	3b04      	subs	r3, #4
 800a0b8:	429d      	cmp	r5, r3
 800a0ba:	461a      	mov	r2, r3
 800a0bc:	d30a      	bcc.n	800a0d4 <quorem+0x106>
 800a0be:	613c      	str	r4, [r7, #16]
 800a0c0:	4630      	mov	r0, r6
 800a0c2:	b003      	add	sp, #12
 800a0c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0c8:	6812      	ldr	r2, [r2, #0]
 800a0ca:	3b04      	subs	r3, #4
 800a0cc:	2a00      	cmp	r2, #0
 800a0ce:	d1cc      	bne.n	800a06a <quorem+0x9c>
 800a0d0:	3c01      	subs	r4, #1
 800a0d2:	e7c7      	b.n	800a064 <quorem+0x96>
 800a0d4:	6812      	ldr	r2, [r2, #0]
 800a0d6:	3b04      	subs	r3, #4
 800a0d8:	2a00      	cmp	r2, #0
 800a0da:	d1f0      	bne.n	800a0be <quorem+0xf0>
 800a0dc:	3c01      	subs	r4, #1
 800a0de:	e7eb      	b.n	800a0b8 <quorem+0xea>
 800a0e0:	2000      	movs	r0, #0
 800a0e2:	e7ee      	b.n	800a0c2 <quorem+0xf4>
 800a0e4:	0000      	movs	r0, r0
	...

0800a0e8 <_dtoa_r>:
 800a0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0ec:	ed2d 8b02 	vpush	{d8}
 800a0f0:	ec57 6b10 	vmov	r6, r7, d0
 800a0f4:	b095      	sub	sp, #84	; 0x54
 800a0f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a0f8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a0fc:	9105      	str	r1, [sp, #20]
 800a0fe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a102:	4604      	mov	r4, r0
 800a104:	9209      	str	r2, [sp, #36]	; 0x24
 800a106:	930f      	str	r3, [sp, #60]	; 0x3c
 800a108:	b975      	cbnz	r5, 800a128 <_dtoa_r+0x40>
 800a10a:	2010      	movs	r0, #16
 800a10c:	f000 fddc 	bl	800acc8 <malloc>
 800a110:	4602      	mov	r2, r0
 800a112:	6260      	str	r0, [r4, #36]	; 0x24
 800a114:	b920      	cbnz	r0, 800a120 <_dtoa_r+0x38>
 800a116:	4bb2      	ldr	r3, [pc, #712]	; (800a3e0 <_dtoa_r+0x2f8>)
 800a118:	21ea      	movs	r1, #234	; 0xea
 800a11a:	48b2      	ldr	r0, [pc, #712]	; (800a3e4 <_dtoa_r+0x2fc>)
 800a11c:	f001 fb8e 	bl	800b83c <__assert_func>
 800a120:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a124:	6005      	str	r5, [r0, #0]
 800a126:	60c5      	str	r5, [r0, #12]
 800a128:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a12a:	6819      	ldr	r1, [r3, #0]
 800a12c:	b151      	cbz	r1, 800a144 <_dtoa_r+0x5c>
 800a12e:	685a      	ldr	r2, [r3, #4]
 800a130:	604a      	str	r2, [r1, #4]
 800a132:	2301      	movs	r3, #1
 800a134:	4093      	lsls	r3, r2
 800a136:	608b      	str	r3, [r1, #8]
 800a138:	4620      	mov	r0, r4
 800a13a:	f000 fe1b 	bl	800ad74 <_Bfree>
 800a13e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a140:	2200      	movs	r2, #0
 800a142:	601a      	str	r2, [r3, #0]
 800a144:	1e3b      	subs	r3, r7, #0
 800a146:	bfb9      	ittee	lt
 800a148:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a14c:	9303      	strlt	r3, [sp, #12]
 800a14e:	2300      	movge	r3, #0
 800a150:	f8c8 3000 	strge.w	r3, [r8]
 800a154:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a158:	4ba3      	ldr	r3, [pc, #652]	; (800a3e8 <_dtoa_r+0x300>)
 800a15a:	bfbc      	itt	lt
 800a15c:	2201      	movlt	r2, #1
 800a15e:	f8c8 2000 	strlt.w	r2, [r8]
 800a162:	ea33 0309 	bics.w	r3, r3, r9
 800a166:	d11b      	bne.n	800a1a0 <_dtoa_r+0xb8>
 800a168:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a16a:	f242 730f 	movw	r3, #9999	; 0x270f
 800a16e:	6013      	str	r3, [r2, #0]
 800a170:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a174:	4333      	orrs	r3, r6
 800a176:	f000 857a 	beq.w	800ac6e <_dtoa_r+0xb86>
 800a17a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a17c:	b963      	cbnz	r3, 800a198 <_dtoa_r+0xb0>
 800a17e:	4b9b      	ldr	r3, [pc, #620]	; (800a3ec <_dtoa_r+0x304>)
 800a180:	e024      	b.n	800a1cc <_dtoa_r+0xe4>
 800a182:	4b9b      	ldr	r3, [pc, #620]	; (800a3f0 <_dtoa_r+0x308>)
 800a184:	9300      	str	r3, [sp, #0]
 800a186:	3308      	adds	r3, #8
 800a188:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a18a:	6013      	str	r3, [r2, #0]
 800a18c:	9800      	ldr	r0, [sp, #0]
 800a18e:	b015      	add	sp, #84	; 0x54
 800a190:	ecbd 8b02 	vpop	{d8}
 800a194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a198:	4b94      	ldr	r3, [pc, #592]	; (800a3ec <_dtoa_r+0x304>)
 800a19a:	9300      	str	r3, [sp, #0]
 800a19c:	3303      	adds	r3, #3
 800a19e:	e7f3      	b.n	800a188 <_dtoa_r+0xa0>
 800a1a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	ec51 0b17 	vmov	r0, r1, d7
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a1b0:	f7f6 fcb2 	bl	8000b18 <__aeabi_dcmpeq>
 800a1b4:	4680      	mov	r8, r0
 800a1b6:	b158      	cbz	r0, 800a1d0 <_dtoa_r+0xe8>
 800a1b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	6013      	str	r3, [r2, #0]
 800a1be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	f000 8551 	beq.w	800ac68 <_dtoa_r+0xb80>
 800a1c6:	488b      	ldr	r0, [pc, #556]	; (800a3f4 <_dtoa_r+0x30c>)
 800a1c8:	6018      	str	r0, [r3, #0]
 800a1ca:	1e43      	subs	r3, r0, #1
 800a1cc:	9300      	str	r3, [sp, #0]
 800a1ce:	e7dd      	b.n	800a18c <_dtoa_r+0xa4>
 800a1d0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a1d4:	aa12      	add	r2, sp, #72	; 0x48
 800a1d6:	a913      	add	r1, sp, #76	; 0x4c
 800a1d8:	4620      	mov	r0, r4
 800a1da:	f001 f8ad 	bl	800b338 <__d2b>
 800a1de:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a1e2:	4683      	mov	fp, r0
 800a1e4:	2d00      	cmp	r5, #0
 800a1e6:	d07c      	beq.n	800a2e2 <_dtoa_r+0x1fa>
 800a1e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1ea:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a1ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a1f2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a1f6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a1fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a1fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a202:	4b7d      	ldr	r3, [pc, #500]	; (800a3f8 <_dtoa_r+0x310>)
 800a204:	2200      	movs	r2, #0
 800a206:	4630      	mov	r0, r6
 800a208:	4639      	mov	r1, r7
 800a20a:	f7f6 f865 	bl	80002d8 <__aeabi_dsub>
 800a20e:	a36e      	add	r3, pc, #440	; (adr r3, 800a3c8 <_dtoa_r+0x2e0>)
 800a210:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a214:	f7f6 fa18 	bl	8000648 <__aeabi_dmul>
 800a218:	a36d      	add	r3, pc, #436	; (adr r3, 800a3d0 <_dtoa_r+0x2e8>)
 800a21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a21e:	f7f6 f85d 	bl	80002dc <__adddf3>
 800a222:	4606      	mov	r6, r0
 800a224:	4628      	mov	r0, r5
 800a226:	460f      	mov	r7, r1
 800a228:	f7f6 f9a4 	bl	8000574 <__aeabi_i2d>
 800a22c:	a36a      	add	r3, pc, #424	; (adr r3, 800a3d8 <_dtoa_r+0x2f0>)
 800a22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a232:	f7f6 fa09 	bl	8000648 <__aeabi_dmul>
 800a236:	4602      	mov	r2, r0
 800a238:	460b      	mov	r3, r1
 800a23a:	4630      	mov	r0, r6
 800a23c:	4639      	mov	r1, r7
 800a23e:	f7f6 f84d 	bl	80002dc <__adddf3>
 800a242:	4606      	mov	r6, r0
 800a244:	460f      	mov	r7, r1
 800a246:	f7f6 fcaf 	bl	8000ba8 <__aeabi_d2iz>
 800a24a:	2200      	movs	r2, #0
 800a24c:	4682      	mov	sl, r0
 800a24e:	2300      	movs	r3, #0
 800a250:	4630      	mov	r0, r6
 800a252:	4639      	mov	r1, r7
 800a254:	f7f6 fc6a 	bl	8000b2c <__aeabi_dcmplt>
 800a258:	b148      	cbz	r0, 800a26e <_dtoa_r+0x186>
 800a25a:	4650      	mov	r0, sl
 800a25c:	f7f6 f98a 	bl	8000574 <__aeabi_i2d>
 800a260:	4632      	mov	r2, r6
 800a262:	463b      	mov	r3, r7
 800a264:	f7f6 fc58 	bl	8000b18 <__aeabi_dcmpeq>
 800a268:	b908      	cbnz	r0, 800a26e <_dtoa_r+0x186>
 800a26a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a26e:	f1ba 0f16 	cmp.w	sl, #22
 800a272:	d854      	bhi.n	800a31e <_dtoa_r+0x236>
 800a274:	4b61      	ldr	r3, [pc, #388]	; (800a3fc <_dtoa_r+0x314>)
 800a276:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a27e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a282:	f7f6 fc53 	bl	8000b2c <__aeabi_dcmplt>
 800a286:	2800      	cmp	r0, #0
 800a288:	d04b      	beq.n	800a322 <_dtoa_r+0x23a>
 800a28a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a28e:	2300      	movs	r3, #0
 800a290:	930e      	str	r3, [sp, #56]	; 0x38
 800a292:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a294:	1b5d      	subs	r5, r3, r5
 800a296:	1e6b      	subs	r3, r5, #1
 800a298:	9304      	str	r3, [sp, #16]
 800a29a:	bf43      	ittte	mi
 800a29c:	2300      	movmi	r3, #0
 800a29e:	f1c5 0801 	rsbmi	r8, r5, #1
 800a2a2:	9304      	strmi	r3, [sp, #16]
 800a2a4:	f04f 0800 	movpl.w	r8, #0
 800a2a8:	f1ba 0f00 	cmp.w	sl, #0
 800a2ac:	db3b      	blt.n	800a326 <_dtoa_r+0x23e>
 800a2ae:	9b04      	ldr	r3, [sp, #16]
 800a2b0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a2b4:	4453      	add	r3, sl
 800a2b6:	9304      	str	r3, [sp, #16]
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	9306      	str	r3, [sp, #24]
 800a2bc:	9b05      	ldr	r3, [sp, #20]
 800a2be:	2b09      	cmp	r3, #9
 800a2c0:	d869      	bhi.n	800a396 <_dtoa_r+0x2ae>
 800a2c2:	2b05      	cmp	r3, #5
 800a2c4:	bfc4      	itt	gt
 800a2c6:	3b04      	subgt	r3, #4
 800a2c8:	9305      	strgt	r3, [sp, #20]
 800a2ca:	9b05      	ldr	r3, [sp, #20]
 800a2cc:	f1a3 0302 	sub.w	r3, r3, #2
 800a2d0:	bfcc      	ite	gt
 800a2d2:	2500      	movgt	r5, #0
 800a2d4:	2501      	movle	r5, #1
 800a2d6:	2b03      	cmp	r3, #3
 800a2d8:	d869      	bhi.n	800a3ae <_dtoa_r+0x2c6>
 800a2da:	e8df f003 	tbb	[pc, r3]
 800a2de:	4e2c      	.short	0x4e2c
 800a2e0:	5a4c      	.short	0x5a4c
 800a2e2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a2e6:	441d      	add	r5, r3
 800a2e8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a2ec:	2b20      	cmp	r3, #32
 800a2ee:	bfc1      	itttt	gt
 800a2f0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a2f4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a2f8:	fa09 f303 	lslgt.w	r3, r9, r3
 800a2fc:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a300:	bfda      	itte	le
 800a302:	f1c3 0320 	rsble	r3, r3, #32
 800a306:	fa06 f003 	lslle.w	r0, r6, r3
 800a30a:	4318      	orrgt	r0, r3
 800a30c:	f7f6 f922 	bl	8000554 <__aeabi_ui2d>
 800a310:	2301      	movs	r3, #1
 800a312:	4606      	mov	r6, r0
 800a314:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a318:	3d01      	subs	r5, #1
 800a31a:	9310      	str	r3, [sp, #64]	; 0x40
 800a31c:	e771      	b.n	800a202 <_dtoa_r+0x11a>
 800a31e:	2301      	movs	r3, #1
 800a320:	e7b6      	b.n	800a290 <_dtoa_r+0x1a8>
 800a322:	900e      	str	r0, [sp, #56]	; 0x38
 800a324:	e7b5      	b.n	800a292 <_dtoa_r+0x1aa>
 800a326:	f1ca 0300 	rsb	r3, sl, #0
 800a32a:	9306      	str	r3, [sp, #24]
 800a32c:	2300      	movs	r3, #0
 800a32e:	eba8 080a 	sub.w	r8, r8, sl
 800a332:	930d      	str	r3, [sp, #52]	; 0x34
 800a334:	e7c2      	b.n	800a2bc <_dtoa_r+0x1d4>
 800a336:	2300      	movs	r3, #0
 800a338:	9308      	str	r3, [sp, #32]
 800a33a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	dc39      	bgt.n	800a3b4 <_dtoa_r+0x2cc>
 800a340:	f04f 0901 	mov.w	r9, #1
 800a344:	f8cd 9004 	str.w	r9, [sp, #4]
 800a348:	464b      	mov	r3, r9
 800a34a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a34e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a350:	2200      	movs	r2, #0
 800a352:	6042      	str	r2, [r0, #4]
 800a354:	2204      	movs	r2, #4
 800a356:	f102 0614 	add.w	r6, r2, #20
 800a35a:	429e      	cmp	r6, r3
 800a35c:	6841      	ldr	r1, [r0, #4]
 800a35e:	d92f      	bls.n	800a3c0 <_dtoa_r+0x2d8>
 800a360:	4620      	mov	r0, r4
 800a362:	f000 fcc7 	bl	800acf4 <_Balloc>
 800a366:	9000      	str	r0, [sp, #0]
 800a368:	2800      	cmp	r0, #0
 800a36a:	d14b      	bne.n	800a404 <_dtoa_r+0x31c>
 800a36c:	4b24      	ldr	r3, [pc, #144]	; (800a400 <_dtoa_r+0x318>)
 800a36e:	4602      	mov	r2, r0
 800a370:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a374:	e6d1      	b.n	800a11a <_dtoa_r+0x32>
 800a376:	2301      	movs	r3, #1
 800a378:	e7de      	b.n	800a338 <_dtoa_r+0x250>
 800a37a:	2300      	movs	r3, #0
 800a37c:	9308      	str	r3, [sp, #32]
 800a37e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a380:	eb0a 0903 	add.w	r9, sl, r3
 800a384:	f109 0301 	add.w	r3, r9, #1
 800a388:	2b01      	cmp	r3, #1
 800a38a:	9301      	str	r3, [sp, #4]
 800a38c:	bfb8      	it	lt
 800a38e:	2301      	movlt	r3, #1
 800a390:	e7dd      	b.n	800a34e <_dtoa_r+0x266>
 800a392:	2301      	movs	r3, #1
 800a394:	e7f2      	b.n	800a37c <_dtoa_r+0x294>
 800a396:	2501      	movs	r5, #1
 800a398:	2300      	movs	r3, #0
 800a39a:	9305      	str	r3, [sp, #20]
 800a39c:	9508      	str	r5, [sp, #32]
 800a39e:	f04f 39ff 	mov.w	r9, #4294967295
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	f8cd 9004 	str.w	r9, [sp, #4]
 800a3a8:	2312      	movs	r3, #18
 800a3aa:	9209      	str	r2, [sp, #36]	; 0x24
 800a3ac:	e7cf      	b.n	800a34e <_dtoa_r+0x266>
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	9308      	str	r3, [sp, #32]
 800a3b2:	e7f4      	b.n	800a39e <_dtoa_r+0x2b6>
 800a3b4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a3b8:	f8cd 9004 	str.w	r9, [sp, #4]
 800a3bc:	464b      	mov	r3, r9
 800a3be:	e7c6      	b.n	800a34e <_dtoa_r+0x266>
 800a3c0:	3101      	adds	r1, #1
 800a3c2:	6041      	str	r1, [r0, #4]
 800a3c4:	0052      	lsls	r2, r2, #1
 800a3c6:	e7c6      	b.n	800a356 <_dtoa_r+0x26e>
 800a3c8:	636f4361 	.word	0x636f4361
 800a3cc:	3fd287a7 	.word	0x3fd287a7
 800a3d0:	8b60c8b3 	.word	0x8b60c8b3
 800a3d4:	3fc68a28 	.word	0x3fc68a28
 800a3d8:	509f79fb 	.word	0x509f79fb
 800a3dc:	3fd34413 	.word	0x3fd34413
 800a3e0:	0800c945 	.word	0x0800c945
 800a3e4:	0800c95c 	.word	0x0800c95c
 800a3e8:	7ff00000 	.word	0x7ff00000
 800a3ec:	0800c941 	.word	0x0800c941
 800a3f0:	0800c938 	.word	0x0800c938
 800a3f4:	0800c915 	.word	0x0800c915
 800a3f8:	3ff80000 	.word	0x3ff80000
 800a3fc:	0800ca58 	.word	0x0800ca58
 800a400:	0800c9bb 	.word	0x0800c9bb
 800a404:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a406:	9a00      	ldr	r2, [sp, #0]
 800a408:	601a      	str	r2, [r3, #0]
 800a40a:	9b01      	ldr	r3, [sp, #4]
 800a40c:	2b0e      	cmp	r3, #14
 800a40e:	f200 80ad 	bhi.w	800a56c <_dtoa_r+0x484>
 800a412:	2d00      	cmp	r5, #0
 800a414:	f000 80aa 	beq.w	800a56c <_dtoa_r+0x484>
 800a418:	f1ba 0f00 	cmp.w	sl, #0
 800a41c:	dd36      	ble.n	800a48c <_dtoa_r+0x3a4>
 800a41e:	4ac3      	ldr	r2, [pc, #780]	; (800a72c <_dtoa_r+0x644>)
 800a420:	f00a 030f 	and.w	r3, sl, #15
 800a424:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a428:	ed93 7b00 	vldr	d7, [r3]
 800a42c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a430:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a434:	eeb0 8a47 	vmov.f32	s16, s14
 800a438:	eef0 8a67 	vmov.f32	s17, s15
 800a43c:	d016      	beq.n	800a46c <_dtoa_r+0x384>
 800a43e:	4bbc      	ldr	r3, [pc, #752]	; (800a730 <_dtoa_r+0x648>)
 800a440:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a444:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a448:	f7f6 fa28 	bl	800089c <__aeabi_ddiv>
 800a44c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a450:	f007 070f 	and.w	r7, r7, #15
 800a454:	2503      	movs	r5, #3
 800a456:	4eb6      	ldr	r6, [pc, #728]	; (800a730 <_dtoa_r+0x648>)
 800a458:	b957      	cbnz	r7, 800a470 <_dtoa_r+0x388>
 800a45a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a45e:	ec53 2b18 	vmov	r2, r3, d8
 800a462:	f7f6 fa1b 	bl	800089c <__aeabi_ddiv>
 800a466:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a46a:	e029      	b.n	800a4c0 <_dtoa_r+0x3d8>
 800a46c:	2502      	movs	r5, #2
 800a46e:	e7f2      	b.n	800a456 <_dtoa_r+0x36e>
 800a470:	07f9      	lsls	r1, r7, #31
 800a472:	d508      	bpl.n	800a486 <_dtoa_r+0x39e>
 800a474:	ec51 0b18 	vmov	r0, r1, d8
 800a478:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a47c:	f7f6 f8e4 	bl	8000648 <__aeabi_dmul>
 800a480:	ec41 0b18 	vmov	d8, r0, r1
 800a484:	3501      	adds	r5, #1
 800a486:	107f      	asrs	r7, r7, #1
 800a488:	3608      	adds	r6, #8
 800a48a:	e7e5      	b.n	800a458 <_dtoa_r+0x370>
 800a48c:	f000 80a6 	beq.w	800a5dc <_dtoa_r+0x4f4>
 800a490:	f1ca 0600 	rsb	r6, sl, #0
 800a494:	4ba5      	ldr	r3, [pc, #660]	; (800a72c <_dtoa_r+0x644>)
 800a496:	4fa6      	ldr	r7, [pc, #664]	; (800a730 <_dtoa_r+0x648>)
 800a498:	f006 020f 	and.w	r2, r6, #15
 800a49c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a4a8:	f7f6 f8ce 	bl	8000648 <__aeabi_dmul>
 800a4ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4b0:	1136      	asrs	r6, r6, #4
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	2502      	movs	r5, #2
 800a4b6:	2e00      	cmp	r6, #0
 800a4b8:	f040 8085 	bne.w	800a5c6 <_dtoa_r+0x4de>
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d1d2      	bne.n	800a466 <_dtoa_r+0x37e>
 800a4c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	f000 808c 	beq.w	800a5e0 <_dtoa_r+0x4f8>
 800a4c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a4cc:	4b99      	ldr	r3, [pc, #612]	; (800a734 <_dtoa_r+0x64c>)
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	4630      	mov	r0, r6
 800a4d2:	4639      	mov	r1, r7
 800a4d4:	f7f6 fb2a 	bl	8000b2c <__aeabi_dcmplt>
 800a4d8:	2800      	cmp	r0, #0
 800a4da:	f000 8081 	beq.w	800a5e0 <_dtoa_r+0x4f8>
 800a4de:	9b01      	ldr	r3, [sp, #4]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d07d      	beq.n	800a5e0 <_dtoa_r+0x4f8>
 800a4e4:	f1b9 0f00 	cmp.w	r9, #0
 800a4e8:	dd3c      	ble.n	800a564 <_dtoa_r+0x47c>
 800a4ea:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a4ee:	9307      	str	r3, [sp, #28]
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	4b91      	ldr	r3, [pc, #580]	; (800a738 <_dtoa_r+0x650>)
 800a4f4:	4630      	mov	r0, r6
 800a4f6:	4639      	mov	r1, r7
 800a4f8:	f7f6 f8a6 	bl	8000648 <__aeabi_dmul>
 800a4fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a500:	3501      	adds	r5, #1
 800a502:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a506:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a50a:	4628      	mov	r0, r5
 800a50c:	f7f6 f832 	bl	8000574 <__aeabi_i2d>
 800a510:	4632      	mov	r2, r6
 800a512:	463b      	mov	r3, r7
 800a514:	f7f6 f898 	bl	8000648 <__aeabi_dmul>
 800a518:	4b88      	ldr	r3, [pc, #544]	; (800a73c <_dtoa_r+0x654>)
 800a51a:	2200      	movs	r2, #0
 800a51c:	f7f5 fede 	bl	80002dc <__adddf3>
 800a520:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a524:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a528:	9303      	str	r3, [sp, #12]
 800a52a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d15c      	bne.n	800a5ea <_dtoa_r+0x502>
 800a530:	4b83      	ldr	r3, [pc, #524]	; (800a740 <_dtoa_r+0x658>)
 800a532:	2200      	movs	r2, #0
 800a534:	4630      	mov	r0, r6
 800a536:	4639      	mov	r1, r7
 800a538:	f7f5 fece 	bl	80002d8 <__aeabi_dsub>
 800a53c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a540:	4606      	mov	r6, r0
 800a542:	460f      	mov	r7, r1
 800a544:	f7f6 fb10 	bl	8000b68 <__aeabi_dcmpgt>
 800a548:	2800      	cmp	r0, #0
 800a54a:	f040 8296 	bne.w	800aa7a <_dtoa_r+0x992>
 800a54e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a552:	4630      	mov	r0, r6
 800a554:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a558:	4639      	mov	r1, r7
 800a55a:	f7f6 fae7 	bl	8000b2c <__aeabi_dcmplt>
 800a55e:	2800      	cmp	r0, #0
 800a560:	f040 8288 	bne.w	800aa74 <_dtoa_r+0x98c>
 800a564:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a568:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a56c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a56e:	2b00      	cmp	r3, #0
 800a570:	f2c0 8158 	blt.w	800a824 <_dtoa_r+0x73c>
 800a574:	f1ba 0f0e 	cmp.w	sl, #14
 800a578:	f300 8154 	bgt.w	800a824 <_dtoa_r+0x73c>
 800a57c:	4b6b      	ldr	r3, [pc, #428]	; (800a72c <_dtoa_r+0x644>)
 800a57e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a582:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a588:	2b00      	cmp	r3, #0
 800a58a:	f280 80e3 	bge.w	800a754 <_dtoa_r+0x66c>
 800a58e:	9b01      	ldr	r3, [sp, #4]
 800a590:	2b00      	cmp	r3, #0
 800a592:	f300 80df 	bgt.w	800a754 <_dtoa_r+0x66c>
 800a596:	f040 826d 	bne.w	800aa74 <_dtoa_r+0x98c>
 800a59a:	4b69      	ldr	r3, [pc, #420]	; (800a740 <_dtoa_r+0x658>)
 800a59c:	2200      	movs	r2, #0
 800a59e:	4640      	mov	r0, r8
 800a5a0:	4649      	mov	r1, r9
 800a5a2:	f7f6 f851 	bl	8000648 <__aeabi_dmul>
 800a5a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a5aa:	f7f6 fad3 	bl	8000b54 <__aeabi_dcmpge>
 800a5ae:	9e01      	ldr	r6, [sp, #4]
 800a5b0:	4637      	mov	r7, r6
 800a5b2:	2800      	cmp	r0, #0
 800a5b4:	f040 8243 	bne.w	800aa3e <_dtoa_r+0x956>
 800a5b8:	9d00      	ldr	r5, [sp, #0]
 800a5ba:	2331      	movs	r3, #49	; 0x31
 800a5bc:	f805 3b01 	strb.w	r3, [r5], #1
 800a5c0:	f10a 0a01 	add.w	sl, sl, #1
 800a5c4:	e23f      	b.n	800aa46 <_dtoa_r+0x95e>
 800a5c6:	07f2      	lsls	r2, r6, #31
 800a5c8:	d505      	bpl.n	800a5d6 <_dtoa_r+0x4ee>
 800a5ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5ce:	f7f6 f83b 	bl	8000648 <__aeabi_dmul>
 800a5d2:	3501      	adds	r5, #1
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	1076      	asrs	r6, r6, #1
 800a5d8:	3708      	adds	r7, #8
 800a5da:	e76c      	b.n	800a4b6 <_dtoa_r+0x3ce>
 800a5dc:	2502      	movs	r5, #2
 800a5de:	e76f      	b.n	800a4c0 <_dtoa_r+0x3d8>
 800a5e0:	9b01      	ldr	r3, [sp, #4]
 800a5e2:	f8cd a01c 	str.w	sl, [sp, #28]
 800a5e6:	930c      	str	r3, [sp, #48]	; 0x30
 800a5e8:	e78d      	b.n	800a506 <_dtoa_r+0x41e>
 800a5ea:	9900      	ldr	r1, [sp, #0]
 800a5ec:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a5ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a5f0:	4b4e      	ldr	r3, [pc, #312]	; (800a72c <_dtoa_r+0x644>)
 800a5f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a5f6:	4401      	add	r1, r0
 800a5f8:	9102      	str	r1, [sp, #8]
 800a5fa:	9908      	ldr	r1, [sp, #32]
 800a5fc:	eeb0 8a47 	vmov.f32	s16, s14
 800a600:	eef0 8a67 	vmov.f32	s17, s15
 800a604:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a608:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a60c:	2900      	cmp	r1, #0
 800a60e:	d045      	beq.n	800a69c <_dtoa_r+0x5b4>
 800a610:	494c      	ldr	r1, [pc, #304]	; (800a744 <_dtoa_r+0x65c>)
 800a612:	2000      	movs	r0, #0
 800a614:	f7f6 f942 	bl	800089c <__aeabi_ddiv>
 800a618:	ec53 2b18 	vmov	r2, r3, d8
 800a61c:	f7f5 fe5c 	bl	80002d8 <__aeabi_dsub>
 800a620:	9d00      	ldr	r5, [sp, #0]
 800a622:	ec41 0b18 	vmov	d8, r0, r1
 800a626:	4639      	mov	r1, r7
 800a628:	4630      	mov	r0, r6
 800a62a:	f7f6 fabd 	bl	8000ba8 <__aeabi_d2iz>
 800a62e:	900c      	str	r0, [sp, #48]	; 0x30
 800a630:	f7f5 ffa0 	bl	8000574 <__aeabi_i2d>
 800a634:	4602      	mov	r2, r0
 800a636:	460b      	mov	r3, r1
 800a638:	4630      	mov	r0, r6
 800a63a:	4639      	mov	r1, r7
 800a63c:	f7f5 fe4c 	bl	80002d8 <__aeabi_dsub>
 800a640:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a642:	3330      	adds	r3, #48	; 0x30
 800a644:	f805 3b01 	strb.w	r3, [r5], #1
 800a648:	ec53 2b18 	vmov	r2, r3, d8
 800a64c:	4606      	mov	r6, r0
 800a64e:	460f      	mov	r7, r1
 800a650:	f7f6 fa6c 	bl	8000b2c <__aeabi_dcmplt>
 800a654:	2800      	cmp	r0, #0
 800a656:	d165      	bne.n	800a724 <_dtoa_r+0x63c>
 800a658:	4632      	mov	r2, r6
 800a65a:	463b      	mov	r3, r7
 800a65c:	4935      	ldr	r1, [pc, #212]	; (800a734 <_dtoa_r+0x64c>)
 800a65e:	2000      	movs	r0, #0
 800a660:	f7f5 fe3a 	bl	80002d8 <__aeabi_dsub>
 800a664:	ec53 2b18 	vmov	r2, r3, d8
 800a668:	f7f6 fa60 	bl	8000b2c <__aeabi_dcmplt>
 800a66c:	2800      	cmp	r0, #0
 800a66e:	f040 80b9 	bne.w	800a7e4 <_dtoa_r+0x6fc>
 800a672:	9b02      	ldr	r3, [sp, #8]
 800a674:	429d      	cmp	r5, r3
 800a676:	f43f af75 	beq.w	800a564 <_dtoa_r+0x47c>
 800a67a:	4b2f      	ldr	r3, [pc, #188]	; (800a738 <_dtoa_r+0x650>)
 800a67c:	ec51 0b18 	vmov	r0, r1, d8
 800a680:	2200      	movs	r2, #0
 800a682:	f7f5 ffe1 	bl	8000648 <__aeabi_dmul>
 800a686:	4b2c      	ldr	r3, [pc, #176]	; (800a738 <_dtoa_r+0x650>)
 800a688:	ec41 0b18 	vmov	d8, r0, r1
 800a68c:	2200      	movs	r2, #0
 800a68e:	4630      	mov	r0, r6
 800a690:	4639      	mov	r1, r7
 800a692:	f7f5 ffd9 	bl	8000648 <__aeabi_dmul>
 800a696:	4606      	mov	r6, r0
 800a698:	460f      	mov	r7, r1
 800a69a:	e7c4      	b.n	800a626 <_dtoa_r+0x53e>
 800a69c:	ec51 0b17 	vmov	r0, r1, d7
 800a6a0:	f7f5 ffd2 	bl	8000648 <__aeabi_dmul>
 800a6a4:	9b02      	ldr	r3, [sp, #8]
 800a6a6:	9d00      	ldr	r5, [sp, #0]
 800a6a8:	930c      	str	r3, [sp, #48]	; 0x30
 800a6aa:	ec41 0b18 	vmov	d8, r0, r1
 800a6ae:	4639      	mov	r1, r7
 800a6b0:	4630      	mov	r0, r6
 800a6b2:	f7f6 fa79 	bl	8000ba8 <__aeabi_d2iz>
 800a6b6:	9011      	str	r0, [sp, #68]	; 0x44
 800a6b8:	f7f5 ff5c 	bl	8000574 <__aeabi_i2d>
 800a6bc:	4602      	mov	r2, r0
 800a6be:	460b      	mov	r3, r1
 800a6c0:	4630      	mov	r0, r6
 800a6c2:	4639      	mov	r1, r7
 800a6c4:	f7f5 fe08 	bl	80002d8 <__aeabi_dsub>
 800a6c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a6ca:	3330      	adds	r3, #48	; 0x30
 800a6cc:	f805 3b01 	strb.w	r3, [r5], #1
 800a6d0:	9b02      	ldr	r3, [sp, #8]
 800a6d2:	429d      	cmp	r5, r3
 800a6d4:	4606      	mov	r6, r0
 800a6d6:	460f      	mov	r7, r1
 800a6d8:	f04f 0200 	mov.w	r2, #0
 800a6dc:	d134      	bne.n	800a748 <_dtoa_r+0x660>
 800a6de:	4b19      	ldr	r3, [pc, #100]	; (800a744 <_dtoa_r+0x65c>)
 800a6e0:	ec51 0b18 	vmov	r0, r1, d8
 800a6e4:	f7f5 fdfa 	bl	80002dc <__adddf3>
 800a6e8:	4602      	mov	r2, r0
 800a6ea:	460b      	mov	r3, r1
 800a6ec:	4630      	mov	r0, r6
 800a6ee:	4639      	mov	r1, r7
 800a6f0:	f7f6 fa3a 	bl	8000b68 <__aeabi_dcmpgt>
 800a6f4:	2800      	cmp	r0, #0
 800a6f6:	d175      	bne.n	800a7e4 <_dtoa_r+0x6fc>
 800a6f8:	ec53 2b18 	vmov	r2, r3, d8
 800a6fc:	4911      	ldr	r1, [pc, #68]	; (800a744 <_dtoa_r+0x65c>)
 800a6fe:	2000      	movs	r0, #0
 800a700:	f7f5 fdea 	bl	80002d8 <__aeabi_dsub>
 800a704:	4602      	mov	r2, r0
 800a706:	460b      	mov	r3, r1
 800a708:	4630      	mov	r0, r6
 800a70a:	4639      	mov	r1, r7
 800a70c:	f7f6 fa0e 	bl	8000b2c <__aeabi_dcmplt>
 800a710:	2800      	cmp	r0, #0
 800a712:	f43f af27 	beq.w	800a564 <_dtoa_r+0x47c>
 800a716:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a718:	1e6b      	subs	r3, r5, #1
 800a71a:	930c      	str	r3, [sp, #48]	; 0x30
 800a71c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a720:	2b30      	cmp	r3, #48	; 0x30
 800a722:	d0f8      	beq.n	800a716 <_dtoa_r+0x62e>
 800a724:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a728:	e04a      	b.n	800a7c0 <_dtoa_r+0x6d8>
 800a72a:	bf00      	nop
 800a72c:	0800ca58 	.word	0x0800ca58
 800a730:	0800ca30 	.word	0x0800ca30
 800a734:	3ff00000 	.word	0x3ff00000
 800a738:	40240000 	.word	0x40240000
 800a73c:	401c0000 	.word	0x401c0000
 800a740:	40140000 	.word	0x40140000
 800a744:	3fe00000 	.word	0x3fe00000
 800a748:	4baf      	ldr	r3, [pc, #700]	; (800aa08 <_dtoa_r+0x920>)
 800a74a:	f7f5 ff7d 	bl	8000648 <__aeabi_dmul>
 800a74e:	4606      	mov	r6, r0
 800a750:	460f      	mov	r7, r1
 800a752:	e7ac      	b.n	800a6ae <_dtoa_r+0x5c6>
 800a754:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a758:	9d00      	ldr	r5, [sp, #0]
 800a75a:	4642      	mov	r2, r8
 800a75c:	464b      	mov	r3, r9
 800a75e:	4630      	mov	r0, r6
 800a760:	4639      	mov	r1, r7
 800a762:	f7f6 f89b 	bl	800089c <__aeabi_ddiv>
 800a766:	f7f6 fa1f 	bl	8000ba8 <__aeabi_d2iz>
 800a76a:	9002      	str	r0, [sp, #8]
 800a76c:	f7f5 ff02 	bl	8000574 <__aeabi_i2d>
 800a770:	4642      	mov	r2, r8
 800a772:	464b      	mov	r3, r9
 800a774:	f7f5 ff68 	bl	8000648 <__aeabi_dmul>
 800a778:	4602      	mov	r2, r0
 800a77a:	460b      	mov	r3, r1
 800a77c:	4630      	mov	r0, r6
 800a77e:	4639      	mov	r1, r7
 800a780:	f7f5 fdaa 	bl	80002d8 <__aeabi_dsub>
 800a784:	9e02      	ldr	r6, [sp, #8]
 800a786:	9f01      	ldr	r7, [sp, #4]
 800a788:	3630      	adds	r6, #48	; 0x30
 800a78a:	f805 6b01 	strb.w	r6, [r5], #1
 800a78e:	9e00      	ldr	r6, [sp, #0]
 800a790:	1bae      	subs	r6, r5, r6
 800a792:	42b7      	cmp	r7, r6
 800a794:	4602      	mov	r2, r0
 800a796:	460b      	mov	r3, r1
 800a798:	d137      	bne.n	800a80a <_dtoa_r+0x722>
 800a79a:	f7f5 fd9f 	bl	80002dc <__adddf3>
 800a79e:	4642      	mov	r2, r8
 800a7a0:	464b      	mov	r3, r9
 800a7a2:	4606      	mov	r6, r0
 800a7a4:	460f      	mov	r7, r1
 800a7a6:	f7f6 f9df 	bl	8000b68 <__aeabi_dcmpgt>
 800a7aa:	b9c8      	cbnz	r0, 800a7e0 <_dtoa_r+0x6f8>
 800a7ac:	4642      	mov	r2, r8
 800a7ae:	464b      	mov	r3, r9
 800a7b0:	4630      	mov	r0, r6
 800a7b2:	4639      	mov	r1, r7
 800a7b4:	f7f6 f9b0 	bl	8000b18 <__aeabi_dcmpeq>
 800a7b8:	b110      	cbz	r0, 800a7c0 <_dtoa_r+0x6d8>
 800a7ba:	9b02      	ldr	r3, [sp, #8]
 800a7bc:	07d9      	lsls	r1, r3, #31
 800a7be:	d40f      	bmi.n	800a7e0 <_dtoa_r+0x6f8>
 800a7c0:	4620      	mov	r0, r4
 800a7c2:	4659      	mov	r1, fp
 800a7c4:	f000 fad6 	bl	800ad74 <_Bfree>
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	702b      	strb	r3, [r5, #0]
 800a7cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a7ce:	f10a 0001 	add.w	r0, sl, #1
 800a7d2:	6018      	str	r0, [r3, #0]
 800a7d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	f43f acd8 	beq.w	800a18c <_dtoa_r+0xa4>
 800a7dc:	601d      	str	r5, [r3, #0]
 800a7de:	e4d5      	b.n	800a18c <_dtoa_r+0xa4>
 800a7e0:	f8cd a01c 	str.w	sl, [sp, #28]
 800a7e4:	462b      	mov	r3, r5
 800a7e6:	461d      	mov	r5, r3
 800a7e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a7ec:	2a39      	cmp	r2, #57	; 0x39
 800a7ee:	d108      	bne.n	800a802 <_dtoa_r+0x71a>
 800a7f0:	9a00      	ldr	r2, [sp, #0]
 800a7f2:	429a      	cmp	r2, r3
 800a7f4:	d1f7      	bne.n	800a7e6 <_dtoa_r+0x6fe>
 800a7f6:	9a07      	ldr	r2, [sp, #28]
 800a7f8:	9900      	ldr	r1, [sp, #0]
 800a7fa:	3201      	adds	r2, #1
 800a7fc:	9207      	str	r2, [sp, #28]
 800a7fe:	2230      	movs	r2, #48	; 0x30
 800a800:	700a      	strb	r2, [r1, #0]
 800a802:	781a      	ldrb	r2, [r3, #0]
 800a804:	3201      	adds	r2, #1
 800a806:	701a      	strb	r2, [r3, #0]
 800a808:	e78c      	b.n	800a724 <_dtoa_r+0x63c>
 800a80a:	4b7f      	ldr	r3, [pc, #508]	; (800aa08 <_dtoa_r+0x920>)
 800a80c:	2200      	movs	r2, #0
 800a80e:	f7f5 ff1b 	bl	8000648 <__aeabi_dmul>
 800a812:	2200      	movs	r2, #0
 800a814:	2300      	movs	r3, #0
 800a816:	4606      	mov	r6, r0
 800a818:	460f      	mov	r7, r1
 800a81a:	f7f6 f97d 	bl	8000b18 <__aeabi_dcmpeq>
 800a81e:	2800      	cmp	r0, #0
 800a820:	d09b      	beq.n	800a75a <_dtoa_r+0x672>
 800a822:	e7cd      	b.n	800a7c0 <_dtoa_r+0x6d8>
 800a824:	9a08      	ldr	r2, [sp, #32]
 800a826:	2a00      	cmp	r2, #0
 800a828:	f000 80c4 	beq.w	800a9b4 <_dtoa_r+0x8cc>
 800a82c:	9a05      	ldr	r2, [sp, #20]
 800a82e:	2a01      	cmp	r2, #1
 800a830:	f300 80a8 	bgt.w	800a984 <_dtoa_r+0x89c>
 800a834:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a836:	2a00      	cmp	r2, #0
 800a838:	f000 80a0 	beq.w	800a97c <_dtoa_r+0x894>
 800a83c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a840:	9e06      	ldr	r6, [sp, #24]
 800a842:	4645      	mov	r5, r8
 800a844:	9a04      	ldr	r2, [sp, #16]
 800a846:	2101      	movs	r1, #1
 800a848:	441a      	add	r2, r3
 800a84a:	4620      	mov	r0, r4
 800a84c:	4498      	add	r8, r3
 800a84e:	9204      	str	r2, [sp, #16]
 800a850:	f000 fb4c 	bl	800aeec <__i2b>
 800a854:	4607      	mov	r7, r0
 800a856:	2d00      	cmp	r5, #0
 800a858:	dd0b      	ble.n	800a872 <_dtoa_r+0x78a>
 800a85a:	9b04      	ldr	r3, [sp, #16]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	dd08      	ble.n	800a872 <_dtoa_r+0x78a>
 800a860:	42ab      	cmp	r3, r5
 800a862:	9a04      	ldr	r2, [sp, #16]
 800a864:	bfa8      	it	ge
 800a866:	462b      	movge	r3, r5
 800a868:	eba8 0803 	sub.w	r8, r8, r3
 800a86c:	1aed      	subs	r5, r5, r3
 800a86e:	1ad3      	subs	r3, r2, r3
 800a870:	9304      	str	r3, [sp, #16]
 800a872:	9b06      	ldr	r3, [sp, #24]
 800a874:	b1fb      	cbz	r3, 800a8b6 <_dtoa_r+0x7ce>
 800a876:	9b08      	ldr	r3, [sp, #32]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	f000 809f 	beq.w	800a9bc <_dtoa_r+0x8d4>
 800a87e:	2e00      	cmp	r6, #0
 800a880:	dd11      	ble.n	800a8a6 <_dtoa_r+0x7be>
 800a882:	4639      	mov	r1, r7
 800a884:	4632      	mov	r2, r6
 800a886:	4620      	mov	r0, r4
 800a888:	f000 fbec 	bl	800b064 <__pow5mult>
 800a88c:	465a      	mov	r2, fp
 800a88e:	4601      	mov	r1, r0
 800a890:	4607      	mov	r7, r0
 800a892:	4620      	mov	r0, r4
 800a894:	f000 fb40 	bl	800af18 <__multiply>
 800a898:	4659      	mov	r1, fp
 800a89a:	9007      	str	r0, [sp, #28]
 800a89c:	4620      	mov	r0, r4
 800a89e:	f000 fa69 	bl	800ad74 <_Bfree>
 800a8a2:	9b07      	ldr	r3, [sp, #28]
 800a8a4:	469b      	mov	fp, r3
 800a8a6:	9b06      	ldr	r3, [sp, #24]
 800a8a8:	1b9a      	subs	r2, r3, r6
 800a8aa:	d004      	beq.n	800a8b6 <_dtoa_r+0x7ce>
 800a8ac:	4659      	mov	r1, fp
 800a8ae:	4620      	mov	r0, r4
 800a8b0:	f000 fbd8 	bl	800b064 <__pow5mult>
 800a8b4:	4683      	mov	fp, r0
 800a8b6:	2101      	movs	r1, #1
 800a8b8:	4620      	mov	r0, r4
 800a8ba:	f000 fb17 	bl	800aeec <__i2b>
 800a8be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	4606      	mov	r6, r0
 800a8c4:	dd7c      	ble.n	800a9c0 <_dtoa_r+0x8d8>
 800a8c6:	461a      	mov	r2, r3
 800a8c8:	4601      	mov	r1, r0
 800a8ca:	4620      	mov	r0, r4
 800a8cc:	f000 fbca 	bl	800b064 <__pow5mult>
 800a8d0:	9b05      	ldr	r3, [sp, #20]
 800a8d2:	2b01      	cmp	r3, #1
 800a8d4:	4606      	mov	r6, r0
 800a8d6:	dd76      	ble.n	800a9c6 <_dtoa_r+0x8de>
 800a8d8:	2300      	movs	r3, #0
 800a8da:	9306      	str	r3, [sp, #24]
 800a8dc:	6933      	ldr	r3, [r6, #16]
 800a8de:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a8e2:	6918      	ldr	r0, [r3, #16]
 800a8e4:	f000 fab2 	bl	800ae4c <__hi0bits>
 800a8e8:	f1c0 0020 	rsb	r0, r0, #32
 800a8ec:	9b04      	ldr	r3, [sp, #16]
 800a8ee:	4418      	add	r0, r3
 800a8f0:	f010 001f 	ands.w	r0, r0, #31
 800a8f4:	f000 8086 	beq.w	800aa04 <_dtoa_r+0x91c>
 800a8f8:	f1c0 0320 	rsb	r3, r0, #32
 800a8fc:	2b04      	cmp	r3, #4
 800a8fe:	dd7f      	ble.n	800aa00 <_dtoa_r+0x918>
 800a900:	f1c0 001c 	rsb	r0, r0, #28
 800a904:	9b04      	ldr	r3, [sp, #16]
 800a906:	4403      	add	r3, r0
 800a908:	4480      	add	r8, r0
 800a90a:	4405      	add	r5, r0
 800a90c:	9304      	str	r3, [sp, #16]
 800a90e:	f1b8 0f00 	cmp.w	r8, #0
 800a912:	dd05      	ble.n	800a920 <_dtoa_r+0x838>
 800a914:	4659      	mov	r1, fp
 800a916:	4642      	mov	r2, r8
 800a918:	4620      	mov	r0, r4
 800a91a:	f000 fbfd 	bl	800b118 <__lshift>
 800a91e:	4683      	mov	fp, r0
 800a920:	9b04      	ldr	r3, [sp, #16]
 800a922:	2b00      	cmp	r3, #0
 800a924:	dd05      	ble.n	800a932 <_dtoa_r+0x84a>
 800a926:	4631      	mov	r1, r6
 800a928:	461a      	mov	r2, r3
 800a92a:	4620      	mov	r0, r4
 800a92c:	f000 fbf4 	bl	800b118 <__lshift>
 800a930:	4606      	mov	r6, r0
 800a932:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a934:	2b00      	cmp	r3, #0
 800a936:	d069      	beq.n	800aa0c <_dtoa_r+0x924>
 800a938:	4631      	mov	r1, r6
 800a93a:	4658      	mov	r0, fp
 800a93c:	f000 fc58 	bl	800b1f0 <__mcmp>
 800a940:	2800      	cmp	r0, #0
 800a942:	da63      	bge.n	800aa0c <_dtoa_r+0x924>
 800a944:	2300      	movs	r3, #0
 800a946:	4659      	mov	r1, fp
 800a948:	220a      	movs	r2, #10
 800a94a:	4620      	mov	r0, r4
 800a94c:	f000 fa34 	bl	800adb8 <__multadd>
 800a950:	9b08      	ldr	r3, [sp, #32]
 800a952:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a956:	4683      	mov	fp, r0
 800a958:	2b00      	cmp	r3, #0
 800a95a:	f000 818f 	beq.w	800ac7c <_dtoa_r+0xb94>
 800a95e:	4639      	mov	r1, r7
 800a960:	2300      	movs	r3, #0
 800a962:	220a      	movs	r2, #10
 800a964:	4620      	mov	r0, r4
 800a966:	f000 fa27 	bl	800adb8 <__multadd>
 800a96a:	f1b9 0f00 	cmp.w	r9, #0
 800a96e:	4607      	mov	r7, r0
 800a970:	f300 808e 	bgt.w	800aa90 <_dtoa_r+0x9a8>
 800a974:	9b05      	ldr	r3, [sp, #20]
 800a976:	2b02      	cmp	r3, #2
 800a978:	dc50      	bgt.n	800aa1c <_dtoa_r+0x934>
 800a97a:	e089      	b.n	800aa90 <_dtoa_r+0x9a8>
 800a97c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a97e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a982:	e75d      	b.n	800a840 <_dtoa_r+0x758>
 800a984:	9b01      	ldr	r3, [sp, #4]
 800a986:	1e5e      	subs	r6, r3, #1
 800a988:	9b06      	ldr	r3, [sp, #24]
 800a98a:	42b3      	cmp	r3, r6
 800a98c:	bfbf      	itttt	lt
 800a98e:	9b06      	ldrlt	r3, [sp, #24]
 800a990:	9606      	strlt	r6, [sp, #24]
 800a992:	1af2      	sublt	r2, r6, r3
 800a994:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a996:	bfb6      	itet	lt
 800a998:	189b      	addlt	r3, r3, r2
 800a99a:	1b9e      	subge	r6, r3, r6
 800a99c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a99e:	9b01      	ldr	r3, [sp, #4]
 800a9a0:	bfb8      	it	lt
 800a9a2:	2600      	movlt	r6, #0
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	bfb5      	itete	lt
 800a9a8:	eba8 0503 	sublt.w	r5, r8, r3
 800a9ac:	9b01      	ldrge	r3, [sp, #4]
 800a9ae:	2300      	movlt	r3, #0
 800a9b0:	4645      	movge	r5, r8
 800a9b2:	e747      	b.n	800a844 <_dtoa_r+0x75c>
 800a9b4:	9e06      	ldr	r6, [sp, #24]
 800a9b6:	9f08      	ldr	r7, [sp, #32]
 800a9b8:	4645      	mov	r5, r8
 800a9ba:	e74c      	b.n	800a856 <_dtoa_r+0x76e>
 800a9bc:	9a06      	ldr	r2, [sp, #24]
 800a9be:	e775      	b.n	800a8ac <_dtoa_r+0x7c4>
 800a9c0:	9b05      	ldr	r3, [sp, #20]
 800a9c2:	2b01      	cmp	r3, #1
 800a9c4:	dc18      	bgt.n	800a9f8 <_dtoa_r+0x910>
 800a9c6:	9b02      	ldr	r3, [sp, #8]
 800a9c8:	b9b3      	cbnz	r3, 800a9f8 <_dtoa_r+0x910>
 800a9ca:	9b03      	ldr	r3, [sp, #12]
 800a9cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a9d0:	b9a3      	cbnz	r3, 800a9fc <_dtoa_r+0x914>
 800a9d2:	9b03      	ldr	r3, [sp, #12]
 800a9d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a9d8:	0d1b      	lsrs	r3, r3, #20
 800a9da:	051b      	lsls	r3, r3, #20
 800a9dc:	b12b      	cbz	r3, 800a9ea <_dtoa_r+0x902>
 800a9de:	9b04      	ldr	r3, [sp, #16]
 800a9e0:	3301      	adds	r3, #1
 800a9e2:	9304      	str	r3, [sp, #16]
 800a9e4:	f108 0801 	add.w	r8, r8, #1
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	9306      	str	r3, [sp, #24]
 800a9ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	f47f af74 	bne.w	800a8dc <_dtoa_r+0x7f4>
 800a9f4:	2001      	movs	r0, #1
 800a9f6:	e779      	b.n	800a8ec <_dtoa_r+0x804>
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	e7f6      	b.n	800a9ea <_dtoa_r+0x902>
 800a9fc:	9b02      	ldr	r3, [sp, #8]
 800a9fe:	e7f4      	b.n	800a9ea <_dtoa_r+0x902>
 800aa00:	d085      	beq.n	800a90e <_dtoa_r+0x826>
 800aa02:	4618      	mov	r0, r3
 800aa04:	301c      	adds	r0, #28
 800aa06:	e77d      	b.n	800a904 <_dtoa_r+0x81c>
 800aa08:	40240000 	.word	0x40240000
 800aa0c:	9b01      	ldr	r3, [sp, #4]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	dc38      	bgt.n	800aa84 <_dtoa_r+0x99c>
 800aa12:	9b05      	ldr	r3, [sp, #20]
 800aa14:	2b02      	cmp	r3, #2
 800aa16:	dd35      	ble.n	800aa84 <_dtoa_r+0x99c>
 800aa18:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800aa1c:	f1b9 0f00 	cmp.w	r9, #0
 800aa20:	d10d      	bne.n	800aa3e <_dtoa_r+0x956>
 800aa22:	4631      	mov	r1, r6
 800aa24:	464b      	mov	r3, r9
 800aa26:	2205      	movs	r2, #5
 800aa28:	4620      	mov	r0, r4
 800aa2a:	f000 f9c5 	bl	800adb8 <__multadd>
 800aa2e:	4601      	mov	r1, r0
 800aa30:	4606      	mov	r6, r0
 800aa32:	4658      	mov	r0, fp
 800aa34:	f000 fbdc 	bl	800b1f0 <__mcmp>
 800aa38:	2800      	cmp	r0, #0
 800aa3a:	f73f adbd 	bgt.w	800a5b8 <_dtoa_r+0x4d0>
 800aa3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa40:	9d00      	ldr	r5, [sp, #0]
 800aa42:	ea6f 0a03 	mvn.w	sl, r3
 800aa46:	f04f 0800 	mov.w	r8, #0
 800aa4a:	4631      	mov	r1, r6
 800aa4c:	4620      	mov	r0, r4
 800aa4e:	f000 f991 	bl	800ad74 <_Bfree>
 800aa52:	2f00      	cmp	r7, #0
 800aa54:	f43f aeb4 	beq.w	800a7c0 <_dtoa_r+0x6d8>
 800aa58:	f1b8 0f00 	cmp.w	r8, #0
 800aa5c:	d005      	beq.n	800aa6a <_dtoa_r+0x982>
 800aa5e:	45b8      	cmp	r8, r7
 800aa60:	d003      	beq.n	800aa6a <_dtoa_r+0x982>
 800aa62:	4641      	mov	r1, r8
 800aa64:	4620      	mov	r0, r4
 800aa66:	f000 f985 	bl	800ad74 <_Bfree>
 800aa6a:	4639      	mov	r1, r7
 800aa6c:	4620      	mov	r0, r4
 800aa6e:	f000 f981 	bl	800ad74 <_Bfree>
 800aa72:	e6a5      	b.n	800a7c0 <_dtoa_r+0x6d8>
 800aa74:	2600      	movs	r6, #0
 800aa76:	4637      	mov	r7, r6
 800aa78:	e7e1      	b.n	800aa3e <_dtoa_r+0x956>
 800aa7a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800aa7c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800aa80:	4637      	mov	r7, r6
 800aa82:	e599      	b.n	800a5b8 <_dtoa_r+0x4d0>
 800aa84:	9b08      	ldr	r3, [sp, #32]
 800aa86:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	f000 80fd 	beq.w	800ac8a <_dtoa_r+0xba2>
 800aa90:	2d00      	cmp	r5, #0
 800aa92:	dd05      	ble.n	800aaa0 <_dtoa_r+0x9b8>
 800aa94:	4639      	mov	r1, r7
 800aa96:	462a      	mov	r2, r5
 800aa98:	4620      	mov	r0, r4
 800aa9a:	f000 fb3d 	bl	800b118 <__lshift>
 800aa9e:	4607      	mov	r7, r0
 800aaa0:	9b06      	ldr	r3, [sp, #24]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d05c      	beq.n	800ab60 <_dtoa_r+0xa78>
 800aaa6:	6879      	ldr	r1, [r7, #4]
 800aaa8:	4620      	mov	r0, r4
 800aaaa:	f000 f923 	bl	800acf4 <_Balloc>
 800aaae:	4605      	mov	r5, r0
 800aab0:	b928      	cbnz	r0, 800aabe <_dtoa_r+0x9d6>
 800aab2:	4b80      	ldr	r3, [pc, #512]	; (800acb4 <_dtoa_r+0xbcc>)
 800aab4:	4602      	mov	r2, r0
 800aab6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800aaba:	f7ff bb2e 	b.w	800a11a <_dtoa_r+0x32>
 800aabe:	693a      	ldr	r2, [r7, #16]
 800aac0:	3202      	adds	r2, #2
 800aac2:	0092      	lsls	r2, r2, #2
 800aac4:	f107 010c 	add.w	r1, r7, #12
 800aac8:	300c      	adds	r0, #12
 800aaca:	f000 f905 	bl	800acd8 <memcpy>
 800aace:	2201      	movs	r2, #1
 800aad0:	4629      	mov	r1, r5
 800aad2:	4620      	mov	r0, r4
 800aad4:	f000 fb20 	bl	800b118 <__lshift>
 800aad8:	9b00      	ldr	r3, [sp, #0]
 800aada:	3301      	adds	r3, #1
 800aadc:	9301      	str	r3, [sp, #4]
 800aade:	9b00      	ldr	r3, [sp, #0]
 800aae0:	444b      	add	r3, r9
 800aae2:	9307      	str	r3, [sp, #28]
 800aae4:	9b02      	ldr	r3, [sp, #8]
 800aae6:	f003 0301 	and.w	r3, r3, #1
 800aaea:	46b8      	mov	r8, r7
 800aaec:	9306      	str	r3, [sp, #24]
 800aaee:	4607      	mov	r7, r0
 800aaf0:	9b01      	ldr	r3, [sp, #4]
 800aaf2:	4631      	mov	r1, r6
 800aaf4:	3b01      	subs	r3, #1
 800aaf6:	4658      	mov	r0, fp
 800aaf8:	9302      	str	r3, [sp, #8]
 800aafa:	f7ff fa68 	bl	8009fce <quorem>
 800aafe:	4603      	mov	r3, r0
 800ab00:	3330      	adds	r3, #48	; 0x30
 800ab02:	9004      	str	r0, [sp, #16]
 800ab04:	4641      	mov	r1, r8
 800ab06:	4658      	mov	r0, fp
 800ab08:	9308      	str	r3, [sp, #32]
 800ab0a:	f000 fb71 	bl	800b1f0 <__mcmp>
 800ab0e:	463a      	mov	r2, r7
 800ab10:	4681      	mov	r9, r0
 800ab12:	4631      	mov	r1, r6
 800ab14:	4620      	mov	r0, r4
 800ab16:	f000 fb87 	bl	800b228 <__mdiff>
 800ab1a:	68c2      	ldr	r2, [r0, #12]
 800ab1c:	9b08      	ldr	r3, [sp, #32]
 800ab1e:	4605      	mov	r5, r0
 800ab20:	bb02      	cbnz	r2, 800ab64 <_dtoa_r+0xa7c>
 800ab22:	4601      	mov	r1, r0
 800ab24:	4658      	mov	r0, fp
 800ab26:	f000 fb63 	bl	800b1f0 <__mcmp>
 800ab2a:	9b08      	ldr	r3, [sp, #32]
 800ab2c:	4602      	mov	r2, r0
 800ab2e:	4629      	mov	r1, r5
 800ab30:	4620      	mov	r0, r4
 800ab32:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800ab36:	f000 f91d 	bl	800ad74 <_Bfree>
 800ab3a:	9b05      	ldr	r3, [sp, #20]
 800ab3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab3e:	9d01      	ldr	r5, [sp, #4]
 800ab40:	ea43 0102 	orr.w	r1, r3, r2
 800ab44:	9b06      	ldr	r3, [sp, #24]
 800ab46:	430b      	orrs	r3, r1
 800ab48:	9b08      	ldr	r3, [sp, #32]
 800ab4a:	d10d      	bne.n	800ab68 <_dtoa_r+0xa80>
 800ab4c:	2b39      	cmp	r3, #57	; 0x39
 800ab4e:	d029      	beq.n	800aba4 <_dtoa_r+0xabc>
 800ab50:	f1b9 0f00 	cmp.w	r9, #0
 800ab54:	dd01      	ble.n	800ab5a <_dtoa_r+0xa72>
 800ab56:	9b04      	ldr	r3, [sp, #16]
 800ab58:	3331      	adds	r3, #49	; 0x31
 800ab5a:	9a02      	ldr	r2, [sp, #8]
 800ab5c:	7013      	strb	r3, [r2, #0]
 800ab5e:	e774      	b.n	800aa4a <_dtoa_r+0x962>
 800ab60:	4638      	mov	r0, r7
 800ab62:	e7b9      	b.n	800aad8 <_dtoa_r+0x9f0>
 800ab64:	2201      	movs	r2, #1
 800ab66:	e7e2      	b.n	800ab2e <_dtoa_r+0xa46>
 800ab68:	f1b9 0f00 	cmp.w	r9, #0
 800ab6c:	db06      	blt.n	800ab7c <_dtoa_r+0xa94>
 800ab6e:	9905      	ldr	r1, [sp, #20]
 800ab70:	ea41 0909 	orr.w	r9, r1, r9
 800ab74:	9906      	ldr	r1, [sp, #24]
 800ab76:	ea59 0101 	orrs.w	r1, r9, r1
 800ab7a:	d120      	bne.n	800abbe <_dtoa_r+0xad6>
 800ab7c:	2a00      	cmp	r2, #0
 800ab7e:	ddec      	ble.n	800ab5a <_dtoa_r+0xa72>
 800ab80:	4659      	mov	r1, fp
 800ab82:	2201      	movs	r2, #1
 800ab84:	4620      	mov	r0, r4
 800ab86:	9301      	str	r3, [sp, #4]
 800ab88:	f000 fac6 	bl	800b118 <__lshift>
 800ab8c:	4631      	mov	r1, r6
 800ab8e:	4683      	mov	fp, r0
 800ab90:	f000 fb2e 	bl	800b1f0 <__mcmp>
 800ab94:	2800      	cmp	r0, #0
 800ab96:	9b01      	ldr	r3, [sp, #4]
 800ab98:	dc02      	bgt.n	800aba0 <_dtoa_r+0xab8>
 800ab9a:	d1de      	bne.n	800ab5a <_dtoa_r+0xa72>
 800ab9c:	07da      	lsls	r2, r3, #31
 800ab9e:	d5dc      	bpl.n	800ab5a <_dtoa_r+0xa72>
 800aba0:	2b39      	cmp	r3, #57	; 0x39
 800aba2:	d1d8      	bne.n	800ab56 <_dtoa_r+0xa6e>
 800aba4:	9a02      	ldr	r2, [sp, #8]
 800aba6:	2339      	movs	r3, #57	; 0x39
 800aba8:	7013      	strb	r3, [r2, #0]
 800abaa:	462b      	mov	r3, r5
 800abac:	461d      	mov	r5, r3
 800abae:	3b01      	subs	r3, #1
 800abb0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800abb4:	2a39      	cmp	r2, #57	; 0x39
 800abb6:	d050      	beq.n	800ac5a <_dtoa_r+0xb72>
 800abb8:	3201      	adds	r2, #1
 800abba:	701a      	strb	r2, [r3, #0]
 800abbc:	e745      	b.n	800aa4a <_dtoa_r+0x962>
 800abbe:	2a00      	cmp	r2, #0
 800abc0:	dd03      	ble.n	800abca <_dtoa_r+0xae2>
 800abc2:	2b39      	cmp	r3, #57	; 0x39
 800abc4:	d0ee      	beq.n	800aba4 <_dtoa_r+0xabc>
 800abc6:	3301      	adds	r3, #1
 800abc8:	e7c7      	b.n	800ab5a <_dtoa_r+0xa72>
 800abca:	9a01      	ldr	r2, [sp, #4]
 800abcc:	9907      	ldr	r1, [sp, #28]
 800abce:	f802 3c01 	strb.w	r3, [r2, #-1]
 800abd2:	428a      	cmp	r2, r1
 800abd4:	d02a      	beq.n	800ac2c <_dtoa_r+0xb44>
 800abd6:	4659      	mov	r1, fp
 800abd8:	2300      	movs	r3, #0
 800abda:	220a      	movs	r2, #10
 800abdc:	4620      	mov	r0, r4
 800abde:	f000 f8eb 	bl	800adb8 <__multadd>
 800abe2:	45b8      	cmp	r8, r7
 800abe4:	4683      	mov	fp, r0
 800abe6:	f04f 0300 	mov.w	r3, #0
 800abea:	f04f 020a 	mov.w	r2, #10
 800abee:	4641      	mov	r1, r8
 800abf0:	4620      	mov	r0, r4
 800abf2:	d107      	bne.n	800ac04 <_dtoa_r+0xb1c>
 800abf4:	f000 f8e0 	bl	800adb8 <__multadd>
 800abf8:	4680      	mov	r8, r0
 800abfa:	4607      	mov	r7, r0
 800abfc:	9b01      	ldr	r3, [sp, #4]
 800abfe:	3301      	adds	r3, #1
 800ac00:	9301      	str	r3, [sp, #4]
 800ac02:	e775      	b.n	800aaf0 <_dtoa_r+0xa08>
 800ac04:	f000 f8d8 	bl	800adb8 <__multadd>
 800ac08:	4639      	mov	r1, r7
 800ac0a:	4680      	mov	r8, r0
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	220a      	movs	r2, #10
 800ac10:	4620      	mov	r0, r4
 800ac12:	f000 f8d1 	bl	800adb8 <__multadd>
 800ac16:	4607      	mov	r7, r0
 800ac18:	e7f0      	b.n	800abfc <_dtoa_r+0xb14>
 800ac1a:	f1b9 0f00 	cmp.w	r9, #0
 800ac1e:	9a00      	ldr	r2, [sp, #0]
 800ac20:	bfcc      	ite	gt
 800ac22:	464d      	movgt	r5, r9
 800ac24:	2501      	movle	r5, #1
 800ac26:	4415      	add	r5, r2
 800ac28:	f04f 0800 	mov.w	r8, #0
 800ac2c:	4659      	mov	r1, fp
 800ac2e:	2201      	movs	r2, #1
 800ac30:	4620      	mov	r0, r4
 800ac32:	9301      	str	r3, [sp, #4]
 800ac34:	f000 fa70 	bl	800b118 <__lshift>
 800ac38:	4631      	mov	r1, r6
 800ac3a:	4683      	mov	fp, r0
 800ac3c:	f000 fad8 	bl	800b1f0 <__mcmp>
 800ac40:	2800      	cmp	r0, #0
 800ac42:	dcb2      	bgt.n	800abaa <_dtoa_r+0xac2>
 800ac44:	d102      	bne.n	800ac4c <_dtoa_r+0xb64>
 800ac46:	9b01      	ldr	r3, [sp, #4]
 800ac48:	07db      	lsls	r3, r3, #31
 800ac4a:	d4ae      	bmi.n	800abaa <_dtoa_r+0xac2>
 800ac4c:	462b      	mov	r3, r5
 800ac4e:	461d      	mov	r5, r3
 800ac50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac54:	2a30      	cmp	r2, #48	; 0x30
 800ac56:	d0fa      	beq.n	800ac4e <_dtoa_r+0xb66>
 800ac58:	e6f7      	b.n	800aa4a <_dtoa_r+0x962>
 800ac5a:	9a00      	ldr	r2, [sp, #0]
 800ac5c:	429a      	cmp	r2, r3
 800ac5e:	d1a5      	bne.n	800abac <_dtoa_r+0xac4>
 800ac60:	f10a 0a01 	add.w	sl, sl, #1
 800ac64:	2331      	movs	r3, #49	; 0x31
 800ac66:	e779      	b.n	800ab5c <_dtoa_r+0xa74>
 800ac68:	4b13      	ldr	r3, [pc, #76]	; (800acb8 <_dtoa_r+0xbd0>)
 800ac6a:	f7ff baaf 	b.w	800a1cc <_dtoa_r+0xe4>
 800ac6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	f47f aa86 	bne.w	800a182 <_dtoa_r+0x9a>
 800ac76:	4b11      	ldr	r3, [pc, #68]	; (800acbc <_dtoa_r+0xbd4>)
 800ac78:	f7ff baa8 	b.w	800a1cc <_dtoa_r+0xe4>
 800ac7c:	f1b9 0f00 	cmp.w	r9, #0
 800ac80:	dc03      	bgt.n	800ac8a <_dtoa_r+0xba2>
 800ac82:	9b05      	ldr	r3, [sp, #20]
 800ac84:	2b02      	cmp	r3, #2
 800ac86:	f73f aec9 	bgt.w	800aa1c <_dtoa_r+0x934>
 800ac8a:	9d00      	ldr	r5, [sp, #0]
 800ac8c:	4631      	mov	r1, r6
 800ac8e:	4658      	mov	r0, fp
 800ac90:	f7ff f99d 	bl	8009fce <quorem>
 800ac94:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ac98:	f805 3b01 	strb.w	r3, [r5], #1
 800ac9c:	9a00      	ldr	r2, [sp, #0]
 800ac9e:	1aaa      	subs	r2, r5, r2
 800aca0:	4591      	cmp	r9, r2
 800aca2:	ddba      	ble.n	800ac1a <_dtoa_r+0xb32>
 800aca4:	4659      	mov	r1, fp
 800aca6:	2300      	movs	r3, #0
 800aca8:	220a      	movs	r2, #10
 800acaa:	4620      	mov	r0, r4
 800acac:	f000 f884 	bl	800adb8 <__multadd>
 800acb0:	4683      	mov	fp, r0
 800acb2:	e7eb      	b.n	800ac8c <_dtoa_r+0xba4>
 800acb4:	0800c9bb 	.word	0x0800c9bb
 800acb8:	0800c914 	.word	0x0800c914
 800acbc:	0800c938 	.word	0x0800c938

0800acc0 <_localeconv_r>:
 800acc0:	4800      	ldr	r0, [pc, #0]	; (800acc4 <_localeconv_r+0x4>)
 800acc2:	4770      	bx	lr
 800acc4:	20000164 	.word	0x20000164

0800acc8 <malloc>:
 800acc8:	4b02      	ldr	r3, [pc, #8]	; (800acd4 <malloc+0xc>)
 800acca:	4601      	mov	r1, r0
 800accc:	6818      	ldr	r0, [r3, #0]
 800acce:	f000 bbef 	b.w	800b4b0 <_malloc_r>
 800acd2:	bf00      	nop
 800acd4:	20000010 	.word	0x20000010

0800acd8 <memcpy>:
 800acd8:	440a      	add	r2, r1
 800acda:	4291      	cmp	r1, r2
 800acdc:	f100 33ff 	add.w	r3, r0, #4294967295
 800ace0:	d100      	bne.n	800ace4 <memcpy+0xc>
 800ace2:	4770      	bx	lr
 800ace4:	b510      	push	{r4, lr}
 800ace6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800acea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800acee:	4291      	cmp	r1, r2
 800acf0:	d1f9      	bne.n	800ace6 <memcpy+0xe>
 800acf2:	bd10      	pop	{r4, pc}

0800acf4 <_Balloc>:
 800acf4:	b570      	push	{r4, r5, r6, lr}
 800acf6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800acf8:	4604      	mov	r4, r0
 800acfa:	460d      	mov	r5, r1
 800acfc:	b976      	cbnz	r6, 800ad1c <_Balloc+0x28>
 800acfe:	2010      	movs	r0, #16
 800ad00:	f7ff ffe2 	bl	800acc8 <malloc>
 800ad04:	4602      	mov	r2, r0
 800ad06:	6260      	str	r0, [r4, #36]	; 0x24
 800ad08:	b920      	cbnz	r0, 800ad14 <_Balloc+0x20>
 800ad0a:	4b18      	ldr	r3, [pc, #96]	; (800ad6c <_Balloc+0x78>)
 800ad0c:	4818      	ldr	r0, [pc, #96]	; (800ad70 <_Balloc+0x7c>)
 800ad0e:	2166      	movs	r1, #102	; 0x66
 800ad10:	f000 fd94 	bl	800b83c <__assert_func>
 800ad14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ad18:	6006      	str	r6, [r0, #0]
 800ad1a:	60c6      	str	r6, [r0, #12]
 800ad1c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ad1e:	68f3      	ldr	r3, [r6, #12]
 800ad20:	b183      	cbz	r3, 800ad44 <_Balloc+0x50>
 800ad22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad24:	68db      	ldr	r3, [r3, #12]
 800ad26:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ad2a:	b9b8      	cbnz	r0, 800ad5c <_Balloc+0x68>
 800ad2c:	2101      	movs	r1, #1
 800ad2e:	fa01 f605 	lsl.w	r6, r1, r5
 800ad32:	1d72      	adds	r2, r6, #5
 800ad34:	0092      	lsls	r2, r2, #2
 800ad36:	4620      	mov	r0, r4
 800ad38:	f000 fb5a 	bl	800b3f0 <_calloc_r>
 800ad3c:	b160      	cbz	r0, 800ad58 <_Balloc+0x64>
 800ad3e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ad42:	e00e      	b.n	800ad62 <_Balloc+0x6e>
 800ad44:	2221      	movs	r2, #33	; 0x21
 800ad46:	2104      	movs	r1, #4
 800ad48:	4620      	mov	r0, r4
 800ad4a:	f000 fb51 	bl	800b3f0 <_calloc_r>
 800ad4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad50:	60f0      	str	r0, [r6, #12]
 800ad52:	68db      	ldr	r3, [r3, #12]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d1e4      	bne.n	800ad22 <_Balloc+0x2e>
 800ad58:	2000      	movs	r0, #0
 800ad5a:	bd70      	pop	{r4, r5, r6, pc}
 800ad5c:	6802      	ldr	r2, [r0, #0]
 800ad5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ad62:	2300      	movs	r3, #0
 800ad64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ad68:	e7f7      	b.n	800ad5a <_Balloc+0x66>
 800ad6a:	bf00      	nop
 800ad6c:	0800c945 	.word	0x0800c945
 800ad70:	0800c9cc 	.word	0x0800c9cc

0800ad74 <_Bfree>:
 800ad74:	b570      	push	{r4, r5, r6, lr}
 800ad76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ad78:	4605      	mov	r5, r0
 800ad7a:	460c      	mov	r4, r1
 800ad7c:	b976      	cbnz	r6, 800ad9c <_Bfree+0x28>
 800ad7e:	2010      	movs	r0, #16
 800ad80:	f7ff ffa2 	bl	800acc8 <malloc>
 800ad84:	4602      	mov	r2, r0
 800ad86:	6268      	str	r0, [r5, #36]	; 0x24
 800ad88:	b920      	cbnz	r0, 800ad94 <_Bfree+0x20>
 800ad8a:	4b09      	ldr	r3, [pc, #36]	; (800adb0 <_Bfree+0x3c>)
 800ad8c:	4809      	ldr	r0, [pc, #36]	; (800adb4 <_Bfree+0x40>)
 800ad8e:	218a      	movs	r1, #138	; 0x8a
 800ad90:	f000 fd54 	bl	800b83c <__assert_func>
 800ad94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ad98:	6006      	str	r6, [r0, #0]
 800ad9a:	60c6      	str	r6, [r0, #12]
 800ad9c:	b13c      	cbz	r4, 800adae <_Bfree+0x3a>
 800ad9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ada0:	6862      	ldr	r2, [r4, #4]
 800ada2:	68db      	ldr	r3, [r3, #12]
 800ada4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ada8:	6021      	str	r1, [r4, #0]
 800adaa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800adae:	bd70      	pop	{r4, r5, r6, pc}
 800adb0:	0800c945 	.word	0x0800c945
 800adb4:	0800c9cc 	.word	0x0800c9cc

0800adb8 <__multadd>:
 800adb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adbc:	690e      	ldr	r6, [r1, #16]
 800adbe:	4607      	mov	r7, r0
 800adc0:	4698      	mov	r8, r3
 800adc2:	460c      	mov	r4, r1
 800adc4:	f101 0014 	add.w	r0, r1, #20
 800adc8:	2300      	movs	r3, #0
 800adca:	6805      	ldr	r5, [r0, #0]
 800adcc:	b2a9      	uxth	r1, r5
 800adce:	fb02 8101 	mla	r1, r2, r1, r8
 800add2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800add6:	0c2d      	lsrs	r5, r5, #16
 800add8:	fb02 c505 	mla	r5, r2, r5, ip
 800addc:	b289      	uxth	r1, r1
 800adde:	3301      	adds	r3, #1
 800ade0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800ade4:	429e      	cmp	r6, r3
 800ade6:	f840 1b04 	str.w	r1, [r0], #4
 800adea:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800adee:	dcec      	bgt.n	800adca <__multadd+0x12>
 800adf0:	f1b8 0f00 	cmp.w	r8, #0
 800adf4:	d022      	beq.n	800ae3c <__multadd+0x84>
 800adf6:	68a3      	ldr	r3, [r4, #8]
 800adf8:	42b3      	cmp	r3, r6
 800adfa:	dc19      	bgt.n	800ae30 <__multadd+0x78>
 800adfc:	6861      	ldr	r1, [r4, #4]
 800adfe:	4638      	mov	r0, r7
 800ae00:	3101      	adds	r1, #1
 800ae02:	f7ff ff77 	bl	800acf4 <_Balloc>
 800ae06:	4605      	mov	r5, r0
 800ae08:	b928      	cbnz	r0, 800ae16 <__multadd+0x5e>
 800ae0a:	4602      	mov	r2, r0
 800ae0c:	4b0d      	ldr	r3, [pc, #52]	; (800ae44 <__multadd+0x8c>)
 800ae0e:	480e      	ldr	r0, [pc, #56]	; (800ae48 <__multadd+0x90>)
 800ae10:	21b5      	movs	r1, #181	; 0xb5
 800ae12:	f000 fd13 	bl	800b83c <__assert_func>
 800ae16:	6922      	ldr	r2, [r4, #16]
 800ae18:	3202      	adds	r2, #2
 800ae1a:	f104 010c 	add.w	r1, r4, #12
 800ae1e:	0092      	lsls	r2, r2, #2
 800ae20:	300c      	adds	r0, #12
 800ae22:	f7ff ff59 	bl	800acd8 <memcpy>
 800ae26:	4621      	mov	r1, r4
 800ae28:	4638      	mov	r0, r7
 800ae2a:	f7ff ffa3 	bl	800ad74 <_Bfree>
 800ae2e:	462c      	mov	r4, r5
 800ae30:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800ae34:	3601      	adds	r6, #1
 800ae36:	f8c3 8014 	str.w	r8, [r3, #20]
 800ae3a:	6126      	str	r6, [r4, #16]
 800ae3c:	4620      	mov	r0, r4
 800ae3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae42:	bf00      	nop
 800ae44:	0800c9bb 	.word	0x0800c9bb
 800ae48:	0800c9cc 	.word	0x0800c9cc

0800ae4c <__hi0bits>:
 800ae4c:	0c03      	lsrs	r3, r0, #16
 800ae4e:	041b      	lsls	r3, r3, #16
 800ae50:	b9d3      	cbnz	r3, 800ae88 <__hi0bits+0x3c>
 800ae52:	0400      	lsls	r0, r0, #16
 800ae54:	2310      	movs	r3, #16
 800ae56:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ae5a:	bf04      	itt	eq
 800ae5c:	0200      	lsleq	r0, r0, #8
 800ae5e:	3308      	addeq	r3, #8
 800ae60:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ae64:	bf04      	itt	eq
 800ae66:	0100      	lsleq	r0, r0, #4
 800ae68:	3304      	addeq	r3, #4
 800ae6a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ae6e:	bf04      	itt	eq
 800ae70:	0080      	lsleq	r0, r0, #2
 800ae72:	3302      	addeq	r3, #2
 800ae74:	2800      	cmp	r0, #0
 800ae76:	db05      	blt.n	800ae84 <__hi0bits+0x38>
 800ae78:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ae7c:	f103 0301 	add.w	r3, r3, #1
 800ae80:	bf08      	it	eq
 800ae82:	2320      	moveq	r3, #32
 800ae84:	4618      	mov	r0, r3
 800ae86:	4770      	bx	lr
 800ae88:	2300      	movs	r3, #0
 800ae8a:	e7e4      	b.n	800ae56 <__hi0bits+0xa>

0800ae8c <__lo0bits>:
 800ae8c:	6803      	ldr	r3, [r0, #0]
 800ae8e:	f013 0207 	ands.w	r2, r3, #7
 800ae92:	4601      	mov	r1, r0
 800ae94:	d00b      	beq.n	800aeae <__lo0bits+0x22>
 800ae96:	07da      	lsls	r2, r3, #31
 800ae98:	d424      	bmi.n	800aee4 <__lo0bits+0x58>
 800ae9a:	0798      	lsls	r0, r3, #30
 800ae9c:	bf49      	itett	mi
 800ae9e:	085b      	lsrmi	r3, r3, #1
 800aea0:	089b      	lsrpl	r3, r3, #2
 800aea2:	2001      	movmi	r0, #1
 800aea4:	600b      	strmi	r3, [r1, #0]
 800aea6:	bf5c      	itt	pl
 800aea8:	600b      	strpl	r3, [r1, #0]
 800aeaa:	2002      	movpl	r0, #2
 800aeac:	4770      	bx	lr
 800aeae:	b298      	uxth	r0, r3
 800aeb0:	b9b0      	cbnz	r0, 800aee0 <__lo0bits+0x54>
 800aeb2:	0c1b      	lsrs	r3, r3, #16
 800aeb4:	2010      	movs	r0, #16
 800aeb6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800aeba:	bf04      	itt	eq
 800aebc:	0a1b      	lsreq	r3, r3, #8
 800aebe:	3008      	addeq	r0, #8
 800aec0:	071a      	lsls	r2, r3, #28
 800aec2:	bf04      	itt	eq
 800aec4:	091b      	lsreq	r3, r3, #4
 800aec6:	3004      	addeq	r0, #4
 800aec8:	079a      	lsls	r2, r3, #30
 800aeca:	bf04      	itt	eq
 800aecc:	089b      	lsreq	r3, r3, #2
 800aece:	3002      	addeq	r0, #2
 800aed0:	07da      	lsls	r2, r3, #31
 800aed2:	d403      	bmi.n	800aedc <__lo0bits+0x50>
 800aed4:	085b      	lsrs	r3, r3, #1
 800aed6:	f100 0001 	add.w	r0, r0, #1
 800aeda:	d005      	beq.n	800aee8 <__lo0bits+0x5c>
 800aedc:	600b      	str	r3, [r1, #0]
 800aede:	4770      	bx	lr
 800aee0:	4610      	mov	r0, r2
 800aee2:	e7e8      	b.n	800aeb6 <__lo0bits+0x2a>
 800aee4:	2000      	movs	r0, #0
 800aee6:	4770      	bx	lr
 800aee8:	2020      	movs	r0, #32
 800aeea:	4770      	bx	lr

0800aeec <__i2b>:
 800aeec:	b510      	push	{r4, lr}
 800aeee:	460c      	mov	r4, r1
 800aef0:	2101      	movs	r1, #1
 800aef2:	f7ff feff 	bl	800acf4 <_Balloc>
 800aef6:	4602      	mov	r2, r0
 800aef8:	b928      	cbnz	r0, 800af06 <__i2b+0x1a>
 800aefa:	4b05      	ldr	r3, [pc, #20]	; (800af10 <__i2b+0x24>)
 800aefc:	4805      	ldr	r0, [pc, #20]	; (800af14 <__i2b+0x28>)
 800aefe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800af02:	f000 fc9b 	bl	800b83c <__assert_func>
 800af06:	2301      	movs	r3, #1
 800af08:	6144      	str	r4, [r0, #20]
 800af0a:	6103      	str	r3, [r0, #16]
 800af0c:	bd10      	pop	{r4, pc}
 800af0e:	bf00      	nop
 800af10:	0800c9bb 	.word	0x0800c9bb
 800af14:	0800c9cc 	.word	0x0800c9cc

0800af18 <__multiply>:
 800af18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af1c:	4614      	mov	r4, r2
 800af1e:	690a      	ldr	r2, [r1, #16]
 800af20:	6923      	ldr	r3, [r4, #16]
 800af22:	429a      	cmp	r2, r3
 800af24:	bfb8      	it	lt
 800af26:	460b      	movlt	r3, r1
 800af28:	460d      	mov	r5, r1
 800af2a:	bfbc      	itt	lt
 800af2c:	4625      	movlt	r5, r4
 800af2e:	461c      	movlt	r4, r3
 800af30:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800af34:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800af38:	68ab      	ldr	r3, [r5, #8]
 800af3a:	6869      	ldr	r1, [r5, #4]
 800af3c:	eb0a 0709 	add.w	r7, sl, r9
 800af40:	42bb      	cmp	r3, r7
 800af42:	b085      	sub	sp, #20
 800af44:	bfb8      	it	lt
 800af46:	3101      	addlt	r1, #1
 800af48:	f7ff fed4 	bl	800acf4 <_Balloc>
 800af4c:	b930      	cbnz	r0, 800af5c <__multiply+0x44>
 800af4e:	4602      	mov	r2, r0
 800af50:	4b42      	ldr	r3, [pc, #264]	; (800b05c <__multiply+0x144>)
 800af52:	4843      	ldr	r0, [pc, #268]	; (800b060 <__multiply+0x148>)
 800af54:	f240 115d 	movw	r1, #349	; 0x15d
 800af58:	f000 fc70 	bl	800b83c <__assert_func>
 800af5c:	f100 0614 	add.w	r6, r0, #20
 800af60:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800af64:	4633      	mov	r3, r6
 800af66:	2200      	movs	r2, #0
 800af68:	4543      	cmp	r3, r8
 800af6a:	d31e      	bcc.n	800afaa <__multiply+0x92>
 800af6c:	f105 0c14 	add.w	ip, r5, #20
 800af70:	f104 0314 	add.w	r3, r4, #20
 800af74:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800af78:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800af7c:	9202      	str	r2, [sp, #8]
 800af7e:	ebac 0205 	sub.w	r2, ip, r5
 800af82:	3a15      	subs	r2, #21
 800af84:	f022 0203 	bic.w	r2, r2, #3
 800af88:	3204      	adds	r2, #4
 800af8a:	f105 0115 	add.w	r1, r5, #21
 800af8e:	458c      	cmp	ip, r1
 800af90:	bf38      	it	cc
 800af92:	2204      	movcc	r2, #4
 800af94:	9201      	str	r2, [sp, #4]
 800af96:	9a02      	ldr	r2, [sp, #8]
 800af98:	9303      	str	r3, [sp, #12]
 800af9a:	429a      	cmp	r2, r3
 800af9c:	d808      	bhi.n	800afb0 <__multiply+0x98>
 800af9e:	2f00      	cmp	r7, #0
 800afa0:	dc55      	bgt.n	800b04e <__multiply+0x136>
 800afa2:	6107      	str	r7, [r0, #16]
 800afa4:	b005      	add	sp, #20
 800afa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afaa:	f843 2b04 	str.w	r2, [r3], #4
 800afae:	e7db      	b.n	800af68 <__multiply+0x50>
 800afb0:	f8b3 a000 	ldrh.w	sl, [r3]
 800afb4:	f1ba 0f00 	cmp.w	sl, #0
 800afb8:	d020      	beq.n	800affc <__multiply+0xe4>
 800afba:	f105 0e14 	add.w	lr, r5, #20
 800afbe:	46b1      	mov	r9, r6
 800afc0:	2200      	movs	r2, #0
 800afc2:	f85e 4b04 	ldr.w	r4, [lr], #4
 800afc6:	f8d9 b000 	ldr.w	fp, [r9]
 800afca:	b2a1      	uxth	r1, r4
 800afcc:	fa1f fb8b 	uxth.w	fp, fp
 800afd0:	fb0a b101 	mla	r1, sl, r1, fp
 800afd4:	4411      	add	r1, r2
 800afd6:	f8d9 2000 	ldr.w	r2, [r9]
 800afda:	0c24      	lsrs	r4, r4, #16
 800afdc:	0c12      	lsrs	r2, r2, #16
 800afde:	fb0a 2404 	mla	r4, sl, r4, r2
 800afe2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800afe6:	b289      	uxth	r1, r1
 800afe8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800afec:	45f4      	cmp	ip, lr
 800afee:	f849 1b04 	str.w	r1, [r9], #4
 800aff2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800aff6:	d8e4      	bhi.n	800afc2 <__multiply+0xaa>
 800aff8:	9901      	ldr	r1, [sp, #4]
 800affa:	5072      	str	r2, [r6, r1]
 800affc:	9a03      	ldr	r2, [sp, #12]
 800affe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b002:	3304      	adds	r3, #4
 800b004:	f1b9 0f00 	cmp.w	r9, #0
 800b008:	d01f      	beq.n	800b04a <__multiply+0x132>
 800b00a:	6834      	ldr	r4, [r6, #0]
 800b00c:	f105 0114 	add.w	r1, r5, #20
 800b010:	46b6      	mov	lr, r6
 800b012:	f04f 0a00 	mov.w	sl, #0
 800b016:	880a      	ldrh	r2, [r1, #0]
 800b018:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b01c:	fb09 b202 	mla	r2, r9, r2, fp
 800b020:	4492      	add	sl, r2
 800b022:	b2a4      	uxth	r4, r4
 800b024:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b028:	f84e 4b04 	str.w	r4, [lr], #4
 800b02c:	f851 4b04 	ldr.w	r4, [r1], #4
 800b030:	f8be 2000 	ldrh.w	r2, [lr]
 800b034:	0c24      	lsrs	r4, r4, #16
 800b036:	fb09 2404 	mla	r4, r9, r4, r2
 800b03a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b03e:	458c      	cmp	ip, r1
 800b040:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b044:	d8e7      	bhi.n	800b016 <__multiply+0xfe>
 800b046:	9a01      	ldr	r2, [sp, #4]
 800b048:	50b4      	str	r4, [r6, r2]
 800b04a:	3604      	adds	r6, #4
 800b04c:	e7a3      	b.n	800af96 <__multiply+0x7e>
 800b04e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b052:	2b00      	cmp	r3, #0
 800b054:	d1a5      	bne.n	800afa2 <__multiply+0x8a>
 800b056:	3f01      	subs	r7, #1
 800b058:	e7a1      	b.n	800af9e <__multiply+0x86>
 800b05a:	bf00      	nop
 800b05c:	0800c9bb 	.word	0x0800c9bb
 800b060:	0800c9cc 	.word	0x0800c9cc

0800b064 <__pow5mult>:
 800b064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b068:	4615      	mov	r5, r2
 800b06a:	f012 0203 	ands.w	r2, r2, #3
 800b06e:	4606      	mov	r6, r0
 800b070:	460f      	mov	r7, r1
 800b072:	d007      	beq.n	800b084 <__pow5mult+0x20>
 800b074:	4c25      	ldr	r4, [pc, #148]	; (800b10c <__pow5mult+0xa8>)
 800b076:	3a01      	subs	r2, #1
 800b078:	2300      	movs	r3, #0
 800b07a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b07e:	f7ff fe9b 	bl	800adb8 <__multadd>
 800b082:	4607      	mov	r7, r0
 800b084:	10ad      	asrs	r5, r5, #2
 800b086:	d03d      	beq.n	800b104 <__pow5mult+0xa0>
 800b088:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b08a:	b97c      	cbnz	r4, 800b0ac <__pow5mult+0x48>
 800b08c:	2010      	movs	r0, #16
 800b08e:	f7ff fe1b 	bl	800acc8 <malloc>
 800b092:	4602      	mov	r2, r0
 800b094:	6270      	str	r0, [r6, #36]	; 0x24
 800b096:	b928      	cbnz	r0, 800b0a4 <__pow5mult+0x40>
 800b098:	4b1d      	ldr	r3, [pc, #116]	; (800b110 <__pow5mult+0xac>)
 800b09a:	481e      	ldr	r0, [pc, #120]	; (800b114 <__pow5mult+0xb0>)
 800b09c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b0a0:	f000 fbcc 	bl	800b83c <__assert_func>
 800b0a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b0a8:	6004      	str	r4, [r0, #0]
 800b0aa:	60c4      	str	r4, [r0, #12]
 800b0ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b0b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b0b4:	b94c      	cbnz	r4, 800b0ca <__pow5mult+0x66>
 800b0b6:	f240 2171 	movw	r1, #625	; 0x271
 800b0ba:	4630      	mov	r0, r6
 800b0bc:	f7ff ff16 	bl	800aeec <__i2b>
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	f8c8 0008 	str.w	r0, [r8, #8]
 800b0c6:	4604      	mov	r4, r0
 800b0c8:	6003      	str	r3, [r0, #0]
 800b0ca:	f04f 0900 	mov.w	r9, #0
 800b0ce:	07eb      	lsls	r3, r5, #31
 800b0d0:	d50a      	bpl.n	800b0e8 <__pow5mult+0x84>
 800b0d2:	4639      	mov	r1, r7
 800b0d4:	4622      	mov	r2, r4
 800b0d6:	4630      	mov	r0, r6
 800b0d8:	f7ff ff1e 	bl	800af18 <__multiply>
 800b0dc:	4639      	mov	r1, r7
 800b0de:	4680      	mov	r8, r0
 800b0e0:	4630      	mov	r0, r6
 800b0e2:	f7ff fe47 	bl	800ad74 <_Bfree>
 800b0e6:	4647      	mov	r7, r8
 800b0e8:	106d      	asrs	r5, r5, #1
 800b0ea:	d00b      	beq.n	800b104 <__pow5mult+0xa0>
 800b0ec:	6820      	ldr	r0, [r4, #0]
 800b0ee:	b938      	cbnz	r0, 800b100 <__pow5mult+0x9c>
 800b0f0:	4622      	mov	r2, r4
 800b0f2:	4621      	mov	r1, r4
 800b0f4:	4630      	mov	r0, r6
 800b0f6:	f7ff ff0f 	bl	800af18 <__multiply>
 800b0fa:	6020      	str	r0, [r4, #0]
 800b0fc:	f8c0 9000 	str.w	r9, [r0]
 800b100:	4604      	mov	r4, r0
 800b102:	e7e4      	b.n	800b0ce <__pow5mult+0x6a>
 800b104:	4638      	mov	r0, r7
 800b106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b10a:	bf00      	nop
 800b10c:	0800cb20 	.word	0x0800cb20
 800b110:	0800c945 	.word	0x0800c945
 800b114:	0800c9cc 	.word	0x0800c9cc

0800b118 <__lshift>:
 800b118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b11c:	460c      	mov	r4, r1
 800b11e:	6849      	ldr	r1, [r1, #4]
 800b120:	6923      	ldr	r3, [r4, #16]
 800b122:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b126:	68a3      	ldr	r3, [r4, #8]
 800b128:	4607      	mov	r7, r0
 800b12a:	4691      	mov	r9, r2
 800b12c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b130:	f108 0601 	add.w	r6, r8, #1
 800b134:	42b3      	cmp	r3, r6
 800b136:	db0b      	blt.n	800b150 <__lshift+0x38>
 800b138:	4638      	mov	r0, r7
 800b13a:	f7ff fddb 	bl	800acf4 <_Balloc>
 800b13e:	4605      	mov	r5, r0
 800b140:	b948      	cbnz	r0, 800b156 <__lshift+0x3e>
 800b142:	4602      	mov	r2, r0
 800b144:	4b28      	ldr	r3, [pc, #160]	; (800b1e8 <__lshift+0xd0>)
 800b146:	4829      	ldr	r0, [pc, #164]	; (800b1ec <__lshift+0xd4>)
 800b148:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b14c:	f000 fb76 	bl	800b83c <__assert_func>
 800b150:	3101      	adds	r1, #1
 800b152:	005b      	lsls	r3, r3, #1
 800b154:	e7ee      	b.n	800b134 <__lshift+0x1c>
 800b156:	2300      	movs	r3, #0
 800b158:	f100 0114 	add.w	r1, r0, #20
 800b15c:	f100 0210 	add.w	r2, r0, #16
 800b160:	4618      	mov	r0, r3
 800b162:	4553      	cmp	r3, sl
 800b164:	db33      	blt.n	800b1ce <__lshift+0xb6>
 800b166:	6920      	ldr	r0, [r4, #16]
 800b168:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b16c:	f104 0314 	add.w	r3, r4, #20
 800b170:	f019 091f 	ands.w	r9, r9, #31
 800b174:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b178:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b17c:	d02b      	beq.n	800b1d6 <__lshift+0xbe>
 800b17e:	f1c9 0e20 	rsb	lr, r9, #32
 800b182:	468a      	mov	sl, r1
 800b184:	2200      	movs	r2, #0
 800b186:	6818      	ldr	r0, [r3, #0]
 800b188:	fa00 f009 	lsl.w	r0, r0, r9
 800b18c:	4302      	orrs	r2, r0
 800b18e:	f84a 2b04 	str.w	r2, [sl], #4
 800b192:	f853 2b04 	ldr.w	r2, [r3], #4
 800b196:	459c      	cmp	ip, r3
 800b198:	fa22 f20e 	lsr.w	r2, r2, lr
 800b19c:	d8f3      	bhi.n	800b186 <__lshift+0x6e>
 800b19e:	ebac 0304 	sub.w	r3, ip, r4
 800b1a2:	3b15      	subs	r3, #21
 800b1a4:	f023 0303 	bic.w	r3, r3, #3
 800b1a8:	3304      	adds	r3, #4
 800b1aa:	f104 0015 	add.w	r0, r4, #21
 800b1ae:	4584      	cmp	ip, r0
 800b1b0:	bf38      	it	cc
 800b1b2:	2304      	movcc	r3, #4
 800b1b4:	50ca      	str	r2, [r1, r3]
 800b1b6:	b10a      	cbz	r2, 800b1bc <__lshift+0xa4>
 800b1b8:	f108 0602 	add.w	r6, r8, #2
 800b1bc:	3e01      	subs	r6, #1
 800b1be:	4638      	mov	r0, r7
 800b1c0:	612e      	str	r6, [r5, #16]
 800b1c2:	4621      	mov	r1, r4
 800b1c4:	f7ff fdd6 	bl	800ad74 <_Bfree>
 800b1c8:	4628      	mov	r0, r5
 800b1ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1ce:	f842 0f04 	str.w	r0, [r2, #4]!
 800b1d2:	3301      	adds	r3, #1
 800b1d4:	e7c5      	b.n	800b162 <__lshift+0x4a>
 800b1d6:	3904      	subs	r1, #4
 800b1d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1dc:	f841 2f04 	str.w	r2, [r1, #4]!
 800b1e0:	459c      	cmp	ip, r3
 800b1e2:	d8f9      	bhi.n	800b1d8 <__lshift+0xc0>
 800b1e4:	e7ea      	b.n	800b1bc <__lshift+0xa4>
 800b1e6:	bf00      	nop
 800b1e8:	0800c9bb 	.word	0x0800c9bb
 800b1ec:	0800c9cc 	.word	0x0800c9cc

0800b1f0 <__mcmp>:
 800b1f0:	b530      	push	{r4, r5, lr}
 800b1f2:	6902      	ldr	r2, [r0, #16]
 800b1f4:	690c      	ldr	r4, [r1, #16]
 800b1f6:	1b12      	subs	r2, r2, r4
 800b1f8:	d10e      	bne.n	800b218 <__mcmp+0x28>
 800b1fa:	f100 0314 	add.w	r3, r0, #20
 800b1fe:	3114      	adds	r1, #20
 800b200:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b204:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b208:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b20c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b210:	42a5      	cmp	r5, r4
 800b212:	d003      	beq.n	800b21c <__mcmp+0x2c>
 800b214:	d305      	bcc.n	800b222 <__mcmp+0x32>
 800b216:	2201      	movs	r2, #1
 800b218:	4610      	mov	r0, r2
 800b21a:	bd30      	pop	{r4, r5, pc}
 800b21c:	4283      	cmp	r3, r0
 800b21e:	d3f3      	bcc.n	800b208 <__mcmp+0x18>
 800b220:	e7fa      	b.n	800b218 <__mcmp+0x28>
 800b222:	f04f 32ff 	mov.w	r2, #4294967295
 800b226:	e7f7      	b.n	800b218 <__mcmp+0x28>

0800b228 <__mdiff>:
 800b228:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b22c:	460c      	mov	r4, r1
 800b22e:	4606      	mov	r6, r0
 800b230:	4611      	mov	r1, r2
 800b232:	4620      	mov	r0, r4
 800b234:	4617      	mov	r7, r2
 800b236:	f7ff ffdb 	bl	800b1f0 <__mcmp>
 800b23a:	1e05      	subs	r5, r0, #0
 800b23c:	d110      	bne.n	800b260 <__mdiff+0x38>
 800b23e:	4629      	mov	r1, r5
 800b240:	4630      	mov	r0, r6
 800b242:	f7ff fd57 	bl	800acf4 <_Balloc>
 800b246:	b930      	cbnz	r0, 800b256 <__mdiff+0x2e>
 800b248:	4b39      	ldr	r3, [pc, #228]	; (800b330 <__mdiff+0x108>)
 800b24a:	4602      	mov	r2, r0
 800b24c:	f240 2132 	movw	r1, #562	; 0x232
 800b250:	4838      	ldr	r0, [pc, #224]	; (800b334 <__mdiff+0x10c>)
 800b252:	f000 faf3 	bl	800b83c <__assert_func>
 800b256:	2301      	movs	r3, #1
 800b258:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b25c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b260:	bfa4      	itt	ge
 800b262:	463b      	movge	r3, r7
 800b264:	4627      	movge	r7, r4
 800b266:	4630      	mov	r0, r6
 800b268:	6879      	ldr	r1, [r7, #4]
 800b26a:	bfa6      	itte	ge
 800b26c:	461c      	movge	r4, r3
 800b26e:	2500      	movge	r5, #0
 800b270:	2501      	movlt	r5, #1
 800b272:	f7ff fd3f 	bl	800acf4 <_Balloc>
 800b276:	b920      	cbnz	r0, 800b282 <__mdiff+0x5a>
 800b278:	4b2d      	ldr	r3, [pc, #180]	; (800b330 <__mdiff+0x108>)
 800b27a:	4602      	mov	r2, r0
 800b27c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b280:	e7e6      	b.n	800b250 <__mdiff+0x28>
 800b282:	693e      	ldr	r6, [r7, #16]
 800b284:	60c5      	str	r5, [r0, #12]
 800b286:	6925      	ldr	r5, [r4, #16]
 800b288:	f107 0114 	add.w	r1, r7, #20
 800b28c:	f104 0914 	add.w	r9, r4, #20
 800b290:	f100 0e14 	add.w	lr, r0, #20
 800b294:	f107 0210 	add.w	r2, r7, #16
 800b298:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b29c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b2a0:	46f2      	mov	sl, lr
 800b2a2:	2700      	movs	r7, #0
 800b2a4:	f859 3b04 	ldr.w	r3, [r9], #4
 800b2a8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b2ac:	fa1f f883 	uxth.w	r8, r3
 800b2b0:	fa17 f78b 	uxtah	r7, r7, fp
 800b2b4:	0c1b      	lsrs	r3, r3, #16
 800b2b6:	eba7 0808 	sub.w	r8, r7, r8
 800b2ba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b2be:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b2c2:	fa1f f888 	uxth.w	r8, r8
 800b2c6:	141f      	asrs	r7, r3, #16
 800b2c8:	454d      	cmp	r5, r9
 800b2ca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b2ce:	f84a 3b04 	str.w	r3, [sl], #4
 800b2d2:	d8e7      	bhi.n	800b2a4 <__mdiff+0x7c>
 800b2d4:	1b2b      	subs	r3, r5, r4
 800b2d6:	3b15      	subs	r3, #21
 800b2d8:	f023 0303 	bic.w	r3, r3, #3
 800b2dc:	3304      	adds	r3, #4
 800b2de:	3415      	adds	r4, #21
 800b2e0:	42a5      	cmp	r5, r4
 800b2e2:	bf38      	it	cc
 800b2e4:	2304      	movcc	r3, #4
 800b2e6:	4419      	add	r1, r3
 800b2e8:	4473      	add	r3, lr
 800b2ea:	469e      	mov	lr, r3
 800b2ec:	460d      	mov	r5, r1
 800b2ee:	4565      	cmp	r5, ip
 800b2f0:	d30e      	bcc.n	800b310 <__mdiff+0xe8>
 800b2f2:	f10c 0203 	add.w	r2, ip, #3
 800b2f6:	1a52      	subs	r2, r2, r1
 800b2f8:	f022 0203 	bic.w	r2, r2, #3
 800b2fc:	3903      	subs	r1, #3
 800b2fe:	458c      	cmp	ip, r1
 800b300:	bf38      	it	cc
 800b302:	2200      	movcc	r2, #0
 800b304:	441a      	add	r2, r3
 800b306:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b30a:	b17b      	cbz	r3, 800b32c <__mdiff+0x104>
 800b30c:	6106      	str	r6, [r0, #16]
 800b30e:	e7a5      	b.n	800b25c <__mdiff+0x34>
 800b310:	f855 8b04 	ldr.w	r8, [r5], #4
 800b314:	fa17 f488 	uxtah	r4, r7, r8
 800b318:	1422      	asrs	r2, r4, #16
 800b31a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b31e:	b2a4      	uxth	r4, r4
 800b320:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b324:	f84e 4b04 	str.w	r4, [lr], #4
 800b328:	1417      	asrs	r7, r2, #16
 800b32a:	e7e0      	b.n	800b2ee <__mdiff+0xc6>
 800b32c:	3e01      	subs	r6, #1
 800b32e:	e7ea      	b.n	800b306 <__mdiff+0xde>
 800b330:	0800c9bb 	.word	0x0800c9bb
 800b334:	0800c9cc 	.word	0x0800c9cc

0800b338 <__d2b>:
 800b338:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b33c:	4689      	mov	r9, r1
 800b33e:	2101      	movs	r1, #1
 800b340:	ec57 6b10 	vmov	r6, r7, d0
 800b344:	4690      	mov	r8, r2
 800b346:	f7ff fcd5 	bl	800acf4 <_Balloc>
 800b34a:	4604      	mov	r4, r0
 800b34c:	b930      	cbnz	r0, 800b35c <__d2b+0x24>
 800b34e:	4602      	mov	r2, r0
 800b350:	4b25      	ldr	r3, [pc, #148]	; (800b3e8 <__d2b+0xb0>)
 800b352:	4826      	ldr	r0, [pc, #152]	; (800b3ec <__d2b+0xb4>)
 800b354:	f240 310a 	movw	r1, #778	; 0x30a
 800b358:	f000 fa70 	bl	800b83c <__assert_func>
 800b35c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b360:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b364:	bb35      	cbnz	r5, 800b3b4 <__d2b+0x7c>
 800b366:	2e00      	cmp	r6, #0
 800b368:	9301      	str	r3, [sp, #4]
 800b36a:	d028      	beq.n	800b3be <__d2b+0x86>
 800b36c:	4668      	mov	r0, sp
 800b36e:	9600      	str	r6, [sp, #0]
 800b370:	f7ff fd8c 	bl	800ae8c <__lo0bits>
 800b374:	9900      	ldr	r1, [sp, #0]
 800b376:	b300      	cbz	r0, 800b3ba <__d2b+0x82>
 800b378:	9a01      	ldr	r2, [sp, #4]
 800b37a:	f1c0 0320 	rsb	r3, r0, #32
 800b37e:	fa02 f303 	lsl.w	r3, r2, r3
 800b382:	430b      	orrs	r3, r1
 800b384:	40c2      	lsrs	r2, r0
 800b386:	6163      	str	r3, [r4, #20]
 800b388:	9201      	str	r2, [sp, #4]
 800b38a:	9b01      	ldr	r3, [sp, #4]
 800b38c:	61a3      	str	r3, [r4, #24]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	bf14      	ite	ne
 800b392:	2202      	movne	r2, #2
 800b394:	2201      	moveq	r2, #1
 800b396:	6122      	str	r2, [r4, #16]
 800b398:	b1d5      	cbz	r5, 800b3d0 <__d2b+0x98>
 800b39a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b39e:	4405      	add	r5, r0
 800b3a0:	f8c9 5000 	str.w	r5, [r9]
 800b3a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b3a8:	f8c8 0000 	str.w	r0, [r8]
 800b3ac:	4620      	mov	r0, r4
 800b3ae:	b003      	add	sp, #12
 800b3b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b3b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b3b8:	e7d5      	b.n	800b366 <__d2b+0x2e>
 800b3ba:	6161      	str	r1, [r4, #20]
 800b3bc:	e7e5      	b.n	800b38a <__d2b+0x52>
 800b3be:	a801      	add	r0, sp, #4
 800b3c0:	f7ff fd64 	bl	800ae8c <__lo0bits>
 800b3c4:	9b01      	ldr	r3, [sp, #4]
 800b3c6:	6163      	str	r3, [r4, #20]
 800b3c8:	2201      	movs	r2, #1
 800b3ca:	6122      	str	r2, [r4, #16]
 800b3cc:	3020      	adds	r0, #32
 800b3ce:	e7e3      	b.n	800b398 <__d2b+0x60>
 800b3d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b3d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b3d8:	f8c9 0000 	str.w	r0, [r9]
 800b3dc:	6918      	ldr	r0, [r3, #16]
 800b3de:	f7ff fd35 	bl	800ae4c <__hi0bits>
 800b3e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b3e6:	e7df      	b.n	800b3a8 <__d2b+0x70>
 800b3e8:	0800c9bb 	.word	0x0800c9bb
 800b3ec:	0800c9cc 	.word	0x0800c9cc

0800b3f0 <_calloc_r>:
 800b3f0:	b513      	push	{r0, r1, r4, lr}
 800b3f2:	434a      	muls	r2, r1
 800b3f4:	4611      	mov	r1, r2
 800b3f6:	9201      	str	r2, [sp, #4]
 800b3f8:	f000 f85a 	bl	800b4b0 <_malloc_r>
 800b3fc:	4604      	mov	r4, r0
 800b3fe:	b118      	cbz	r0, 800b408 <_calloc_r+0x18>
 800b400:	9a01      	ldr	r2, [sp, #4]
 800b402:	2100      	movs	r1, #0
 800b404:	f7fe f942 	bl	800968c <memset>
 800b408:	4620      	mov	r0, r4
 800b40a:	b002      	add	sp, #8
 800b40c:	bd10      	pop	{r4, pc}
	...

0800b410 <_free_r>:
 800b410:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b412:	2900      	cmp	r1, #0
 800b414:	d048      	beq.n	800b4a8 <_free_r+0x98>
 800b416:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b41a:	9001      	str	r0, [sp, #4]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	f1a1 0404 	sub.w	r4, r1, #4
 800b422:	bfb8      	it	lt
 800b424:	18e4      	addlt	r4, r4, r3
 800b426:	f000 fa65 	bl	800b8f4 <__malloc_lock>
 800b42a:	4a20      	ldr	r2, [pc, #128]	; (800b4ac <_free_r+0x9c>)
 800b42c:	9801      	ldr	r0, [sp, #4]
 800b42e:	6813      	ldr	r3, [r2, #0]
 800b430:	4615      	mov	r5, r2
 800b432:	b933      	cbnz	r3, 800b442 <_free_r+0x32>
 800b434:	6063      	str	r3, [r4, #4]
 800b436:	6014      	str	r4, [r2, #0]
 800b438:	b003      	add	sp, #12
 800b43a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b43e:	f000 ba5f 	b.w	800b900 <__malloc_unlock>
 800b442:	42a3      	cmp	r3, r4
 800b444:	d90b      	bls.n	800b45e <_free_r+0x4e>
 800b446:	6821      	ldr	r1, [r4, #0]
 800b448:	1862      	adds	r2, r4, r1
 800b44a:	4293      	cmp	r3, r2
 800b44c:	bf04      	itt	eq
 800b44e:	681a      	ldreq	r2, [r3, #0]
 800b450:	685b      	ldreq	r3, [r3, #4]
 800b452:	6063      	str	r3, [r4, #4]
 800b454:	bf04      	itt	eq
 800b456:	1852      	addeq	r2, r2, r1
 800b458:	6022      	streq	r2, [r4, #0]
 800b45a:	602c      	str	r4, [r5, #0]
 800b45c:	e7ec      	b.n	800b438 <_free_r+0x28>
 800b45e:	461a      	mov	r2, r3
 800b460:	685b      	ldr	r3, [r3, #4]
 800b462:	b10b      	cbz	r3, 800b468 <_free_r+0x58>
 800b464:	42a3      	cmp	r3, r4
 800b466:	d9fa      	bls.n	800b45e <_free_r+0x4e>
 800b468:	6811      	ldr	r1, [r2, #0]
 800b46a:	1855      	adds	r5, r2, r1
 800b46c:	42a5      	cmp	r5, r4
 800b46e:	d10b      	bne.n	800b488 <_free_r+0x78>
 800b470:	6824      	ldr	r4, [r4, #0]
 800b472:	4421      	add	r1, r4
 800b474:	1854      	adds	r4, r2, r1
 800b476:	42a3      	cmp	r3, r4
 800b478:	6011      	str	r1, [r2, #0]
 800b47a:	d1dd      	bne.n	800b438 <_free_r+0x28>
 800b47c:	681c      	ldr	r4, [r3, #0]
 800b47e:	685b      	ldr	r3, [r3, #4]
 800b480:	6053      	str	r3, [r2, #4]
 800b482:	4421      	add	r1, r4
 800b484:	6011      	str	r1, [r2, #0]
 800b486:	e7d7      	b.n	800b438 <_free_r+0x28>
 800b488:	d902      	bls.n	800b490 <_free_r+0x80>
 800b48a:	230c      	movs	r3, #12
 800b48c:	6003      	str	r3, [r0, #0]
 800b48e:	e7d3      	b.n	800b438 <_free_r+0x28>
 800b490:	6825      	ldr	r5, [r4, #0]
 800b492:	1961      	adds	r1, r4, r5
 800b494:	428b      	cmp	r3, r1
 800b496:	bf04      	itt	eq
 800b498:	6819      	ldreq	r1, [r3, #0]
 800b49a:	685b      	ldreq	r3, [r3, #4]
 800b49c:	6063      	str	r3, [r4, #4]
 800b49e:	bf04      	itt	eq
 800b4a0:	1949      	addeq	r1, r1, r5
 800b4a2:	6021      	streq	r1, [r4, #0]
 800b4a4:	6054      	str	r4, [r2, #4]
 800b4a6:	e7c7      	b.n	800b438 <_free_r+0x28>
 800b4a8:	b003      	add	sp, #12
 800b4aa:	bd30      	pop	{r4, r5, pc}
 800b4ac:	20000210 	.word	0x20000210

0800b4b0 <_malloc_r>:
 800b4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4b2:	1ccd      	adds	r5, r1, #3
 800b4b4:	f025 0503 	bic.w	r5, r5, #3
 800b4b8:	3508      	adds	r5, #8
 800b4ba:	2d0c      	cmp	r5, #12
 800b4bc:	bf38      	it	cc
 800b4be:	250c      	movcc	r5, #12
 800b4c0:	2d00      	cmp	r5, #0
 800b4c2:	4606      	mov	r6, r0
 800b4c4:	db01      	blt.n	800b4ca <_malloc_r+0x1a>
 800b4c6:	42a9      	cmp	r1, r5
 800b4c8:	d903      	bls.n	800b4d2 <_malloc_r+0x22>
 800b4ca:	230c      	movs	r3, #12
 800b4cc:	6033      	str	r3, [r6, #0]
 800b4ce:	2000      	movs	r0, #0
 800b4d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4d2:	f000 fa0f 	bl	800b8f4 <__malloc_lock>
 800b4d6:	4921      	ldr	r1, [pc, #132]	; (800b55c <_malloc_r+0xac>)
 800b4d8:	680a      	ldr	r2, [r1, #0]
 800b4da:	4614      	mov	r4, r2
 800b4dc:	b99c      	cbnz	r4, 800b506 <_malloc_r+0x56>
 800b4de:	4f20      	ldr	r7, [pc, #128]	; (800b560 <_malloc_r+0xb0>)
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	b923      	cbnz	r3, 800b4ee <_malloc_r+0x3e>
 800b4e4:	4621      	mov	r1, r4
 800b4e6:	4630      	mov	r0, r6
 800b4e8:	f000 f998 	bl	800b81c <_sbrk_r>
 800b4ec:	6038      	str	r0, [r7, #0]
 800b4ee:	4629      	mov	r1, r5
 800b4f0:	4630      	mov	r0, r6
 800b4f2:	f000 f993 	bl	800b81c <_sbrk_r>
 800b4f6:	1c43      	adds	r3, r0, #1
 800b4f8:	d123      	bne.n	800b542 <_malloc_r+0x92>
 800b4fa:	230c      	movs	r3, #12
 800b4fc:	6033      	str	r3, [r6, #0]
 800b4fe:	4630      	mov	r0, r6
 800b500:	f000 f9fe 	bl	800b900 <__malloc_unlock>
 800b504:	e7e3      	b.n	800b4ce <_malloc_r+0x1e>
 800b506:	6823      	ldr	r3, [r4, #0]
 800b508:	1b5b      	subs	r3, r3, r5
 800b50a:	d417      	bmi.n	800b53c <_malloc_r+0x8c>
 800b50c:	2b0b      	cmp	r3, #11
 800b50e:	d903      	bls.n	800b518 <_malloc_r+0x68>
 800b510:	6023      	str	r3, [r4, #0]
 800b512:	441c      	add	r4, r3
 800b514:	6025      	str	r5, [r4, #0]
 800b516:	e004      	b.n	800b522 <_malloc_r+0x72>
 800b518:	6863      	ldr	r3, [r4, #4]
 800b51a:	42a2      	cmp	r2, r4
 800b51c:	bf0c      	ite	eq
 800b51e:	600b      	streq	r3, [r1, #0]
 800b520:	6053      	strne	r3, [r2, #4]
 800b522:	4630      	mov	r0, r6
 800b524:	f000 f9ec 	bl	800b900 <__malloc_unlock>
 800b528:	f104 000b 	add.w	r0, r4, #11
 800b52c:	1d23      	adds	r3, r4, #4
 800b52e:	f020 0007 	bic.w	r0, r0, #7
 800b532:	1ac2      	subs	r2, r0, r3
 800b534:	d0cc      	beq.n	800b4d0 <_malloc_r+0x20>
 800b536:	1a1b      	subs	r3, r3, r0
 800b538:	50a3      	str	r3, [r4, r2]
 800b53a:	e7c9      	b.n	800b4d0 <_malloc_r+0x20>
 800b53c:	4622      	mov	r2, r4
 800b53e:	6864      	ldr	r4, [r4, #4]
 800b540:	e7cc      	b.n	800b4dc <_malloc_r+0x2c>
 800b542:	1cc4      	adds	r4, r0, #3
 800b544:	f024 0403 	bic.w	r4, r4, #3
 800b548:	42a0      	cmp	r0, r4
 800b54a:	d0e3      	beq.n	800b514 <_malloc_r+0x64>
 800b54c:	1a21      	subs	r1, r4, r0
 800b54e:	4630      	mov	r0, r6
 800b550:	f000 f964 	bl	800b81c <_sbrk_r>
 800b554:	3001      	adds	r0, #1
 800b556:	d1dd      	bne.n	800b514 <_malloc_r+0x64>
 800b558:	e7cf      	b.n	800b4fa <_malloc_r+0x4a>
 800b55a:	bf00      	nop
 800b55c:	20000210 	.word	0x20000210
 800b560:	20000214 	.word	0x20000214

0800b564 <__ssputs_r>:
 800b564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b568:	688e      	ldr	r6, [r1, #8]
 800b56a:	429e      	cmp	r6, r3
 800b56c:	4682      	mov	sl, r0
 800b56e:	460c      	mov	r4, r1
 800b570:	4690      	mov	r8, r2
 800b572:	461f      	mov	r7, r3
 800b574:	d838      	bhi.n	800b5e8 <__ssputs_r+0x84>
 800b576:	898a      	ldrh	r2, [r1, #12]
 800b578:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b57c:	d032      	beq.n	800b5e4 <__ssputs_r+0x80>
 800b57e:	6825      	ldr	r5, [r4, #0]
 800b580:	6909      	ldr	r1, [r1, #16]
 800b582:	eba5 0901 	sub.w	r9, r5, r1
 800b586:	6965      	ldr	r5, [r4, #20]
 800b588:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b58c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b590:	3301      	adds	r3, #1
 800b592:	444b      	add	r3, r9
 800b594:	106d      	asrs	r5, r5, #1
 800b596:	429d      	cmp	r5, r3
 800b598:	bf38      	it	cc
 800b59a:	461d      	movcc	r5, r3
 800b59c:	0553      	lsls	r3, r2, #21
 800b59e:	d531      	bpl.n	800b604 <__ssputs_r+0xa0>
 800b5a0:	4629      	mov	r1, r5
 800b5a2:	f7ff ff85 	bl	800b4b0 <_malloc_r>
 800b5a6:	4606      	mov	r6, r0
 800b5a8:	b950      	cbnz	r0, 800b5c0 <__ssputs_r+0x5c>
 800b5aa:	230c      	movs	r3, #12
 800b5ac:	f8ca 3000 	str.w	r3, [sl]
 800b5b0:	89a3      	ldrh	r3, [r4, #12]
 800b5b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5b6:	81a3      	strh	r3, [r4, #12]
 800b5b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b5bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5c0:	6921      	ldr	r1, [r4, #16]
 800b5c2:	464a      	mov	r2, r9
 800b5c4:	f7ff fb88 	bl	800acd8 <memcpy>
 800b5c8:	89a3      	ldrh	r3, [r4, #12]
 800b5ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b5ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5d2:	81a3      	strh	r3, [r4, #12]
 800b5d4:	6126      	str	r6, [r4, #16]
 800b5d6:	6165      	str	r5, [r4, #20]
 800b5d8:	444e      	add	r6, r9
 800b5da:	eba5 0509 	sub.w	r5, r5, r9
 800b5de:	6026      	str	r6, [r4, #0]
 800b5e0:	60a5      	str	r5, [r4, #8]
 800b5e2:	463e      	mov	r6, r7
 800b5e4:	42be      	cmp	r6, r7
 800b5e6:	d900      	bls.n	800b5ea <__ssputs_r+0x86>
 800b5e8:	463e      	mov	r6, r7
 800b5ea:	4632      	mov	r2, r6
 800b5ec:	6820      	ldr	r0, [r4, #0]
 800b5ee:	4641      	mov	r1, r8
 800b5f0:	f000 f966 	bl	800b8c0 <memmove>
 800b5f4:	68a3      	ldr	r3, [r4, #8]
 800b5f6:	6822      	ldr	r2, [r4, #0]
 800b5f8:	1b9b      	subs	r3, r3, r6
 800b5fa:	4432      	add	r2, r6
 800b5fc:	60a3      	str	r3, [r4, #8]
 800b5fe:	6022      	str	r2, [r4, #0]
 800b600:	2000      	movs	r0, #0
 800b602:	e7db      	b.n	800b5bc <__ssputs_r+0x58>
 800b604:	462a      	mov	r2, r5
 800b606:	f000 f981 	bl	800b90c <_realloc_r>
 800b60a:	4606      	mov	r6, r0
 800b60c:	2800      	cmp	r0, #0
 800b60e:	d1e1      	bne.n	800b5d4 <__ssputs_r+0x70>
 800b610:	6921      	ldr	r1, [r4, #16]
 800b612:	4650      	mov	r0, sl
 800b614:	f7ff fefc 	bl	800b410 <_free_r>
 800b618:	e7c7      	b.n	800b5aa <__ssputs_r+0x46>
	...

0800b61c <_svfiprintf_r>:
 800b61c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b620:	4698      	mov	r8, r3
 800b622:	898b      	ldrh	r3, [r1, #12]
 800b624:	061b      	lsls	r3, r3, #24
 800b626:	b09d      	sub	sp, #116	; 0x74
 800b628:	4607      	mov	r7, r0
 800b62a:	460d      	mov	r5, r1
 800b62c:	4614      	mov	r4, r2
 800b62e:	d50e      	bpl.n	800b64e <_svfiprintf_r+0x32>
 800b630:	690b      	ldr	r3, [r1, #16]
 800b632:	b963      	cbnz	r3, 800b64e <_svfiprintf_r+0x32>
 800b634:	2140      	movs	r1, #64	; 0x40
 800b636:	f7ff ff3b 	bl	800b4b0 <_malloc_r>
 800b63a:	6028      	str	r0, [r5, #0]
 800b63c:	6128      	str	r0, [r5, #16]
 800b63e:	b920      	cbnz	r0, 800b64a <_svfiprintf_r+0x2e>
 800b640:	230c      	movs	r3, #12
 800b642:	603b      	str	r3, [r7, #0]
 800b644:	f04f 30ff 	mov.w	r0, #4294967295
 800b648:	e0d1      	b.n	800b7ee <_svfiprintf_r+0x1d2>
 800b64a:	2340      	movs	r3, #64	; 0x40
 800b64c:	616b      	str	r3, [r5, #20]
 800b64e:	2300      	movs	r3, #0
 800b650:	9309      	str	r3, [sp, #36]	; 0x24
 800b652:	2320      	movs	r3, #32
 800b654:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b658:	f8cd 800c 	str.w	r8, [sp, #12]
 800b65c:	2330      	movs	r3, #48	; 0x30
 800b65e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b808 <_svfiprintf_r+0x1ec>
 800b662:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b666:	f04f 0901 	mov.w	r9, #1
 800b66a:	4623      	mov	r3, r4
 800b66c:	469a      	mov	sl, r3
 800b66e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b672:	b10a      	cbz	r2, 800b678 <_svfiprintf_r+0x5c>
 800b674:	2a25      	cmp	r2, #37	; 0x25
 800b676:	d1f9      	bne.n	800b66c <_svfiprintf_r+0x50>
 800b678:	ebba 0b04 	subs.w	fp, sl, r4
 800b67c:	d00b      	beq.n	800b696 <_svfiprintf_r+0x7a>
 800b67e:	465b      	mov	r3, fp
 800b680:	4622      	mov	r2, r4
 800b682:	4629      	mov	r1, r5
 800b684:	4638      	mov	r0, r7
 800b686:	f7ff ff6d 	bl	800b564 <__ssputs_r>
 800b68a:	3001      	adds	r0, #1
 800b68c:	f000 80aa 	beq.w	800b7e4 <_svfiprintf_r+0x1c8>
 800b690:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b692:	445a      	add	r2, fp
 800b694:	9209      	str	r2, [sp, #36]	; 0x24
 800b696:	f89a 3000 	ldrb.w	r3, [sl]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	f000 80a2 	beq.w	800b7e4 <_svfiprintf_r+0x1c8>
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	f04f 32ff 	mov.w	r2, #4294967295
 800b6a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6aa:	f10a 0a01 	add.w	sl, sl, #1
 800b6ae:	9304      	str	r3, [sp, #16]
 800b6b0:	9307      	str	r3, [sp, #28]
 800b6b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b6b6:	931a      	str	r3, [sp, #104]	; 0x68
 800b6b8:	4654      	mov	r4, sl
 800b6ba:	2205      	movs	r2, #5
 800b6bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6c0:	4851      	ldr	r0, [pc, #324]	; (800b808 <_svfiprintf_r+0x1ec>)
 800b6c2:	f7f4 fdb5 	bl	8000230 <memchr>
 800b6c6:	9a04      	ldr	r2, [sp, #16]
 800b6c8:	b9d8      	cbnz	r0, 800b702 <_svfiprintf_r+0xe6>
 800b6ca:	06d0      	lsls	r0, r2, #27
 800b6cc:	bf44      	itt	mi
 800b6ce:	2320      	movmi	r3, #32
 800b6d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6d4:	0711      	lsls	r1, r2, #28
 800b6d6:	bf44      	itt	mi
 800b6d8:	232b      	movmi	r3, #43	; 0x2b
 800b6da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6de:	f89a 3000 	ldrb.w	r3, [sl]
 800b6e2:	2b2a      	cmp	r3, #42	; 0x2a
 800b6e4:	d015      	beq.n	800b712 <_svfiprintf_r+0xf6>
 800b6e6:	9a07      	ldr	r2, [sp, #28]
 800b6e8:	4654      	mov	r4, sl
 800b6ea:	2000      	movs	r0, #0
 800b6ec:	f04f 0c0a 	mov.w	ip, #10
 800b6f0:	4621      	mov	r1, r4
 800b6f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6f6:	3b30      	subs	r3, #48	; 0x30
 800b6f8:	2b09      	cmp	r3, #9
 800b6fa:	d94e      	bls.n	800b79a <_svfiprintf_r+0x17e>
 800b6fc:	b1b0      	cbz	r0, 800b72c <_svfiprintf_r+0x110>
 800b6fe:	9207      	str	r2, [sp, #28]
 800b700:	e014      	b.n	800b72c <_svfiprintf_r+0x110>
 800b702:	eba0 0308 	sub.w	r3, r0, r8
 800b706:	fa09 f303 	lsl.w	r3, r9, r3
 800b70a:	4313      	orrs	r3, r2
 800b70c:	9304      	str	r3, [sp, #16]
 800b70e:	46a2      	mov	sl, r4
 800b710:	e7d2      	b.n	800b6b8 <_svfiprintf_r+0x9c>
 800b712:	9b03      	ldr	r3, [sp, #12]
 800b714:	1d19      	adds	r1, r3, #4
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	9103      	str	r1, [sp, #12]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	bfbb      	ittet	lt
 800b71e:	425b      	neglt	r3, r3
 800b720:	f042 0202 	orrlt.w	r2, r2, #2
 800b724:	9307      	strge	r3, [sp, #28]
 800b726:	9307      	strlt	r3, [sp, #28]
 800b728:	bfb8      	it	lt
 800b72a:	9204      	strlt	r2, [sp, #16]
 800b72c:	7823      	ldrb	r3, [r4, #0]
 800b72e:	2b2e      	cmp	r3, #46	; 0x2e
 800b730:	d10c      	bne.n	800b74c <_svfiprintf_r+0x130>
 800b732:	7863      	ldrb	r3, [r4, #1]
 800b734:	2b2a      	cmp	r3, #42	; 0x2a
 800b736:	d135      	bne.n	800b7a4 <_svfiprintf_r+0x188>
 800b738:	9b03      	ldr	r3, [sp, #12]
 800b73a:	1d1a      	adds	r2, r3, #4
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	9203      	str	r2, [sp, #12]
 800b740:	2b00      	cmp	r3, #0
 800b742:	bfb8      	it	lt
 800b744:	f04f 33ff 	movlt.w	r3, #4294967295
 800b748:	3402      	adds	r4, #2
 800b74a:	9305      	str	r3, [sp, #20]
 800b74c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b818 <_svfiprintf_r+0x1fc>
 800b750:	7821      	ldrb	r1, [r4, #0]
 800b752:	2203      	movs	r2, #3
 800b754:	4650      	mov	r0, sl
 800b756:	f7f4 fd6b 	bl	8000230 <memchr>
 800b75a:	b140      	cbz	r0, 800b76e <_svfiprintf_r+0x152>
 800b75c:	2340      	movs	r3, #64	; 0x40
 800b75e:	eba0 000a 	sub.w	r0, r0, sl
 800b762:	fa03 f000 	lsl.w	r0, r3, r0
 800b766:	9b04      	ldr	r3, [sp, #16]
 800b768:	4303      	orrs	r3, r0
 800b76a:	3401      	adds	r4, #1
 800b76c:	9304      	str	r3, [sp, #16]
 800b76e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b772:	4826      	ldr	r0, [pc, #152]	; (800b80c <_svfiprintf_r+0x1f0>)
 800b774:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b778:	2206      	movs	r2, #6
 800b77a:	f7f4 fd59 	bl	8000230 <memchr>
 800b77e:	2800      	cmp	r0, #0
 800b780:	d038      	beq.n	800b7f4 <_svfiprintf_r+0x1d8>
 800b782:	4b23      	ldr	r3, [pc, #140]	; (800b810 <_svfiprintf_r+0x1f4>)
 800b784:	bb1b      	cbnz	r3, 800b7ce <_svfiprintf_r+0x1b2>
 800b786:	9b03      	ldr	r3, [sp, #12]
 800b788:	3307      	adds	r3, #7
 800b78a:	f023 0307 	bic.w	r3, r3, #7
 800b78e:	3308      	adds	r3, #8
 800b790:	9303      	str	r3, [sp, #12]
 800b792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b794:	4433      	add	r3, r6
 800b796:	9309      	str	r3, [sp, #36]	; 0x24
 800b798:	e767      	b.n	800b66a <_svfiprintf_r+0x4e>
 800b79a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b79e:	460c      	mov	r4, r1
 800b7a0:	2001      	movs	r0, #1
 800b7a2:	e7a5      	b.n	800b6f0 <_svfiprintf_r+0xd4>
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	3401      	adds	r4, #1
 800b7a8:	9305      	str	r3, [sp, #20]
 800b7aa:	4619      	mov	r1, r3
 800b7ac:	f04f 0c0a 	mov.w	ip, #10
 800b7b0:	4620      	mov	r0, r4
 800b7b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7b6:	3a30      	subs	r2, #48	; 0x30
 800b7b8:	2a09      	cmp	r2, #9
 800b7ba:	d903      	bls.n	800b7c4 <_svfiprintf_r+0x1a8>
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d0c5      	beq.n	800b74c <_svfiprintf_r+0x130>
 800b7c0:	9105      	str	r1, [sp, #20]
 800b7c2:	e7c3      	b.n	800b74c <_svfiprintf_r+0x130>
 800b7c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b7c8:	4604      	mov	r4, r0
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	e7f0      	b.n	800b7b0 <_svfiprintf_r+0x194>
 800b7ce:	ab03      	add	r3, sp, #12
 800b7d0:	9300      	str	r3, [sp, #0]
 800b7d2:	462a      	mov	r2, r5
 800b7d4:	4b0f      	ldr	r3, [pc, #60]	; (800b814 <_svfiprintf_r+0x1f8>)
 800b7d6:	a904      	add	r1, sp, #16
 800b7d8:	4638      	mov	r0, r7
 800b7da:	f7fd ffff 	bl	80097dc <_printf_float>
 800b7de:	1c42      	adds	r2, r0, #1
 800b7e0:	4606      	mov	r6, r0
 800b7e2:	d1d6      	bne.n	800b792 <_svfiprintf_r+0x176>
 800b7e4:	89ab      	ldrh	r3, [r5, #12]
 800b7e6:	065b      	lsls	r3, r3, #25
 800b7e8:	f53f af2c 	bmi.w	800b644 <_svfiprintf_r+0x28>
 800b7ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b7ee:	b01d      	add	sp, #116	; 0x74
 800b7f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7f4:	ab03      	add	r3, sp, #12
 800b7f6:	9300      	str	r3, [sp, #0]
 800b7f8:	462a      	mov	r2, r5
 800b7fa:	4b06      	ldr	r3, [pc, #24]	; (800b814 <_svfiprintf_r+0x1f8>)
 800b7fc:	a904      	add	r1, sp, #16
 800b7fe:	4638      	mov	r0, r7
 800b800:	f7fe fa90 	bl	8009d24 <_printf_i>
 800b804:	e7eb      	b.n	800b7de <_svfiprintf_r+0x1c2>
 800b806:	bf00      	nop
 800b808:	0800cb2c 	.word	0x0800cb2c
 800b80c:	0800cb36 	.word	0x0800cb36
 800b810:	080097dd 	.word	0x080097dd
 800b814:	0800b565 	.word	0x0800b565
 800b818:	0800cb32 	.word	0x0800cb32

0800b81c <_sbrk_r>:
 800b81c:	b538      	push	{r3, r4, r5, lr}
 800b81e:	4d06      	ldr	r5, [pc, #24]	; (800b838 <_sbrk_r+0x1c>)
 800b820:	2300      	movs	r3, #0
 800b822:	4604      	mov	r4, r0
 800b824:	4608      	mov	r0, r1
 800b826:	602b      	str	r3, [r5, #0]
 800b828:	f7f6 fee0 	bl	80025ec <_sbrk>
 800b82c:	1c43      	adds	r3, r0, #1
 800b82e:	d102      	bne.n	800b836 <_sbrk_r+0x1a>
 800b830:	682b      	ldr	r3, [r5, #0]
 800b832:	b103      	cbz	r3, 800b836 <_sbrk_r+0x1a>
 800b834:	6023      	str	r3, [r4, #0]
 800b836:	bd38      	pop	{r3, r4, r5, pc}
 800b838:	200008dc 	.word	0x200008dc

0800b83c <__assert_func>:
 800b83c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b83e:	4614      	mov	r4, r2
 800b840:	461a      	mov	r2, r3
 800b842:	4b09      	ldr	r3, [pc, #36]	; (800b868 <__assert_func+0x2c>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	4605      	mov	r5, r0
 800b848:	68d8      	ldr	r0, [r3, #12]
 800b84a:	b14c      	cbz	r4, 800b860 <__assert_func+0x24>
 800b84c:	4b07      	ldr	r3, [pc, #28]	; (800b86c <__assert_func+0x30>)
 800b84e:	9100      	str	r1, [sp, #0]
 800b850:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b854:	4906      	ldr	r1, [pc, #24]	; (800b870 <__assert_func+0x34>)
 800b856:	462b      	mov	r3, r5
 800b858:	f000 f80e 	bl	800b878 <fiprintf>
 800b85c:	f000 faa4 	bl	800bda8 <abort>
 800b860:	4b04      	ldr	r3, [pc, #16]	; (800b874 <__assert_func+0x38>)
 800b862:	461c      	mov	r4, r3
 800b864:	e7f3      	b.n	800b84e <__assert_func+0x12>
 800b866:	bf00      	nop
 800b868:	20000010 	.word	0x20000010
 800b86c:	0800cb3d 	.word	0x0800cb3d
 800b870:	0800cb4a 	.word	0x0800cb4a
 800b874:	0800cb78 	.word	0x0800cb78

0800b878 <fiprintf>:
 800b878:	b40e      	push	{r1, r2, r3}
 800b87a:	b503      	push	{r0, r1, lr}
 800b87c:	4601      	mov	r1, r0
 800b87e:	ab03      	add	r3, sp, #12
 800b880:	4805      	ldr	r0, [pc, #20]	; (800b898 <fiprintf+0x20>)
 800b882:	f853 2b04 	ldr.w	r2, [r3], #4
 800b886:	6800      	ldr	r0, [r0, #0]
 800b888:	9301      	str	r3, [sp, #4]
 800b88a:	f000 f88f 	bl	800b9ac <_vfiprintf_r>
 800b88e:	b002      	add	sp, #8
 800b890:	f85d eb04 	ldr.w	lr, [sp], #4
 800b894:	b003      	add	sp, #12
 800b896:	4770      	bx	lr
 800b898:	20000010 	.word	0x20000010

0800b89c <__ascii_mbtowc>:
 800b89c:	b082      	sub	sp, #8
 800b89e:	b901      	cbnz	r1, 800b8a2 <__ascii_mbtowc+0x6>
 800b8a0:	a901      	add	r1, sp, #4
 800b8a2:	b142      	cbz	r2, 800b8b6 <__ascii_mbtowc+0x1a>
 800b8a4:	b14b      	cbz	r3, 800b8ba <__ascii_mbtowc+0x1e>
 800b8a6:	7813      	ldrb	r3, [r2, #0]
 800b8a8:	600b      	str	r3, [r1, #0]
 800b8aa:	7812      	ldrb	r2, [r2, #0]
 800b8ac:	1e10      	subs	r0, r2, #0
 800b8ae:	bf18      	it	ne
 800b8b0:	2001      	movne	r0, #1
 800b8b2:	b002      	add	sp, #8
 800b8b4:	4770      	bx	lr
 800b8b6:	4610      	mov	r0, r2
 800b8b8:	e7fb      	b.n	800b8b2 <__ascii_mbtowc+0x16>
 800b8ba:	f06f 0001 	mvn.w	r0, #1
 800b8be:	e7f8      	b.n	800b8b2 <__ascii_mbtowc+0x16>

0800b8c0 <memmove>:
 800b8c0:	4288      	cmp	r0, r1
 800b8c2:	b510      	push	{r4, lr}
 800b8c4:	eb01 0402 	add.w	r4, r1, r2
 800b8c8:	d902      	bls.n	800b8d0 <memmove+0x10>
 800b8ca:	4284      	cmp	r4, r0
 800b8cc:	4623      	mov	r3, r4
 800b8ce:	d807      	bhi.n	800b8e0 <memmove+0x20>
 800b8d0:	1e43      	subs	r3, r0, #1
 800b8d2:	42a1      	cmp	r1, r4
 800b8d4:	d008      	beq.n	800b8e8 <memmove+0x28>
 800b8d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b8da:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b8de:	e7f8      	b.n	800b8d2 <memmove+0x12>
 800b8e0:	4402      	add	r2, r0
 800b8e2:	4601      	mov	r1, r0
 800b8e4:	428a      	cmp	r2, r1
 800b8e6:	d100      	bne.n	800b8ea <memmove+0x2a>
 800b8e8:	bd10      	pop	{r4, pc}
 800b8ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b8ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b8f2:	e7f7      	b.n	800b8e4 <memmove+0x24>

0800b8f4 <__malloc_lock>:
 800b8f4:	4801      	ldr	r0, [pc, #4]	; (800b8fc <__malloc_lock+0x8>)
 800b8f6:	f000 bc17 	b.w	800c128 <__retarget_lock_acquire_recursive>
 800b8fa:	bf00      	nop
 800b8fc:	200008e4 	.word	0x200008e4

0800b900 <__malloc_unlock>:
 800b900:	4801      	ldr	r0, [pc, #4]	; (800b908 <__malloc_unlock+0x8>)
 800b902:	f000 bc12 	b.w	800c12a <__retarget_lock_release_recursive>
 800b906:	bf00      	nop
 800b908:	200008e4 	.word	0x200008e4

0800b90c <_realloc_r>:
 800b90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b90e:	4607      	mov	r7, r0
 800b910:	4614      	mov	r4, r2
 800b912:	460e      	mov	r6, r1
 800b914:	b921      	cbnz	r1, 800b920 <_realloc_r+0x14>
 800b916:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b91a:	4611      	mov	r1, r2
 800b91c:	f7ff bdc8 	b.w	800b4b0 <_malloc_r>
 800b920:	b922      	cbnz	r2, 800b92c <_realloc_r+0x20>
 800b922:	f7ff fd75 	bl	800b410 <_free_r>
 800b926:	4625      	mov	r5, r4
 800b928:	4628      	mov	r0, r5
 800b92a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b92c:	f000 fc62 	bl	800c1f4 <_malloc_usable_size_r>
 800b930:	42a0      	cmp	r0, r4
 800b932:	d20f      	bcs.n	800b954 <_realloc_r+0x48>
 800b934:	4621      	mov	r1, r4
 800b936:	4638      	mov	r0, r7
 800b938:	f7ff fdba 	bl	800b4b0 <_malloc_r>
 800b93c:	4605      	mov	r5, r0
 800b93e:	2800      	cmp	r0, #0
 800b940:	d0f2      	beq.n	800b928 <_realloc_r+0x1c>
 800b942:	4631      	mov	r1, r6
 800b944:	4622      	mov	r2, r4
 800b946:	f7ff f9c7 	bl	800acd8 <memcpy>
 800b94a:	4631      	mov	r1, r6
 800b94c:	4638      	mov	r0, r7
 800b94e:	f7ff fd5f 	bl	800b410 <_free_r>
 800b952:	e7e9      	b.n	800b928 <_realloc_r+0x1c>
 800b954:	4635      	mov	r5, r6
 800b956:	e7e7      	b.n	800b928 <_realloc_r+0x1c>

0800b958 <__sfputc_r>:
 800b958:	6893      	ldr	r3, [r2, #8]
 800b95a:	3b01      	subs	r3, #1
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	b410      	push	{r4}
 800b960:	6093      	str	r3, [r2, #8]
 800b962:	da08      	bge.n	800b976 <__sfputc_r+0x1e>
 800b964:	6994      	ldr	r4, [r2, #24]
 800b966:	42a3      	cmp	r3, r4
 800b968:	db01      	blt.n	800b96e <__sfputc_r+0x16>
 800b96a:	290a      	cmp	r1, #10
 800b96c:	d103      	bne.n	800b976 <__sfputc_r+0x1e>
 800b96e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b972:	f000 b94b 	b.w	800bc0c <__swbuf_r>
 800b976:	6813      	ldr	r3, [r2, #0]
 800b978:	1c58      	adds	r0, r3, #1
 800b97a:	6010      	str	r0, [r2, #0]
 800b97c:	7019      	strb	r1, [r3, #0]
 800b97e:	4608      	mov	r0, r1
 800b980:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b984:	4770      	bx	lr

0800b986 <__sfputs_r>:
 800b986:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b988:	4606      	mov	r6, r0
 800b98a:	460f      	mov	r7, r1
 800b98c:	4614      	mov	r4, r2
 800b98e:	18d5      	adds	r5, r2, r3
 800b990:	42ac      	cmp	r4, r5
 800b992:	d101      	bne.n	800b998 <__sfputs_r+0x12>
 800b994:	2000      	movs	r0, #0
 800b996:	e007      	b.n	800b9a8 <__sfputs_r+0x22>
 800b998:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b99c:	463a      	mov	r2, r7
 800b99e:	4630      	mov	r0, r6
 800b9a0:	f7ff ffda 	bl	800b958 <__sfputc_r>
 800b9a4:	1c43      	adds	r3, r0, #1
 800b9a6:	d1f3      	bne.n	800b990 <__sfputs_r+0xa>
 800b9a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b9ac <_vfiprintf_r>:
 800b9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9b0:	460d      	mov	r5, r1
 800b9b2:	b09d      	sub	sp, #116	; 0x74
 800b9b4:	4614      	mov	r4, r2
 800b9b6:	4698      	mov	r8, r3
 800b9b8:	4606      	mov	r6, r0
 800b9ba:	b118      	cbz	r0, 800b9c4 <_vfiprintf_r+0x18>
 800b9bc:	6983      	ldr	r3, [r0, #24]
 800b9be:	b90b      	cbnz	r3, 800b9c4 <_vfiprintf_r+0x18>
 800b9c0:	f000 fb14 	bl	800bfec <__sinit>
 800b9c4:	4b89      	ldr	r3, [pc, #548]	; (800bbec <_vfiprintf_r+0x240>)
 800b9c6:	429d      	cmp	r5, r3
 800b9c8:	d11b      	bne.n	800ba02 <_vfiprintf_r+0x56>
 800b9ca:	6875      	ldr	r5, [r6, #4]
 800b9cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9ce:	07d9      	lsls	r1, r3, #31
 800b9d0:	d405      	bmi.n	800b9de <_vfiprintf_r+0x32>
 800b9d2:	89ab      	ldrh	r3, [r5, #12]
 800b9d4:	059a      	lsls	r2, r3, #22
 800b9d6:	d402      	bmi.n	800b9de <_vfiprintf_r+0x32>
 800b9d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b9da:	f000 fba5 	bl	800c128 <__retarget_lock_acquire_recursive>
 800b9de:	89ab      	ldrh	r3, [r5, #12]
 800b9e0:	071b      	lsls	r3, r3, #28
 800b9e2:	d501      	bpl.n	800b9e8 <_vfiprintf_r+0x3c>
 800b9e4:	692b      	ldr	r3, [r5, #16]
 800b9e6:	b9eb      	cbnz	r3, 800ba24 <_vfiprintf_r+0x78>
 800b9e8:	4629      	mov	r1, r5
 800b9ea:	4630      	mov	r0, r6
 800b9ec:	f000 f96e 	bl	800bccc <__swsetup_r>
 800b9f0:	b1c0      	cbz	r0, 800ba24 <_vfiprintf_r+0x78>
 800b9f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9f4:	07dc      	lsls	r4, r3, #31
 800b9f6:	d50e      	bpl.n	800ba16 <_vfiprintf_r+0x6a>
 800b9f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b9fc:	b01d      	add	sp, #116	; 0x74
 800b9fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba02:	4b7b      	ldr	r3, [pc, #492]	; (800bbf0 <_vfiprintf_r+0x244>)
 800ba04:	429d      	cmp	r5, r3
 800ba06:	d101      	bne.n	800ba0c <_vfiprintf_r+0x60>
 800ba08:	68b5      	ldr	r5, [r6, #8]
 800ba0a:	e7df      	b.n	800b9cc <_vfiprintf_r+0x20>
 800ba0c:	4b79      	ldr	r3, [pc, #484]	; (800bbf4 <_vfiprintf_r+0x248>)
 800ba0e:	429d      	cmp	r5, r3
 800ba10:	bf08      	it	eq
 800ba12:	68f5      	ldreq	r5, [r6, #12]
 800ba14:	e7da      	b.n	800b9cc <_vfiprintf_r+0x20>
 800ba16:	89ab      	ldrh	r3, [r5, #12]
 800ba18:	0598      	lsls	r0, r3, #22
 800ba1a:	d4ed      	bmi.n	800b9f8 <_vfiprintf_r+0x4c>
 800ba1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba1e:	f000 fb84 	bl	800c12a <__retarget_lock_release_recursive>
 800ba22:	e7e9      	b.n	800b9f8 <_vfiprintf_r+0x4c>
 800ba24:	2300      	movs	r3, #0
 800ba26:	9309      	str	r3, [sp, #36]	; 0x24
 800ba28:	2320      	movs	r3, #32
 800ba2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba2e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba32:	2330      	movs	r3, #48	; 0x30
 800ba34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bbf8 <_vfiprintf_r+0x24c>
 800ba38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba3c:	f04f 0901 	mov.w	r9, #1
 800ba40:	4623      	mov	r3, r4
 800ba42:	469a      	mov	sl, r3
 800ba44:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba48:	b10a      	cbz	r2, 800ba4e <_vfiprintf_r+0xa2>
 800ba4a:	2a25      	cmp	r2, #37	; 0x25
 800ba4c:	d1f9      	bne.n	800ba42 <_vfiprintf_r+0x96>
 800ba4e:	ebba 0b04 	subs.w	fp, sl, r4
 800ba52:	d00b      	beq.n	800ba6c <_vfiprintf_r+0xc0>
 800ba54:	465b      	mov	r3, fp
 800ba56:	4622      	mov	r2, r4
 800ba58:	4629      	mov	r1, r5
 800ba5a:	4630      	mov	r0, r6
 800ba5c:	f7ff ff93 	bl	800b986 <__sfputs_r>
 800ba60:	3001      	adds	r0, #1
 800ba62:	f000 80aa 	beq.w	800bbba <_vfiprintf_r+0x20e>
 800ba66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba68:	445a      	add	r2, fp
 800ba6a:	9209      	str	r2, [sp, #36]	; 0x24
 800ba6c:	f89a 3000 	ldrb.w	r3, [sl]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	f000 80a2 	beq.w	800bbba <_vfiprintf_r+0x20e>
 800ba76:	2300      	movs	r3, #0
 800ba78:	f04f 32ff 	mov.w	r2, #4294967295
 800ba7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba80:	f10a 0a01 	add.w	sl, sl, #1
 800ba84:	9304      	str	r3, [sp, #16]
 800ba86:	9307      	str	r3, [sp, #28]
 800ba88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba8c:	931a      	str	r3, [sp, #104]	; 0x68
 800ba8e:	4654      	mov	r4, sl
 800ba90:	2205      	movs	r2, #5
 800ba92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba96:	4858      	ldr	r0, [pc, #352]	; (800bbf8 <_vfiprintf_r+0x24c>)
 800ba98:	f7f4 fbca 	bl	8000230 <memchr>
 800ba9c:	9a04      	ldr	r2, [sp, #16]
 800ba9e:	b9d8      	cbnz	r0, 800bad8 <_vfiprintf_r+0x12c>
 800baa0:	06d1      	lsls	r1, r2, #27
 800baa2:	bf44      	itt	mi
 800baa4:	2320      	movmi	r3, #32
 800baa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800baaa:	0713      	lsls	r3, r2, #28
 800baac:	bf44      	itt	mi
 800baae:	232b      	movmi	r3, #43	; 0x2b
 800bab0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bab4:	f89a 3000 	ldrb.w	r3, [sl]
 800bab8:	2b2a      	cmp	r3, #42	; 0x2a
 800baba:	d015      	beq.n	800bae8 <_vfiprintf_r+0x13c>
 800babc:	9a07      	ldr	r2, [sp, #28]
 800babe:	4654      	mov	r4, sl
 800bac0:	2000      	movs	r0, #0
 800bac2:	f04f 0c0a 	mov.w	ip, #10
 800bac6:	4621      	mov	r1, r4
 800bac8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bacc:	3b30      	subs	r3, #48	; 0x30
 800bace:	2b09      	cmp	r3, #9
 800bad0:	d94e      	bls.n	800bb70 <_vfiprintf_r+0x1c4>
 800bad2:	b1b0      	cbz	r0, 800bb02 <_vfiprintf_r+0x156>
 800bad4:	9207      	str	r2, [sp, #28]
 800bad6:	e014      	b.n	800bb02 <_vfiprintf_r+0x156>
 800bad8:	eba0 0308 	sub.w	r3, r0, r8
 800badc:	fa09 f303 	lsl.w	r3, r9, r3
 800bae0:	4313      	orrs	r3, r2
 800bae2:	9304      	str	r3, [sp, #16]
 800bae4:	46a2      	mov	sl, r4
 800bae6:	e7d2      	b.n	800ba8e <_vfiprintf_r+0xe2>
 800bae8:	9b03      	ldr	r3, [sp, #12]
 800baea:	1d19      	adds	r1, r3, #4
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	9103      	str	r1, [sp, #12]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	bfbb      	ittet	lt
 800baf4:	425b      	neglt	r3, r3
 800baf6:	f042 0202 	orrlt.w	r2, r2, #2
 800bafa:	9307      	strge	r3, [sp, #28]
 800bafc:	9307      	strlt	r3, [sp, #28]
 800bafe:	bfb8      	it	lt
 800bb00:	9204      	strlt	r2, [sp, #16]
 800bb02:	7823      	ldrb	r3, [r4, #0]
 800bb04:	2b2e      	cmp	r3, #46	; 0x2e
 800bb06:	d10c      	bne.n	800bb22 <_vfiprintf_r+0x176>
 800bb08:	7863      	ldrb	r3, [r4, #1]
 800bb0a:	2b2a      	cmp	r3, #42	; 0x2a
 800bb0c:	d135      	bne.n	800bb7a <_vfiprintf_r+0x1ce>
 800bb0e:	9b03      	ldr	r3, [sp, #12]
 800bb10:	1d1a      	adds	r2, r3, #4
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	9203      	str	r2, [sp, #12]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	bfb8      	it	lt
 800bb1a:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb1e:	3402      	adds	r4, #2
 800bb20:	9305      	str	r3, [sp, #20]
 800bb22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bc08 <_vfiprintf_r+0x25c>
 800bb26:	7821      	ldrb	r1, [r4, #0]
 800bb28:	2203      	movs	r2, #3
 800bb2a:	4650      	mov	r0, sl
 800bb2c:	f7f4 fb80 	bl	8000230 <memchr>
 800bb30:	b140      	cbz	r0, 800bb44 <_vfiprintf_r+0x198>
 800bb32:	2340      	movs	r3, #64	; 0x40
 800bb34:	eba0 000a 	sub.w	r0, r0, sl
 800bb38:	fa03 f000 	lsl.w	r0, r3, r0
 800bb3c:	9b04      	ldr	r3, [sp, #16]
 800bb3e:	4303      	orrs	r3, r0
 800bb40:	3401      	adds	r4, #1
 800bb42:	9304      	str	r3, [sp, #16]
 800bb44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb48:	482c      	ldr	r0, [pc, #176]	; (800bbfc <_vfiprintf_r+0x250>)
 800bb4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb4e:	2206      	movs	r2, #6
 800bb50:	f7f4 fb6e 	bl	8000230 <memchr>
 800bb54:	2800      	cmp	r0, #0
 800bb56:	d03f      	beq.n	800bbd8 <_vfiprintf_r+0x22c>
 800bb58:	4b29      	ldr	r3, [pc, #164]	; (800bc00 <_vfiprintf_r+0x254>)
 800bb5a:	bb1b      	cbnz	r3, 800bba4 <_vfiprintf_r+0x1f8>
 800bb5c:	9b03      	ldr	r3, [sp, #12]
 800bb5e:	3307      	adds	r3, #7
 800bb60:	f023 0307 	bic.w	r3, r3, #7
 800bb64:	3308      	adds	r3, #8
 800bb66:	9303      	str	r3, [sp, #12]
 800bb68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb6a:	443b      	add	r3, r7
 800bb6c:	9309      	str	r3, [sp, #36]	; 0x24
 800bb6e:	e767      	b.n	800ba40 <_vfiprintf_r+0x94>
 800bb70:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb74:	460c      	mov	r4, r1
 800bb76:	2001      	movs	r0, #1
 800bb78:	e7a5      	b.n	800bac6 <_vfiprintf_r+0x11a>
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	3401      	adds	r4, #1
 800bb7e:	9305      	str	r3, [sp, #20]
 800bb80:	4619      	mov	r1, r3
 800bb82:	f04f 0c0a 	mov.w	ip, #10
 800bb86:	4620      	mov	r0, r4
 800bb88:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb8c:	3a30      	subs	r2, #48	; 0x30
 800bb8e:	2a09      	cmp	r2, #9
 800bb90:	d903      	bls.n	800bb9a <_vfiprintf_r+0x1ee>
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d0c5      	beq.n	800bb22 <_vfiprintf_r+0x176>
 800bb96:	9105      	str	r1, [sp, #20]
 800bb98:	e7c3      	b.n	800bb22 <_vfiprintf_r+0x176>
 800bb9a:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb9e:	4604      	mov	r4, r0
 800bba0:	2301      	movs	r3, #1
 800bba2:	e7f0      	b.n	800bb86 <_vfiprintf_r+0x1da>
 800bba4:	ab03      	add	r3, sp, #12
 800bba6:	9300      	str	r3, [sp, #0]
 800bba8:	462a      	mov	r2, r5
 800bbaa:	4b16      	ldr	r3, [pc, #88]	; (800bc04 <_vfiprintf_r+0x258>)
 800bbac:	a904      	add	r1, sp, #16
 800bbae:	4630      	mov	r0, r6
 800bbb0:	f7fd fe14 	bl	80097dc <_printf_float>
 800bbb4:	4607      	mov	r7, r0
 800bbb6:	1c78      	adds	r0, r7, #1
 800bbb8:	d1d6      	bne.n	800bb68 <_vfiprintf_r+0x1bc>
 800bbba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bbbc:	07d9      	lsls	r1, r3, #31
 800bbbe:	d405      	bmi.n	800bbcc <_vfiprintf_r+0x220>
 800bbc0:	89ab      	ldrh	r3, [r5, #12]
 800bbc2:	059a      	lsls	r2, r3, #22
 800bbc4:	d402      	bmi.n	800bbcc <_vfiprintf_r+0x220>
 800bbc6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bbc8:	f000 faaf 	bl	800c12a <__retarget_lock_release_recursive>
 800bbcc:	89ab      	ldrh	r3, [r5, #12]
 800bbce:	065b      	lsls	r3, r3, #25
 800bbd0:	f53f af12 	bmi.w	800b9f8 <_vfiprintf_r+0x4c>
 800bbd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bbd6:	e711      	b.n	800b9fc <_vfiprintf_r+0x50>
 800bbd8:	ab03      	add	r3, sp, #12
 800bbda:	9300      	str	r3, [sp, #0]
 800bbdc:	462a      	mov	r2, r5
 800bbde:	4b09      	ldr	r3, [pc, #36]	; (800bc04 <_vfiprintf_r+0x258>)
 800bbe0:	a904      	add	r1, sp, #16
 800bbe2:	4630      	mov	r0, r6
 800bbe4:	f7fe f89e 	bl	8009d24 <_printf_i>
 800bbe8:	e7e4      	b.n	800bbb4 <_vfiprintf_r+0x208>
 800bbea:	bf00      	nop
 800bbec:	0800cca4 	.word	0x0800cca4
 800bbf0:	0800ccc4 	.word	0x0800ccc4
 800bbf4:	0800cc84 	.word	0x0800cc84
 800bbf8:	0800cb2c 	.word	0x0800cb2c
 800bbfc:	0800cb36 	.word	0x0800cb36
 800bc00:	080097dd 	.word	0x080097dd
 800bc04:	0800b987 	.word	0x0800b987
 800bc08:	0800cb32 	.word	0x0800cb32

0800bc0c <__swbuf_r>:
 800bc0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc0e:	460e      	mov	r6, r1
 800bc10:	4614      	mov	r4, r2
 800bc12:	4605      	mov	r5, r0
 800bc14:	b118      	cbz	r0, 800bc1e <__swbuf_r+0x12>
 800bc16:	6983      	ldr	r3, [r0, #24]
 800bc18:	b90b      	cbnz	r3, 800bc1e <__swbuf_r+0x12>
 800bc1a:	f000 f9e7 	bl	800bfec <__sinit>
 800bc1e:	4b21      	ldr	r3, [pc, #132]	; (800bca4 <__swbuf_r+0x98>)
 800bc20:	429c      	cmp	r4, r3
 800bc22:	d12b      	bne.n	800bc7c <__swbuf_r+0x70>
 800bc24:	686c      	ldr	r4, [r5, #4]
 800bc26:	69a3      	ldr	r3, [r4, #24]
 800bc28:	60a3      	str	r3, [r4, #8]
 800bc2a:	89a3      	ldrh	r3, [r4, #12]
 800bc2c:	071a      	lsls	r2, r3, #28
 800bc2e:	d52f      	bpl.n	800bc90 <__swbuf_r+0x84>
 800bc30:	6923      	ldr	r3, [r4, #16]
 800bc32:	b36b      	cbz	r3, 800bc90 <__swbuf_r+0x84>
 800bc34:	6923      	ldr	r3, [r4, #16]
 800bc36:	6820      	ldr	r0, [r4, #0]
 800bc38:	1ac0      	subs	r0, r0, r3
 800bc3a:	6963      	ldr	r3, [r4, #20]
 800bc3c:	b2f6      	uxtb	r6, r6
 800bc3e:	4283      	cmp	r3, r0
 800bc40:	4637      	mov	r7, r6
 800bc42:	dc04      	bgt.n	800bc4e <__swbuf_r+0x42>
 800bc44:	4621      	mov	r1, r4
 800bc46:	4628      	mov	r0, r5
 800bc48:	f000 f93c 	bl	800bec4 <_fflush_r>
 800bc4c:	bb30      	cbnz	r0, 800bc9c <__swbuf_r+0x90>
 800bc4e:	68a3      	ldr	r3, [r4, #8]
 800bc50:	3b01      	subs	r3, #1
 800bc52:	60a3      	str	r3, [r4, #8]
 800bc54:	6823      	ldr	r3, [r4, #0]
 800bc56:	1c5a      	adds	r2, r3, #1
 800bc58:	6022      	str	r2, [r4, #0]
 800bc5a:	701e      	strb	r6, [r3, #0]
 800bc5c:	6963      	ldr	r3, [r4, #20]
 800bc5e:	3001      	adds	r0, #1
 800bc60:	4283      	cmp	r3, r0
 800bc62:	d004      	beq.n	800bc6e <__swbuf_r+0x62>
 800bc64:	89a3      	ldrh	r3, [r4, #12]
 800bc66:	07db      	lsls	r3, r3, #31
 800bc68:	d506      	bpl.n	800bc78 <__swbuf_r+0x6c>
 800bc6a:	2e0a      	cmp	r6, #10
 800bc6c:	d104      	bne.n	800bc78 <__swbuf_r+0x6c>
 800bc6e:	4621      	mov	r1, r4
 800bc70:	4628      	mov	r0, r5
 800bc72:	f000 f927 	bl	800bec4 <_fflush_r>
 800bc76:	b988      	cbnz	r0, 800bc9c <__swbuf_r+0x90>
 800bc78:	4638      	mov	r0, r7
 800bc7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc7c:	4b0a      	ldr	r3, [pc, #40]	; (800bca8 <__swbuf_r+0x9c>)
 800bc7e:	429c      	cmp	r4, r3
 800bc80:	d101      	bne.n	800bc86 <__swbuf_r+0x7a>
 800bc82:	68ac      	ldr	r4, [r5, #8]
 800bc84:	e7cf      	b.n	800bc26 <__swbuf_r+0x1a>
 800bc86:	4b09      	ldr	r3, [pc, #36]	; (800bcac <__swbuf_r+0xa0>)
 800bc88:	429c      	cmp	r4, r3
 800bc8a:	bf08      	it	eq
 800bc8c:	68ec      	ldreq	r4, [r5, #12]
 800bc8e:	e7ca      	b.n	800bc26 <__swbuf_r+0x1a>
 800bc90:	4621      	mov	r1, r4
 800bc92:	4628      	mov	r0, r5
 800bc94:	f000 f81a 	bl	800bccc <__swsetup_r>
 800bc98:	2800      	cmp	r0, #0
 800bc9a:	d0cb      	beq.n	800bc34 <__swbuf_r+0x28>
 800bc9c:	f04f 37ff 	mov.w	r7, #4294967295
 800bca0:	e7ea      	b.n	800bc78 <__swbuf_r+0x6c>
 800bca2:	bf00      	nop
 800bca4:	0800cca4 	.word	0x0800cca4
 800bca8:	0800ccc4 	.word	0x0800ccc4
 800bcac:	0800cc84 	.word	0x0800cc84

0800bcb0 <__ascii_wctomb>:
 800bcb0:	b149      	cbz	r1, 800bcc6 <__ascii_wctomb+0x16>
 800bcb2:	2aff      	cmp	r2, #255	; 0xff
 800bcb4:	bf85      	ittet	hi
 800bcb6:	238a      	movhi	r3, #138	; 0x8a
 800bcb8:	6003      	strhi	r3, [r0, #0]
 800bcba:	700a      	strbls	r2, [r1, #0]
 800bcbc:	f04f 30ff 	movhi.w	r0, #4294967295
 800bcc0:	bf98      	it	ls
 800bcc2:	2001      	movls	r0, #1
 800bcc4:	4770      	bx	lr
 800bcc6:	4608      	mov	r0, r1
 800bcc8:	4770      	bx	lr
	...

0800bccc <__swsetup_r>:
 800bccc:	4b32      	ldr	r3, [pc, #200]	; (800bd98 <__swsetup_r+0xcc>)
 800bcce:	b570      	push	{r4, r5, r6, lr}
 800bcd0:	681d      	ldr	r5, [r3, #0]
 800bcd2:	4606      	mov	r6, r0
 800bcd4:	460c      	mov	r4, r1
 800bcd6:	b125      	cbz	r5, 800bce2 <__swsetup_r+0x16>
 800bcd8:	69ab      	ldr	r3, [r5, #24]
 800bcda:	b913      	cbnz	r3, 800bce2 <__swsetup_r+0x16>
 800bcdc:	4628      	mov	r0, r5
 800bcde:	f000 f985 	bl	800bfec <__sinit>
 800bce2:	4b2e      	ldr	r3, [pc, #184]	; (800bd9c <__swsetup_r+0xd0>)
 800bce4:	429c      	cmp	r4, r3
 800bce6:	d10f      	bne.n	800bd08 <__swsetup_r+0x3c>
 800bce8:	686c      	ldr	r4, [r5, #4]
 800bcea:	89a3      	ldrh	r3, [r4, #12]
 800bcec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bcf0:	0719      	lsls	r1, r3, #28
 800bcf2:	d42c      	bmi.n	800bd4e <__swsetup_r+0x82>
 800bcf4:	06dd      	lsls	r5, r3, #27
 800bcf6:	d411      	bmi.n	800bd1c <__swsetup_r+0x50>
 800bcf8:	2309      	movs	r3, #9
 800bcfa:	6033      	str	r3, [r6, #0]
 800bcfc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bd00:	81a3      	strh	r3, [r4, #12]
 800bd02:	f04f 30ff 	mov.w	r0, #4294967295
 800bd06:	e03e      	b.n	800bd86 <__swsetup_r+0xba>
 800bd08:	4b25      	ldr	r3, [pc, #148]	; (800bda0 <__swsetup_r+0xd4>)
 800bd0a:	429c      	cmp	r4, r3
 800bd0c:	d101      	bne.n	800bd12 <__swsetup_r+0x46>
 800bd0e:	68ac      	ldr	r4, [r5, #8]
 800bd10:	e7eb      	b.n	800bcea <__swsetup_r+0x1e>
 800bd12:	4b24      	ldr	r3, [pc, #144]	; (800bda4 <__swsetup_r+0xd8>)
 800bd14:	429c      	cmp	r4, r3
 800bd16:	bf08      	it	eq
 800bd18:	68ec      	ldreq	r4, [r5, #12]
 800bd1a:	e7e6      	b.n	800bcea <__swsetup_r+0x1e>
 800bd1c:	0758      	lsls	r0, r3, #29
 800bd1e:	d512      	bpl.n	800bd46 <__swsetup_r+0x7a>
 800bd20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd22:	b141      	cbz	r1, 800bd36 <__swsetup_r+0x6a>
 800bd24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd28:	4299      	cmp	r1, r3
 800bd2a:	d002      	beq.n	800bd32 <__swsetup_r+0x66>
 800bd2c:	4630      	mov	r0, r6
 800bd2e:	f7ff fb6f 	bl	800b410 <_free_r>
 800bd32:	2300      	movs	r3, #0
 800bd34:	6363      	str	r3, [r4, #52]	; 0x34
 800bd36:	89a3      	ldrh	r3, [r4, #12]
 800bd38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bd3c:	81a3      	strh	r3, [r4, #12]
 800bd3e:	2300      	movs	r3, #0
 800bd40:	6063      	str	r3, [r4, #4]
 800bd42:	6923      	ldr	r3, [r4, #16]
 800bd44:	6023      	str	r3, [r4, #0]
 800bd46:	89a3      	ldrh	r3, [r4, #12]
 800bd48:	f043 0308 	orr.w	r3, r3, #8
 800bd4c:	81a3      	strh	r3, [r4, #12]
 800bd4e:	6923      	ldr	r3, [r4, #16]
 800bd50:	b94b      	cbnz	r3, 800bd66 <__swsetup_r+0x9a>
 800bd52:	89a3      	ldrh	r3, [r4, #12]
 800bd54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bd58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd5c:	d003      	beq.n	800bd66 <__swsetup_r+0x9a>
 800bd5e:	4621      	mov	r1, r4
 800bd60:	4630      	mov	r0, r6
 800bd62:	f000 fa07 	bl	800c174 <__smakebuf_r>
 800bd66:	89a0      	ldrh	r0, [r4, #12]
 800bd68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bd6c:	f010 0301 	ands.w	r3, r0, #1
 800bd70:	d00a      	beq.n	800bd88 <__swsetup_r+0xbc>
 800bd72:	2300      	movs	r3, #0
 800bd74:	60a3      	str	r3, [r4, #8]
 800bd76:	6963      	ldr	r3, [r4, #20]
 800bd78:	425b      	negs	r3, r3
 800bd7a:	61a3      	str	r3, [r4, #24]
 800bd7c:	6923      	ldr	r3, [r4, #16]
 800bd7e:	b943      	cbnz	r3, 800bd92 <__swsetup_r+0xc6>
 800bd80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bd84:	d1ba      	bne.n	800bcfc <__swsetup_r+0x30>
 800bd86:	bd70      	pop	{r4, r5, r6, pc}
 800bd88:	0781      	lsls	r1, r0, #30
 800bd8a:	bf58      	it	pl
 800bd8c:	6963      	ldrpl	r3, [r4, #20]
 800bd8e:	60a3      	str	r3, [r4, #8]
 800bd90:	e7f4      	b.n	800bd7c <__swsetup_r+0xb0>
 800bd92:	2000      	movs	r0, #0
 800bd94:	e7f7      	b.n	800bd86 <__swsetup_r+0xba>
 800bd96:	bf00      	nop
 800bd98:	20000010 	.word	0x20000010
 800bd9c:	0800cca4 	.word	0x0800cca4
 800bda0:	0800ccc4 	.word	0x0800ccc4
 800bda4:	0800cc84 	.word	0x0800cc84

0800bda8 <abort>:
 800bda8:	b508      	push	{r3, lr}
 800bdaa:	2006      	movs	r0, #6
 800bdac:	f000 fa52 	bl	800c254 <raise>
 800bdb0:	2001      	movs	r0, #1
 800bdb2:	f7f6 fba3 	bl	80024fc <_exit>
	...

0800bdb8 <__sflush_r>:
 800bdb8:	898a      	ldrh	r2, [r1, #12]
 800bdba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdbe:	4605      	mov	r5, r0
 800bdc0:	0710      	lsls	r0, r2, #28
 800bdc2:	460c      	mov	r4, r1
 800bdc4:	d458      	bmi.n	800be78 <__sflush_r+0xc0>
 800bdc6:	684b      	ldr	r3, [r1, #4]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	dc05      	bgt.n	800bdd8 <__sflush_r+0x20>
 800bdcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	dc02      	bgt.n	800bdd8 <__sflush_r+0x20>
 800bdd2:	2000      	movs	r0, #0
 800bdd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bdda:	2e00      	cmp	r6, #0
 800bddc:	d0f9      	beq.n	800bdd2 <__sflush_r+0x1a>
 800bdde:	2300      	movs	r3, #0
 800bde0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bde4:	682f      	ldr	r7, [r5, #0]
 800bde6:	602b      	str	r3, [r5, #0]
 800bde8:	d032      	beq.n	800be50 <__sflush_r+0x98>
 800bdea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bdec:	89a3      	ldrh	r3, [r4, #12]
 800bdee:	075a      	lsls	r2, r3, #29
 800bdf0:	d505      	bpl.n	800bdfe <__sflush_r+0x46>
 800bdf2:	6863      	ldr	r3, [r4, #4]
 800bdf4:	1ac0      	subs	r0, r0, r3
 800bdf6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bdf8:	b10b      	cbz	r3, 800bdfe <__sflush_r+0x46>
 800bdfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bdfc:	1ac0      	subs	r0, r0, r3
 800bdfe:	2300      	movs	r3, #0
 800be00:	4602      	mov	r2, r0
 800be02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be04:	6a21      	ldr	r1, [r4, #32]
 800be06:	4628      	mov	r0, r5
 800be08:	47b0      	blx	r6
 800be0a:	1c43      	adds	r3, r0, #1
 800be0c:	89a3      	ldrh	r3, [r4, #12]
 800be0e:	d106      	bne.n	800be1e <__sflush_r+0x66>
 800be10:	6829      	ldr	r1, [r5, #0]
 800be12:	291d      	cmp	r1, #29
 800be14:	d82c      	bhi.n	800be70 <__sflush_r+0xb8>
 800be16:	4a2a      	ldr	r2, [pc, #168]	; (800bec0 <__sflush_r+0x108>)
 800be18:	40ca      	lsrs	r2, r1
 800be1a:	07d6      	lsls	r6, r2, #31
 800be1c:	d528      	bpl.n	800be70 <__sflush_r+0xb8>
 800be1e:	2200      	movs	r2, #0
 800be20:	6062      	str	r2, [r4, #4]
 800be22:	04d9      	lsls	r1, r3, #19
 800be24:	6922      	ldr	r2, [r4, #16]
 800be26:	6022      	str	r2, [r4, #0]
 800be28:	d504      	bpl.n	800be34 <__sflush_r+0x7c>
 800be2a:	1c42      	adds	r2, r0, #1
 800be2c:	d101      	bne.n	800be32 <__sflush_r+0x7a>
 800be2e:	682b      	ldr	r3, [r5, #0]
 800be30:	b903      	cbnz	r3, 800be34 <__sflush_r+0x7c>
 800be32:	6560      	str	r0, [r4, #84]	; 0x54
 800be34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be36:	602f      	str	r7, [r5, #0]
 800be38:	2900      	cmp	r1, #0
 800be3a:	d0ca      	beq.n	800bdd2 <__sflush_r+0x1a>
 800be3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be40:	4299      	cmp	r1, r3
 800be42:	d002      	beq.n	800be4a <__sflush_r+0x92>
 800be44:	4628      	mov	r0, r5
 800be46:	f7ff fae3 	bl	800b410 <_free_r>
 800be4a:	2000      	movs	r0, #0
 800be4c:	6360      	str	r0, [r4, #52]	; 0x34
 800be4e:	e7c1      	b.n	800bdd4 <__sflush_r+0x1c>
 800be50:	6a21      	ldr	r1, [r4, #32]
 800be52:	2301      	movs	r3, #1
 800be54:	4628      	mov	r0, r5
 800be56:	47b0      	blx	r6
 800be58:	1c41      	adds	r1, r0, #1
 800be5a:	d1c7      	bne.n	800bdec <__sflush_r+0x34>
 800be5c:	682b      	ldr	r3, [r5, #0]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d0c4      	beq.n	800bdec <__sflush_r+0x34>
 800be62:	2b1d      	cmp	r3, #29
 800be64:	d001      	beq.n	800be6a <__sflush_r+0xb2>
 800be66:	2b16      	cmp	r3, #22
 800be68:	d101      	bne.n	800be6e <__sflush_r+0xb6>
 800be6a:	602f      	str	r7, [r5, #0]
 800be6c:	e7b1      	b.n	800bdd2 <__sflush_r+0x1a>
 800be6e:	89a3      	ldrh	r3, [r4, #12]
 800be70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be74:	81a3      	strh	r3, [r4, #12]
 800be76:	e7ad      	b.n	800bdd4 <__sflush_r+0x1c>
 800be78:	690f      	ldr	r7, [r1, #16]
 800be7a:	2f00      	cmp	r7, #0
 800be7c:	d0a9      	beq.n	800bdd2 <__sflush_r+0x1a>
 800be7e:	0793      	lsls	r3, r2, #30
 800be80:	680e      	ldr	r6, [r1, #0]
 800be82:	bf08      	it	eq
 800be84:	694b      	ldreq	r3, [r1, #20]
 800be86:	600f      	str	r7, [r1, #0]
 800be88:	bf18      	it	ne
 800be8a:	2300      	movne	r3, #0
 800be8c:	eba6 0807 	sub.w	r8, r6, r7
 800be90:	608b      	str	r3, [r1, #8]
 800be92:	f1b8 0f00 	cmp.w	r8, #0
 800be96:	dd9c      	ble.n	800bdd2 <__sflush_r+0x1a>
 800be98:	6a21      	ldr	r1, [r4, #32]
 800be9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800be9c:	4643      	mov	r3, r8
 800be9e:	463a      	mov	r2, r7
 800bea0:	4628      	mov	r0, r5
 800bea2:	47b0      	blx	r6
 800bea4:	2800      	cmp	r0, #0
 800bea6:	dc06      	bgt.n	800beb6 <__sflush_r+0xfe>
 800bea8:	89a3      	ldrh	r3, [r4, #12]
 800beaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800beae:	81a3      	strh	r3, [r4, #12]
 800beb0:	f04f 30ff 	mov.w	r0, #4294967295
 800beb4:	e78e      	b.n	800bdd4 <__sflush_r+0x1c>
 800beb6:	4407      	add	r7, r0
 800beb8:	eba8 0800 	sub.w	r8, r8, r0
 800bebc:	e7e9      	b.n	800be92 <__sflush_r+0xda>
 800bebe:	bf00      	nop
 800bec0:	20400001 	.word	0x20400001

0800bec4 <_fflush_r>:
 800bec4:	b538      	push	{r3, r4, r5, lr}
 800bec6:	690b      	ldr	r3, [r1, #16]
 800bec8:	4605      	mov	r5, r0
 800beca:	460c      	mov	r4, r1
 800becc:	b913      	cbnz	r3, 800bed4 <_fflush_r+0x10>
 800bece:	2500      	movs	r5, #0
 800bed0:	4628      	mov	r0, r5
 800bed2:	bd38      	pop	{r3, r4, r5, pc}
 800bed4:	b118      	cbz	r0, 800bede <_fflush_r+0x1a>
 800bed6:	6983      	ldr	r3, [r0, #24]
 800bed8:	b90b      	cbnz	r3, 800bede <_fflush_r+0x1a>
 800beda:	f000 f887 	bl	800bfec <__sinit>
 800bede:	4b14      	ldr	r3, [pc, #80]	; (800bf30 <_fflush_r+0x6c>)
 800bee0:	429c      	cmp	r4, r3
 800bee2:	d11b      	bne.n	800bf1c <_fflush_r+0x58>
 800bee4:	686c      	ldr	r4, [r5, #4]
 800bee6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d0ef      	beq.n	800bece <_fflush_r+0xa>
 800beee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bef0:	07d0      	lsls	r0, r2, #31
 800bef2:	d404      	bmi.n	800befe <_fflush_r+0x3a>
 800bef4:	0599      	lsls	r1, r3, #22
 800bef6:	d402      	bmi.n	800befe <_fflush_r+0x3a>
 800bef8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800befa:	f000 f915 	bl	800c128 <__retarget_lock_acquire_recursive>
 800befe:	4628      	mov	r0, r5
 800bf00:	4621      	mov	r1, r4
 800bf02:	f7ff ff59 	bl	800bdb8 <__sflush_r>
 800bf06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bf08:	07da      	lsls	r2, r3, #31
 800bf0a:	4605      	mov	r5, r0
 800bf0c:	d4e0      	bmi.n	800bed0 <_fflush_r+0xc>
 800bf0e:	89a3      	ldrh	r3, [r4, #12]
 800bf10:	059b      	lsls	r3, r3, #22
 800bf12:	d4dd      	bmi.n	800bed0 <_fflush_r+0xc>
 800bf14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf16:	f000 f908 	bl	800c12a <__retarget_lock_release_recursive>
 800bf1a:	e7d9      	b.n	800bed0 <_fflush_r+0xc>
 800bf1c:	4b05      	ldr	r3, [pc, #20]	; (800bf34 <_fflush_r+0x70>)
 800bf1e:	429c      	cmp	r4, r3
 800bf20:	d101      	bne.n	800bf26 <_fflush_r+0x62>
 800bf22:	68ac      	ldr	r4, [r5, #8]
 800bf24:	e7df      	b.n	800bee6 <_fflush_r+0x22>
 800bf26:	4b04      	ldr	r3, [pc, #16]	; (800bf38 <_fflush_r+0x74>)
 800bf28:	429c      	cmp	r4, r3
 800bf2a:	bf08      	it	eq
 800bf2c:	68ec      	ldreq	r4, [r5, #12]
 800bf2e:	e7da      	b.n	800bee6 <_fflush_r+0x22>
 800bf30:	0800cca4 	.word	0x0800cca4
 800bf34:	0800ccc4 	.word	0x0800ccc4
 800bf38:	0800cc84 	.word	0x0800cc84

0800bf3c <std>:
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	b510      	push	{r4, lr}
 800bf40:	4604      	mov	r4, r0
 800bf42:	e9c0 3300 	strd	r3, r3, [r0]
 800bf46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bf4a:	6083      	str	r3, [r0, #8]
 800bf4c:	8181      	strh	r1, [r0, #12]
 800bf4e:	6643      	str	r3, [r0, #100]	; 0x64
 800bf50:	81c2      	strh	r2, [r0, #14]
 800bf52:	6183      	str	r3, [r0, #24]
 800bf54:	4619      	mov	r1, r3
 800bf56:	2208      	movs	r2, #8
 800bf58:	305c      	adds	r0, #92	; 0x5c
 800bf5a:	f7fd fb97 	bl	800968c <memset>
 800bf5e:	4b05      	ldr	r3, [pc, #20]	; (800bf74 <std+0x38>)
 800bf60:	6263      	str	r3, [r4, #36]	; 0x24
 800bf62:	4b05      	ldr	r3, [pc, #20]	; (800bf78 <std+0x3c>)
 800bf64:	62a3      	str	r3, [r4, #40]	; 0x28
 800bf66:	4b05      	ldr	r3, [pc, #20]	; (800bf7c <std+0x40>)
 800bf68:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bf6a:	4b05      	ldr	r3, [pc, #20]	; (800bf80 <std+0x44>)
 800bf6c:	6224      	str	r4, [r4, #32]
 800bf6e:	6323      	str	r3, [r4, #48]	; 0x30
 800bf70:	bd10      	pop	{r4, pc}
 800bf72:	bf00      	nop
 800bf74:	0800c28d 	.word	0x0800c28d
 800bf78:	0800c2af 	.word	0x0800c2af
 800bf7c:	0800c2e7 	.word	0x0800c2e7
 800bf80:	0800c30b 	.word	0x0800c30b

0800bf84 <_cleanup_r>:
 800bf84:	4901      	ldr	r1, [pc, #4]	; (800bf8c <_cleanup_r+0x8>)
 800bf86:	f000 b8af 	b.w	800c0e8 <_fwalk_reent>
 800bf8a:	bf00      	nop
 800bf8c:	0800bec5 	.word	0x0800bec5

0800bf90 <__sfmoreglue>:
 800bf90:	b570      	push	{r4, r5, r6, lr}
 800bf92:	1e4a      	subs	r2, r1, #1
 800bf94:	2568      	movs	r5, #104	; 0x68
 800bf96:	4355      	muls	r5, r2
 800bf98:	460e      	mov	r6, r1
 800bf9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bf9e:	f7ff fa87 	bl	800b4b0 <_malloc_r>
 800bfa2:	4604      	mov	r4, r0
 800bfa4:	b140      	cbz	r0, 800bfb8 <__sfmoreglue+0x28>
 800bfa6:	2100      	movs	r1, #0
 800bfa8:	e9c0 1600 	strd	r1, r6, [r0]
 800bfac:	300c      	adds	r0, #12
 800bfae:	60a0      	str	r0, [r4, #8]
 800bfb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bfb4:	f7fd fb6a 	bl	800968c <memset>
 800bfb8:	4620      	mov	r0, r4
 800bfba:	bd70      	pop	{r4, r5, r6, pc}

0800bfbc <__sfp_lock_acquire>:
 800bfbc:	4801      	ldr	r0, [pc, #4]	; (800bfc4 <__sfp_lock_acquire+0x8>)
 800bfbe:	f000 b8b3 	b.w	800c128 <__retarget_lock_acquire_recursive>
 800bfc2:	bf00      	nop
 800bfc4:	200008e8 	.word	0x200008e8

0800bfc8 <__sfp_lock_release>:
 800bfc8:	4801      	ldr	r0, [pc, #4]	; (800bfd0 <__sfp_lock_release+0x8>)
 800bfca:	f000 b8ae 	b.w	800c12a <__retarget_lock_release_recursive>
 800bfce:	bf00      	nop
 800bfd0:	200008e8 	.word	0x200008e8

0800bfd4 <__sinit_lock_acquire>:
 800bfd4:	4801      	ldr	r0, [pc, #4]	; (800bfdc <__sinit_lock_acquire+0x8>)
 800bfd6:	f000 b8a7 	b.w	800c128 <__retarget_lock_acquire_recursive>
 800bfda:	bf00      	nop
 800bfdc:	200008e3 	.word	0x200008e3

0800bfe0 <__sinit_lock_release>:
 800bfe0:	4801      	ldr	r0, [pc, #4]	; (800bfe8 <__sinit_lock_release+0x8>)
 800bfe2:	f000 b8a2 	b.w	800c12a <__retarget_lock_release_recursive>
 800bfe6:	bf00      	nop
 800bfe8:	200008e3 	.word	0x200008e3

0800bfec <__sinit>:
 800bfec:	b510      	push	{r4, lr}
 800bfee:	4604      	mov	r4, r0
 800bff0:	f7ff fff0 	bl	800bfd4 <__sinit_lock_acquire>
 800bff4:	69a3      	ldr	r3, [r4, #24]
 800bff6:	b11b      	cbz	r3, 800c000 <__sinit+0x14>
 800bff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bffc:	f7ff bff0 	b.w	800bfe0 <__sinit_lock_release>
 800c000:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c004:	6523      	str	r3, [r4, #80]	; 0x50
 800c006:	4b13      	ldr	r3, [pc, #76]	; (800c054 <__sinit+0x68>)
 800c008:	4a13      	ldr	r2, [pc, #76]	; (800c058 <__sinit+0x6c>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	62a2      	str	r2, [r4, #40]	; 0x28
 800c00e:	42a3      	cmp	r3, r4
 800c010:	bf04      	itt	eq
 800c012:	2301      	moveq	r3, #1
 800c014:	61a3      	streq	r3, [r4, #24]
 800c016:	4620      	mov	r0, r4
 800c018:	f000 f820 	bl	800c05c <__sfp>
 800c01c:	6060      	str	r0, [r4, #4]
 800c01e:	4620      	mov	r0, r4
 800c020:	f000 f81c 	bl	800c05c <__sfp>
 800c024:	60a0      	str	r0, [r4, #8]
 800c026:	4620      	mov	r0, r4
 800c028:	f000 f818 	bl	800c05c <__sfp>
 800c02c:	2200      	movs	r2, #0
 800c02e:	60e0      	str	r0, [r4, #12]
 800c030:	2104      	movs	r1, #4
 800c032:	6860      	ldr	r0, [r4, #4]
 800c034:	f7ff ff82 	bl	800bf3c <std>
 800c038:	68a0      	ldr	r0, [r4, #8]
 800c03a:	2201      	movs	r2, #1
 800c03c:	2109      	movs	r1, #9
 800c03e:	f7ff ff7d 	bl	800bf3c <std>
 800c042:	68e0      	ldr	r0, [r4, #12]
 800c044:	2202      	movs	r2, #2
 800c046:	2112      	movs	r1, #18
 800c048:	f7ff ff78 	bl	800bf3c <std>
 800c04c:	2301      	movs	r3, #1
 800c04e:	61a3      	str	r3, [r4, #24]
 800c050:	e7d2      	b.n	800bff8 <__sinit+0xc>
 800c052:	bf00      	nop
 800c054:	0800c900 	.word	0x0800c900
 800c058:	0800bf85 	.word	0x0800bf85

0800c05c <__sfp>:
 800c05c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c05e:	4607      	mov	r7, r0
 800c060:	f7ff ffac 	bl	800bfbc <__sfp_lock_acquire>
 800c064:	4b1e      	ldr	r3, [pc, #120]	; (800c0e0 <__sfp+0x84>)
 800c066:	681e      	ldr	r6, [r3, #0]
 800c068:	69b3      	ldr	r3, [r6, #24]
 800c06a:	b913      	cbnz	r3, 800c072 <__sfp+0x16>
 800c06c:	4630      	mov	r0, r6
 800c06e:	f7ff ffbd 	bl	800bfec <__sinit>
 800c072:	3648      	adds	r6, #72	; 0x48
 800c074:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c078:	3b01      	subs	r3, #1
 800c07a:	d503      	bpl.n	800c084 <__sfp+0x28>
 800c07c:	6833      	ldr	r3, [r6, #0]
 800c07e:	b30b      	cbz	r3, 800c0c4 <__sfp+0x68>
 800c080:	6836      	ldr	r6, [r6, #0]
 800c082:	e7f7      	b.n	800c074 <__sfp+0x18>
 800c084:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c088:	b9d5      	cbnz	r5, 800c0c0 <__sfp+0x64>
 800c08a:	4b16      	ldr	r3, [pc, #88]	; (800c0e4 <__sfp+0x88>)
 800c08c:	60e3      	str	r3, [r4, #12]
 800c08e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c092:	6665      	str	r5, [r4, #100]	; 0x64
 800c094:	f000 f847 	bl	800c126 <__retarget_lock_init_recursive>
 800c098:	f7ff ff96 	bl	800bfc8 <__sfp_lock_release>
 800c09c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c0a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c0a4:	6025      	str	r5, [r4, #0]
 800c0a6:	61a5      	str	r5, [r4, #24]
 800c0a8:	2208      	movs	r2, #8
 800c0aa:	4629      	mov	r1, r5
 800c0ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c0b0:	f7fd faec 	bl	800968c <memset>
 800c0b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c0b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c0bc:	4620      	mov	r0, r4
 800c0be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0c0:	3468      	adds	r4, #104	; 0x68
 800c0c2:	e7d9      	b.n	800c078 <__sfp+0x1c>
 800c0c4:	2104      	movs	r1, #4
 800c0c6:	4638      	mov	r0, r7
 800c0c8:	f7ff ff62 	bl	800bf90 <__sfmoreglue>
 800c0cc:	4604      	mov	r4, r0
 800c0ce:	6030      	str	r0, [r6, #0]
 800c0d0:	2800      	cmp	r0, #0
 800c0d2:	d1d5      	bne.n	800c080 <__sfp+0x24>
 800c0d4:	f7ff ff78 	bl	800bfc8 <__sfp_lock_release>
 800c0d8:	230c      	movs	r3, #12
 800c0da:	603b      	str	r3, [r7, #0]
 800c0dc:	e7ee      	b.n	800c0bc <__sfp+0x60>
 800c0de:	bf00      	nop
 800c0e0:	0800c900 	.word	0x0800c900
 800c0e4:	ffff0001 	.word	0xffff0001

0800c0e8 <_fwalk_reent>:
 800c0e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0ec:	4606      	mov	r6, r0
 800c0ee:	4688      	mov	r8, r1
 800c0f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c0f4:	2700      	movs	r7, #0
 800c0f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c0fa:	f1b9 0901 	subs.w	r9, r9, #1
 800c0fe:	d505      	bpl.n	800c10c <_fwalk_reent+0x24>
 800c100:	6824      	ldr	r4, [r4, #0]
 800c102:	2c00      	cmp	r4, #0
 800c104:	d1f7      	bne.n	800c0f6 <_fwalk_reent+0xe>
 800c106:	4638      	mov	r0, r7
 800c108:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c10c:	89ab      	ldrh	r3, [r5, #12]
 800c10e:	2b01      	cmp	r3, #1
 800c110:	d907      	bls.n	800c122 <_fwalk_reent+0x3a>
 800c112:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c116:	3301      	adds	r3, #1
 800c118:	d003      	beq.n	800c122 <_fwalk_reent+0x3a>
 800c11a:	4629      	mov	r1, r5
 800c11c:	4630      	mov	r0, r6
 800c11e:	47c0      	blx	r8
 800c120:	4307      	orrs	r7, r0
 800c122:	3568      	adds	r5, #104	; 0x68
 800c124:	e7e9      	b.n	800c0fa <_fwalk_reent+0x12>

0800c126 <__retarget_lock_init_recursive>:
 800c126:	4770      	bx	lr

0800c128 <__retarget_lock_acquire_recursive>:
 800c128:	4770      	bx	lr

0800c12a <__retarget_lock_release_recursive>:
 800c12a:	4770      	bx	lr

0800c12c <__swhatbuf_r>:
 800c12c:	b570      	push	{r4, r5, r6, lr}
 800c12e:	460e      	mov	r6, r1
 800c130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c134:	2900      	cmp	r1, #0
 800c136:	b096      	sub	sp, #88	; 0x58
 800c138:	4614      	mov	r4, r2
 800c13a:	461d      	mov	r5, r3
 800c13c:	da07      	bge.n	800c14e <__swhatbuf_r+0x22>
 800c13e:	2300      	movs	r3, #0
 800c140:	602b      	str	r3, [r5, #0]
 800c142:	89b3      	ldrh	r3, [r6, #12]
 800c144:	061a      	lsls	r2, r3, #24
 800c146:	d410      	bmi.n	800c16a <__swhatbuf_r+0x3e>
 800c148:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c14c:	e00e      	b.n	800c16c <__swhatbuf_r+0x40>
 800c14e:	466a      	mov	r2, sp
 800c150:	f000 f902 	bl	800c358 <_fstat_r>
 800c154:	2800      	cmp	r0, #0
 800c156:	dbf2      	blt.n	800c13e <__swhatbuf_r+0x12>
 800c158:	9a01      	ldr	r2, [sp, #4]
 800c15a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c15e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c162:	425a      	negs	r2, r3
 800c164:	415a      	adcs	r2, r3
 800c166:	602a      	str	r2, [r5, #0]
 800c168:	e7ee      	b.n	800c148 <__swhatbuf_r+0x1c>
 800c16a:	2340      	movs	r3, #64	; 0x40
 800c16c:	2000      	movs	r0, #0
 800c16e:	6023      	str	r3, [r4, #0]
 800c170:	b016      	add	sp, #88	; 0x58
 800c172:	bd70      	pop	{r4, r5, r6, pc}

0800c174 <__smakebuf_r>:
 800c174:	898b      	ldrh	r3, [r1, #12]
 800c176:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c178:	079d      	lsls	r5, r3, #30
 800c17a:	4606      	mov	r6, r0
 800c17c:	460c      	mov	r4, r1
 800c17e:	d507      	bpl.n	800c190 <__smakebuf_r+0x1c>
 800c180:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c184:	6023      	str	r3, [r4, #0]
 800c186:	6123      	str	r3, [r4, #16]
 800c188:	2301      	movs	r3, #1
 800c18a:	6163      	str	r3, [r4, #20]
 800c18c:	b002      	add	sp, #8
 800c18e:	bd70      	pop	{r4, r5, r6, pc}
 800c190:	ab01      	add	r3, sp, #4
 800c192:	466a      	mov	r2, sp
 800c194:	f7ff ffca 	bl	800c12c <__swhatbuf_r>
 800c198:	9900      	ldr	r1, [sp, #0]
 800c19a:	4605      	mov	r5, r0
 800c19c:	4630      	mov	r0, r6
 800c19e:	f7ff f987 	bl	800b4b0 <_malloc_r>
 800c1a2:	b948      	cbnz	r0, 800c1b8 <__smakebuf_r+0x44>
 800c1a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1a8:	059a      	lsls	r2, r3, #22
 800c1aa:	d4ef      	bmi.n	800c18c <__smakebuf_r+0x18>
 800c1ac:	f023 0303 	bic.w	r3, r3, #3
 800c1b0:	f043 0302 	orr.w	r3, r3, #2
 800c1b4:	81a3      	strh	r3, [r4, #12]
 800c1b6:	e7e3      	b.n	800c180 <__smakebuf_r+0xc>
 800c1b8:	4b0d      	ldr	r3, [pc, #52]	; (800c1f0 <__smakebuf_r+0x7c>)
 800c1ba:	62b3      	str	r3, [r6, #40]	; 0x28
 800c1bc:	89a3      	ldrh	r3, [r4, #12]
 800c1be:	6020      	str	r0, [r4, #0]
 800c1c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1c4:	81a3      	strh	r3, [r4, #12]
 800c1c6:	9b00      	ldr	r3, [sp, #0]
 800c1c8:	6163      	str	r3, [r4, #20]
 800c1ca:	9b01      	ldr	r3, [sp, #4]
 800c1cc:	6120      	str	r0, [r4, #16]
 800c1ce:	b15b      	cbz	r3, 800c1e8 <__smakebuf_r+0x74>
 800c1d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1d4:	4630      	mov	r0, r6
 800c1d6:	f000 f8d1 	bl	800c37c <_isatty_r>
 800c1da:	b128      	cbz	r0, 800c1e8 <__smakebuf_r+0x74>
 800c1dc:	89a3      	ldrh	r3, [r4, #12]
 800c1de:	f023 0303 	bic.w	r3, r3, #3
 800c1e2:	f043 0301 	orr.w	r3, r3, #1
 800c1e6:	81a3      	strh	r3, [r4, #12]
 800c1e8:	89a0      	ldrh	r0, [r4, #12]
 800c1ea:	4305      	orrs	r5, r0
 800c1ec:	81a5      	strh	r5, [r4, #12]
 800c1ee:	e7cd      	b.n	800c18c <__smakebuf_r+0x18>
 800c1f0:	0800bf85 	.word	0x0800bf85

0800c1f4 <_malloc_usable_size_r>:
 800c1f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1f8:	1f18      	subs	r0, r3, #4
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	bfbc      	itt	lt
 800c1fe:	580b      	ldrlt	r3, [r1, r0]
 800c200:	18c0      	addlt	r0, r0, r3
 800c202:	4770      	bx	lr

0800c204 <_raise_r>:
 800c204:	291f      	cmp	r1, #31
 800c206:	b538      	push	{r3, r4, r5, lr}
 800c208:	4604      	mov	r4, r0
 800c20a:	460d      	mov	r5, r1
 800c20c:	d904      	bls.n	800c218 <_raise_r+0x14>
 800c20e:	2316      	movs	r3, #22
 800c210:	6003      	str	r3, [r0, #0]
 800c212:	f04f 30ff 	mov.w	r0, #4294967295
 800c216:	bd38      	pop	{r3, r4, r5, pc}
 800c218:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c21a:	b112      	cbz	r2, 800c222 <_raise_r+0x1e>
 800c21c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c220:	b94b      	cbnz	r3, 800c236 <_raise_r+0x32>
 800c222:	4620      	mov	r0, r4
 800c224:	f000 f830 	bl	800c288 <_getpid_r>
 800c228:	462a      	mov	r2, r5
 800c22a:	4601      	mov	r1, r0
 800c22c:	4620      	mov	r0, r4
 800c22e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c232:	f000 b817 	b.w	800c264 <_kill_r>
 800c236:	2b01      	cmp	r3, #1
 800c238:	d00a      	beq.n	800c250 <_raise_r+0x4c>
 800c23a:	1c59      	adds	r1, r3, #1
 800c23c:	d103      	bne.n	800c246 <_raise_r+0x42>
 800c23e:	2316      	movs	r3, #22
 800c240:	6003      	str	r3, [r0, #0]
 800c242:	2001      	movs	r0, #1
 800c244:	e7e7      	b.n	800c216 <_raise_r+0x12>
 800c246:	2400      	movs	r4, #0
 800c248:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c24c:	4628      	mov	r0, r5
 800c24e:	4798      	blx	r3
 800c250:	2000      	movs	r0, #0
 800c252:	e7e0      	b.n	800c216 <_raise_r+0x12>

0800c254 <raise>:
 800c254:	4b02      	ldr	r3, [pc, #8]	; (800c260 <raise+0xc>)
 800c256:	4601      	mov	r1, r0
 800c258:	6818      	ldr	r0, [r3, #0]
 800c25a:	f7ff bfd3 	b.w	800c204 <_raise_r>
 800c25e:	bf00      	nop
 800c260:	20000010 	.word	0x20000010

0800c264 <_kill_r>:
 800c264:	b538      	push	{r3, r4, r5, lr}
 800c266:	4d07      	ldr	r5, [pc, #28]	; (800c284 <_kill_r+0x20>)
 800c268:	2300      	movs	r3, #0
 800c26a:	4604      	mov	r4, r0
 800c26c:	4608      	mov	r0, r1
 800c26e:	4611      	mov	r1, r2
 800c270:	602b      	str	r3, [r5, #0]
 800c272:	f7f6 f933 	bl	80024dc <_kill>
 800c276:	1c43      	adds	r3, r0, #1
 800c278:	d102      	bne.n	800c280 <_kill_r+0x1c>
 800c27a:	682b      	ldr	r3, [r5, #0]
 800c27c:	b103      	cbz	r3, 800c280 <_kill_r+0x1c>
 800c27e:	6023      	str	r3, [r4, #0]
 800c280:	bd38      	pop	{r3, r4, r5, pc}
 800c282:	bf00      	nop
 800c284:	200008dc 	.word	0x200008dc

0800c288 <_getpid_r>:
 800c288:	f7f6 b920 	b.w	80024cc <_getpid>

0800c28c <__sread>:
 800c28c:	b510      	push	{r4, lr}
 800c28e:	460c      	mov	r4, r1
 800c290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c294:	f000 f894 	bl	800c3c0 <_read_r>
 800c298:	2800      	cmp	r0, #0
 800c29a:	bfab      	itete	ge
 800c29c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c29e:	89a3      	ldrhlt	r3, [r4, #12]
 800c2a0:	181b      	addge	r3, r3, r0
 800c2a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c2a6:	bfac      	ite	ge
 800c2a8:	6563      	strge	r3, [r4, #84]	; 0x54
 800c2aa:	81a3      	strhlt	r3, [r4, #12]
 800c2ac:	bd10      	pop	{r4, pc}

0800c2ae <__swrite>:
 800c2ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2b2:	461f      	mov	r7, r3
 800c2b4:	898b      	ldrh	r3, [r1, #12]
 800c2b6:	05db      	lsls	r3, r3, #23
 800c2b8:	4605      	mov	r5, r0
 800c2ba:	460c      	mov	r4, r1
 800c2bc:	4616      	mov	r6, r2
 800c2be:	d505      	bpl.n	800c2cc <__swrite+0x1e>
 800c2c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2c4:	2302      	movs	r3, #2
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	f000 f868 	bl	800c39c <_lseek_r>
 800c2cc:	89a3      	ldrh	r3, [r4, #12]
 800c2ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c2d6:	81a3      	strh	r3, [r4, #12]
 800c2d8:	4632      	mov	r2, r6
 800c2da:	463b      	mov	r3, r7
 800c2dc:	4628      	mov	r0, r5
 800c2de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c2e2:	f000 b817 	b.w	800c314 <_write_r>

0800c2e6 <__sseek>:
 800c2e6:	b510      	push	{r4, lr}
 800c2e8:	460c      	mov	r4, r1
 800c2ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2ee:	f000 f855 	bl	800c39c <_lseek_r>
 800c2f2:	1c43      	adds	r3, r0, #1
 800c2f4:	89a3      	ldrh	r3, [r4, #12]
 800c2f6:	bf15      	itete	ne
 800c2f8:	6560      	strne	r0, [r4, #84]	; 0x54
 800c2fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c2fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c302:	81a3      	strheq	r3, [r4, #12]
 800c304:	bf18      	it	ne
 800c306:	81a3      	strhne	r3, [r4, #12]
 800c308:	bd10      	pop	{r4, pc}

0800c30a <__sclose>:
 800c30a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c30e:	f000 b813 	b.w	800c338 <_close_r>
	...

0800c314 <_write_r>:
 800c314:	b538      	push	{r3, r4, r5, lr}
 800c316:	4d07      	ldr	r5, [pc, #28]	; (800c334 <_write_r+0x20>)
 800c318:	4604      	mov	r4, r0
 800c31a:	4608      	mov	r0, r1
 800c31c:	4611      	mov	r1, r2
 800c31e:	2200      	movs	r2, #0
 800c320:	602a      	str	r2, [r5, #0]
 800c322:	461a      	mov	r2, r3
 800c324:	f7f6 f911 	bl	800254a <_write>
 800c328:	1c43      	adds	r3, r0, #1
 800c32a:	d102      	bne.n	800c332 <_write_r+0x1e>
 800c32c:	682b      	ldr	r3, [r5, #0]
 800c32e:	b103      	cbz	r3, 800c332 <_write_r+0x1e>
 800c330:	6023      	str	r3, [r4, #0]
 800c332:	bd38      	pop	{r3, r4, r5, pc}
 800c334:	200008dc 	.word	0x200008dc

0800c338 <_close_r>:
 800c338:	b538      	push	{r3, r4, r5, lr}
 800c33a:	4d06      	ldr	r5, [pc, #24]	; (800c354 <_close_r+0x1c>)
 800c33c:	2300      	movs	r3, #0
 800c33e:	4604      	mov	r4, r0
 800c340:	4608      	mov	r0, r1
 800c342:	602b      	str	r3, [r5, #0]
 800c344:	f7f6 f91d 	bl	8002582 <_close>
 800c348:	1c43      	adds	r3, r0, #1
 800c34a:	d102      	bne.n	800c352 <_close_r+0x1a>
 800c34c:	682b      	ldr	r3, [r5, #0]
 800c34e:	b103      	cbz	r3, 800c352 <_close_r+0x1a>
 800c350:	6023      	str	r3, [r4, #0]
 800c352:	bd38      	pop	{r3, r4, r5, pc}
 800c354:	200008dc 	.word	0x200008dc

0800c358 <_fstat_r>:
 800c358:	b538      	push	{r3, r4, r5, lr}
 800c35a:	4d07      	ldr	r5, [pc, #28]	; (800c378 <_fstat_r+0x20>)
 800c35c:	2300      	movs	r3, #0
 800c35e:	4604      	mov	r4, r0
 800c360:	4608      	mov	r0, r1
 800c362:	4611      	mov	r1, r2
 800c364:	602b      	str	r3, [r5, #0]
 800c366:	f7f6 f918 	bl	800259a <_fstat>
 800c36a:	1c43      	adds	r3, r0, #1
 800c36c:	d102      	bne.n	800c374 <_fstat_r+0x1c>
 800c36e:	682b      	ldr	r3, [r5, #0]
 800c370:	b103      	cbz	r3, 800c374 <_fstat_r+0x1c>
 800c372:	6023      	str	r3, [r4, #0]
 800c374:	bd38      	pop	{r3, r4, r5, pc}
 800c376:	bf00      	nop
 800c378:	200008dc 	.word	0x200008dc

0800c37c <_isatty_r>:
 800c37c:	b538      	push	{r3, r4, r5, lr}
 800c37e:	4d06      	ldr	r5, [pc, #24]	; (800c398 <_isatty_r+0x1c>)
 800c380:	2300      	movs	r3, #0
 800c382:	4604      	mov	r4, r0
 800c384:	4608      	mov	r0, r1
 800c386:	602b      	str	r3, [r5, #0]
 800c388:	f7f6 f917 	bl	80025ba <_isatty>
 800c38c:	1c43      	adds	r3, r0, #1
 800c38e:	d102      	bne.n	800c396 <_isatty_r+0x1a>
 800c390:	682b      	ldr	r3, [r5, #0]
 800c392:	b103      	cbz	r3, 800c396 <_isatty_r+0x1a>
 800c394:	6023      	str	r3, [r4, #0]
 800c396:	bd38      	pop	{r3, r4, r5, pc}
 800c398:	200008dc 	.word	0x200008dc

0800c39c <_lseek_r>:
 800c39c:	b538      	push	{r3, r4, r5, lr}
 800c39e:	4d07      	ldr	r5, [pc, #28]	; (800c3bc <_lseek_r+0x20>)
 800c3a0:	4604      	mov	r4, r0
 800c3a2:	4608      	mov	r0, r1
 800c3a4:	4611      	mov	r1, r2
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	602a      	str	r2, [r5, #0]
 800c3aa:	461a      	mov	r2, r3
 800c3ac:	f7f6 f910 	bl	80025d0 <_lseek>
 800c3b0:	1c43      	adds	r3, r0, #1
 800c3b2:	d102      	bne.n	800c3ba <_lseek_r+0x1e>
 800c3b4:	682b      	ldr	r3, [r5, #0]
 800c3b6:	b103      	cbz	r3, 800c3ba <_lseek_r+0x1e>
 800c3b8:	6023      	str	r3, [r4, #0]
 800c3ba:	bd38      	pop	{r3, r4, r5, pc}
 800c3bc:	200008dc 	.word	0x200008dc

0800c3c0 <_read_r>:
 800c3c0:	b538      	push	{r3, r4, r5, lr}
 800c3c2:	4d07      	ldr	r5, [pc, #28]	; (800c3e0 <_read_r+0x20>)
 800c3c4:	4604      	mov	r4, r0
 800c3c6:	4608      	mov	r0, r1
 800c3c8:	4611      	mov	r1, r2
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	602a      	str	r2, [r5, #0]
 800c3ce:	461a      	mov	r2, r3
 800c3d0:	f7f6 f89e 	bl	8002510 <_read>
 800c3d4:	1c43      	adds	r3, r0, #1
 800c3d6:	d102      	bne.n	800c3de <_read_r+0x1e>
 800c3d8:	682b      	ldr	r3, [r5, #0]
 800c3da:	b103      	cbz	r3, 800c3de <_read_r+0x1e>
 800c3dc:	6023      	str	r3, [r4, #0]
 800c3de:	bd38      	pop	{r3, r4, r5, pc}
 800c3e0:	200008dc 	.word	0x200008dc
 800c3e4:	00000000 	.word	0x00000000

0800c3e8 <log>:
 800c3e8:	b538      	push	{r3, r4, r5, lr}
 800c3ea:	ed2d 8b02 	vpush	{d8}
 800c3ee:	ec55 4b10 	vmov	r4, r5, d0
 800c3f2:	f000 f841 	bl	800c478 <__ieee754_log>
 800c3f6:	4b1e      	ldr	r3, [pc, #120]	; (800c470 <log+0x88>)
 800c3f8:	eeb0 8a40 	vmov.f32	s16, s0
 800c3fc:	eef0 8a60 	vmov.f32	s17, s1
 800c400:	f993 3000 	ldrsb.w	r3, [r3]
 800c404:	3301      	adds	r3, #1
 800c406:	d01a      	beq.n	800c43e <log+0x56>
 800c408:	4622      	mov	r2, r4
 800c40a:	462b      	mov	r3, r5
 800c40c:	4620      	mov	r0, r4
 800c40e:	4629      	mov	r1, r5
 800c410:	f7f4 fbb4 	bl	8000b7c <__aeabi_dcmpun>
 800c414:	b998      	cbnz	r0, 800c43e <log+0x56>
 800c416:	2200      	movs	r2, #0
 800c418:	2300      	movs	r3, #0
 800c41a:	4620      	mov	r0, r4
 800c41c:	4629      	mov	r1, r5
 800c41e:	f7f4 fba3 	bl	8000b68 <__aeabi_dcmpgt>
 800c422:	b960      	cbnz	r0, 800c43e <log+0x56>
 800c424:	2200      	movs	r2, #0
 800c426:	2300      	movs	r3, #0
 800c428:	4620      	mov	r0, r4
 800c42a:	4629      	mov	r1, r5
 800c42c:	f7f4 fb74 	bl	8000b18 <__aeabi_dcmpeq>
 800c430:	b160      	cbz	r0, 800c44c <log+0x64>
 800c432:	f7fd f901 	bl	8009638 <__errno>
 800c436:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 800c468 <log+0x80>
 800c43a:	2322      	movs	r3, #34	; 0x22
 800c43c:	6003      	str	r3, [r0, #0]
 800c43e:	eeb0 0a48 	vmov.f32	s0, s16
 800c442:	eef0 0a68 	vmov.f32	s1, s17
 800c446:	ecbd 8b02 	vpop	{d8}
 800c44a:	bd38      	pop	{r3, r4, r5, pc}
 800c44c:	f7fd f8f4 	bl	8009638 <__errno>
 800c450:	ecbd 8b02 	vpop	{d8}
 800c454:	2321      	movs	r3, #33	; 0x21
 800c456:	6003      	str	r3, [r0, #0]
 800c458:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c45c:	4805      	ldr	r0, [pc, #20]	; (800c474 <log+0x8c>)
 800c45e:	f000 b9c7 	b.w	800c7f0 <nan>
 800c462:	bf00      	nop
 800c464:	f3af 8000 	nop.w
 800c468:	00000000 	.word	0x00000000
 800c46c:	fff00000 	.word	0xfff00000
 800c470:	200001e0 	.word	0x200001e0
 800c474:	0800cb78 	.word	0x0800cb78

0800c478 <__ieee754_log>:
 800c478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c47c:	ec51 0b10 	vmov	r0, r1, d0
 800c480:	ed2d 8b04 	vpush	{d8-d9}
 800c484:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800c488:	b083      	sub	sp, #12
 800c48a:	460d      	mov	r5, r1
 800c48c:	da29      	bge.n	800c4e2 <__ieee754_log+0x6a>
 800c48e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c492:	4303      	orrs	r3, r0
 800c494:	ee10 2a10 	vmov	r2, s0
 800c498:	d10c      	bne.n	800c4b4 <__ieee754_log+0x3c>
 800c49a:	49cf      	ldr	r1, [pc, #828]	; (800c7d8 <__ieee754_log+0x360>)
 800c49c:	2200      	movs	r2, #0
 800c49e:	2300      	movs	r3, #0
 800c4a0:	2000      	movs	r0, #0
 800c4a2:	f7f4 f9fb 	bl	800089c <__aeabi_ddiv>
 800c4a6:	ec41 0b10 	vmov	d0, r0, r1
 800c4aa:	b003      	add	sp, #12
 800c4ac:	ecbd 8b04 	vpop	{d8-d9}
 800c4b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4b4:	2900      	cmp	r1, #0
 800c4b6:	da05      	bge.n	800c4c4 <__ieee754_log+0x4c>
 800c4b8:	460b      	mov	r3, r1
 800c4ba:	f7f3 ff0d 	bl	80002d8 <__aeabi_dsub>
 800c4be:	2200      	movs	r2, #0
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	e7ee      	b.n	800c4a2 <__ieee754_log+0x2a>
 800c4c4:	4bc5      	ldr	r3, [pc, #788]	; (800c7dc <__ieee754_log+0x364>)
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	f7f4 f8be 	bl	8000648 <__aeabi_dmul>
 800c4cc:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800c4d0:	460d      	mov	r5, r1
 800c4d2:	4ac3      	ldr	r2, [pc, #780]	; (800c7e0 <__ieee754_log+0x368>)
 800c4d4:	4295      	cmp	r5, r2
 800c4d6:	dd06      	ble.n	800c4e6 <__ieee754_log+0x6e>
 800c4d8:	4602      	mov	r2, r0
 800c4da:	460b      	mov	r3, r1
 800c4dc:	f7f3 fefe 	bl	80002dc <__adddf3>
 800c4e0:	e7e1      	b.n	800c4a6 <__ieee754_log+0x2e>
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	e7f5      	b.n	800c4d2 <__ieee754_log+0x5a>
 800c4e6:	152c      	asrs	r4, r5, #20
 800c4e8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800c4ec:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800c4f0:	441c      	add	r4, r3
 800c4f2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800c4f6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800c4fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c4fe:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800c502:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800c506:	ea42 0105 	orr.w	r1, r2, r5
 800c50a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800c50e:	2200      	movs	r2, #0
 800c510:	4bb4      	ldr	r3, [pc, #720]	; (800c7e4 <__ieee754_log+0x36c>)
 800c512:	f7f3 fee1 	bl	80002d8 <__aeabi_dsub>
 800c516:	1cab      	adds	r3, r5, #2
 800c518:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c51c:	2b02      	cmp	r3, #2
 800c51e:	4682      	mov	sl, r0
 800c520:	468b      	mov	fp, r1
 800c522:	f04f 0200 	mov.w	r2, #0
 800c526:	dc53      	bgt.n	800c5d0 <__ieee754_log+0x158>
 800c528:	2300      	movs	r3, #0
 800c52a:	f7f4 faf5 	bl	8000b18 <__aeabi_dcmpeq>
 800c52e:	b1d0      	cbz	r0, 800c566 <__ieee754_log+0xee>
 800c530:	2c00      	cmp	r4, #0
 800c532:	f000 8122 	beq.w	800c77a <__ieee754_log+0x302>
 800c536:	4620      	mov	r0, r4
 800c538:	f7f4 f81c 	bl	8000574 <__aeabi_i2d>
 800c53c:	a390      	add	r3, pc, #576	; (adr r3, 800c780 <__ieee754_log+0x308>)
 800c53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c542:	4606      	mov	r6, r0
 800c544:	460f      	mov	r7, r1
 800c546:	f7f4 f87f 	bl	8000648 <__aeabi_dmul>
 800c54a:	a38f      	add	r3, pc, #572	; (adr r3, 800c788 <__ieee754_log+0x310>)
 800c54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c550:	4604      	mov	r4, r0
 800c552:	460d      	mov	r5, r1
 800c554:	4630      	mov	r0, r6
 800c556:	4639      	mov	r1, r7
 800c558:	f7f4 f876 	bl	8000648 <__aeabi_dmul>
 800c55c:	4602      	mov	r2, r0
 800c55e:	460b      	mov	r3, r1
 800c560:	4620      	mov	r0, r4
 800c562:	4629      	mov	r1, r5
 800c564:	e7ba      	b.n	800c4dc <__ieee754_log+0x64>
 800c566:	a38a      	add	r3, pc, #552	; (adr r3, 800c790 <__ieee754_log+0x318>)
 800c568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c56c:	4650      	mov	r0, sl
 800c56e:	4659      	mov	r1, fp
 800c570:	f7f4 f86a 	bl	8000648 <__aeabi_dmul>
 800c574:	4602      	mov	r2, r0
 800c576:	460b      	mov	r3, r1
 800c578:	2000      	movs	r0, #0
 800c57a:	499b      	ldr	r1, [pc, #620]	; (800c7e8 <__ieee754_log+0x370>)
 800c57c:	f7f3 feac 	bl	80002d8 <__aeabi_dsub>
 800c580:	4652      	mov	r2, sl
 800c582:	4606      	mov	r6, r0
 800c584:	460f      	mov	r7, r1
 800c586:	465b      	mov	r3, fp
 800c588:	4650      	mov	r0, sl
 800c58a:	4659      	mov	r1, fp
 800c58c:	f7f4 f85c 	bl	8000648 <__aeabi_dmul>
 800c590:	4602      	mov	r2, r0
 800c592:	460b      	mov	r3, r1
 800c594:	4630      	mov	r0, r6
 800c596:	4639      	mov	r1, r7
 800c598:	f7f4 f856 	bl	8000648 <__aeabi_dmul>
 800c59c:	4606      	mov	r6, r0
 800c59e:	460f      	mov	r7, r1
 800c5a0:	b914      	cbnz	r4, 800c5a8 <__ieee754_log+0x130>
 800c5a2:	4632      	mov	r2, r6
 800c5a4:	463b      	mov	r3, r7
 800c5a6:	e0a2      	b.n	800c6ee <__ieee754_log+0x276>
 800c5a8:	4620      	mov	r0, r4
 800c5aa:	f7f3 ffe3 	bl	8000574 <__aeabi_i2d>
 800c5ae:	a374      	add	r3, pc, #464	; (adr r3, 800c780 <__ieee754_log+0x308>)
 800c5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5b4:	4680      	mov	r8, r0
 800c5b6:	4689      	mov	r9, r1
 800c5b8:	f7f4 f846 	bl	8000648 <__aeabi_dmul>
 800c5bc:	a372      	add	r3, pc, #456	; (adr r3, 800c788 <__ieee754_log+0x310>)
 800c5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5c2:	4604      	mov	r4, r0
 800c5c4:	460d      	mov	r5, r1
 800c5c6:	4640      	mov	r0, r8
 800c5c8:	4649      	mov	r1, r9
 800c5ca:	f7f4 f83d 	bl	8000648 <__aeabi_dmul>
 800c5ce:	e0a7      	b.n	800c720 <__ieee754_log+0x2a8>
 800c5d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c5d4:	f7f3 fe82 	bl	80002dc <__adddf3>
 800c5d8:	4602      	mov	r2, r0
 800c5da:	460b      	mov	r3, r1
 800c5dc:	4650      	mov	r0, sl
 800c5de:	4659      	mov	r1, fp
 800c5e0:	f7f4 f95c 	bl	800089c <__aeabi_ddiv>
 800c5e4:	ec41 0b18 	vmov	d8, r0, r1
 800c5e8:	4620      	mov	r0, r4
 800c5ea:	f7f3 ffc3 	bl	8000574 <__aeabi_i2d>
 800c5ee:	ec53 2b18 	vmov	r2, r3, d8
 800c5f2:	ec41 0b19 	vmov	d9, r0, r1
 800c5f6:	ec51 0b18 	vmov	r0, r1, d8
 800c5fa:	f7f4 f825 	bl	8000648 <__aeabi_dmul>
 800c5fe:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800c602:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800c606:	9301      	str	r3, [sp, #4]
 800c608:	4602      	mov	r2, r0
 800c60a:	460b      	mov	r3, r1
 800c60c:	4680      	mov	r8, r0
 800c60e:	4689      	mov	r9, r1
 800c610:	f7f4 f81a 	bl	8000648 <__aeabi_dmul>
 800c614:	a360      	add	r3, pc, #384	; (adr r3, 800c798 <__ieee754_log+0x320>)
 800c616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c61a:	4606      	mov	r6, r0
 800c61c:	460f      	mov	r7, r1
 800c61e:	f7f4 f813 	bl	8000648 <__aeabi_dmul>
 800c622:	a35f      	add	r3, pc, #380	; (adr r3, 800c7a0 <__ieee754_log+0x328>)
 800c624:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c628:	f7f3 fe58 	bl	80002dc <__adddf3>
 800c62c:	4632      	mov	r2, r6
 800c62e:	463b      	mov	r3, r7
 800c630:	f7f4 f80a 	bl	8000648 <__aeabi_dmul>
 800c634:	a35c      	add	r3, pc, #368	; (adr r3, 800c7a8 <__ieee754_log+0x330>)
 800c636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c63a:	f7f3 fe4f 	bl	80002dc <__adddf3>
 800c63e:	4632      	mov	r2, r6
 800c640:	463b      	mov	r3, r7
 800c642:	f7f4 f801 	bl	8000648 <__aeabi_dmul>
 800c646:	a35a      	add	r3, pc, #360	; (adr r3, 800c7b0 <__ieee754_log+0x338>)
 800c648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c64c:	f7f3 fe46 	bl	80002dc <__adddf3>
 800c650:	4642      	mov	r2, r8
 800c652:	464b      	mov	r3, r9
 800c654:	f7f3 fff8 	bl	8000648 <__aeabi_dmul>
 800c658:	a357      	add	r3, pc, #348	; (adr r3, 800c7b8 <__ieee754_log+0x340>)
 800c65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c65e:	4680      	mov	r8, r0
 800c660:	4689      	mov	r9, r1
 800c662:	4630      	mov	r0, r6
 800c664:	4639      	mov	r1, r7
 800c666:	f7f3 ffef 	bl	8000648 <__aeabi_dmul>
 800c66a:	a355      	add	r3, pc, #340	; (adr r3, 800c7c0 <__ieee754_log+0x348>)
 800c66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c670:	f7f3 fe34 	bl	80002dc <__adddf3>
 800c674:	4632      	mov	r2, r6
 800c676:	463b      	mov	r3, r7
 800c678:	f7f3 ffe6 	bl	8000648 <__aeabi_dmul>
 800c67c:	a352      	add	r3, pc, #328	; (adr r3, 800c7c8 <__ieee754_log+0x350>)
 800c67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c682:	f7f3 fe2b 	bl	80002dc <__adddf3>
 800c686:	4632      	mov	r2, r6
 800c688:	463b      	mov	r3, r7
 800c68a:	f7f3 ffdd 	bl	8000648 <__aeabi_dmul>
 800c68e:	460b      	mov	r3, r1
 800c690:	4602      	mov	r2, r0
 800c692:	4649      	mov	r1, r9
 800c694:	4640      	mov	r0, r8
 800c696:	f7f3 fe21 	bl	80002dc <__adddf3>
 800c69a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800c69e:	9b01      	ldr	r3, [sp, #4]
 800c6a0:	3551      	adds	r5, #81	; 0x51
 800c6a2:	431d      	orrs	r5, r3
 800c6a4:	2d00      	cmp	r5, #0
 800c6a6:	4680      	mov	r8, r0
 800c6a8:	4689      	mov	r9, r1
 800c6aa:	dd48      	ble.n	800c73e <__ieee754_log+0x2c6>
 800c6ac:	4b4e      	ldr	r3, [pc, #312]	; (800c7e8 <__ieee754_log+0x370>)
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	4650      	mov	r0, sl
 800c6b2:	4659      	mov	r1, fp
 800c6b4:	f7f3 ffc8 	bl	8000648 <__aeabi_dmul>
 800c6b8:	4652      	mov	r2, sl
 800c6ba:	465b      	mov	r3, fp
 800c6bc:	f7f3 ffc4 	bl	8000648 <__aeabi_dmul>
 800c6c0:	4602      	mov	r2, r0
 800c6c2:	460b      	mov	r3, r1
 800c6c4:	4606      	mov	r6, r0
 800c6c6:	460f      	mov	r7, r1
 800c6c8:	4640      	mov	r0, r8
 800c6ca:	4649      	mov	r1, r9
 800c6cc:	f7f3 fe06 	bl	80002dc <__adddf3>
 800c6d0:	ec53 2b18 	vmov	r2, r3, d8
 800c6d4:	f7f3 ffb8 	bl	8000648 <__aeabi_dmul>
 800c6d8:	4680      	mov	r8, r0
 800c6da:	4689      	mov	r9, r1
 800c6dc:	b964      	cbnz	r4, 800c6f8 <__ieee754_log+0x280>
 800c6de:	4602      	mov	r2, r0
 800c6e0:	460b      	mov	r3, r1
 800c6e2:	4630      	mov	r0, r6
 800c6e4:	4639      	mov	r1, r7
 800c6e6:	f7f3 fdf7 	bl	80002d8 <__aeabi_dsub>
 800c6ea:	4602      	mov	r2, r0
 800c6ec:	460b      	mov	r3, r1
 800c6ee:	4650      	mov	r0, sl
 800c6f0:	4659      	mov	r1, fp
 800c6f2:	f7f3 fdf1 	bl	80002d8 <__aeabi_dsub>
 800c6f6:	e6d6      	b.n	800c4a6 <__ieee754_log+0x2e>
 800c6f8:	a321      	add	r3, pc, #132	; (adr r3, 800c780 <__ieee754_log+0x308>)
 800c6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6fe:	ec51 0b19 	vmov	r0, r1, d9
 800c702:	f7f3 ffa1 	bl	8000648 <__aeabi_dmul>
 800c706:	a320      	add	r3, pc, #128	; (adr r3, 800c788 <__ieee754_log+0x310>)
 800c708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c70c:	4604      	mov	r4, r0
 800c70e:	460d      	mov	r5, r1
 800c710:	ec51 0b19 	vmov	r0, r1, d9
 800c714:	f7f3 ff98 	bl	8000648 <__aeabi_dmul>
 800c718:	4642      	mov	r2, r8
 800c71a:	464b      	mov	r3, r9
 800c71c:	f7f3 fdde 	bl	80002dc <__adddf3>
 800c720:	4602      	mov	r2, r0
 800c722:	460b      	mov	r3, r1
 800c724:	4630      	mov	r0, r6
 800c726:	4639      	mov	r1, r7
 800c728:	f7f3 fdd6 	bl	80002d8 <__aeabi_dsub>
 800c72c:	4652      	mov	r2, sl
 800c72e:	465b      	mov	r3, fp
 800c730:	f7f3 fdd2 	bl	80002d8 <__aeabi_dsub>
 800c734:	4602      	mov	r2, r0
 800c736:	460b      	mov	r3, r1
 800c738:	4620      	mov	r0, r4
 800c73a:	4629      	mov	r1, r5
 800c73c:	e7d9      	b.n	800c6f2 <__ieee754_log+0x27a>
 800c73e:	4602      	mov	r2, r0
 800c740:	460b      	mov	r3, r1
 800c742:	4650      	mov	r0, sl
 800c744:	4659      	mov	r1, fp
 800c746:	f7f3 fdc7 	bl	80002d8 <__aeabi_dsub>
 800c74a:	ec53 2b18 	vmov	r2, r3, d8
 800c74e:	f7f3 ff7b 	bl	8000648 <__aeabi_dmul>
 800c752:	4606      	mov	r6, r0
 800c754:	460f      	mov	r7, r1
 800c756:	2c00      	cmp	r4, #0
 800c758:	f43f af23 	beq.w	800c5a2 <__ieee754_log+0x12a>
 800c75c:	a308      	add	r3, pc, #32	; (adr r3, 800c780 <__ieee754_log+0x308>)
 800c75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c762:	ec51 0b19 	vmov	r0, r1, d9
 800c766:	f7f3 ff6f 	bl	8000648 <__aeabi_dmul>
 800c76a:	a307      	add	r3, pc, #28	; (adr r3, 800c788 <__ieee754_log+0x310>)
 800c76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c770:	4604      	mov	r4, r0
 800c772:	460d      	mov	r5, r1
 800c774:	ec51 0b19 	vmov	r0, r1, d9
 800c778:	e727      	b.n	800c5ca <__ieee754_log+0x152>
 800c77a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800c7d0 <__ieee754_log+0x358>
 800c77e:	e694      	b.n	800c4aa <__ieee754_log+0x32>
 800c780:	fee00000 	.word	0xfee00000
 800c784:	3fe62e42 	.word	0x3fe62e42
 800c788:	35793c76 	.word	0x35793c76
 800c78c:	3dea39ef 	.word	0x3dea39ef
 800c790:	55555555 	.word	0x55555555
 800c794:	3fd55555 	.word	0x3fd55555
 800c798:	df3e5244 	.word	0xdf3e5244
 800c79c:	3fc2f112 	.word	0x3fc2f112
 800c7a0:	96cb03de 	.word	0x96cb03de
 800c7a4:	3fc74664 	.word	0x3fc74664
 800c7a8:	94229359 	.word	0x94229359
 800c7ac:	3fd24924 	.word	0x3fd24924
 800c7b0:	55555593 	.word	0x55555593
 800c7b4:	3fe55555 	.word	0x3fe55555
 800c7b8:	d078c69f 	.word	0xd078c69f
 800c7bc:	3fc39a09 	.word	0x3fc39a09
 800c7c0:	1d8e78af 	.word	0x1d8e78af
 800c7c4:	3fcc71c5 	.word	0x3fcc71c5
 800c7c8:	9997fa04 	.word	0x9997fa04
 800c7cc:	3fd99999 	.word	0x3fd99999
	...
 800c7d8:	c3500000 	.word	0xc3500000
 800c7dc:	43500000 	.word	0x43500000
 800c7e0:	7fefffff 	.word	0x7fefffff
 800c7e4:	3ff00000 	.word	0x3ff00000
 800c7e8:	3fe00000 	.word	0x3fe00000
 800c7ec:	00000000 	.word	0x00000000

0800c7f0 <nan>:
 800c7f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c7f8 <nan+0x8>
 800c7f4:	4770      	bx	lr
 800c7f6:	bf00      	nop
 800c7f8:	00000000 	.word	0x00000000
 800c7fc:	7ff80000 	.word	0x7ff80000

0800c800 <_init>:
 800c800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c802:	bf00      	nop
 800c804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c806:	bc08      	pop	{r3}
 800c808:	469e      	mov	lr, r3
 800c80a:	4770      	bx	lr

0800c80c <_fini>:
 800c80c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c80e:	bf00      	nop
 800c810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c812:	bc08      	pop	{r3}
 800c814:	469e      	mov	lr, r3
 800c816:	4770      	bx	lr
